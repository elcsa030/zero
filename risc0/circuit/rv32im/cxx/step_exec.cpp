// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/ffpu.cpp":45:20)
  Fp x0(943718400);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":41:25)
  Fp x1(268435454);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":143:20)
  Fp x2(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
  Fp x3(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":134:18)
  Fp x4(63);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":123:68)
  Fp x5(218806);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":109:32)
  Fp x6(218805);
  // loc("cirgen/components/u32.cpp":56:26)
  Fp x7(2013265801);
  // loc("cirgen/components/u32.cpp":49:17)
  Fp x8(16711680);
  // loc("cirgen/components/u32.cpp":48:17)
  Fp x9(65280);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
  Fp x10(2013265910);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
  Fp x11(62914560);
  // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
  Fp x12(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":342:18)
  Fp x13(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
  Fp x14(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
  Fp x15(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x16(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x18(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x19(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x20(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x21(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x22(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x23(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x24(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x25(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x26(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x27(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x28(512);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":54:24)
  Fp x29(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x30(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x31(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":90:25)
  Fp x32(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":38:45)
  Fp x33(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":36:43)
  Fp x34(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":129:49)
  Fp x35(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":124:21)
  Fp x36(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x37(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x38(131072);
  // loc("cirgen/components/u32.cpp":189:21)
  Fp x39(15);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x40(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x41(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x42(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:79)
  Fp x43(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:56)
  Fp x44(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x45(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x46(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x47(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x48(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x49(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x50(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x51(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x52(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x53(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x54(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x55(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x56(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x57(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x58(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x59(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x60(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x61(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x62(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x63(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x64(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x65(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x66(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x67(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x68(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x69(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x70(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x71(128);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x72(13);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x73(12);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x74(11);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x75(10);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x76(9);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x77(8);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x78(7);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x79(6);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x80(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x81(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":48:18)
  Fp x82(14);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x83(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x84(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x85(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x86(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x87(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x88(56014263);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x89(56014262);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x90(56014261);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x91(56014260);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x92(56014259);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x93(56014258);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x94(56014257);
  // loc("cirgen/circuit/rv32im/body.cpp":45:40)
  Fp x95(56014256);
  // loc("cirgen/components/bytes.cpp":83:30)
  Fp x96(2005401601);
  // loc("cirgen/components/bytes.cpp":83:30)
  Fp x97(256);
  // loc("cirgen/components/bytes.cpp":82:26)
  Fp x98(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x99(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x100(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x101(0);
  // loc("cirgen/circuit/rv32im/top.cpp":18:17)
  Fp x102(1);
  // loc("Top/Code/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
  auto x103 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x103 != Fp::invalid());
  if (x103 != 0) {
    // loc("Top/Code/OneHot/Reg1"("cirgen/circuit/rv32im/top.cpp":18:69))
    auto x104 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x104 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":18:17)
    auto x105 = x102 - x104;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x106 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x106 != Fp::invalid());
    if (x105 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
    // loc("cirgen/components/bytes.cpp":103:17)
    auto x107 = x102 - x105;
    if (x107 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x108 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x108 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x109 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x109 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x110 = x109 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x111 = (x110 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x112 = x102 - x111;
        if (x112 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x108);
            reg = x108;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x113 = x109 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x113);
            reg = x113;
          }
        }
        if (x111 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x114 = x108 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x114);
            reg = x114;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x115 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x115 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x116 = x115 - x108;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x117 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x117 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x118 = x117 - x109;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x119 = x116 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x120 = x116 * x119;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x120 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x121 = x118 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x122 = x116 * x121;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x122 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x123 = x118 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x124 = x119 * x123;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x124 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x125 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x125 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x126 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x126 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x127 = x126 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x128 = (x127 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x129 = x102 - x128;
      if (x129 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x125);
          reg = x125;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x130 = x126 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x130);
          reg = x130;
        }
      }
      if (x128 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x131 = x125 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x131);
          reg = x131;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x132 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x132 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x133 = x132 - x125;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x134 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x134 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x135 = x134 - x126;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x136 = x133 - x102;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x137 = x133 * x136;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x137 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x138 = x135 + x100;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x139 = x133 * x138;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x139 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x140 = x135 - x99;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x141 = x136 * x140;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x141 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x142 = x134 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x143 = (x142 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x144 = x102 - x143;
      if (x144 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x132);
          reg = x132;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x145 = x134 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x145);
          reg = x145;
        }
      }
      if (x143 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x146 = x132 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x146);
          reg = x146;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x147 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x147 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x148 = x147 - x132;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x149 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x149 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x150 = x149 - x134;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x151 = x148 - x102;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x152 = x148 * x151;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x152 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x153 = x150 + x100;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x154 = x148 * x153;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x154 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x155 = x150 - x99;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x156 = x151 * x155;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x156 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x157 = x149 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x158 = (x157 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x159 = x102 - x158;
      if (x159 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x147);
          reg = x147;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x160 = x149 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x160);
          reg = x160;
        }
      }
      if (x158 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x161 = x147 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x161);
          reg = x161;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x162 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x162 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x163 = x162 - x147;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x164 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x164 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x165 = x164 - x149;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x166 = x163 - x102;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x167 = x163 * x166;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x167 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x168 = x165 + x100;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x169 = x163 * x168;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x169 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x170 = x165 - x99;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x171 = x166 * x170;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x171 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x172 = x164 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x173 = (x172 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x174 = x102 - x173;
      if (x174 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x162);
          reg = x162;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x175 = x164 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x175);
          reg = x175;
        }
      }
      if (x173 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x176 = x162 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x176);
          reg = x176;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x177 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x177 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x178 = x177 - x162;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x179 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x179 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x180 = x179 - x164;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x181 = x178 - x102;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x182 = x178 * x181;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x182 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x183 = x180 + x100;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x184 = x178 * x183;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x184 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x185 = x180 - x99;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x186 = x181 * x185;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x186 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x187 = x179 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x188 = (x187 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x189 = x102 - x188;
      if (x189 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x177);
          reg = x177;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x190 = x179 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x190);
          reg = x190;
        }
      }
      if (x188 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x191 = x177 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x191);
          reg = x191;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x192 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x192 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x193 = x192 - x177;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x194 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x194 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x195 = x194 - x179;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x196 = x193 - x102;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x197 = x193 * x196;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x197 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x198 = x195 + x100;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x199 = x193 * x198;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x199 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x200 = x195 - x99;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x201 = x196 * x200;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x201 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x202 = x194 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x203 = (x202 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x204 = x102 - x203;
      if (x204 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x192);
          reg = x192;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x205 = x194 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x205);
          reg = x205;
        }
      }
      if (x203 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x206 = x192 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x206);
          reg = x206;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x207 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x207 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x208 = x207 - x192;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x209 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x209 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x210 = x209 - x194;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x211 = x208 - x102;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x212 = x208 * x211;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x212 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x213 = x210 + x100;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x214 = x208 * x213;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x214 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x215 = x210 - x99;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x216 = x211 * x215;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x216 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x217 = x209 - x100;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x218 = (x217 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x219 = x102 - x218;
      if (x219 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x207);
          reg = x207;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x220 = x209 + x99;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x220);
          reg = x220;
        }
      }
      if (x218 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x221 = x207 + x102;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x221);
          reg = x221;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x222 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x222 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x223 = x222 - x207;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x224 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x224 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x225 = x224 - x209;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x226 = x223 - x102;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x227 = x223 * x226;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x227 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x228 = x225 + x100;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x229 = x223 * x228;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x229 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x230 = x225 - x99;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x231 = x226 * x230;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x231 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    if (x106 != 0) {
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][50 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][51 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
    // loc("cirgen/components/bytes.cpp":116:16)
    auto x232 = x102 - x106;
    if (x232 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x233 = x224 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x234 = (x233 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x235 = x102 - x234;
        if (x235 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x222);
            reg = x222;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x236 = x224 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x236);
            reg = x236;
          }
        }
        if (x234 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x237 = x222 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x237);
            reg = x237;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x238 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x238 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x239 = x238 - x222;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x240 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x240 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x241 = x240 - x224;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x242 = x239 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x243 = x239 * x242;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x243 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x244 = x241 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x245 = x239 * x244;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x245 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x246 = x241 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x247 = x242 * x246;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x247 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x248 = x240 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x249 = (x248 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x250 = x102 - x249;
        if (x250 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x238);
            reg = x238;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x251 = x240 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x251);
            reg = x251;
          }
        }
        if (x249 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x252 = x238 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x252);
            reg = x252;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x253 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x253 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x254 = x253 - x238;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x255 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x255 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x256 = x255 - x240;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x257 = x254 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x258 = x254 * x257;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x258 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x259 = x256 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x260 = x254 * x259;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x260 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x261 = x256 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x262 = x257 * x261;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x262 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x263 = x255 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x264 = (x263 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x265 = x102 - x264;
        if (x265 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x253);
            reg = x253;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x266 = x255 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x266);
            reg = x266;
          }
        }
        if (x264 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x267 = x253 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x267);
            reg = x267;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x268 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x268 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x269 = x268 - x253;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x270 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x270 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x271 = x270 - x255;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x272 = x269 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x273 = x269 * x272;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x273 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x274 = x271 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x275 = x269 * x274;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x275 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x276 = x271 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x277 = x272 * x276;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x277 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x278 = x270 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x279 = (x278 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x280 = x102 - x279;
        if (x280 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x268);
            reg = x268;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x281 = x270 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x281);
            reg = x281;
          }
        }
        if (x279 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x282 = x268 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x282);
            reg = x282;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x283 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x283 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x284 = x283 - x268;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x285 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x285 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x286 = x285 - x270;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x287 = x284 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x288 = x284 * x287;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x288 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x289 = x286 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x290 = x284 * x289;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x290 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x291 = x286 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x292 = x287 * x291;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x292 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x293 = x285 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x294 = (x293 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x295 = x102 - x294;
        if (x295 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x283);
            reg = x283;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x296 = x285 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x296);
            reg = x296;
          }
        }
        if (x294 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x297 = x283 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x297);
            reg = x297;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x298 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x298 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x299 = x298 - x283;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x300 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x300 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x301 = x300 - x285;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x302 = x299 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x303 = x299 * x302;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x303 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x304 = x301 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x305 = x299 * x304;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x305 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x306 = x301 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x307 = x302 * x306;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x307 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x308 = x300 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x309 = (x308 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x310 = x102 - x309;
        if (x310 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x298);
            reg = x298;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x311 = x300 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x311);
            reg = x311;
          }
        }
        if (x309 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x312 = x298 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x312);
            reg = x312;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x313 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x313 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x314 = x313 - x298;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x315 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x315 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x316 = x315 - x300;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x317 = x314 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x318 = x314 * x317;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x318 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x319 = x316 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x320 = x314 * x319;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x320 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x321 = x316 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x322 = x317 * x321;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x322 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x323 = x315 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x324 = (x323 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x325 = x102 - x324;
        if (x325 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x313);
            reg = x313;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x326 = x315 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x326);
            reg = x326;
          }
        }
        if (x324 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x327 = x313 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x327);
            reg = x327;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x328 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x328 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x329 = x328 - x313;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x330 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x330 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x331 = x330 - x315;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x332 = x329 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x333 = x329 * x332;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x333 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x334 = x331 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x335 = x329 * x334;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x335 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x336 = x331 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x337 = x332 * x336;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x337 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x338 = x330 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x339 = (x338 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x340 = x102 - x339;
        if (x340 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x328);
            reg = x328;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x341 = x330 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x341);
            reg = x341;
          }
        }
        if (x339 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x342 = x328 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x342);
            reg = x342;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x343 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x343 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x344 = x343 - x328;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x345 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x345 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x346 = x345 - x330;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x347 = x344 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x348 = x344 * x347;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x348 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x349 = x346 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x350 = x344 * x349;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x350 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x351 = x346 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x352 = x347 * x351;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x352 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x353 = x345 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x354 = (x353 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x355 = x102 - x354;
        if (x355 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x343);
            reg = x343;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x356 = x345 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x356);
            reg = x356;
          }
        }
        if (x354 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x357 = x343 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x357);
            reg = x357;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x358 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x358 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x359 = x358 - x343;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x360 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x360 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x361 = x360 - x345;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x362 = x359 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x363 = x359 * x362;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x363 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x364 = x361 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x365 = x359 * x364;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x365 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x366 = x361 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x367 = x362 * x366;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x367 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x368 = x360 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x369 = (x368 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x370 = x102 - x369;
        if (x370 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x358);
            reg = x358;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x371 = x360 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x371);
            reg = x371;
          }
        }
        if (x369 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x372 = x358 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x372);
            reg = x372;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x373 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x373 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x374 = x373 - x358;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x375 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x375 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x376 = x375 - x360;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x377 = x374 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x378 = x374 * x377;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x378 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x379 = x376 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x380 = x374 * x379;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x380 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x381 = x376 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x382 = x377 * x381;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x382 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x383 = x375 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x384 = (x383 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x385 = x102 - x384;
        if (x385 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x373);
            reg = x373;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x386 = x375 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x386);
            reg = x386;
          }
        }
        if (x384 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x387 = x373 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x387);
            reg = x387;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x388 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x388 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x389 = x388 - x373;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x390 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x390 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x391 = x390 - x375;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x392 = x389 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x393 = x389 * x392;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x393 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x394 = x391 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x395 = x389 * x394;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x395 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x396 = x391 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x397 = x392 * x396;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x397 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x398 = x390 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x399 = (x398 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x400 = x102 - x399;
        if (x400 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x388);
            reg = x388;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x401 = x390 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x401);
            reg = x401;
          }
        }
        if (x399 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x402 = x388 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x402);
            reg = x402;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x403 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x403 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x404 = x403 - x388;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x405 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x405 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x406 = x405 - x390;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x407 = x404 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x408 = x404 * x407;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x408 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x409 = x406 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x410 = x404 * x409;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x410 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x411 = x406 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x412 = x407 * x411;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x412 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x413 = x405 - x100;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x414 = (x413 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x415 = x102 - x414;
        if (x415 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x403);
            reg = x403;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x416 = x405 + x99;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x416);
            reg = x416;
          }
        }
        if (x414 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x417 = x403 + x102;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x417);
            reg = x417;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x418 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x418 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x419 = x418 - x403;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x420 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x420 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x421 = x420 - x405;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x422 = x419 - x102;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x423 = x419 * x422;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x423 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x424 = x421 + x100;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x425 = x419 * x424;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x425 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x426 = x421 - x99;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x427 = x422 * x426;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x427 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    }
  }
  // loc("Top/Code/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
  auto x428 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x428 != Fp::invalid());
  if (x428 != 0) {
    // loc("Top/Code/Mux/2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x429 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x429 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x430 = Fp(x429.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x430);
        reg = x430;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x431 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x431 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x432 = x429 - x431;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x433 = x432 * x96;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("Top/Code/Mux/2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x434 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x435 = Fp(x434.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x435);
        reg = x435;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x436 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x437 = x434 - x436;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x438 = x437 * x96;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x439 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x440 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x441 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x441 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x442 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x442 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x431);
      reg = x431;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    {
      host_args.at(0) = x442;
      host_args.at(1) = x431;
      host_args.at(2) = x439;
      host_args.at(3) = x436;
      host_args.at(4) = x440;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x443 = args[2][58 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x444 = args[2][59 * steps + ((cycle - 0) & mask)];
    assert(x444 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x445 = args[2][60 * steps + ((cycle - 0) & mask)];
    assert(x445 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x446 = args[2][61 * steps + ((cycle - 0) & mask)];
    assert(x446 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][55 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][56 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][57 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x443);
      reg = x443;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x444);
      reg = x444;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x446);
      reg = x446;
    }
    // loc("Top/Code/Mux/2/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x447 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x447 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x448 = Fp(x447.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x448);
        reg = x448;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x449 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x449 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x450 = x447 - x449;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x451 = x450 * x96;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    // loc("Top/Code/Mux/2/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
    auto x452 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x452 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x453 = Fp(x452.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x453);
        reg = x453;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x454 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x455 = x452 - x454;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x456 = x455 * x96;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x457 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x458 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x458 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":38:44)
    auto x459 = x442 + x102;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x449);
      reg = x449;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x458);
      reg = x458;
    }
    {
      host_args.at(0) = x459;
      host_args.at(1) = x449;
      host_args.at(2) = x457;
      host_args.at(3) = x454;
      host_args.at(4) = x458;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x460 = args[2][65 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x461 = args[2][66 * steps + ((cycle - 0) & mask)];
    assert(x461 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x462 = args[2][67 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x463 = args[2][68 * steps + ((cycle - 0) & mask)];
    assert(x463 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][62 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][63 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][64 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x460);
      reg = x460;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x461);
      reg = x461;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x463);
      reg = x463;
    }
    // loc("Top/Code/Mux/2/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
    auto x464 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x464 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x465 = Fp(x464.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x465);
        reg = x465;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x466 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x466 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x467 = x464 - x466;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x468 = x467 * x96;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    // loc("Top/Code/Mux/2/Reg6"("./cirgen/compiler/edsl/component.h":85:27))
    auto x469 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x469 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x470 = Fp(x469.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x470);
        reg = x470;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x471 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x472 = x469 - x471;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x473 = x472 * x96;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x474 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x475 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":38:44)
    auto x476 = x442 + x99;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x466);
      reg = x466;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x474);
      reg = x474;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x475);
      reg = x475;
    }
    {
      host_args.at(0) = x476;
      host_args.at(1) = x466;
      host_args.at(2) = x474;
      host_args.at(3) = x471;
      host_args.at(4) = x475;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x477 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x478 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x478 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x479 = args[2][74 * steps + ((cycle - 0) & mask)];
    assert(x479 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x480 = args[2][75 * steps + ((cycle - 0) & mask)];
    assert(x480 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][69 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x476);
      reg = x476;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][70 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][71 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x477);
      reg = x477;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x478);
      reg = x478;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x479);
      reg = x479;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x480);
      reg = x480;
    }
  }
  // loc("Top/Code/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
  auto x481 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x481 != Fp::invalid());
  if (x481 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x482 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x482 != Fp::invalid());
    // loc("Top/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x483 = args[1][4];
    // loc("Top/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x484 = args[1][5];
    // loc("Top/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x485 = args[1][6];
    // loc("Top/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x486 = args[1][7];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x483);
      reg = x483;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x484);
      reg = x484;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x485);
      reg = x485;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x486);
      reg = x486;
    }
    {
      host_args.at(0) = x95;
      host_args.at(1) = x483;
      host_args.at(2) = x484;
      host_args.at(3) = x485;
      host_args.at(4) = x486;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x487 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x487 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x488 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x488 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x489 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x489 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x490 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x490 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][94 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][95 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][96 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][97 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x487);
      reg = x487;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][98 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x488);
      reg = x488;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x489);
      reg = x489;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][100 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x490);
      reg = x490;
    }
    // loc("Top/Mux/3/U32Reg2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x491 = args[1][8];
    // loc("Top/Mux/3/U32Reg2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x492 = args[1][9];
    // loc("Top/Mux/3/U32Reg2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x493 = args[1][10];
    // loc("Top/Mux/3/U32Reg2/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x494 = args[1][11];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x491);
      reg = x491;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x492);
      reg = x492;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x493);
      reg = x493;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x494);
      reg = x494;
    }
    {
      host_args.at(0) = x94;
      host_args.at(1) = x491;
      host_args.at(2) = x492;
      host_args.at(3) = x493;
      host_args.at(4) = x494;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x495 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x495 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x496 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x496 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x497 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x497 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x498 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x498 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][101 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][102 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][103 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][104 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x495);
      reg = x495;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][105 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x496);
      reg = x496;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][106 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x497);
      reg = x497;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][107 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x498);
      reg = x498;
    }
    // loc("Top/Mux/3/U32Reg3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x499 = args[1][12];
    // loc("Top/Mux/3/U32Reg3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x500 = args[1][13];
    // loc("Top/Mux/3/U32Reg3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x501 = args[1][14];
    // loc("Top/Mux/3/U32Reg3/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x502 = args[1][15];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x499);
      reg = x499;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x500);
      reg = x500;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x501);
      reg = x501;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x502);
      reg = x502;
    }
    {
      host_args.at(0) = x93;
      host_args.at(1) = x499;
      host_args.at(2) = x500;
      host_args.at(3) = x501;
      host_args.at(4) = x502;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x503 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x503 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x504 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x504 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x505 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x505 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x506 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x506 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x93);
      reg = x93;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x503);
      reg = x503;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x504);
      reg = x504;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x505);
      reg = x505;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x506);
      reg = x506;
    }
    // loc("Top/Mux/3/U32Reg4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x507 = args[1][16];
    // loc("Top/Mux/3/U32Reg4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x508 = args[1][17];
    // loc("Top/Mux/3/U32Reg4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x509 = args[1][18];
    // loc("Top/Mux/3/U32Reg4/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x510 = args[1][19];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x507);
      reg = x507;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x508);
      reg = x508;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x509);
      reg = x509;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x510);
      reg = x510;
    }
    {
      host_args.at(0) = x92;
      host_args.at(1) = x507;
      host_args.at(2) = x508;
      host_args.at(3) = x509;
      host_args.at(4) = x510;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x511 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x511 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x512 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x512 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x513 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x513 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x514 = args[2][121 * steps + ((cycle - 0) & mask)];
    assert(x514 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x92);
      reg = x92;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x511);
      reg = x511;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x512);
      reg = x512;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x513);
      reg = x513;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x514);
      reg = x514;
    }
    // loc("Top/Mux/3/U32Reg5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x515 = args[1][20];
    // loc("Top/Mux/3/U32Reg5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x516 = args[1][21];
    // loc("Top/Mux/3/U32Reg5/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x517 = args[1][22];
    // loc("Top/Mux/3/U32Reg5/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x518 = args[1][23];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x515);
      reg = x515;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x516);
      reg = x516;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x517);
      reg = x517;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x518);
      reg = x518;
    }
    {
      host_args.at(0) = x91;
      host_args.at(1) = x515;
      host_args.at(2) = x516;
      host_args.at(3) = x517;
      host_args.at(4) = x518;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x519 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x519 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x520 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x520 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x521 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x521 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x522 = args[2][128 * steps + ((cycle - 0) & mask)];
    assert(x522 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x91);
      reg = x91;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x519);
      reg = x519;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x520);
      reg = x520;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x521);
      reg = x521;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x522);
      reg = x522;
    }
    // loc("Top/Mux/3/U32Reg6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x523 = args[1][24];
    // loc("Top/Mux/3/U32Reg6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x524 = args[1][25];
    // loc("Top/Mux/3/U32Reg6/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x525 = args[1][26];
    // loc("Top/Mux/3/U32Reg6/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x526 = args[1][27];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x523);
      reg = x523;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x524);
      reg = x524;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x525);
      reg = x525;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][135 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x526);
      reg = x526;
    }
    {
      host_args.at(0) = x90;
      host_args.at(1) = x523;
      host_args.at(2) = x524;
      host_args.at(3) = x525;
      host_args.at(4) = x526;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x527 = args[2][132 * steps + ((cycle - 0) & mask)];
    assert(x527 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x528 = args[2][133 * steps + ((cycle - 0) & mask)];
    assert(x528 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x529 = args[2][134 * steps + ((cycle - 0) & mask)];
    assert(x529 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x530 = args[2][135 * steps + ((cycle - 0) & mask)];
    assert(x530 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][129 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x90);
      reg = x90;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][130 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x527);
      reg = x527;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x528);
      reg = x528;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x529);
      reg = x529;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][135 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x530);
      reg = x530;
    }
    // loc("Top/Mux/3/U32Reg7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x531 = args[1][28];
    // loc("Top/Mux/3/U32Reg7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x532 = args[1][29];
    // loc("Top/Mux/3/U32Reg7/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x533 = args[1][30];
    // loc("Top/Mux/3/U32Reg7/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x534 = args[1][31];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][139 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x531);
      reg = x531;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][140 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x532);
      reg = x532;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][141 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x533);
      reg = x533;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][142 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x534);
      reg = x534;
    }
    {
      host_args.at(0) = x89;
      host_args.at(1) = x531;
      host_args.at(2) = x532;
      host_args.at(3) = x533;
      host_args.at(4) = x534;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x535 = args[2][139 * steps + ((cycle - 0) & mask)];
    assert(x535 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x536 = args[2][140 * steps + ((cycle - 0) & mask)];
    assert(x536 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x537 = args[2][141 * steps + ((cycle - 0) & mask)];
    assert(x537 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x538 = args[2][142 * steps + ((cycle - 0) & mask)];
    assert(x538 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][136 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x89);
      reg = x89;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][137 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][138 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][139 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x535);
      reg = x535;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][140 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x536);
      reg = x536;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][141 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x537);
      reg = x537;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][142 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x538);
      reg = x538;
    }
    // loc("Top/Mux/3/U32Reg8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x539 = args[1][32];
    // loc("Top/Mux/3/U32Reg8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x540 = args[1][33];
    // loc("Top/Mux/3/U32Reg8/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x541 = args[1][34];
    // loc("Top/Mux/3/U32Reg8/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x542 = args[1][35];
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][146 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x539);
      reg = x539;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][147 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x540);
      reg = x540;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][148 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x541);
      reg = x541;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][149 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x542);
      reg = x542;
    }
    {
      host_args.at(0) = x88;
      host_args.at(1) = x539;
      host_args.at(2) = x540;
      host_args.at(3) = x541;
      host_args.at(4) = x542;
      host_args.at(5) = x102;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x543 = args[2][146 * steps + ((cycle - 0) & mask)];
    assert(x543 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x544 = args[2][147 * steps + ((cycle - 0) & mask)];
    assert(x544 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x545 = args[2][148 * steps + ((cycle - 0) & mask)];
    assert(x545 != Fp::invalid());
    // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x546 = args[2][149 * steps + ((cycle - 0) & mask)];
    assert(x546 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":137:3)
    {
      auto& reg = args[2][143 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x88);
      reg = x88;
    }
    // loc("cirgen/components/ram.cpp":138:3)
    {
      auto& reg = args[2][144 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x482);
      reg = x482;
    }
    // loc("cirgen/components/ram.cpp":139:3)
    {
      auto& reg = args[2][145 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][146 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x543);
      reg = x543;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][147 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x544);
      reg = x544;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][148 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x545);
      reg = x545;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][149 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x546);
      reg = x546;
    }
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x547 = args[1][0];
    // loc("Top/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x548 = args[1][1];
    // loc("Top/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x549 = args[1][2];
    // loc("Top/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x550 = args[1][3];
    // loc("./cirgen/components/u32.h":25:12)
    auto x551 = x548 * x97;
    // loc("./cirgen/components/u32.h":24:12)
    auto x552 = x547 + x551;
    // loc("./cirgen/components/u32.h":26:12)
    auto x553 = x549 * x87;
    // loc("./cirgen/components/u32.h":24:12)
    auto x554 = x552 + x553;
    // loc("./cirgen/components/u32.h":27:12)
    auto x555 = x550 * x86;
    // loc("./cirgen/components/u32.h":24:12)
    auto x556 = x554 + x555;
    // loc("cirgen/circuit/rv32im/body.cpp":14:23)
    auto x557 = x556 + x85;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x558 = Fp(x557.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x558);
        reg = x558;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
    auto x559 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x559 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x560 = x557 - x559;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x561 = x560 * x96;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x562 = Fp(x561.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x562);
        reg = x562;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x563 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x563 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x564 = x561 - x563;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x565 = x564 * x96;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x566 = Fp(x565.asUInt32() & x98.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x566);
        reg = x566;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
    auto x567 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x567 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x568 = x565 - x567;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x569 = x568 * x96;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":17:26)
      auto x570 = Fp(x569.asUInt32() & x84.asUInt32());
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x570);
        reg = x570;
      }
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x571 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x571 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:18)
    auto x572 = x569 - x571;
    // loc("cirgen/circuit/rv32im/body.cpp":18:17)
    auto x573 = x572 * x83;
    // loc("./cirgen/components/bits.h":57:23)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x573);
      reg = x573;
    }
    // loc("Top/Mux/3/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x574 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x574 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":22:23)
    auto x575 = x102 - x574;
    // loc("cirgen/circuit/rv32im/body.cpp":22:15)
    auto x576 = x574 * x575;
    // loc("cirgen/circuit/rv32im/body.cpp":22:3)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x576);
      reg = x576;
    }
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x577 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x577 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":23:17)
    auto x578 = x99 - x574;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    auto x579 = x577 * x578;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    if (x579 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    // loc("cirgen/circuit/rv32im/body.cpp":48:3)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x82);
      reg = x82;
    }
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x580 = x563 * x97;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x581 = x559 + x580;
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x582 = x567 * x87;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x583 = x581 + x582;
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x584 = x571 * x86;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x585 = x583 + x584;
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x586 = x574 * x81;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x587 = x585 + x586;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x588 = x587 - x85;
    host_args.at(0) = x482;
    host_args.at(1) = x588;
    host(ctx, "log", "%u: Reset: PC = 0x%x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
  auto x589 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x589 != Fp::invalid());
  if (x589 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x590 = args[2][10 * steps + ((cycle - 1) & mask)];
    assert(x590 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":78:10))
    auto x591 = args[2][11 * steps + ((cycle - 1) & mask)];
    assert(x591 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x592 = x591 * x97;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x593 = x590 + x592;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x594 = args[2][12 * steps + ((cycle - 1) & mask)];
    assert(x594 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x595 = x594 * x87;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x596 = x593 + x595;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x597 = args[2][72 * steps + ((cycle - 1) & mask)];
    assert(x597 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x598 = x597 * x86;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x599 = x596 + x598;
    // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x600 = args[2][73 * steps + ((cycle - 1) & mask)];
    assert(x600 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x601 = x600 * x81;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x602 = x599 + x601;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x603 = x602 - x85;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":59:45))
      auto x604 = args[2][93 * steps + ((cycle - 1) & mask)];
      assert(x604 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":60:24)
      auto x605 = x604 - x82;
      // loc("cirgen/circuit/rv32im/body.cpp":60:24)
      auto x606 = (x605 == 0) ? Fp(1) : Fp(0);
      if (x606 != 0) {
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x607 = args[0][0 * steps + ((cycle - 0) & mask)];
        assert(x607 != Fp::invalid());
        host_args.at(0) = x607;
        host_args.at(1) = x603;
        host(ctx, "log", "%u: BODY pc: 0x%x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x603;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x603;
        host(ctx, "getMajor", "", host_args.data(), 1, host_outs.data(), 1);
        auto x608 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x609 = (x608 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x609);
            reg = x609;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x610 = x608 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x611 = (x610 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x611);
            reg = x611;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x612 = x608 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x613 = (x612 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x613);
            reg = x613;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x614 = x608 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x615 = (x614 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x615);
            reg = x615;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x616 = x608 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x617 = (x616 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x617);
            reg = x617;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x618 = x608 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x619 = (x618 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x619);
            reg = x619;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x620 = x608 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x621 = (x620 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x621);
            reg = x621;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x622 = x608 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x623 = (x622 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x623);
            reg = x623;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x624 = x608 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x625 = (x624 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x625);
            reg = x625;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x626 = x608 - x76;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x627 = (x626 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x627);
            reg = x627;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x628 = x608 - x75;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x629 = (x628 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x629);
            reg = x629;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x630 = x608 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x631 = (x630 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x631);
            reg = x631;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x632 = x608 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x633 = (x632 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x633);
            reg = x633;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x634 = x608 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x635 = (x634 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x635);
            reg = x635;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x636 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x636 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x637 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x637 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x638 = x637 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x639 = x636 + x638;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x640 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x640 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x641 = x640 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x642 = x639 + x641;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x643 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x643 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x644 = x643 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x645 = x642 + x644;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x646 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x646 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x647 = x646 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x648 = x645 + x647;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x649 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x649 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x650 = x649 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x651 = x648 + x650;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x652 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x652 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x653 = x652 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x654 = x651 + x653;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x655 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x655 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x656 = x655 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x657 = x654 + x656;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x658 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x658 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x659 = x658 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x660 = x657 + x659;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x661 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x661 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x662 = x661 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x663 = x660 + x662;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x664 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x664 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x665 = x664 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x666 = x663 + x665;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x667 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x667 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x668 = x667 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x669 = x666 + x668;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x670 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x670 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x671 = x670 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x672 = x669 + x671;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x673 = x672 - x608;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x673 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":67:20)
      auto x674 = x102 - x606;
      if (x674 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x675 = x604 - x77;
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x676 = (x675 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":68:48)
        auto x677 = x102 - x676;
        if (x677 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x678 = args[0][0 * steps + ((cycle - 0) & mask)];
          assert(x678 != Fp::invalid());
          host_args.at(0) = x678;
          host_args.at(1) = x603;
          host_args.at(2) = x604;
          host(ctx, "log", "%u: BODY pc: 0x%x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x679 = (x604 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x679);
            reg = x679;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x680 = x604 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x681 = (x680 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x681);
            reg = x681;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x682 = x604 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x683 = (x682 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x683);
            reg = x683;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x684 = x604 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x685 = (x684 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x685);
            reg = x685;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x686 = x604 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x687 = (x686 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x687);
            reg = x687;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x688 = x604 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x689 = (x688 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x689);
            reg = x689;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x690 = x604 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x691 = (x690 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x691);
            reg = x691;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x692 = x604 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x693 = (x692 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x693);
            reg = x693;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x676);
            reg = x676;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x694 = x604 - x76;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x695 = (x694 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x695);
            reg = x695;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x696 = x604 - x75;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x697 = (x696 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x697);
            reg = x697;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x698 = x604 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x699 = (x698 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x699);
            reg = x699;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x700 = x604 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x701 = (x700 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x701);
            reg = x701;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x702 = x604 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x703 = (x702 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x703);
            reg = x703;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x704 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x704 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x705 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x705 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x706 = x705 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x707 = x704 + x706;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x708 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x708 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x709 = x708 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x710 = x707 + x709;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x711 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x711 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x712 = x711 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x713 = x710 + x712;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x714 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x714 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x715 = x714 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x716 = x713 + x715;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x717 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x717 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x718 = x717 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x719 = x716 + x718;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x720 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x720 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x721 = x720 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x722 = x719 + x721;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x723 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x723 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x724 = x723 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x725 = x722 + x724;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x726 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x726 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x727 = x726 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x728 = x725 + x727;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x729 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x729 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x730 = x729 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x731 = x728 + x730;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x732 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x732 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x733 = x732 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x734 = x731 + x733;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x735 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x735 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x736 = x735 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x737 = x734 + x736;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x738 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x738 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x739 = x738 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x740 = x737 + x739;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x741 = x740 - x604;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x741 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg"("./cirgen/components/mux.h":37:25))
    auto x742 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x742 != Fp::invalid());
    if (x742 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x743 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x743 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x744 = x603 * x83;
      {
        host_args.at(0) = x744;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x745 = host_outs.at(0);
        auto x746 = host_outs.at(1);
        auto x747 = host_outs.at(2);
        auto x748 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x745);
          reg = x745;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x746);
          reg = x746;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x747);
          reg = x747;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x748);
          reg = x748;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x749 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x750 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x751 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x752 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x752 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x744);
        reg = x744;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x743);
        reg = x743;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x749);
        reg = x749;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x750);
        reg = x750;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x751);
        reg = x751;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x752);
        reg = x752;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x753 = Fp(x752.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x754 = x753 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x754);
          reg = x754;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x755 = Fp(x752.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x756 = x755 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x756);
          reg = x756;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x757 = Fp(x752.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x758 = x757 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x758);
          reg = x758;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x759 = Fp(x752.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x760 = x759 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x760);
          reg = x760;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x761 = Fp(x752.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x762 = x761 * x63;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x762);
          reg = x762;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x763 = Fp(x752.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x763);
          reg = x763;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x764 = Fp(x751.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x765 = x764 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x765);
          reg = x765;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x766 = Fp(x751.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x767 = x766 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x767);
          reg = x767;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x768 = Fp(x751.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x769 = x768 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x769);
          reg = x769;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x770 = Fp(x751.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x771 = x770 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x771);
          reg = x771;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x772 = Fp(x751.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x772);
          reg = x772;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x773 = Fp(x750.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x774 = x773 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x774);
          reg = x774;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x775 = Fp(x750.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x776 = x775 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x776);
          reg = x776;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x777 = Fp(x750.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x778 = x777 * x65;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x778);
          reg = x778;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x779 = Fp(x750.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x780 = x779 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x780);
          reg = x780;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x781 = Fp(x750.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x781);
          reg = x781;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x782 = Fp(x749.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x783 = x782 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x783);
          reg = x783;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x784 = Fp(x749.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x784);
          reg = x784;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x785 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x785 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x786 = x785 * x62;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x787 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x787 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x788 = x787 * x66;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x789 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x789 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x790 = x789 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x791 = x788 + x790;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x792 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x792 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x793 = x792 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x794 = x791 + x793;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x795 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x795 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x796 = x794 + x795;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x797 = x786 + x796;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x798 = x797 * x99;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x799 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x799 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x800 = x798 + x799;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x801 = x752 - x800;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x801 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x802 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x803 = x802 * x77;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x804 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x804 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x805 = x804 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x806 = x803 + x805;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x807 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x807 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x808 = x806 + x807;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x809 = x808 * x66;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x810 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x810 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x811 = x810 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x812 = x809 + x811;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x813 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x813 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x814 = x812 + x813;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x815 = x751 - x814;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x815 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x816 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x816 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x817 = x816 * x71;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x818 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x818 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x819 = x818 * x85;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x820 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x820 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x821 = x819 + x820;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x822 = x821 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x823 = x817 + x822;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x824 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x825 = x824 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x826 = x823 + x825;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x827 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x828 = x826 + x827;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x829 = x750 - x828;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x830 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x831 = x830 * x71;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x832 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x832 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x833 = x831 + x832;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x834 = x749 - x833;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x834 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x749;
        host_args.at(1) = x750;
        host_args.at(2) = x751;
        host_args.at(3) = x752;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x835 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x836 = (x835 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x836);
            reg = x836;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x837 = x835 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x838 = (x837 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x838);
            reg = x838;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x839 = x835 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x840 = (x839 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x840);
            reg = x840;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x841 = x835 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x842 = (x841 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x842);
            reg = x842;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x843 = x835 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x844 = (x843 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x844);
            reg = x844;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x845 = x835 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x846 = (x845 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x846);
            reg = x846;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x847 = x835 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x848 = (x847 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x848);
            reg = x848;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x849 = x835 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x850 = (x849 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x850);
            reg = x850;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x851 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x851 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x852 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x852 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x853 = x852 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x854 = x851 + x853;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x855 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x855 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x856 = x855 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x857 = x854 + x856;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x858 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x858 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x859 = x858 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x860 = x857 + x859;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x861 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x861 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x862 = x861 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x863 = x860 + x862;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x864 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x864 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x865 = x864 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x866 = x863 + x865;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x867 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x867 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x868 = x867 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x869 = x866 + x868;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x870 = x869 - x835;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x870 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x871 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x871 != Fp::invalid());
        if (x871 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x872 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x872 != Fp::invalid());
        if (x872 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x873 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x873 != Fp::invalid());
        if (x873 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x874 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x874 != Fp::invalid());
        if (x874 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x875 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x875 != Fp::invalid());
        if (x875 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x876 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x876 != Fp::invalid());
        if (x876 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x877 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x877 != Fp::invalid());
        if (x877 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x878 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x878 != Fp::invalid());
        if (x878 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x879 = x792 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x880 = x795 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x881 = x879 + x880;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x882 = x799 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x883 = x882 + x808;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x884 = x881 + x883;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x885 = x785 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x886 = x787 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x887 = x885 + x886;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x888 = x887 + x789;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x889 = x785 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x884);
            reg = x884;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x888);
            reg = x888;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x889);
            reg = x889;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x889);
            reg = x889;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x890 = x810 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x891 = x813 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x892 = x890 + x891;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x893 = x892 + x816;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x894 = x893 + x55;
      {
        host_args.at(0) = x894;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x895 = host_outs.at(0);
        auto x896 = host_outs.at(1);
        auto x897 = host_outs.at(2);
        auto x898 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x895);
          reg = x895;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x896);
          reg = x896;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x897);
          reg = x897;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x898);
          reg = x898;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x899 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x900 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x901 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x902 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x902 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x894);
        reg = x894;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x743);
        reg = x743;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x899);
        reg = x899;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x900);
        reg = x900;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x901);
        reg = x901;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x902);
        reg = x902;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x903 = x799 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x904 = x903 + x808;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x905 = x904 + x55;
      {
        host_args.at(0) = x905;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x906 = host_outs.at(0);
        auto x907 = host_outs.at(1);
        auto x908 = host_outs.at(2);
        auto x909 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x906);
          reg = x906;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x907);
          reg = x907;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x908);
          reg = x908;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x909);
          reg = x909;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x910 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x911 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x912 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x913 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x913 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x905);
        reg = x905;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x743);
        reg = x743;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x910);
        reg = x910;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x911);
        reg = x911;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x912);
        reg = x912;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x913);
        reg = x913;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x914 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x915 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x916 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x917 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x917 != Fp::invalid());
      host_args.at(0) = x914;
      host_args.at(1) = x915;
      host_args.at(2) = x916;
      host_args.at(3) = x917;
      host_args.at(4) = x893;
      host_args.at(5) = x899;
      host_args.at(6) = x900;
      host_args.at(7) = x901;
      host_args.at(8) = x902;
      host_args.at(9) = x904;
      host_args.at(10) = x910;
      host_args.at(11) = x911;
      host_args.at(12) = x912;
      host_args.at(13) = x913;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x918 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x918 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x919 = x102 - x918;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x920 = x919 * x899;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x921 = x919 * x900;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x922 = x919 * x901;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x923 = x919 * x902;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x924 = x600 * x85;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x925 = x597 + x924;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x926 = x590 - x85;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x927 = x918 * x926;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x928 = x918 * x591;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x929 = x918 * x594;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x930 = x918 * x925;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x931 = x920 + x927;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x932 = x921 + x928;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x933 = x922 + x929;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x934 = x923 + x930;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x935 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x935 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x936 = x102 - x935;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x937 = x936 * x910;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x938 = x936 * x911;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x939 = x936 * x912;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x940 = x936 * x913;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x941 = x935 * x914;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x942 = x935 * x915;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x943 = x935 * x916;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x944 = x935 * x917;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x945 = x937 + x941;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x946 = x938 + x942;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x947 = x939 + x943;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x948 = x940 + x944;
      host_args.at(0) = x931;
      host_args.at(1) = x932;
      host_args.at(2) = x933;
      host_args.at(3) = x934;
      host_args.at(4) = x945;
      host_args.at(5) = x946;
      host_args.at(6) = x947;
      host_args.at(7) = x948;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x949 = Fp(x934.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x950 = x949 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x950);
          reg = x950;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x951 = Fp(x934.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x952 = x951 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x952);
          reg = x952;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x953 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x953 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x954 = x953 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x955 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x955 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x956 = x955 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x957 = x954 + x956;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x958 = x934 - x957;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x958 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x959 = Fp(x948.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x960 = x959 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x960);
          reg = x960;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x961 = Fp(x948.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x962 = x961 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x962);
          reg = x962;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x963 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x963 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x964 = x963 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x965 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x965 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x966 = x965 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x967 = x964 + x966;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x968 = x948 - x967;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x968 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x945);
        reg = x945;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x946);
        reg = x946;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x947);
        reg = x947;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x948);
        reg = x948;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x969 = Fp(x931.asUInt32() & x945.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x970 = Fp(x932.asUInt32() & x946.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x971 = Fp(x933.asUInt32() & x947.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x972 = Fp(x934.asUInt32() & x948.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x969);
          reg = x969;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x970);
          reg = x970;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x971);
          reg = x971;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x972);
          reg = x972;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x973 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x973 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x974 = x973 * x931;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x975 = x973 * x932;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x976 = x973 * x933;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x977 = x973 * x934;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x978 = x974 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x979 = x975 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x980 = x976 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x981 = x977 + x98;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x982 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x982 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x983 = x982 * x945;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x984 = x982 * x946;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x985 = x982 * x947;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x986 = x982 * x948;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x987 = x978 + x983;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x988 = x979 + x984;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x989 = x980 + x985;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x990 = x981 + x986;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x991 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x992 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x992 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x993 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x993 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x994 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x994 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x995 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x995 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x996 = x991 * x992;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x997 = x991 * x993;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x998 = x991 * x994;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x999 = x991 * x995;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1000 = x987 + x996;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1001 = x988 + x997;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1002 = x989 + x998;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1003 = x990 + x999;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1004 = x1001 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1005 = x1000 + x1004;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1006 = Fp(x1005.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1006);
          reg = x1006;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1007 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1007 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1008 = x1005 - x1007;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1009 = x1008 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1010 = Fp(x1009.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1010);
          reg = x1010;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1011 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1011 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1012 = x1009 - x1011;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1013 = x1012 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1013);
        reg = x1013;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1014 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1014 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1015 = x1014 + x1002;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1016 = x1003 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1017 = x1015 + x1016;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1018 = Fp(x1017.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1018);
          reg = x1018;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1019 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1019 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1020 = x1017 - x1019;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1021 = x1020 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1022 = Fp(x1021.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1022);
          reg = x1022;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1023 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1023 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1024 = x1021 - x1023;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1025 = x1024 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1025);
        reg = x1025;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1026 = Fp(x1023.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1027 = x1026 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1027);
          reg = x1027;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1028 = Fp(x1023.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1029 = x1028 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1029);
          reg = x1029;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1030 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1030 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1031 = x1030 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1032 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1032 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1033 = x1032 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1034 = x1031 + x1033;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1035 = x1023 - x1034;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1035 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1036 = x102 - x963;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1037 = x953 * x1036;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1038 = x102 - x1030;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1039 = x1037 * x1038;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1040 = x102 - x953;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1041 = x1040 * x963;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1042 = x1041 * x1030;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1043 = x1039 + x1042;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1043);
        reg = x1043;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x1044 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1044 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1045 = x1044 + x1030;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1046 = x1044 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1047 = x1046 * x1030;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1048 = x1045 - x1047;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1048);
        reg = x1048;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1049 = x1011 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1050 = x1007 + x1049;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1051 = (x1050 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1051);
          reg = x1051;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1052 = inv(x1050);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1052);
          reg = x1052;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1053 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1053 != Fp::invalid());
      if (x1053 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1050 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1054 = x102 - x1053;
      if (x1054 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1055 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1055 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1056 = x1050 * x1055;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1057 = x1056 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1057 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1058 = x1023 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1059 = x1019 + x1058;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1060 = x1054 * x87;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1061 = x1059 + x1060;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1062 = (x1061 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1062);
          reg = x1062;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1063 = inv(x1061);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1063);
          reg = x1063;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1064 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1064 != Fp::invalid());
      if (x1064 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1061 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1065 = x102 - x1064;
      if (x1065 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1066 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1066 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1067 = x1061 * x1066;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1068 = x1067 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1068 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1069 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1069 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1070 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1070 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1071 = x102 - x1070;
      host_args.at(0) = x1007;
      host_args.at(1) = x1011;
      host_args.at(2) = x1019;
      host_args.at(3) = x1023;
      host_args.at(4) = x1064;
      host_args.at(5) = x1069;
      host_args.at(6) = x1071;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1072 = x824 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1073 = x827 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1074 = x1072 + x1073;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1075 = x1074 + x830;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1076 = (x1075 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1076);
          reg = x1076;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1077 = inv(x1075);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1077);
          reg = x1077;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1078 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1078 != Fp::invalid());
      if (x1078 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1075 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1079 = x102 - x1078;
      if (x1079 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1080 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1080 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1081 = x1075 * x1080;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1082 = x1081 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1082 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1083 = x603 + x85;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1084 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1084 != Fp::invalid());
      if (x1084 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1085 = x832 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1085 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x821 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1086 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1087 = Fp(x1086.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1087);
            reg = x1087;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1088 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1088 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1089 = x1086 - x1088;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1090 = x1089 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1091 = Fp(x1090.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1091);
            reg = x1091;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1092 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1092 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1093 = x1090 - x1092;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1094 = x1093 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1095 = Fp(x1094.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1095);
            reg = x1095;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1096 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1096 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1097 = x1094 - x1096;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1098 = x1097 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1099 = Fp(x1098.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1099);
            reg = x1099;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1100 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1100 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1101 = x1098 - x1100;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1102 = x1101 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1102);
          reg = x1102;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1103 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1103 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1104 = x102 - x1103;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1105 = x1103 * x1104;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1105);
          reg = x1105;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1106 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1106 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1107 = x99 - x1103;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1108 = x1106 * x1107;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1108 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1109 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1109 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1109);
          reg = x1109;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1007;
          host_args.at(2) = x1011;
          host_args.at(3) = x1019;
          host_args.at(4) = x1023;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1110 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1007);
            reg = x1007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1011);
            reg = x1011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          {
            host_args.at(0) = x1110;
            host_args.at(1) = x1007;
            host_args.at(2) = x1011;
            host_args.at(3) = x1019;
            host_args.at(4) = x1023;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1111 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1111 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1112 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1112 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1113 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1113 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1114 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1114 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1110);
            reg = x1110;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1111);
            reg = x1111;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1112);
            reg = x1112;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1113);
            reg = x1113;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1114);
            reg = x1114;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1115 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1115 != Fp::invalid());
      if (x1115 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1116 = x832 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1116 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x821 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1117 = x797 - x68;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1117 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1118 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1119 = Fp(x1118.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1119);
            reg = x1119;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1120 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1120 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1121 = x1118 - x1120;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1122 = x1121 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1123 = Fp(x1122.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1123);
            reg = x1123;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1124 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1124 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1125 = x1122 - x1124;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1126 = x1125 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1127 = Fp(x1126.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1127);
            reg = x1127;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1128 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1128 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1129 = x1126 - x1128;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1130 = x1129 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1131 = Fp(x1130.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1131);
            reg = x1131;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1132 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1132 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1133 = x1130 - x1132;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1134 = x1133 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1134);
          reg = x1134;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1135 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1135 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1136 = x102 - x1135;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1137 = x1135 * x1136;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1137);
          reg = x1137;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1138 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1139 = x99 - x1135;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1140 = x1138 * x1139;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1140 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1141 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1141 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1141);
          reg = x1141;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1007;
          host_args.at(2) = x1011;
          host_args.at(3) = x1019;
          host_args.at(4) = x1023;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1142 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1007);
            reg = x1007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1011);
            reg = x1011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          {
            host_args.at(0) = x1142;
            host_args.at(1) = x1007;
            host_args.at(2) = x1011;
            host_args.at(3) = x1019;
            host_args.at(4) = x1023;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1143 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1143 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1144 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1144 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1145 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1145 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1146 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1146 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1142);
            reg = x1142;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1143);
            reg = x1143;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1144);
            reg = x1144;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1145);
            reg = x1145;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1146);
            reg = x1146;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1147 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1147 != Fp::invalid());
      if (x1147 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1148 = x832 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1148 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1149 = x821 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1149 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1150 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1151 = Fp(x1150.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1151);
            reg = x1151;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1152 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1152 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1153 = x1150 - x1152;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1154 = x1153 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1155 = Fp(x1154.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1155);
            reg = x1155;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1156 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1156 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1157 = x1154 - x1156;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1158 = x1157 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1159 = Fp(x1158.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1159);
            reg = x1159;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1160 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1160 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1161 = x1158 - x1160;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1162 = x1161 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1163 = Fp(x1162.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1163);
            reg = x1163;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1164 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1164 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1165 = x1162 - x1164;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1166 = x1165 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1166);
          reg = x1166;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1167 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1167 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1168 = x102 - x1167;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1169 = x1167 * x1168;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1169);
          reg = x1169;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1170 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1170 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1171 = x99 - x1167;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1172 = x1170 * x1171;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1172 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1173 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1173 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1173);
          reg = x1173;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1007;
          host_args.at(2) = x1011;
          host_args.at(3) = x1019;
          host_args.at(4) = x1023;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1174 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1007);
            reg = x1007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1011);
            reg = x1011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          {
            host_args.at(0) = x1174;
            host_args.at(1) = x1007;
            host_args.at(2) = x1011;
            host_args.at(3) = x1019;
            host_args.at(4) = x1023;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1175 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1175 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1176 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1176 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1177 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1177 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1178 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1178 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1174);
            reg = x1174;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1175);
            reg = x1175;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1176);
            reg = x1176;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1177);
            reg = x1177;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1178);
            reg = x1178;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1179 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1179 != Fp::invalid());
      if (x1179 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1180 = x832 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1180 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1181 = x821 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1181 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1182 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1183 = Fp(x1182.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1183);
            reg = x1183;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1184 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1184 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1185 = x1182 - x1184;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1186 = x1185 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1187 = Fp(x1186.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1187);
            reg = x1187;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1188 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1188 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1189 = x1186 - x1188;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1190 = x1189 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1191 = Fp(x1190.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1191);
            reg = x1191;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1192 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1192 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1193 = x1190 - x1192;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1194 = x1193 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1195 = Fp(x1194.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1195);
            reg = x1195;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1196 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1196 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1197 = x1194 - x1196;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1198 = x1197 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1198);
          reg = x1198;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1199 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1199 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1200 = x102 - x1199;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1201 = x1199 * x1200;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1201);
          reg = x1201;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1202 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1202 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1203 = x99 - x1199;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1204 = x1202 * x1203;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1204 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1205 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1205 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1205);
          reg = x1205;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1007;
          host_args.at(2) = x1011;
          host_args.at(3) = x1019;
          host_args.at(4) = x1023;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1206 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1007);
            reg = x1007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1011);
            reg = x1011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          {
            host_args.at(0) = x1206;
            host_args.at(1) = x1007;
            host_args.at(2) = x1011;
            host_args.at(3) = x1019;
            host_args.at(4) = x1023;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1207 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1207 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1208 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1208 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1209 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1209 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1210 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1210 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1206);
            reg = x1206;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1207);
            reg = x1207;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1208);
            reg = x1208;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1209);
            reg = x1209;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1210);
            reg = x1210;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1211 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1211 != Fp::invalid());
      if (x1211 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1212 = x832 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1212 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1213 = x821 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1213 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1214 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1215 = Fp(x1214.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1215);
            reg = x1215;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1216 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1216 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1217 = x1214 - x1216;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1218 = x1217 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1219 = Fp(x1218.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1219);
            reg = x1219;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1220 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1220 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1221 = x1218 - x1220;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1222 = x1221 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1223 = Fp(x1222.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1223);
            reg = x1223;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1224 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1224 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1225 = x1222 - x1224;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1226 = x1225 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1227 = Fp(x1226.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1227);
            reg = x1227;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1228 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1228 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1229 = x1226 - x1228;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1230 = x1229 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1230);
          reg = x1230;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1231 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1231 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1232 = x102 - x1231;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1233 = x1231 * x1232;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1233);
          reg = x1233;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1234 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1234 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1235 = x99 - x1231;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1236 = x1234 * x1235;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1236 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1237 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1237 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1237);
          reg = x1237;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1007;
          host_args.at(2) = x1011;
          host_args.at(3) = x1019;
          host_args.at(4) = x1023;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1238 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1007);
            reg = x1007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1011);
            reg = x1011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          {
            host_args.at(0) = x1238;
            host_args.at(1) = x1007;
            host_args.at(2) = x1011;
            host_args.at(3) = x1019;
            host_args.at(4) = x1023;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1239 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1239 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1240 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1240 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1241 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1241 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1242 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1242 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1238);
            reg = x1238;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1239);
            reg = x1239;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1240);
            reg = x1240;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1241);
            reg = x1241;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1242);
            reg = x1242;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1243 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1243 != Fp::invalid());
      if (x1243 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1244 = x832 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1244 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1245 = x821 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1245 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1246 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1247 = Fp(x1246.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1247);
            reg = x1247;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1248 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1248 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1249 = x1246 - x1248;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1250 = x1249 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1251 = Fp(x1250.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1251);
            reg = x1251;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1252 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1252 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1253 = x1250 - x1252;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1254 = x1253 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1255 = Fp(x1254.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1255);
            reg = x1255;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1256 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1256 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1257 = x1254 - x1256;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1258 = x1257 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1259 = Fp(x1258.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1259);
            reg = x1259;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1260 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1260 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1261 = x1258 - x1260;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1262 = x1261 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1262);
          reg = x1262;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1263 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1263 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1264 = x102 - x1263;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1265 = x1263 * x1264;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1265);
          reg = x1265;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1266 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1266 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1267 = x99 - x1263;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1268 = x1266 * x1267;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1268 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1269 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1269 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1269);
          reg = x1269;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1069;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1270 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1069);
            reg = x1069;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x1270;
            host_args.at(1) = x1069;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1271 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1271 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1272 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1272 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1273 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1273 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1274 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1274 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1270);
            reg = x1270;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1271);
            reg = x1271;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1272);
            reg = x1272;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1273);
            reg = x1273;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1274);
            reg = x1274;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1275 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1275 != Fp::invalid());
      if (x1275 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1276 = x832 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1276 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1277 = x821 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1277 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x797 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1278 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1279 = Fp(x1278.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1279);
            reg = x1279;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1280 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1280 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1281 = x1278 - x1280;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1282 = x1281 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1283 = Fp(x1282.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1283);
            reg = x1283;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1284 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1284 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1285 = x1282 - x1284;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1286 = x1285 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1287 = Fp(x1286.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1287);
            reg = x1287;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1288 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1288 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1289 = x1286 - x1288;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1290 = x1289 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1291 = Fp(x1290.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1291);
            reg = x1291;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1292 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1292 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1293 = x1290 - x1292;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1294 = x1293 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1294);
          reg = x1294;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1295 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1295 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1296 = x102 - x1295;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1297 = x1295 * x1296;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1297);
          reg = x1297;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1298 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1298 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1299 = x99 - x1295;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1300 = x1298 * x1299;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1300 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1301 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1301 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1301);
          reg = x1301;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1071;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1302 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1071);
            reg = x1071;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x1302;
            host_args.at(1) = x1071;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1303 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1303 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1304 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1304 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1305 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1305 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1306 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1306 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1302);
            reg = x1302;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1303);
            reg = x1303;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1305);
            reg = x1305;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1306);
            reg = x1306;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1307 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1307 != Fp::invalid());
      if (x1307 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1308 = x832 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1308 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x821 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1309 = x792 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1310 = x795 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1311 = x1309 + x1310;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1312 = x1311 + x904;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1313 = x785 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1314 = x787 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1315 = x1313 + x1314;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1316 = x1315 + x789;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1317 = x785 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1312);
          reg = x1312;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1316);
          reg = x1316;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1317);
          reg = x1317;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1317);
          reg = x1317;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1318 = x1083 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1319 = Fp(x1318.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1319);
            reg = x1319;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1320 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1320 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1321 = x1318 - x1320;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1322 = x1321 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1323 = Fp(x1322.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1323);
            reg = x1323;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1324 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1324 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1325 = x1322 - x1324;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1326 = x1325 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1327 = Fp(x1326.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1327);
            reg = x1327;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1328 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1328 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1329 = x1326 - x1328;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1330 = x1329 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1331 = Fp(x1330.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1331);
            reg = x1331;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1332 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1332 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1333 = x1330 - x1332;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1334 = x1333 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1334);
          reg = x1334;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1335 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1335 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1336 = x102 - x1335;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1337 = x1335 * x1336;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1337);
          reg = x1337;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1338 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1338 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1339 = x99 - x1335;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1340 = x1338 * x1339;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1340 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1341 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1341 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1341);
          reg = x1341;
        }
        if (x1079 != 0) {
          host_args.at(0) = x1075;
          host_args.at(1) = x1007;
          host_args.at(2) = x1011;
          host_args.at(3) = x1019;
          host_args.at(4) = x1023;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1342 = x1075 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1007);
            reg = x1007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1011);
            reg = x1011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1019);
            reg = x1019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1023);
            reg = x1023;
          }
          {
            host_args.at(0) = x1342;
            host_args.at(1) = x1007;
            host_args.at(2) = x1011;
            host_args.at(3) = x1019;
            host_args.at(4) = x1023;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1343 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1343 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1344 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1344 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1345 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1345 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1346 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1346 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1342);
            reg = x1342;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x743);
            reg = x743;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1344);
            reg = x1344;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1345);
            reg = x1345;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1346);
            reg = x1346;
          }
        }
        if (x1078 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
    auto x1347 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x1347 != Fp::invalid());
    if (x1347 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1348 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x1348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1349 = x603 * x83;
      {
        host_args.at(0) = x1349;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1350 = host_outs.at(0);
        auto x1351 = host_outs.at(1);
        auto x1352 = host_outs.at(2);
        auto x1353 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1350);
          reg = x1350;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1351);
          reg = x1351;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1352);
          reg = x1352;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1353);
          reg = x1353;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1354 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x1354 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1355 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x1355 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1356 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x1356 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1357 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x1357 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1349);
        reg = x1349;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1348);
        reg = x1348;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1354);
        reg = x1354;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1355);
        reg = x1355;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1356);
        reg = x1356;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1357);
        reg = x1357;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1358 = Fp(x1357.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1359 = x1358 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1359);
          reg = x1359;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1360 = Fp(x1357.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1361 = x1360 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1361);
          reg = x1361;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1362 = Fp(x1357.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1363 = x1362 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1363);
          reg = x1363;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1364 = Fp(x1357.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1365 = x1364 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1365);
          reg = x1365;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1366 = Fp(x1357.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1367 = x1366 * x63;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1367);
          reg = x1367;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1368 = Fp(x1357.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1368);
          reg = x1368;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1369 = Fp(x1356.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1370 = x1369 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1370);
          reg = x1370;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1371 = Fp(x1356.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1372 = x1371 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1372);
          reg = x1372;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1373 = Fp(x1356.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1374 = x1373 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1374);
          reg = x1374;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1375 = Fp(x1356.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1376 = x1375 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1376);
          reg = x1376;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1377 = Fp(x1356.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1377);
          reg = x1377;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1378 = Fp(x1355.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1379 = x1378 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1379);
          reg = x1379;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1380 = Fp(x1355.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1381 = x1380 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1381);
          reg = x1381;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1382 = Fp(x1355.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1383 = x1382 * x65;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1383);
          reg = x1383;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1384 = Fp(x1355.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1385 = x1384 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1385);
          reg = x1385;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1386 = Fp(x1355.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1386);
          reg = x1386;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1387 = Fp(x1354.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1388 = x1387 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1388);
          reg = x1388;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1389 = Fp(x1354.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1389);
          reg = x1389;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1390 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x1390 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1391 = x1390 * x62;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1392 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1392 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1393 = x1392 * x66;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1394 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x1394 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1395 = x1394 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1396 = x1393 + x1395;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1397 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x1397 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1398 = x1397 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1399 = x1396 + x1398;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1400 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1400 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1401 = x1399 + x1400;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1402 = x1391 + x1401;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1403 = x1402 * x99;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1404 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x1404 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1405 = x1403 + x1404;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1406 = x1357 - x1405;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1406 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1407 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x1407 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1408 = x1407 * x77;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1409 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1409 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1410 = x1409 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1411 = x1408 + x1410;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1412 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x1412 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1413 = x1411 + x1412;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1414 = x1413 * x66;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1415 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1415 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1416 = x1415 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1417 = x1414 + x1416;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1418 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1419 = x1417 + x1418;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1420 = x1356 - x1419;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1420 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1421 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x1421 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1422 = x1421 * x71;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1423 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x1423 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1424 = x1423 * x85;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1425 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1425 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1426 = x1424 + x1425;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1427 = x1426 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1428 = x1422 + x1427;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1429 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1429 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1430 = x1429 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1431 = x1428 + x1430;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1432 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1432 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1433 = x1431 + x1432;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1434 = x1355 - x1433;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1434 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1435 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x1435 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1436 = x1435 * x71;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x1437 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1437 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1438 = x1436 + x1437;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1439 = x1354 - x1438;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1439 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1354;
        host_args.at(1) = x1355;
        host_args.at(2) = x1356;
        host_args.at(3) = x1357;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1440 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1441 = (x1440 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1441);
            reg = x1441;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1442 = x1440 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1443 = (x1442 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1443);
            reg = x1443;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1444 = x1440 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1445 = (x1444 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1445);
            reg = x1445;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1446 = x1440 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1447 = (x1446 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1447);
            reg = x1447;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1448 = x1440 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1449 = (x1448 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1449);
            reg = x1449;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1450 = x1440 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1451 = (x1450 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1451);
            reg = x1451;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1452 = x1440 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1453 = (x1452 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1453);
            reg = x1453;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1454 = x1440 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1455 = (x1454 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1455);
            reg = x1455;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1456 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1456 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1457 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1457 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1458 = x1457 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1459 = x1456 + x1458;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1460 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1460 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1461 = x1460 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1462 = x1459 + x1461;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1463 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1463 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1464 = x1463 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1465 = x1462 + x1464;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1466 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1466 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1467 = x1466 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1468 = x1465 + x1467;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1469 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1469 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1470 = x1469 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1471 = x1468 + x1470;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1472 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1472 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1473 = x1472 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1474 = x1471 + x1473;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x1475 = x1474 - x1440;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x1475 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1476 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1476 != Fp::invalid());
        if (x1476 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1477 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1478 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1479 = x1477 + x1478;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1480 = x1404 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1481 = x1480 + x1413;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1482 = x1479 + x1481;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1483 = x1390 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1484 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1485 = x1483 + x1484;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1486 = x1485 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1487 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1482);
            reg = x1482;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1486);
            reg = x1486;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1487);
            reg = x1487;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1487);
            reg = x1487;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x57);
            reg = x57;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1488 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1488 != Fp::invalid());
        if (x1488 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1489 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1490 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1491 = x1489 + x1490;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1492 = x1404 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1493 = x1492 + x1413;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1494 = x1491 + x1493;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1495 = x1390 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1496 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1497 = x1495 + x1496;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1498 = x1497 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1499 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1494);
            reg = x1494;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1498);
            reg = x1498;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1499);
            reg = x1499;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1500 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1500 != Fp::invalid());
        if (x1500 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1501 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1502 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1503 = x1501 + x1502;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1504 = x1404 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1505 = x1504 + x1413;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1506 = x1503 + x1505;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1507 = x1390 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1508 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1509 = x1507 + x1508;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1510 = x1509 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1511 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1506);
            reg = x1506;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1510);
            reg = x1510;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1511);
            reg = x1511;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1511);
            reg = x1511;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x79);
            reg = x79;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1512 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1512 != Fp::invalid());
        if (x1512 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1513 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1514 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1515 = x1513 + x1514;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1516 = x1404 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1517 = x1516 + x1413;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1518 = x1515 + x1517;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1519 = x1390 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1520 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1521 = x1519 + x1520;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1522 = x1521 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1523 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1518);
            reg = x1518;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1522);
            reg = x1522;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1523);
            reg = x1523;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1523);
            reg = x1523;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1524 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1524 != Fp::invalid());
        if (x1524 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1525 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1526 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1527 = x1525 + x1526;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1528 = x1404 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1529 = x1528 + x1413;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1530 = x1527 + x1529;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1531 = x1390 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1532 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1533 = x1531 + x1532;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1534 = x1533 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1535 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1530);
            reg = x1530;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1534);
            reg = x1534;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1535);
            reg = x1535;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1535);
            reg = x1535;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1536 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1536 != Fp::invalid());
        if (x1536 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1537 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1538 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1539 = x1537 + x1538;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1540 = x1429 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1541 = x1539 + x1540;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1542 = x1432 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1543 = x1541 + x1542;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1544 = x1390 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1545 = x1435 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1546 = x1544 + x1545;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1547 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1548 = x1546 + x1547;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1549 = x1548 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1550 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1543);
            reg = x1543;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1549);
            reg = x1549;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1550);
            reg = x1550;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1550);
            reg = x1550;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1551 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1551 != Fp::invalid());
        if (x1551 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1552 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1553 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1554 = x1552 + x1553;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1555 = x1429 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1556 = x1554 + x1555;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1557 = x1432 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1558 = x1556 + x1557;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1559 = x1390 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1560 = x1435 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1561 = x1559 + x1560;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1562 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1563 = x1561 + x1562;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1564 = x1563 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1565 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1558);
            reg = x1558;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1564);
            reg = x1564;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1565);
            reg = x1565;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1565);
            reg = x1565;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1566 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1566 != Fp::invalid());
        if (x1566 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1567 = x1397 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1568 = x1400 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1569 = x1567 + x1568;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1570 = x1429 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1571 = x1569 + x1570;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1572 = x1432 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1573 = x1571 + x1572;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1574 = x1390 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1575 = x1435 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1576 = x1574 + x1575;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1577 = x1392 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1578 = x1576 + x1577;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1579 = x1578 + x1394;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1580 = x1390 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1573);
            reg = x1573;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1579);
            reg = x1579;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1580);
            reg = x1580;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1580);
            reg = x1580;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1581 = x1415 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1582 = x1418 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1583 = x1581 + x1582;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1584 = x1583 + x1421;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1585 = x1584 + x55;
      {
        host_args.at(0) = x1585;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1586 = host_outs.at(0);
        auto x1587 = host_outs.at(1);
        auto x1588 = host_outs.at(2);
        auto x1589 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1586);
          reg = x1586;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1587);
          reg = x1587;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1588);
          reg = x1588;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1589);
          reg = x1589;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1590 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x1590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1591 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1592 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1593 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1593 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1585);
        reg = x1585;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1348);
        reg = x1348;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1590);
        reg = x1590;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1591);
        reg = x1591;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1592);
        reg = x1592;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1593);
        reg = x1593;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1594 = x1404 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1595 = x1594 + x1413;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1596 = x1595 + x55;
      {
        host_args.at(0) = x1596;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1597 = host_outs.at(0);
        auto x1598 = host_outs.at(1);
        auto x1599 = host_outs.at(2);
        auto x1600 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1597);
          reg = x1597;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1598);
          reg = x1598;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1599);
          reg = x1599;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1600);
          reg = x1600;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1601 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1602 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1603 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1604 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1604 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1596);
        reg = x1596;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1348);
        reg = x1348;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1601);
        reg = x1601;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1602);
        reg = x1602;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1603);
        reg = x1603;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1604);
        reg = x1604;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1605 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1606 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1607 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1608 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1608 != Fp::invalid());
      host_args.at(0) = x1605;
      host_args.at(1) = x1606;
      host_args.at(2) = x1607;
      host_args.at(3) = x1608;
      host_args.at(4) = x1584;
      host_args.at(5) = x1590;
      host_args.at(6) = x1591;
      host_args.at(7) = x1592;
      host_args.at(8) = x1593;
      host_args.at(9) = x1595;
      host_args.at(10) = x1601;
      host_args.at(11) = x1602;
      host_args.at(12) = x1603;
      host_args.at(13) = x1604;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1609 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1609 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x1610 = x102 - x1609;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1611 = x1610 * x1590;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1612 = x1610 * x1591;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1613 = x1610 * x1592;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1614 = x1610 * x1593;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1615 = x600 * x85;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1616 = x597 + x1615;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1617 = x590 - x85;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1618 = x1609 * x1617;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1619 = x1609 * x591;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1620 = x1609 * x594;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1621 = x1609 * x1616;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1622 = x1611 + x1618;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1623 = x1612 + x1619;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1624 = x1613 + x1620;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1625 = x1614 + x1621;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1626 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1626 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x1627 = x102 - x1626;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1628 = x1627 * x1601;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1629 = x1627 * x1602;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1630 = x1627 * x1603;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1631 = x1627 * x1604;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1632 = x1626 * x1605;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1633 = x1626 * x1606;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1634 = x1626 * x1607;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1635 = x1626 * x1608;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1636 = x1628 + x1632;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1637 = x1629 + x1633;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1638 = x1630 + x1634;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1639 = x1631 + x1635;
      host_args.at(0) = x1622;
      host_args.at(1) = x1623;
      host_args.at(2) = x1624;
      host_args.at(3) = x1625;
      host_args.at(4) = x1636;
      host_args.at(5) = x1637;
      host_args.at(6) = x1638;
      host_args.at(7) = x1639;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1640 = Fp(x1625.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1641 = x1640 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1641);
          reg = x1641;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1642 = Fp(x1625.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1643 = x1642 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1643);
          reg = x1643;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1644 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1644 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1645 = x1644 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1646 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1646 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1647 = x1646 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1648 = x1645 + x1647;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1649 = x1625 - x1648;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1649 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1650 = Fp(x1639.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1651 = x1650 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1651);
          reg = x1651;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1652 = Fp(x1639.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1653 = x1652 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1653);
          reg = x1653;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1654 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1654 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1655 = x1654 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x1656 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x1656 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1657 = x1656 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1658 = x1655 + x1657;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1659 = x1639 - x1658;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1659 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1636);
        reg = x1636;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1637);
        reg = x1637;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1638);
        reg = x1638;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1639);
        reg = x1639;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1660 = Fp(x1622.asUInt32() & x1636.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1661 = Fp(x1623.asUInt32() & x1637.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1662 = Fp(x1624.asUInt32() & x1638.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1663 = Fp(x1625.asUInt32() & x1639.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1660);
          reg = x1660;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1661);
          reg = x1661;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1662);
          reg = x1662;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1663);
          reg = x1663;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1664 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1664 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1665 = x1664 * x1622;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1666 = x1664 * x1623;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1667 = x1664 * x1624;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1668 = x1664 * x1625;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1669 = x1665 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1670 = x1666 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1671 = x1667 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1672 = x1668 + x98;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1673 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1673 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1674 = x1673 * x1636;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1675 = x1673 * x1637;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1676 = x1673 * x1638;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1677 = x1673 * x1639;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1678 = x1669 + x1674;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1679 = x1670 + x1675;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1680 = x1671 + x1676;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1681 = x1672 + x1677;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1682 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1683 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1684 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1685 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1686 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1686 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1687 = x1682 * x1683;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1688 = x1682 * x1684;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1689 = x1682 * x1685;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1690 = x1682 * x1686;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1691 = x1678 + x1687;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1692 = x1679 + x1688;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1693 = x1680 + x1689;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1694 = x1681 + x1690;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1695 = x1692 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1696 = x1691 + x1695;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1697 = Fp(x1696.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1697);
          reg = x1697;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1698 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1698 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1699 = x1696 - x1698;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1700 = x1699 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1701 = Fp(x1700.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1701);
          reg = x1701;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1702 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1702 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1703 = x1700 - x1702;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1704 = x1703 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1704);
        reg = x1704;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1705 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1705 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1706 = x1705 + x1693;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1707 = x1694 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1708 = x1706 + x1707;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1709 = Fp(x1708.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1709);
          reg = x1709;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1710 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1710 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1711 = x1708 - x1710;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1712 = x1711 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1713 = Fp(x1712.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1713);
          reg = x1713;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1714 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1714 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1715 = x1712 - x1714;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1716 = x1715 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1716);
        reg = x1716;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1717 = Fp(x1714.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1718 = x1717 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1718);
          reg = x1718;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1719 = Fp(x1714.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1720 = x1719 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1720);
          reg = x1720;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1721 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1721 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1722 = x1721 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1723 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1723 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1724 = x1723 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1725 = x1722 + x1724;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1726 = x1714 - x1725;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1726 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1727 = x102 - x1654;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1728 = x1644 * x1727;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1729 = x102 - x1721;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1730 = x1728 * x1729;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1731 = x102 - x1644;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1732 = x1731 * x1654;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1733 = x1732 * x1721;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1734 = x1730 + x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1734);
        reg = x1734;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x1735 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1735 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1736 = x1735 + x1721;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1737 = x1735 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1738 = x1737 * x1721;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1739 = x1736 - x1738;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1739);
        reg = x1739;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1740 = x1702 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1741 = x1698 + x1740;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1742 = (x1741 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1742);
          reg = x1742;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1743 = inv(x1741);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1743);
          reg = x1743;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1744 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1744 != Fp::invalid());
      if (x1744 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1741 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1745 = x102 - x1744;
      if (x1745 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1746 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1746 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1747 = x1741 * x1746;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1748 = x1747 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1748 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1749 = x1714 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1750 = x1710 + x1749;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1751 = x1745 * x87;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1752 = x1750 + x1751;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1753 = (x1752 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1753);
          reg = x1753;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1754 = inv(x1752);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1755 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1755 != Fp::invalid());
      if (x1755 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1752 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1756 = x102 - x1755;
      if (x1756 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1757 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1757 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1758 = x1752 * x1757;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1759 = x1758 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1759 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1760 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1761 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1761 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1762 = x102 - x1761;
      host_args.at(0) = x1698;
      host_args.at(1) = x1702;
      host_args.at(2) = x1710;
      host_args.at(3) = x1714;
      host_args.at(4) = x1755;
      host_args.at(5) = x1760;
      host_args.at(6) = x1762;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1763 = x1429 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1764 = x1432 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1765 = x1763 + x1764;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1766 = x1765 + x1435;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1767 = (x1766 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1767);
          reg = x1767;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1768 = inv(x1766);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1768);
          reg = x1768;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1769 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1769 != Fp::invalid());
      if (x1769 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1766 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1770 = x102 - x1769;
      if (x1770 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1771 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1771 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1772 = x1766 * x1771;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1773 = x1772 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1773 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1774 = x603 + x85;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x1775 = x1606 * x97;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1776 = x1605 + x1775;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x1777 = x1607 * x87;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1778 = x1776 + x1777;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x1779 = x1608 * x54;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x1780 = x1779 * x53;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x1781 = x1778 + x1780;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x1782 = x603 + x1781;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1783 = x1755 * x1782;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:35)
      auto x1784 = x1756 * x1774;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1785 = x1783 + x1784;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1786 = x1755 * x1774;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:34)
      auto x1787 = x1756 * x1782;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1788 = x1786 + x1787;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1789 = x1760 * x1782;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:36)
      auto x1790 = x102 - x1760;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:35)
      auto x1791 = x1790 * x1774;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1792 = x1789 + x1791;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1793 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1793 != Fp::invalid());
      if (x1793 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1794 = x1437 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1794 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1795 = x1426 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1795 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1796 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1797 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1798 = x1796 + x1797;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1799 = x1798 + x1595;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1800 = x1390 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1801 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1802 = x1800 + x1801;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1803 = x1802 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1804 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1799);
          reg = x1799;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1803);
          reg = x1803;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1804);
          reg = x1804;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1804);
          reg = x1804;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x57);
          reg = x57;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1805 = x1774 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1806 = Fp(x1805.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1806);
            reg = x1806;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1807 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1807 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1808 = x1805 - x1807;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1809 = x1808 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1810 = Fp(x1809.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1810);
            reg = x1810;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1811 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1811 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1812 = x1809 - x1811;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1813 = x1812 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1814 = Fp(x1813.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1814);
            reg = x1814;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1815 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1815 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1816 = x1813 - x1815;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1817 = x1816 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1818 = Fp(x1817.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1818);
            reg = x1818;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1819 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1819 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1820 = x1817 - x1819;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1821 = x1820 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1821);
          reg = x1821;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1822 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1822 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1823 = x102 - x1822;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1824 = x1822 * x1823;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1824);
          reg = x1824;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1825 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1825 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1826 = x99 - x1822;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1827 = x1825 * x1826;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1827 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1828 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1828 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1828);
          reg = x1828;
        }
        if (x1770 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1698;
          host_args.at(2) = x1702;
          host_args.at(3) = x1710;
          host_args.at(4) = x1714;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1829 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1698);
            reg = x1698;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          {
            host_args.at(0) = x1829;
            host_args.at(1) = x1698;
            host_args.at(2) = x1702;
            host_args.at(3) = x1710;
            host_args.at(4) = x1714;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1830 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1830 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1831 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1831 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1832 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1832 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1833 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1833 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1829);
            reg = x1829;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1830);
            reg = x1830;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1831);
            reg = x1831;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1832);
            reg = x1832;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1833);
            reg = x1833;
          }
        }
        if (x1769 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1834 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1834 != Fp::invalid());
      if (x1834 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1835 = x1437 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1835 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1836 = x1426 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1836 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1837 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1838 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1839 = x1837 + x1838;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1840 = x1839 + x1595;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1841 = x1390 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1842 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1843 = x1841 + x1842;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1844 = x1843 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1845 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1840);
          reg = x1840;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1844);
          reg = x1844;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1845);
          reg = x1845;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1845);
          reg = x1845;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1846 = x1774 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1847 = Fp(x1846.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1847);
            reg = x1847;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1848 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1848 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1849 = x1846 - x1848;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1850 = x1849 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1851 = Fp(x1850.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1851);
            reg = x1851;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1852 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1852 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1853 = x1850 - x1852;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1854 = x1853 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1855 = Fp(x1854.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1855);
            reg = x1855;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1856 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1856 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1857 = x1854 - x1856;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1858 = x1857 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1859 = Fp(x1858.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1859);
            reg = x1859;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1860 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1860 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1861 = x1858 - x1860;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1862 = x1861 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1862);
          reg = x1862;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1863 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1863 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1864 = x102 - x1863;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1865 = x1863 * x1864;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1865);
          reg = x1865;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1866 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1866 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1867 = x99 - x1863;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1868 = x1866 * x1867;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1868 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1869 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1869 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1869);
          reg = x1869;
        }
        if (x1770 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1698;
          host_args.at(2) = x1702;
          host_args.at(3) = x1710;
          host_args.at(4) = x1714;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x1870 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1698);
            reg = x1698;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          {
            host_args.at(0) = x1870;
            host_args.at(1) = x1698;
            host_args.at(2) = x1702;
            host_args.at(3) = x1710;
            host_args.at(4) = x1714;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1871 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1871 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1872 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1872 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1873 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1873 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1874 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1874 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1870);
            reg = x1870;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1871);
            reg = x1871;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1872);
            reg = x1872;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1873);
            reg = x1873;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1874);
            reg = x1874;
          }
        }
        if (x1769 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x1875 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1875 != Fp::invalid());
      if (x1875 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1876 = x1437 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1876 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1877 = x1426 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1877 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1878 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1879 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1880 = x1878 + x1879;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1881 = x1880 + x1595;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1882 = x1390 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1883 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1884 = x1882 + x1883;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1885 = x1884 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1886 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1881);
          reg = x1881;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1885);
          reg = x1885;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1886);
          reg = x1886;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1886);
          reg = x1886;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1887 = x1774 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1888 = Fp(x1887.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1888);
            reg = x1888;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1889 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1889 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1890 = x1887 - x1889;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1891 = x1890 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1892 = Fp(x1891.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1892);
            reg = x1892;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1893 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1893 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1894 = x1891 - x1893;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1895 = x1894 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1896 = Fp(x1895.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1896);
            reg = x1896;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1897 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1897 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1898 = x1895 - x1897;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1899 = x1898 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1900 = Fp(x1899.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1900);
            reg = x1900;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1901 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1901 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1902 = x1899 - x1901;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1903 = x1902 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1903);
          reg = x1903;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1904 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1904 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1905 = x102 - x1904;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1906 = x1904 * x1905;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1906);
          reg = x1906;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1907 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1908 = x99 - x1904;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1909 = x1907 * x1908;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1909 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1910 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1910 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1910);
          reg = x1910;
        }
        if (x1770 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1698;
          host_args.at(2) = x1702;
          host_args.at(3) = x1710;
          host_args.at(4) = x1714;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x1911 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1698);
            reg = x1698;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          {
            host_args.at(0) = x1911;
            host_args.at(1) = x1698;
            host_args.at(2) = x1702;
            host_args.at(3) = x1710;
            host_args.at(4) = x1714;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1912 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1912 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1913 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1913 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1914 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1914 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1915 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1915 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1911);
            reg = x1911;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1912);
            reg = x1912;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1913);
            reg = x1913;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1914);
            reg = x1914;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1915);
            reg = x1915;
          }
        }
        if (x1769 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x1916 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1916 != Fp::invalid());
      if (x1916 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1917 = x1437 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1917 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1918 = x1426 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1918 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1919 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1920 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1921 = x1919 + x1920;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1922 = x1921 + x1595;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1923 = x1390 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1924 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1925 = x1923 + x1924;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1926 = x1925 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1927 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1922);
          reg = x1922;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1926);
          reg = x1926;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1927);
          reg = x1927;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1927);
          reg = x1927;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1928 = x1774 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1929 = Fp(x1928.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1929);
            reg = x1929;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1930 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1930 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1931 = x1928 - x1930;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1932 = x1931 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1933 = Fp(x1932.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1933);
            reg = x1933;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1934 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1934 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1935 = x1932 - x1934;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1936 = x1935 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1937 = Fp(x1936.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1937);
            reg = x1937;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1938 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1938 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1939 = x1936 - x1938;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1940 = x1939 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1941 = Fp(x1940.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1941);
            reg = x1941;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1942 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1942 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1943 = x1940 - x1942;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1944 = x1943 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1944);
          reg = x1944;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1945 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1945 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1946 = x102 - x1945;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1947 = x1945 * x1946;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1947);
          reg = x1947;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1948 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1948 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1949 = x99 - x1945;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1950 = x1948 * x1949;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1950 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1951 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1951 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1951);
          reg = x1951;
        }
        if (x1770 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1760;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x1952 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1760);
            reg = x1760;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x1952;
            host_args.at(1) = x1760;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1953 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1953 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1954 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1954 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1955 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1955 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1956 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1956 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1952);
            reg = x1952;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1953);
            reg = x1953;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1954);
            reg = x1954;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1955);
            reg = x1955;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1956);
            reg = x1956;
          }
        }
        if (x1769 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x1957 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1957 != Fp::invalid());
      if (x1957 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1958 = x1437 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1958 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1959 = x1426 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1959 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1960 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1961 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1962 = x1960 + x1961;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1963 = x1962 + x1595;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1964 = x1390 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1965 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1966 = x1964 + x1965;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1967 = x1966 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1968 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1963);
          reg = x1963;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1967);
          reg = x1967;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1968);
          reg = x1968;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1968);
          reg = x1968;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1969 = x1774 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1970 = Fp(x1969.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1970);
            reg = x1970;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1971 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1971 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1972 = x1969 - x1971;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1973 = x1972 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1974 = Fp(x1973.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1974);
            reg = x1974;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1975 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1975 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1976 = x1973 - x1975;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1977 = x1976 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1978 = Fp(x1977.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1978);
            reg = x1978;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1979 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1979 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1980 = x1977 - x1979;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1981 = x1980 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1982 = Fp(x1981.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1983 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1983 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1984 = x1981 - x1983;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1985 = x1984 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1985);
          reg = x1985;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1986 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1986 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1987 = x102 - x1986;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1988 = x1986 * x1987;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1988);
          reg = x1988;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x1989 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1989 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1990 = x99 - x1986;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1991 = x1989 * x1990;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1991 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1992 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1992 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1992);
          reg = x1992;
        }
        if (x1770 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1762;
          host_args.at(2) = x101;
          host_args.at(3) = x101;
          host_args.at(4) = x101;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x1993 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1762);
            reg = x1762;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          {
            host_args.at(0) = x1993;
            host_args.at(1) = x1762;
            host_args.at(2) = x101;
            host_args.at(3) = x101;
            host_args.at(4) = x101;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1994 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1994 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1995 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1995 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1996 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1996 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1997 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1997 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1993);
            reg = x1993;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1995);
            reg = x1995;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1996);
            reg = x1996;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1997);
            reg = x1997;
          }
        }
        if (x1769 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x1998 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1998 != Fp::invalid());
      if (x1998 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x1999 = x1437 - x49;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1999 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1426 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2000 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2001 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2002 = x2000 + x2001;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2003 = x2002 + x1763;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2004 = x2003 + x1764;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2005 = x1390 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2006 = x1435 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2007 = x2005 + x2006;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2008 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2009 = x2007 + x2008;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2010 = x2009 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2011 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2004);
          reg = x2004;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2010);
          reg = x2010;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2011);
          reg = x2011;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2011);
          reg = x2011;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2012 = x1785 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2013 = Fp(x2012.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2013);
            reg = x2013;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2014 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2014 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2015 = x2012 - x2014;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2016 = x2015 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2017 = Fp(x2016.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2017);
            reg = x2017;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2018 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2018 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2019 = x2016 - x2018;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2020 = x2019 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2021 = Fp(x2020.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2021);
            reg = x2021;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2022 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2022 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2023 = x2020 - x2022;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2024 = x2023 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2025 = Fp(x2024.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2025);
            reg = x2025;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2026 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2026 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2027 = x2024 - x2026;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2028 = x2027 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2028);
          reg = x2028;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2029 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2029 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2030 = x102 - x2029;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2031 = x2029 * x2030;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2031);
          reg = x2031;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2032 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2032 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2033 = x99 - x2029;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2034 = x2032 * x2033;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2034 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2035 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2035 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2035);
          reg = x2035;
        }
        if (x101 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1698;
          host_args.at(2) = x1702;
          host_args.at(3) = x1710;
          host_args.at(4) = x1714;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2036 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1698);
            reg = x1698;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          {
            host_args.at(0) = x2036;
            host_args.at(1) = x1698;
            host_args.at(2) = x1702;
            host_args.at(3) = x1710;
            host_args.at(4) = x1714;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2037 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2037 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2038 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2038 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2039 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2039 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2040 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2040 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2036);
            reg = x2036;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2037);
            reg = x2037;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2038);
            reg = x2038;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2039);
            reg = x2039;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2040);
            reg = x2040;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2041 = x1769 + x102;
        if (x2041 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2042 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2042 != Fp::invalid());
      if (x2042 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2043 = x1437 - x49;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2043 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2044 = x1426 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2044 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2045 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2046 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2047 = x2045 + x2046;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2048 = x2047 + x1763;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2049 = x2048 + x1764;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2050 = x1390 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2051 = x1435 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2052 = x2050 + x2051;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2053 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2054 = x2052 + x2053;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2055 = x2054 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2056 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2049);
          reg = x2049;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2055);
          reg = x2055;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2056);
          reg = x2056;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2056);
          reg = x2056;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2057 = x1788 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2058 = Fp(x2057.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2058);
            reg = x2058;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2059 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2059 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2060 = x2057 - x2059;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2061 = x2060 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2062 = Fp(x2061.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2062);
            reg = x2062;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2063 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2063 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2064 = x2061 - x2063;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2065 = x2064 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2066 = Fp(x2065.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2066);
            reg = x2066;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2067 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2067 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2068 = x2065 - x2067;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2069 = x2068 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2070 = Fp(x2069.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2070);
            reg = x2070;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2071 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2071 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2072 = x2069 - x2071;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2073 = x2072 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2073);
          reg = x2073;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2074 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2074 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2075 = x102 - x2074;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2076 = x2074 * x2075;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2076);
          reg = x2076;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2077 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2077 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2078 = x99 - x2074;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2079 = x2077 * x2078;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2079 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2080 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2080 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2080);
          reg = x2080;
        }
        if (x101 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1698;
          host_args.at(2) = x1702;
          host_args.at(3) = x1710;
          host_args.at(4) = x1714;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2081 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1698);
            reg = x1698;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          {
            host_args.at(0) = x2081;
            host_args.at(1) = x1698;
            host_args.at(2) = x1702;
            host_args.at(3) = x1710;
            host_args.at(4) = x1714;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2082 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2082 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2083 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2083 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2084 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2084 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2085 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2085 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2081);
            reg = x2081;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2083);
            reg = x2083;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2084);
            reg = x2084;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2085);
            reg = x2085;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2086 = x1769 + x102;
        if (x2086 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2087 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2087 != Fp::invalid());
      if (x2087 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2088 = x1437 - x49;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2088 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2089 = x1426 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2089 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2090 = x1397 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2091 = x1400 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2092 = x2090 + x2091;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2093 = x2092 + x1763;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2094 = x2093 + x1764;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2095 = x1390 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2096 = x1435 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2097 = x2095 + x2096;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2098 = x1392 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2099 = x2097 + x2098;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2100 = x2099 + x1394;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2101 = x1390 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2094);
          reg = x2094;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2100);
          reg = x2100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2101);
          reg = x2101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2101);
          reg = x2101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2102 = x1792 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2103 = Fp(x2102.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2103);
            reg = x2103;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2104 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2104 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2105 = x2102 - x2104;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2106 = x2105 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2107 = Fp(x2106.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2107);
            reg = x2107;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2108 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2108 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2109 = x2106 - x2108;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2110 = x2109 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2111 = Fp(x2110.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2111);
            reg = x2111;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2112 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2112 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2113 = x2110 - x2112;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2114 = x2113 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2115 = Fp(x2114.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2115);
            reg = x2115;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2116 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2116 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2117 = x2114 - x2116;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2118 = x2117 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2118);
          reg = x2118;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2119 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2119 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2120 = x102 - x2119;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2121 = x2119 * x2120;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2121);
          reg = x2121;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2122 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2122 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2123 = x99 - x2119;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2124 = x2122 * x2123;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2124 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2125 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2125 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2125);
          reg = x2125;
        }
        if (x101 != 0) {
          host_args.at(0) = x1766;
          host_args.at(1) = x1698;
          host_args.at(2) = x1702;
          host_args.at(3) = x1710;
          host_args.at(4) = x1714;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2126 = x1766 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1698);
            reg = x1698;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1702);
            reg = x1702;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1710);
            reg = x1710;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1714);
            reg = x1714;
          }
          {
            host_args.at(0) = x2126;
            host_args.at(1) = x1698;
            host_args.at(2) = x1702;
            host_args.at(3) = x1710;
            host_args.at(4) = x1714;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2127 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2127 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2128 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2128 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2129 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2129 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2130 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2130 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2126);
            reg = x2126;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1348);
            reg = x1348;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2127);
            reg = x2127;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2129);
            reg = x2129;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2130);
            reg = x2130;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2131 = x1769 + x102;
        if (x2131 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
    auto x2132 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x2132 != Fp::invalid());
    if (x2132 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2133 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2134 = x603 * x83;
      {
        host_args.at(0) = x2134;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2135 = host_outs.at(0);
        auto x2136 = host_outs.at(1);
        auto x2137 = host_outs.at(2);
        auto x2138 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2135);
          reg = x2135;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2136);
          reg = x2136;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2137);
          reg = x2137;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2138);
          reg = x2138;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2139 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2139 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2140 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2140 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2141 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2141 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2142 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2142 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2134);
        reg = x2134;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2133);
        reg = x2133;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2139);
        reg = x2139;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2140);
        reg = x2140;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2141);
        reg = x2141;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2142);
        reg = x2142;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2143 = Fp(x2142.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2144 = x2143 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2144);
          reg = x2144;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2145 = Fp(x2142.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2146 = x2145 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2146);
          reg = x2146;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2147 = Fp(x2142.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2148 = x2147 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2148);
          reg = x2148;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2149 = Fp(x2142.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2150 = x2149 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2150);
          reg = x2150;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2151 = Fp(x2142.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2152 = x2151 * x63;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2152);
          reg = x2152;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2153 = Fp(x2142.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2153);
          reg = x2153;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2154 = Fp(x2141.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2155 = x2154 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2155);
          reg = x2155;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2156 = Fp(x2141.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2157 = x2156 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2157);
          reg = x2157;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2158 = Fp(x2141.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2159 = x2158 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2159);
          reg = x2159;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2160 = Fp(x2141.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2161 = x2160 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2161);
          reg = x2161;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2162 = Fp(x2141.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2162);
          reg = x2162;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2163 = Fp(x2140.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2164 = x2163 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2164);
          reg = x2164;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2165 = Fp(x2140.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2166 = x2165 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2166);
          reg = x2166;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2167 = Fp(x2140.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2168 = x2167 * x65;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2168);
          reg = x2168;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2169 = Fp(x2140.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2170 = x2169 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2170);
          reg = x2170;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2171 = Fp(x2140.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2171);
          reg = x2171;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2172 = Fp(x2139.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2173 = x2172 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2173);
          reg = x2173;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2174 = Fp(x2139.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2174);
          reg = x2174;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2175 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x2175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2176 = x2175 * x62;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2177 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2178 = x2177 * x66;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2179 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x2179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2180 = x2179 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2181 = x2178 + x2180;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2182 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x2182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2183 = x2182 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2184 = x2181 + x2183;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2185 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2186 = x2184 + x2185;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2187 = x2176 + x2186;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2188 = x2187 * x99;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2189 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x2189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2190 = x2188 + x2189;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2191 = x2142 - x2190;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2191 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2192 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x2192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2193 = x2192 * x77;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2194 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2194 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2195 = x2194 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2196 = x2193 + x2195;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2197 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x2197 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2198 = x2196 + x2197;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2199 = x2198 * x66;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2200 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2200 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2201 = x2200 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2202 = x2199 + x2201;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2203 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2203 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2204 = x2202 + x2203;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2205 = x2141 - x2204;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2205 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2206 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x2206 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2207 = x2206 * x71;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2208 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x2208 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2209 = x2208 * x85;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2210 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2210 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2211 = x2209 + x2210;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2212 = x2211 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2213 = x2207 + x2212;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2214 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2214 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2215 = x2214 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2216 = x2213 + x2215;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2217 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2217 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2218 = x2216 + x2217;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2219 = x2140 - x2218;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2219 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2220 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x2220 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2221 = x2220 * x71;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x2222 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2222 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2223 = x2221 + x2222;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2224 = x2139 - x2223;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2224 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2139;
        host_args.at(1) = x2140;
        host_args.at(2) = x2141;
        host_args.at(3) = x2142;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2225 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2226 = (x2225 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2226);
            reg = x2226;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2227 = x2225 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2228 = (x2227 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2228);
            reg = x2228;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2229 = x2225 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2230 = (x2229 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2230);
            reg = x2230;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2231 = x2225 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2232 = (x2231 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2232);
            reg = x2232;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2233 = x2225 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2234 = (x2233 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2234);
            reg = x2234;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2235 = x2225 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2236 = (x2235 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2236);
            reg = x2236;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2237 = x2225 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2238 = (x2237 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2238);
            reg = x2238;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2239 = x2225 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2240 = (x2239 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2240);
            reg = x2240;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2241 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2241 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2242 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2242 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2243 = x2242 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2244 = x2241 + x2243;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2245 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2245 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2246 = x2245 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2247 = x2244 + x2246;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2248 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2248 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2249 = x2248 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2250 = x2247 + x2249;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2251 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2251 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2252 = x2251 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2253 = x2250 + x2252;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2254 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2254 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2255 = x2254 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2256 = x2253 + x2255;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2257 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x2257 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2258 = x2257 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2259 = x2256 + x2258;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2260 = x2259 - x2225;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2260 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2261 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2261 != Fp::invalid());
        if (x2261 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2262 = x2182 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2263 = x2185 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2264 = x2262 + x2263;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2265 = x2214 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2266 = x2264 + x2265;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2267 = x2217 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2268 = x2266 + x2267;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2269 = x2175 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2270 = x2220 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2271 = x2269 + x2270;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2272 = x2177 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2273 = x2271 + x2272;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2274 = x2273 + x2179;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2275 = x2175 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2268);
            reg = x2268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2274);
            reg = x2274;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2275);
            reg = x2275;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2275);
            reg = x2275;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2276 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2276 != Fp::invalid());
        if (x2276 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2277 = x2182 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2278 = x2185 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2279 = x2277 + x2278;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2280 = x2214 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2281 = x2279 + x2280;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2282 = x2217 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2283 = x2281 + x2282;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2284 = x2175 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2285 = x2220 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2286 = x2284 + x2285;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2287 = x2177 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2288 = x2286 + x2287;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2289 = x2288 + x2179;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2290 = x2175 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2283);
            reg = x2283;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2289);
            reg = x2289;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2290);
            reg = x2290;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2290);
            reg = x2290;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2291 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2291 != Fp::invalid());
        if (x2291 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2292 = x2182 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2293 = x2185 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2294 = x2292 + x2293;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2295 = x2214 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2296 = x2294 + x2295;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2297 = x2217 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2298 = x2296 + x2297;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2299 = x2175 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2300 = x2220 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2301 = x2299 + x2300;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2302 = x2177 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2303 = x2301 + x2302;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2304 = x2303 + x2179;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2305 = x2175 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2298);
            reg = x2298;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2304);
            reg = x2304;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2305);
            reg = x2305;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2305);
            reg = x2305;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x58);
            reg = x58;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2306 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2306 != Fp::invalid());
        if (x2306 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2307 = x2182 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2308 = x2185 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2309 = x2307 + x2308;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2310 = x2189 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2311 = x2310 + x2198;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2312 = x2309 + x2311;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2313 = x2312 - x2197;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2314 = x2197 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2315 = x2213 + x2314;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2316 = x2177 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2317 = x2315 + x2316;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2318 = x2317 + x2179;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2319 = x2175 * x50;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2320 = x2319 + x2201;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2321 = x2320 + x2203;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2322 = x2175 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2313);
            reg = x2313;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2318);
            reg = x2318;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2321);
            reg = x2321;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2322);
            reg = x2322;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2323 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2323 != Fp::invalid());
        if (x2323 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2324 = x2182 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2325 = x2185 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2326 = x2324 + x2325;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2327 = x2189 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2328 = x2327 + x2198;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2329 = x2326 + x2328;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2330 = x2175 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2331 = x2177 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2332 = x2330 + x2331;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2333 = x2332 + x2179;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2334 = x2175 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2329);
            reg = x2329;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2333);
            reg = x2333;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2334);
            reg = x2334;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2334);
            reg = x2334;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2335 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2335 != Fp::invalid());
        if (x2335 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2213);
            reg = x2213;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2204);
            reg = x2204;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2190);
            reg = x2190;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2336 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2336 != Fp::invalid());
        if (x2336 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2213);
            reg = x2213;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2204);
            reg = x2204;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2190);
            reg = x2190;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2337 = x2200 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2338 = x2203 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2339 = x2337 + x2338;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2340 = x2339 + x2206;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2341 = x2340 + x55;
      {
        host_args.at(0) = x2341;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2342 = host_outs.at(0);
        auto x2343 = host_outs.at(1);
        auto x2344 = host_outs.at(2);
        auto x2345 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2342);
          reg = x2342;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2343);
          reg = x2343;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2344);
          reg = x2344;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2345);
          reg = x2345;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2346 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2346 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2347 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2347 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2348 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2348 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2349 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2349 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2341);
        reg = x2341;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2133);
        reg = x2133;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2346);
        reg = x2346;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2347);
        reg = x2347;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2348);
        reg = x2348;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2349);
        reg = x2349;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2350 = x2189 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2351 = x2350 + x2198;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2352 = x2351 + x55;
      {
        host_args.at(0) = x2352;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2353 = host_outs.at(0);
        auto x2354 = host_outs.at(1);
        auto x2355 = host_outs.at(2);
        auto x2356 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2353);
          reg = x2353;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2354);
          reg = x2354;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2355);
          reg = x2355;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2356);
          reg = x2356;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2357 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2357 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2358 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2358 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2359 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2359 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2360 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2360 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2352);
        reg = x2352;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2133);
        reg = x2133;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2357);
        reg = x2357;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2358);
        reg = x2358;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2359);
        reg = x2359;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2360);
        reg = x2360;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2361 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2361 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2362 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2362 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2363 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2363 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2364 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2364 != Fp::invalid());
      host_args.at(0) = x2361;
      host_args.at(1) = x2362;
      host_args.at(2) = x2363;
      host_args.at(3) = x2364;
      host_args.at(4) = x2340;
      host_args.at(5) = x2346;
      host_args.at(6) = x2347;
      host_args.at(7) = x2348;
      host_args.at(8) = x2349;
      host_args.at(9) = x2351;
      host_args.at(10) = x2357;
      host_args.at(11) = x2358;
      host_args.at(12) = x2359;
      host_args.at(13) = x2360;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2365 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x2366 = x102 - x2365;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2367 = x2366 * x2346;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2368 = x2366 * x2347;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2369 = x2366 * x2348;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2370 = x2366 * x2349;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2371 = x600 * x85;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2372 = x597 + x2371;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2373 = x590 - x85;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2374 = x2365 * x2373;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2375 = x2365 * x591;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2376 = x2365 * x594;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2377 = x2365 * x2372;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2378 = x2367 + x2374;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2379 = x2368 + x2375;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2380 = x2369 + x2376;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2381 = x2370 + x2377;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2382 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2382 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x2383 = x102 - x2382;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2384 = x2383 * x2357;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2385 = x2383 * x2358;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2386 = x2383 * x2359;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2387 = x2383 * x2360;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2388 = x2382 * x2361;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2389 = x2382 * x2362;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2390 = x2382 * x2363;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2391 = x2382 * x2364;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2392 = x2384 + x2388;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2393 = x2385 + x2389;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2394 = x2386 + x2390;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2395 = x2387 + x2391;
      host_args.at(0) = x2378;
      host_args.at(1) = x2379;
      host_args.at(2) = x2380;
      host_args.at(3) = x2381;
      host_args.at(4) = x2392;
      host_args.at(5) = x2393;
      host_args.at(6) = x2394;
      host_args.at(7) = x2395;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2396 = Fp(x2381.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2397 = x2396 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2397);
          reg = x2397;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2398 = Fp(x2381.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2399 = x2398 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2399);
          reg = x2399;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2400 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2400 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2401 = x2400 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x2402 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x2402 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2403 = x2402 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2404 = x2401 + x2403;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2405 = x2381 - x2404;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2405 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2406 = Fp(x2395.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2407 = x2406 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2407);
          reg = x2407;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2408 = Fp(x2395.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2409 = x2408 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2409);
          reg = x2409;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2410 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2410 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2411 = x2410 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x2412 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2412 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2413 = x2412 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2414 = x2411 + x2413;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2415 = x2395 - x2414;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2415 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2392);
        reg = x2392;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2393);
        reg = x2393;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2394);
        reg = x2394;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2395);
        reg = x2395;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2416 = Fp(x2378.asUInt32() & x2392.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2417 = Fp(x2379.asUInt32() & x2393.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2418 = Fp(x2380.asUInt32() & x2394.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2419 = Fp(x2381.asUInt32() & x2395.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2416);
          reg = x2416;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2417);
          reg = x2417;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2418);
          reg = x2418;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2419);
          reg = x2419;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2420 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2420 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2421 = x2420 * x2378;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2422 = x2420 * x2379;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2423 = x2420 * x2380;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2424 = x2420 * x2381;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2425 = x2421 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2426 = x2422 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2427 = x2423 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2428 = x2424 + x98;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2429 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2429 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2430 = x2429 * x2392;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2431 = x2429 * x2393;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2432 = x2429 * x2394;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2433 = x2429 * x2395;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2434 = x2425 + x2430;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2435 = x2426 + x2431;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2436 = x2427 + x2432;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2437 = x2428 + x2433;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2438 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2438 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2439 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2439 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2440 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2440 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2441 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2441 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2442 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2442 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2443 = x2438 * x2439;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2444 = x2438 * x2440;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2445 = x2438 * x2441;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2446 = x2438 * x2442;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2447 = x2434 + x2443;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2448 = x2435 + x2444;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2449 = x2436 + x2445;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2450 = x2437 + x2446;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x2451 = x2448 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x2452 = x2447 + x2451;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2453 = Fp(x2452.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2453);
          reg = x2453;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x2454 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2454 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2455 = x2452 - x2454;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2456 = x2455 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2457 = Fp(x2456.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2457);
          reg = x2457;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x2458 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2458 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2459 = x2456 - x2458;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2460 = x2459 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2460);
        reg = x2460;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2461 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2461 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2462 = x2461 + x2449;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x2463 = x2450 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2464 = x2462 + x2463;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2465 = Fp(x2464.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2465);
          reg = x2465;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x2466 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2466 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2467 = x2464 - x2466;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2468 = x2467 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2469 = Fp(x2468.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2469);
          reg = x2469;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x2470 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2470 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2471 = x2468 - x2470;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2472 = x2471 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2472);
        reg = x2472;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2473 = Fp(x2470.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2474 = x2473 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2474);
          reg = x2474;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2475 = Fp(x2470.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2476 = x2475 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2476);
          reg = x2476;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2477 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2477 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2478 = x2477 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x2479 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2479 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2480 = x2479 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2481 = x2478 + x2480;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2482 = x2470 - x2481;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2482 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2483 = x102 - x2410;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2484 = x2400 * x2483;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2485 = x102 - x2477;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2486 = x2484 * x2485;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2487 = x102 - x2400;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2488 = x2487 * x2410;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2489 = x2488 * x2477;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2490 = x2486 + x2489;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2490);
        reg = x2490;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x2491 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2491 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2492 = x2491 + x2477;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2493 = x2491 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2494 = x2493 * x2477;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2495 = x2492 - x2494;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2495);
        reg = x2495;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x2496 = x2458 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x2497 = x2454 + x2496;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2498 = (x2497 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2498);
          reg = x2498;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2499 = inv(x2497);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2499);
          reg = x2499;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2500 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x2500 != Fp::invalid());
      if (x2500 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2497 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2501 = x102 - x2500;
      if (x2501 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2502 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x2502 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2503 = x2497 * x2502;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2504 = x2503 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2504 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x2505 = x2470 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2506 = x2466 + x2505;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x2507 = x2501 * x87;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2508 = x2506 + x2507;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2509 = (x2508 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2509);
          reg = x2509;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2510 = inv(x2508);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2510);
          reg = x2510;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2511 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x2511 != Fp::invalid());
      if (x2511 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2508 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2512 = x102 - x2511;
      if (x2512 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2513 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x2513 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2514 = x2508 * x2513;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2515 = x2514 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2515 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2516 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x2516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2517 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2517 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2518 = x102 - x2517;
      host_args.at(0) = x2454;
      host_args.at(1) = x2458;
      host_args.at(2) = x2466;
      host_args.at(3) = x2470;
      host_args.at(4) = x2511;
      host_args.at(5) = x2516;
      host_args.at(6) = x2518;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2519 = x2214 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2520 = x2217 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2521 = x2519 + x2520;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2522 = x2521 + x2220;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2523 = (x2522 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2523);
          reg = x2523;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2524 = inv(x2522);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2524);
          reg = x2524;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2525 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2525 != Fp::invalid());
      if (x2525 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2522 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2526 = x102 - x2525;
      if (x2526 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2527 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x2527 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2528 = x2522 * x2527;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2529 = x2528 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2529 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x2530 = x603 + x85;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x2531 = x2362 * x97;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2532 = x2361 + x2531;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x2533 = x2363 * x87;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2534 = x2532 + x2533;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x2535 = x2364 * x54;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x2536 = x2535 * x53;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x2537 = x2534 + x2536;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x2538 = x603 + x2537;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:57)
      auto x2539 = x2466 * x87;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2540 = x2497 + x2539;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:14)
      auto x2541 = x2470 * x86;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2542 = x2540 + x2541;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2543 = x2516 * x2530;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2544 = x102 - x2516;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:34)
      auto x2545 = x2544 * x2538;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2546 = x2543 + x2545;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2547 = x2518 * x2538;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:38)
      auto x2548 = x102 - x2518;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:37)
      auto x2549 = x2548 * x2530;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2550 = x2547 + x2549;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2551 = x2518 * x2530;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:36)
      auto x2552 = x2548 * x2538;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2553 = x2551 + x2552;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2554 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2554 != Fp::invalid());
      if (x2554 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2555 = x2222 - x49;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2555 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2556 = x2211 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2556 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2557 = x2182 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2558 = x2185 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2559 = x2557 + x2558;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2560 = x2559 + x2519;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2561 = x2560 + x2520;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2562 = x2175 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2563 = x2220 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2564 = x2562 + x2563;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2565 = x2177 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2566 = x2564 + x2565;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2567 = x2566 + x2179;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2568 = x2175 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2561);
          reg = x2561;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2567);
          reg = x2567;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2568);
          reg = x2568;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2568);
          reg = x2568;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2569 = x2546 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2570 = Fp(x2569.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2570);
            reg = x2570;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2571 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2571 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2572 = x2569 - x2571;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2573 = x2572 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2574 = Fp(x2573.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2574);
            reg = x2574;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2575 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2575 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2576 = x2573 - x2575;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2577 = x2576 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2578 = Fp(x2577.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2578);
            reg = x2578;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2579 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2579 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2580 = x2577 - x2579;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2581 = x2580 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2582 = Fp(x2581.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2582);
            reg = x2582;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2583 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2583 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2584 = x2581 - x2583;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2585 = x2584 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2585);
          reg = x2585;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2586 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2586 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2587 = x102 - x2586;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2588 = x2586 * x2587;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2588);
          reg = x2588;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2589 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2589 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2590 = x99 - x2586;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2591 = x2589 * x2590;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2591 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2592 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2592 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2592);
          reg = x2592;
        }
        if (x101 != 0) {
          host_args.at(0) = x2522;
          host_args.at(1) = x2454;
          host_args.at(2) = x2458;
          host_args.at(3) = x2466;
          host_args.at(4) = x2470;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2593 = x2522 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2454);
            reg = x2454;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2458);
            reg = x2458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          {
            host_args.at(0) = x2593;
            host_args.at(1) = x2454;
            host_args.at(2) = x2458;
            host_args.at(3) = x2466;
            host_args.at(4) = x2470;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2594 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2594 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2595 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2595 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2596 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2596 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2597 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2597 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2593);
            reg = x2593;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2594);
            reg = x2594;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2595);
            reg = x2595;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2596);
            reg = x2596;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2597);
            reg = x2597;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2598 = x2525 + x102;
        if (x2598 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2599 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2599 != Fp::invalid());
      if (x2599 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2600 = x2222 - x49;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2600 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2601 = x2211 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2601 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2602 = x2182 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2603 = x2185 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2604 = x2602 + x2603;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2605 = x2604 + x2519;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2606 = x2605 + x2520;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2607 = x2175 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2608 = x2220 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2609 = x2607 + x2608;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2610 = x2177 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2611 = x2609 + x2610;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2612 = x2611 + x2179;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2613 = x2175 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2606);
          reg = x2606;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2612);
          reg = x2612;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2613);
          reg = x2613;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2613);
          reg = x2613;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2614 = x2550 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2615 = Fp(x2614.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2615);
            reg = x2615;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2616 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2616 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2617 = x2614 - x2616;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2618 = x2617 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2619 = Fp(x2618.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2619);
            reg = x2619;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2620 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2620 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2621 = x2618 - x2620;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2622 = x2621 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2623 = Fp(x2622.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2623);
            reg = x2623;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2624 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2624 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2625 = x2622 - x2624;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2626 = x2625 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2627 = Fp(x2626.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2627);
            reg = x2627;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2628 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2629 = x2626 - x2628;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2630 = x2629 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2630);
          reg = x2630;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2631 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2631 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2632 = x102 - x2631;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2633 = x2631 * x2632;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2633);
          reg = x2633;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2634 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2634 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2635 = x99 - x2631;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2636 = x2634 * x2635;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2636 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2637 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2637 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2637);
          reg = x2637;
        }
        if (x101 != 0) {
          host_args.at(0) = x2522;
          host_args.at(1) = x2454;
          host_args.at(2) = x2458;
          host_args.at(3) = x2466;
          host_args.at(4) = x2470;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2638 = x2522 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2454);
            reg = x2454;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2458);
            reg = x2458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          {
            host_args.at(0) = x2638;
            host_args.at(1) = x2454;
            host_args.at(2) = x2458;
            host_args.at(3) = x2466;
            host_args.at(4) = x2470;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2639 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2639 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2640 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2640 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2641 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2641 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2642 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2642 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2638);
            reg = x2638;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2639);
            reg = x2639;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2640);
            reg = x2640;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2641);
            reg = x2641;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2642);
            reg = x2642;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2643 = x2525 + x102;
        if (x2643 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2644 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2644 != Fp::invalid());
      if (x2644 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2645 = x2222 - x49;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2645 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2646 = x2211 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2646 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2647 = x2182 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2648 = x2185 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2649 = x2647 + x2648;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2650 = x2649 + x2519;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2651 = x2650 + x2520;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2652 = x2175 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2653 = x2220 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2654 = x2652 + x2653;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2655 = x2177 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2656 = x2654 + x2655;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2657 = x2656 + x2179;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2658 = x2175 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2651);
          reg = x2651;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2657);
          reg = x2657;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2658);
          reg = x2658;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2658);
          reg = x2658;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x58);
          reg = x58;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2659 = x2553 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2660 = Fp(x2659.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2660);
            reg = x2660;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2661 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2661 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2662 = x2659 - x2661;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2663 = x2662 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2664 = Fp(x2663.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2664);
            reg = x2664;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2665 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2665 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2666 = x2663 - x2665;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2667 = x2666 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2668 = Fp(x2667.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2668);
            reg = x2668;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2669 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2669 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2670 = x2667 - x2669;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2671 = x2670 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2672 = Fp(x2671.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2672);
            reg = x2672;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2673 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2673 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2674 = x2671 - x2673;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2675 = x2674 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2675);
          reg = x2675;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2676 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2676 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2677 = x102 - x2676;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2678 = x2676 * x2677;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2678);
          reg = x2678;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2679 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2679 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2680 = x99 - x2676;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2681 = x2679 * x2680;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2681 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2682 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2682 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2682);
          reg = x2682;
        }
        if (x101 != 0) {
          host_args.at(0) = x2522;
          host_args.at(1) = x2454;
          host_args.at(2) = x2458;
          host_args.at(3) = x2466;
          host_args.at(4) = x2470;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2683 = x2522 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2454);
            reg = x2454;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2458);
            reg = x2458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          {
            host_args.at(0) = x2683;
            host_args.at(1) = x2454;
            host_args.at(2) = x2458;
            host_args.at(3) = x2466;
            host_args.at(4) = x2470;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2684 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2684 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2685 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2685 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2686 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2686 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2687 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2687 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2683);
            reg = x2683;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2684);
            reg = x2684;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2685);
            reg = x2685;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2686);
            reg = x2686;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2687);
            reg = x2687;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2688 = x2525 + x102;
        if (x2688 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2689 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2689 != Fp::invalid());
      if (x2689 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2690 = x2222 - x48;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2690 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2691 = x2182 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2692 = x2185 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2693 = x2691 + x2692;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2694 = x2693 + x2351;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2695 = x2694 - x2197;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2696 = x2197 * x77;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2697 = x2213 + x2696;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2698 = x2177 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2699 = x2697 + x2698;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2700 = x2699 + x2179;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2701 = x2175 * x50;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2702 = x2701 + x2201;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2703 = x2702 + x2203;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2704 = x2175 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2695);
          reg = x2695;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2700);
          reg = x2700;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2703);
          reg = x2703;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2704);
          reg = x2704;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2705 = x2538 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2706 = Fp(x2705.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2706);
            reg = x2706;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2707 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2707 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2708 = x2705 - x2707;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2709 = x2708 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2710 = Fp(x2709.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2710);
            reg = x2710;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2711 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2711 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2712 = x2709 - x2711;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2713 = x2712 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2714 = Fp(x2713.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2714);
            reg = x2714;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2715 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2715 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2716 = x2713 - x2715;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2717 = x2716 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2718 = Fp(x2717.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2718);
            reg = x2718;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2719 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2719 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2720 = x2717 - x2719;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2721 = x2720 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2721);
          reg = x2721;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2722 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2722 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2723 = x102 - x2722;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2724 = x2722 * x2723;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2724);
          reg = x2724;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2725 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2725 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2726 = x99 - x2722;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2727 = x2725 * x2726;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2727 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2728 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2728 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2728);
          reg = x2728;
        }
        if (x2526 != 0) {
          host_args.at(0) = x2522;
          host_args.at(1) = x590;
          host_args.at(2) = x591;
          host_args.at(3) = x594;
          host_args.at(4) = x2372;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2729 = x2522 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x590);
            reg = x590;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x591);
            reg = x591;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x594);
            reg = x594;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2372);
            reg = x2372;
          }
          {
            host_args.at(0) = x2729;
            host_args.at(1) = x590;
            host_args.at(2) = x591;
            host_args.at(3) = x594;
            host_args.at(4) = x2372;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2730 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2730 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2731 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2731 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2732 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2732 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2733 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2733 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2729);
            reg = x2729;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2730);
            reg = x2730;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2731);
            reg = x2731;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2732);
            reg = x2732;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2733);
            reg = x2733;
          }
        }
        if (x2525 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2734 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2734 != Fp::invalid());
      if (x2734 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2735 = x2222 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2735 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2211 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2736 = x2182 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2737 = x2185 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2738 = x2736 + x2737;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2739 = x2738 + x2351;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2740 = x2175 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2741 = x2177 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2742 = x2740 + x2741;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2743 = x2742 + x2179;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2744 = x2175 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2739);
          reg = x2739;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2743);
          reg = x2743;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2744);
          reg = x2744;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2744);
          reg = x2744;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2745 = x2542 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2746 = Fp(x2745.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2746);
            reg = x2746;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2747 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2747 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2748 = x2745 - x2747;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2749 = x2748 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2750 = Fp(x2749.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2750);
            reg = x2750;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2751 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2751 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2752 = x2749 - x2751;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2753 = x2752 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2754 = Fp(x2753.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2754);
            reg = x2754;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2755 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2755 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2756 = x2753 - x2755;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2757 = x2756 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2758 = Fp(x2757.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2758);
            reg = x2758;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2759 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2759 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2760 = x2757 - x2759;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2761 = x2760 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2761);
          reg = x2761;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2762 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2762 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2763 = x102 - x2762;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2764 = x2762 * x2763;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2764);
          reg = x2764;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2765 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2765 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2766 = x99 - x2762;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2767 = x2765 * x2766;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2767 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2768 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2768 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2768);
          reg = x2768;
        }
        if (x2526 != 0) {
          host_args.at(0) = x2522;
          host_args.at(1) = x590;
          host_args.at(2) = x591;
          host_args.at(3) = x594;
          host_args.at(4) = x2372;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2769 = x2522 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x590);
            reg = x590;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x591);
            reg = x591;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x594);
            reg = x594;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2372);
            reg = x2372;
          }
          {
            host_args.at(0) = x2769;
            host_args.at(1) = x590;
            host_args.at(2) = x591;
            host_args.at(3) = x594;
            host_args.at(4) = x2372;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2770 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2770 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2771 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2771 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2772 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2772 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2773 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2773 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2769);
            reg = x2769;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2770);
            reg = x2770;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2771);
            reg = x2771;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2772);
            reg = x2772;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2773);
            reg = x2773;
          }
        }
        if (x2525 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2774 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2774 != Fp::invalid());
      if (x2774 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2775 = x2222 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2775 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2213);
          reg = x2213;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2204);
          reg = x2204;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2190);
          reg = x2190;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2776 = x2530 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2777 = Fp(x2776.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2777);
            reg = x2777;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2778 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2778 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2779 = x2776 - x2778;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2780 = x2779 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2781 = Fp(x2780.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2781);
            reg = x2781;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2782 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2782 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2783 = x2780 - x2782;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2784 = x2783 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2785 = Fp(x2784.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2785);
            reg = x2785;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2786 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2786 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2787 = x2784 - x2786;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2788 = x2787 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2789 = Fp(x2788.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2789);
            reg = x2789;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2790 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2790 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2791 = x2788 - x2790;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2792 = x2791 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2792);
          reg = x2792;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2793 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2793 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2794 = x102 - x2793;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2795 = x2793 * x2794;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2795);
          reg = x2795;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2796 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2796 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2797 = x99 - x2793;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2798 = x2796 * x2797;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2798 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2799 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2799 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2799);
          reg = x2799;
        }
        if (x2526 != 0) {
          host_args.at(0) = x2522;
          host_args.at(1) = x2454;
          host_args.at(2) = x2458;
          host_args.at(3) = x2466;
          host_args.at(4) = x2470;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2800 = x2522 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2454);
            reg = x2454;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2458);
            reg = x2458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          {
            host_args.at(0) = x2800;
            host_args.at(1) = x2454;
            host_args.at(2) = x2458;
            host_args.at(3) = x2466;
            host_args.at(4) = x2470;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2801 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2801 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2802 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2802 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2803 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2803 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2804 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2804 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2800);
            reg = x2800;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2801);
            reg = x2801;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2802);
            reg = x2802;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2803);
            reg = x2803;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2804);
            reg = x2804;
          }
        }
        if (x2525 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x2805 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2805 != Fp::invalid());
      if (x2805 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2806 = x2222 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2806 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2213);
          reg = x2213;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2204);
          reg = x2204;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2190);
          reg = x2190;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2807 = x2530 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2808 = Fp(x2807.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2808);
            reg = x2808;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2809 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2809 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2810 = x2807 - x2809;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2811 = x2810 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2812 = Fp(x2811.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2812);
            reg = x2812;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2813 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2813 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2814 = x2811 - x2813;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2815 = x2814 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2816 = Fp(x2815.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2816);
            reg = x2816;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2817 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2817 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2818 = x2815 - x2817;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2819 = x2818 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2820 = Fp(x2819.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2820);
            reg = x2820;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2821 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2821 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2822 = x2819 - x2821;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2823 = x2822 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2823);
          reg = x2823;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2824 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2824 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2825 = x102 - x2824;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2826 = x2824 * x2825;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2826);
          reg = x2826;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2827 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2827 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2828 = x99 - x2824;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2829 = x2827 * x2828;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2830 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2830 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2830);
          reg = x2830;
        }
        if (x2526 != 0) {
          host_args.at(0) = x2522;
          host_args.at(1) = x2454;
          host_args.at(2) = x2458;
          host_args.at(3) = x2466;
          host_args.at(4) = x2470;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x2831 = x2522 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2454);
            reg = x2454;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2458);
            reg = x2458;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2466);
            reg = x2466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2470);
            reg = x2470;
          }
          {
            host_args.at(0) = x2831;
            host_args.at(1) = x2454;
            host_args.at(2) = x2458;
            host_args.at(3) = x2466;
            host_args.at(4) = x2470;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2832 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2832 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2833 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2833 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2834 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2834 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2835 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2835 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2831);
            reg = x2831;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2133);
            reg = x2133;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2833);
            reg = x2833;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2834);
            reg = x2834;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2835);
            reg = x2835;
          }
        }
        if (x2525 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
    auto x2836 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x2836 != Fp::invalid());
    if (x2836 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2837 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2837 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x2838 = x603 * x83;
      {
        host_args.at(0) = x2838;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2839 = host_outs.at(0);
        auto x2840 = host_outs.at(1);
        auto x2841 = host_outs.at(2);
        auto x2842 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2839);
          reg = x2839;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2840);
          reg = x2840;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2841);
          reg = x2841;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2842);
          reg = x2842;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2843 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2844 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2845 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2846 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2846 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2838);
        reg = x2838;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2837);
        reg = x2837;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2843);
        reg = x2843;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2844);
        reg = x2844;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2845);
        reg = x2845;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2846);
        reg = x2846;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2847 = Fp(x2846.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2848 = x2847 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2848);
          reg = x2848;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2849 = Fp(x2846.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2850 = x2849 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2850);
          reg = x2850;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2851 = Fp(x2846.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2852 = x2851 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2852);
          reg = x2852;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2853 = Fp(x2846.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2854 = x2853 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2854);
          reg = x2854;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2855 = Fp(x2846.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2856 = x2855 * x63;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2856);
          reg = x2856;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2857 = Fp(x2846.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2857);
          reg = x2857;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2858 = Fp(x2845.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2859 = x2858 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2859);
          reg = x2859;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2860 = Fp(x2845.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2861 = x2860 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2861);
          reg = x2861;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2862 = Fp(x2845.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2863 = x2862 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2863);
          reg = x2863;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2864 = Fp(x2845.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2865 = x2864 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2865);
          reg = x2865;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2866 = Fp(x2845.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2866);
          reg = x2866;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2867 = Fp(x2844.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2868 = x2867 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2868);
          reg = x2868;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2869 = Fp(x2844.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2870 = x2869 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2870);
          reg = x2870;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2871 = Fp(x2844.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2872 = x2871 * x65;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2872);
          reg = x2872;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2873 = Fp(x2844.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2874 = x2873 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2874);
          reg = x2874;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2875 = Fp(x2844.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2875);
          reg = x2875;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2876 = Fp(x2843.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2877 = x2876 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2877);
          reg = x2877;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2878 = Fp(x2843.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2878);
          reg = x2878;
        }
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2879 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2879 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2880 = x2879 * x62;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2881 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2881 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2882 = x2881 * x66;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2883 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2883 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2884 = x2883 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2885 = x2882 + x2884;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2886 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2887 = x2886 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2888 = x2885 + x2887;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2889 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2889 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2890 = x2888 + x2889;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2891 = x2880 + x2890;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2892 = x2891 * x99;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2893 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2893 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2894 = x2892 + x2893;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2895 = x2846 - x2894;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2895 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2896 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2896 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2897 = x2896 * x77;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2898 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2898 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2899 = x2898 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2900 = x2897 + x2899;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2901 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2901 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2902 = x2900 + x2901;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2903 = x2902 * x66;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2904 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2904 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2905 = x2904 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2906 = x2903 + x2905;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2907 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2907 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2908 = x2906 + x2907;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2909 = x2845 - x2908;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2909 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2910 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2910 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2911 = x2910 * x71;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2912 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2912 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2913 = x2912 * x85;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2914 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2914 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2915 = x2913 + x2914;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2916 = x2915 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2917 = x2911 + x2916;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2918 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2918 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2919 = x2918 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2920 = x2917 + x2919;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2921 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2921 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2922 = x2920 + x2921;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2923 = x2844 - x2922;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2923 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2924 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2924 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2925 = x2924 * x71;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x2926 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2926 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2927 = x2925 + x2926;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2928 = x2843 - x2927;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2928 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2843;
        host_args.at(1) = x2844;
        host_args.at(2) = x2845;
        host_args.at(3) = x2846;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2929 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2930 = (x2929 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2930);
            reg = x2930;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2931 = x2929 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2932 = (x2931 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2932);
            reg = x2932;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2933 = x2929 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2934 = (x2933 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2934);
            reg = x2934;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2935 = x2929 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2936 = (x2935 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2936);
            reg = x2936;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2937 = x2929 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2938 = (x2937 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2938);
            reg = x2938;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2939 = x2929 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2940 = (x2939 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2940);
            reg = x2940;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2941 = x2929 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2942 = (x2941 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2942);
            reg = x2942;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2943 = x2929 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2944 = (x2943 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2944);
            reg = x2944;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2945 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2945 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2946 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2946 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2947 = x2946 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2948 = x2945 + x2947;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2949 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2949 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2950 = x2949 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2951 = x2948 + x2950;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2952 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x2952 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2953 = x2952 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2954 = x2951 + x2953;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2955 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x2955 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2956 = x2955 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2957 = x2954 + x2956;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2958 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x2958 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2959 = x2958 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2960 = x2957 + x2959;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x2961 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2961 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2962 = x2961 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2963 = x2960 + x2962;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2964 = x2963 - x2929;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2964 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x2965 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2965 != Fp::invalid());
        if (x2965 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2966 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2967 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2968 = x2966 + x2967;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2969 = x2893 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2970 = x2969 + x2902;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2971 = x2968 + x2970;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2972 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2973 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2974 = x2972 + x2973;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2975 = x2974 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2976 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2971);
            reg = x2971;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2975);
            reg = x2975;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2976);
            reg = x2976;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2976);
            reg = x2976;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x2977 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2977 != Fp::invalid());
        if (x2977 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2978 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2979 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2980 = x2978 + x2979;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2981 = x2893 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2982 = x2981 + x2902;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2983 = x2980 + x2982;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2984 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2985 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2986 = x2984 + x2985;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2987 = x2986 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2988 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2983);
            reg = x2983;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2987);
            reg = x2987;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2988);
            reg = x2988;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2988);
            reg = x2988;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x2989 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2989 != Fp::invalid());
        if (x2989 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2990 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2991 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2992 = x2990 + x2991;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2993 = x2893 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2994 = x2993 + x2902;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2995 = x2992 + x2994;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2996 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2997 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2998 = x2996 + x2997;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2999 = x2998 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3000 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2995);
            reg = x2995;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2999);
            reg = x2999;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3000);
            reg = x3000;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3000);
            reg = x3000;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3001 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3001 != Fp::invalid());
        if (x3001 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3002 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3003 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3004 = x3002 + x3003;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3005 = x2893 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3006 = x3005 + x2902;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3007 = x3004 + x3006;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3008 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3009 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3010 = x3008 + x3009;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3011 = x3010 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3012 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3007);
            reg = x3007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3012);
            reg = x3012;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3012);
            reg = x3012;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3013 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3013 != Fp::invalid());
        if (x3013 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3014 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3015 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3016 = x3014 + x3015;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3017 = x2893 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3018 = x3017 + x2902;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3019 = x3016 + x3018;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3020 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3021 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3022 = x3020 + x3021;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3023 = x3022 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3024 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3019);
            reg = x3019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3023);
            reg = x3023;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3024);
            reg = x3024;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3024);
            reg = x3024;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3025 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3025 != Fp::invalid());
        if (x3025 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3026 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3027 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3028 = x3026 + x3027;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3029 = x2918 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3030 = x2921 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3031 = x3029 + x3030;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3032 = x3031 + x2924;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3033 = x3028 + x3032;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3034 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3035 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3036 = x3034 + x3035;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3037 = x3036 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3038 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3033);
            reg = x3033;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3037);
            reg = x3037;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3038);
            reg = x3038;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3038);
            reg = x3038;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3039 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3039 != Fp::invalid());
        if (x3039 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3040 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3041 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3042 = x3040 + x3041;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3043 = x2918 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3044 = x2921 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3045 = x3043 + x3044;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3046 = x3045 + x2924;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3047 = x3042 + x3046;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3048 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3049 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3050 = x3048 + x3049;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3051 = x3050 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3052 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3047);
            reg = x3047;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3051);
            reg = x3051;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3052);
            reg = x3052;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3052);
            reg = x3052;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3053 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x3053 != Fp::invalid());
        if (x3053 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3054 = x2886 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3055 = x2889 * x68;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3056 = x3054 + x3055;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3057 = x2918 * x77;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3058 = x2921 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3059 = x3057 + x3058;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3060 = x3059 + x2924;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3061 = x3056 + x3060;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3062 = x2879 * x56;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3063 = x2881 * x99;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3064 = x3062 + x3063;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3065 = x3064 + x2883;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3066 = x2879 * x98;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3061);
            reg = x3061;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3065);
            reg = x3065;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3066);
            reg = x3066;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3066);
            reg = x3066;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3067 = x2904 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3068 = x2907 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3069 = x3067 + x3068;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3070 = x3069 + x2910;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3071 = x3070 + x55;
      {
        host_args.at(0) = x3071;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3072 = host_outs.at(0);
        auto x3073 = host_outs.at(1);
        auto x3074 = host_outs.at(2);
        auto x3075 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3072);
          reg = x3072;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3073);
          reg = x3073;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3074);
          reg = x3074;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3075);
          reg = x3075;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3076 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3076 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3077 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3077 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3078 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3078 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3079 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3079 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3071);
        reg = x3071;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2837);
        reg = x2837;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3076);
        reg = x3076;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3077);
        reg = x3077;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3078);
        reg = x3078;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3079);
        reg = x3079;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3080 = x2893 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3081 = x3080 + x2902;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3082 = x3081 + x55;
      {
        host_args.at(0) = x3082;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3083 = host_outs.at(0);
        auto x3084 = host_outs.at(1);
        auto x3085 = host_outs.at(2);
        auto x3086 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3083);
          reg = x3083;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3084);
          reg = x3084;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3085);
          reg = x3085;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3086);
          reg = x3086;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3087 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3087 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3088 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3089 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3089 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3090 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3090 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3082);
        reg = x3082;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2837);
        reg = x2837;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3087);
        reg = x3087;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3088);
        reg = x3088;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3089);
        reg = x3089;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3090);
        reg = x3090;
      }
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3091 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3091 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3092 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3092 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3093 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3093 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3094 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3094 != Fp::invalid());
      host_args.at(0) = x3091;
      host_args.at(1) = x3092;
      host_args.at(2) = x3093;
      host_args.at(3) = x3094;
      host_args.at(4) = x3070;
      host_args.at(5) = x3076;
      host_args.at(6) = x3077;
      host_args.at(7) = x3078;
      host_args.at(8) = x3079;
      host_args.at(9) = x3081;
      host_args.at(10) = x3087;
      host_args.at(11) = x3088;
      host_args.at(12) = x3089;
      host_args.at(13) = x3090;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3095 = x2918 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3096 = x2921 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3097 = x3095 + x3096;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3098 = x3097 + x2924;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3099 = (x3098 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3099);
          reg = x3099;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3100 = inv(x3098);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3100);
          reg = x3100;
        }
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3101 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3101 != Fp::invalid());
      if (x3101 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x3098 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x3102 = x102 - x3101;
      if (x3102 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3103 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3103 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3104 = x3098 * x3103;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3105 = x3104 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x3105 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":48:17)
        auto x3106 = x3076 + x3091;
        // loc("cirgen/circuit/rv32im/memio.cpp":49:18)
        auto x3107 = Fp(x3106.asUInt32() & x84.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3108 = (x3107 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3108);
            reg = x3108;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3109 = x3107 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3110 = (x3109 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3110);
            reg = x3110;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3111 = x3107 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3112 = (x3111 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3112);
            reg = x3112;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3113 = x3107 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3114 = (x3113 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3114);
            reg = x3114;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3115 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3115 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3116 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3116 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3117 = x3116 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3118 = x3115 + x3117;
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3119 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3119 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3120 = x3119 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3121 = x3118 + x3120;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3122 = x3121 - x3107;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3122 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("cirgen/circuit/rv32im/memio.cpp":50:20)
        auto x3123 = Fp(x3106.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:19)
        auto x3124 = x3123 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x3125 = Fp(x3124.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3125);
            reg = x3125;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3126 = x3106 - x3121;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3127 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x3127 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":51:33)
        auto x3128 = x3127 * x97;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3129 = x3126 - x3128;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3129);
          reg = x3129;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:22)
        auto x3130 = x3129 * x83;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3130);
          reg = x3130;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3131 = x3077 + x3092;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3132 = x3131 + x3127;
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3133 = Fp(x3132.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3133);
          reg = x3133;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:25)
        auto x3134 = Fp(x3132.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:24)
        auto x3135 = x3134 * x96;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3135);
          reg = x3135;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3136 = x3078 + x3093;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3137 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3137 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3138 = x3136 + x3137;
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3139 = Fp(x3138.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3139);
          reg = x3139;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:25)
        auto x3140 = Fp(x3138.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:24)
        auto x3141 = x3140 * x96;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3141);
          reg = x3141;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3142 = x3079 + x3094;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3143 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3143 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3144 = x3142 + x3143;
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3145 = Fp(x3144.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3145);
          reg = x3145;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:24)
        auto x3146 = Fp(x3144.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:23)
        auto x3147 = x3146 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3147);
          reg = x3147;
        }
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x3148 = Fp(x3141.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3148);
            reg = x3148;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3149 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3149 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3150 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3150 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:16)
      auto x3151 = x3150 * x85;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3152 = x3149 - x3151;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3152 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3153 = x3076 + x3091;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3154 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3154 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3155 = x3154 * x97;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3156 = x3155 + x3149;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3157 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3157 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3158 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3158 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x3159 = x3158 * x99;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x3160 = x3157 + x3159;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3161 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3161 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x3162 = x3161 * x84;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x3163 = x3160 + x3162;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3164 = x3156 + x3163;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3165 = x3153 - x3164;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3165 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3166 = x3077 + x3092;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3167 = x3166 + x3154;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3168 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3169 = x3168 * x97;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3170 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3171 = x3169 + x3170;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3172 = x3167 - x3171;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3172 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3173 = x3078 + x3093;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3174 = x3173 + x3168;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3175 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3176 = x3175 * x97;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3177 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3178 = x3176 + x3177;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3179 = x3174 - x3178;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      if (x3179 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:72");
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3180 = x3079 + x3094;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3181 = x3180 + x3175;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3182 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3183 = x3182 * x97;
      // loc("Top/Mux/4/Mux/3/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3184 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3184 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:63)
      auto x3185 = x3184 * x85;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3186 = x3183 + x3185;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3187 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3188 = x3186 + x3187;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3189 = x3181 - x3188;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      if (x3189 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:74");
      // loc("cirgen/circuit/rv32im/memio.cpp":77:15)
      auto x3190 = x102 - x3184;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3191 = x3184 * x3190;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:28)
      auto x3192 = x99 - x3184;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3193 = x3191 * x3192;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      if (x3193 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:77");
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3194 = x3184 * x86;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:41)
      auto x3195 = x3187 * x44;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3196 = x3194 + x3195;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:68)
      auto x3197 = x3177 * x43;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3198 = x3196 + x3197;
      // loc("cirgen/circuit/rv32im/memio.cpp":81:14)
      auto x3199 = x3170 * x62;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3200 = x3198 + x3199;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3201 = x3200 + x3150;
      {
        host_args.at(0) = x3201;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3202 = host_outs.at(0);
        auto x3203 = host_outs.at(1);
        auto x3204 = host_outs.at(2);
        auto x3205 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3202);
          reg = x3202;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3203);
          reg = x3203;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3204);
          reg = x3204;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3205);
          reg = x3205;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3206 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3206 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3207 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3207 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3208 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3208 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3209 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3209 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3201);
        reg = x3201;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2837);
        reg = x2837;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3206);
        reg = x3206;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3207);
        reg = x3207;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3208);
        reg = x3208;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3209);
        reg = x3209;
      }
      host_args.at(0) = x3201;
      host_args.at(1) = x3163;
      host_args.at(2) = x3206;
      host_args.at(3) = x3207;
      host_args.at(4) = x3208;
      host_args.at(5) = x3209;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":85:17)
      auto x3210 = x603 + x85;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3211 = x3210 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3212 = Fp(x3211.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3212);
          reg = x3212;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3213 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3213 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3214 = x3211 - x3213;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3215 = x3214 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3216 = Fp(x3215.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3216);
          reg = x3216;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3217 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3217 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3218 = x3215 - x3217;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3219 = x3218 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3220 = Fp(x3219.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3220);
          reg = x3220;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3221 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3221 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3222 = x3219 - x3221;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3223 = x3222 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3224 = Fp(x3223.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3224);
          reg = x3224;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3225 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3225 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3226 = x3223 - x3225;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3227 = x3226 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3227);
        reg = x3227;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3228 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3228 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3229 = x102 - x3228;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3230 = x3228 * x3229;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3230);
        reg = x3230;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3231 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x3231 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3232 = x99 - x3228;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3233 = x3231 * x3232;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3233 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":86:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x82);
        reg = x82;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3234 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3234 != Fp::invalid());
      if (x3234 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3235 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3235 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3236 = x3235 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3236 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3237 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3237 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3238 = x3237 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3239 = x3238 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3239 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3240 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3240 != Fp::invalid());
        if (x3240 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3241 = Fp(x3206.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3241);
              reg = x3241;
            }
          }
        }
        if (x3157 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3242 = Fp(x3207.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3242);
              reg = x3242;
            }
          }
        }
        if (x3158 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3243 = Fp(x3208.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3243);
              reg = x3243;
            }
          }
        }
        if (x3161 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3244 = Fp(x3209.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3244);
              reg = x3244;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3245 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3245 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3246 = Fp(x3245.asUInt32() & x71.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3247 = x3246 * x70;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3247);
            reg = x3247;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3248 = Fp(x3245.asUInt32() & x59.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3249 = x3248 * x99;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3249);
            reg = x3249;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3250 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3250 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3251 = x102 - x3250;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3252 = x3250 * x3251;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3252 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3253 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3253 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3254 = x3250 * x71;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3255 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3255 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3256 = x3255 * x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3257 = x3254 + x3256;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3258 = x3253 - x3257;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3258 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3259 = x3250 * x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3260 = x3240 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3261 = x3157 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3262 = x3260 + x3261;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3263 = x3158 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3264 = x3262 + x3263;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3265 = x3161 * x3209;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3266 = x3264 + x3265;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3266);
          reg = x3266;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3259);
          reg = x3259;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3259);
          reg = x3259;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3259);
          reg = x3259;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3267 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3267 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3268 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3268 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3269 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3270 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3270 != Fp::invalid());
        host_args.at(0) = x3259;
        host_args.at(1) = x3267;
        host_args.at(2) = x3268;
        host_args.at(3) = x3269;
        host_args.at(4) = x3270;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3102 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3271 = x3098 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3267);
            reg = x3267;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3268);
            reg = x3268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3269);
            reg = x3269;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3270);
            reg = x3270;
          }
          {
            host_args.at(0) = x3271;
            host_args.at(1) = x3267;
            host_args.at(2) = x3268;
            host_args.at(3) = x3269;
            host_args.at(4) = x3270;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3272 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3272 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3273 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3273 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3274 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3274 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3275 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3275 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3271);
            reg = x3271;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3272);
            reg = x3272;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3273);
            reg = x3273;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3274);
            reg = x3274;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3275);
            reg = x3275;
          }
        }
        if (x3101 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3276 = x2926 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3276 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x2915 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3277 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3278 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3279 = x3277 + x3278;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3280 = x3279 + x3081;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3281 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3282 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3283 = x3281 + x3282;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3284 = x3283 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3285 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3280);
          reg = x3280;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3284);
          reg = x3284;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3285);
          reg = x3285;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3285);
          reg = x3285;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3286 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3286 != Fp::invalid());
      if (x3286 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3287 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3287 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3288 = x3287 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3288 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3289 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3289 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3290 = x3289 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3291 = x3290 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3291 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3292 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3292 != Fp::invalid());
        if (x3292 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3293 = Fp(x3207.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3293);
              reg = x3293;
            }
          }
        }
        if (x3158 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3294 = Fp(x3209.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3294);
              reg = x3294;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3295 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3295 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3296 = Fp(x3295.asUInt32() & x71.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3297 = x3296 * x70;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3297);
            reg = x3297;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3298 = Fp(x3295.asUInt32() & x59.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3299 = x3298 * x99;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3299);
            reg = x3299;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3300 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3300 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3301 = x102 - x3300;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3302 = x3300 * x3301;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3302 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3303 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3303 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3304 = x3300 * x71;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3305 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3305 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3306 = x3305 * x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3307 = x3304 + x3306;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3308 = x3303 - x3307;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3308 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3309 = x3300 * x98;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3310 = x3292 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3311 = x3158 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3312 = x3310 + x3311;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3313 = x3292 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3314 = x3158 * x3209;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3315 = x3313 + x3314;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3312);
          reg = x3312;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3315);
          reg = x3315;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3309);
          reg = x3309;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3309);
          reg = x3309;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3316 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3316 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3317 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3317 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3318 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3318 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3319 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3319 != Fp::invalid());
        host_args.at(0) = x3309;
        host_args.at(1) = x3316;
        host_args.at(2) = x3317;
        host_args.at(3) = x3318;
        host_args.at(4) = x3319;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3102 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3320 = x3098 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3316);
            reg = x3316;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3317);
            reg = x3317;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3318);
            reg = x3318;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3319);
            reg = x3319;
          }
          {
            host_args.at(0) = x3320;
            host_args.at(1) = x3316;
            host_args.at(2) = x3317;
            host_args.at(3) = x3318;
            host_args.at(4) = x3319;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3321 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3321 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3322 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3322 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3323 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3323 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3324 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3324 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3320);
            reg = x3320;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3321);
            reg = x3321;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3322);
            reg = x3322;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3323);
            reg = x3323;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3324);
            reg = x3324;
          }
        }
        if (x3101 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3325 = x2926 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3325 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3326 = x2915 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3326 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3327 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3328 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3329 = x3327 + x3328;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3330 = x3329 + x3081;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3331 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3332 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3333 = x3331 + x3332;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3334 = x3333 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3335 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3330);
          reg = x3330;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3334);
          reg = x3334;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3335);
          reg = x3335;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3335);
          reg = x3335;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3336 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3336 != Fp::invalid());
      if (x3336 != 0) {
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3337 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3337 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3338 = x3337 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3338 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3339 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3339 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3340 = x3339 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3341 = x3340 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3341 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3342 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3342 != Fp::invalid());
        if (x3342 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3343 = Fp(x3209.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3343);
              reg = x3343;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3344 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3344 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3345 = Fp(x3344.asUInt32() & x71.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3346 = x3345 * x70;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3346);
            reg = x3346;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3347 = Fp(x3344.asUInt32() & x59.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3348 = x3347 * x99;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3348);
            reg = x3348;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3349 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3349 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3350 = x102 - x3349;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3351 = x3349 * x3350;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3351 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3352 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3352 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3353 = x3349 * x71;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3354 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3354 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3355 = x3354 * x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3356 = x3353 + x3355;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3357 = x3352 - x3356;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3357 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3358 = x3342 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3359 = x3342 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3360 = x3342 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3361 = x3342 * x3209;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3358);
          reg = x3358;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3359);
          reg = x3359;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3360);
          reg = x3360;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3361);
          reg = x3361;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3362 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3362 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3363 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3363 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3364 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3364 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3365 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3365 != Fp::invalid());
        host_args.at(0) = x101;
        host_args.at(1) = x3362;
        host_args.at(2) = x3363;
        host_args.at(3) = x3364;
        host_args.at(4) = x3365;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3102 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3366 = x3098 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3362);
            reg = x3362;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3363);
            reg = x3363;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3364);
            reg = x3364;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3365);
            reg = x3365;
          }
          {
            host_args.at(0) = x3366;
            host_args.at(1) = x3362;
            host_args.at(2) = x3363;
            host_args.at(3) = x3364;
            host_args.at(4) = x3365;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3367 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3367 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3368 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3368 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3369 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3369 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3370 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3370 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3366);
            reg = x3366;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3367);
            reg = x3367;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3368);
            reg = x3368;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3369);
            reg = x3369;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3370);
            reg = x3370;
          }
        }
        if (x3101 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3371 = x2926 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3371 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3372 = x2915 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3372 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3373 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3374 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3375 = x3373 + x3374;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3376 = x3375 + x3081;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3377 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3378 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3379 = x3377 + x3378;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3380 = x3379 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3381 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3376);
          reg = x3376;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3380);
          reg = x3380;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3381);
          reg = x3381;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3381);
          reg = x3381;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3382 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3382 != Fp::invalid());
      if (x3382 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3383 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3383 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3384 = x3383 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3384 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3385 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3385 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3386 = x3385 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3387 = x3386 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3387 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3388 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3388 != Fp::invalid());
        if (x3388 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3389 = Fp(x3206.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3389);
              reg = x3389;
            }
          }
        }
        if (x3157 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3390 = Fp(x3207.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3390);
              reg = x3390;
            }
          }
        }
        if (x3158 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3391 = Fp(x3208.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3391);
              reg = x3391;
            }
          }
        }
        if (x3161 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3392 = Fp(x3209.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3392);
              reg = x3392;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3393 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3393 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3394 = Fp(x3393.asUInt32() & x71.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3395 = x3394 * x70;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3395);
            reg = x3395;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3396 = Fp(x3393.asUInt32() & x59.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3397 = x3396 * x99;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3397);
            reg = x3397;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3398 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3398 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3399 = x102 - x3398;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3400 = x3398 * x3399;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3400 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3401 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3401 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3402 = x3398 * x71;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3403 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3403 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3404 = x3403 * x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3405 = x3402 + x3404;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3406 = x3401 - x3405;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3406 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3407 = x3388 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3408 = x3157 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3409 = x3407 + x3408;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3410 = x3158 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3411 = x3409 + x3410;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3412 = x3161 * x3209;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3413 = x3411 + x3412;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3413);
          reg = x3413;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3414 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3415 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3416 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3416 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3417 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3417 != Fp::invalid());
        host_args.at(0) = x101;
        host_args.at(1) = x3414;
        host_args.at(2) = x3415;
        host_args.at(3) = x3416;
        host_args.at(4) = x3417;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3102 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3418 = x3098 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3414);
            reg = x3414;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3415);
            reg = x3415;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3416);
            reg = x3416;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3417);
            reg = x3417;
          }
          {
            host_args.at(0) = x3418;
            host_args.at(1) = x3414;
            host_args.at(2) = x3415;
            host_args.at(3) = x3416;
            host_args.at(4) = x3417;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3419 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3419 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3420 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3420 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3421 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3421 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3422 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3422 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3418);
            reg = x3418;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3419);
            reg = x3419;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3420);
            reg = x3420;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3421);
            reg = x3421;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3422);
            reg = x3422;
          }
        }
        if (x3101 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3423 = x2926 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3423 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3424 = x2915 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3424 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3425 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3426 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3427 = x3425 + x3426;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3428 = x3427 + x3081;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3429 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3430 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3431 = x3429 + x3430;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3432 = x3431 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3433 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3428);
          reg = x3428;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3432);
          reg = x3432;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3433);
          reg = x3433;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3433);
          reg = x3433;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3434 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3434 != Fp::invalid());
      if (x3434 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3435 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3435 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3436 = x3435 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3436 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3437 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3437 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3438 = x3437 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3439 = x3438 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3439 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3440 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3440 != Fp::invalid());
        if (x3440 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3441 = Fp(x3207.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3441);
              reg = x3441;
            }
          }
        }
        if (x3158 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3442 = Fp(x3209.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3442);
              reg = x3442;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3443 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3443 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3444 = Fp(x3443.asUInt32() & x71.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3445 = x3444 * x70;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3445);
            reg = x3445;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3446 = Fp(x3443.asUInt32() & x59.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3447 = x3446 * x99;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3447);
            reg = x3447;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3448 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3448 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3449 = x102 - x3448;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3450 = x3448 * x3449;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3450 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3451 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3451 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3452 = x3448 * x71;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3453 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3453 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3454 = x3453 * x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3455 = x3452 + x3454;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3456 = x3451 - x3455;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3456 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3457 = x3440 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3458 = x3158 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3459 = x3457 + x3458;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3460 = x3440 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3461 = x3158 * x3209;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3462 = x3460 + x3461;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3459);
          reg = x3459;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3462);
          reg = x3462;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3463 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3464 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3464 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3465 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3465 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3466 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3466 != Fp::invalid());
        host_args.at(0) = x101;
        host_args.at(1) = x3463;
        host_args.at(2) = x3464;
        host_args.at(3) = x3465;
        host_args.at(4) = x3466;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3102 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3467 = x3098 + x55;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3463);
            reg = x3463;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3464);
            reg = x3464;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3465);
            reg = x3465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3466);
            reg = x3466;
          }
          {
            host_args.at(0) = x3467;
            host_args.at(1) = x3463;
            host_args.at(2) = x3464;
            host_args.at(3) = x3465;
            host_args.at(4) = x3466;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3468 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3468 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3469 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3469 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3470 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3470 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3471 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3471 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3467);
            reg = x3467;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2837);
            reg = x2837;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3468);
            reg = x3468;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3469);
            reg = x3469;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3470);
            reg = x3470;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3471);
            reg = x3471;
          }
        }
        if (x3101 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3472 = x2926 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3472 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3473 = x2915 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3473 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3474 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3475 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3476 = x3474 + x3475;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3477 = x3476 + x3081;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3478 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3479 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3480 = x3478 + x3479;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3481 = x3480 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3482 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3477);
          reg = x3477;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3481);
          reg = x3481;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3482);
          reg = x3482;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3482);
          reg = x3482;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3483 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3483 != Fp::invalid());
      if (x3483 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3484 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3484 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3485 = x3484 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3485 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3486 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3486 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3487 = x3486 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3488 = x3487 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3488 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3489 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3489 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3490 = x3489 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3491 = x102 - x3489;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3492 = x3491 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3493 = x3490 + x3492;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3494 = x3157 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3495 = x102 - x3157;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3496 = x3495 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3497 = x3494 + x3496;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3498 = x3158 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3499 = x102 - x3158;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3500 = x3499 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3501 = x3498 + x3500;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3502 = x3161 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3503 = x102 - x3161;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3504 = x3503 * x3209;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3505 = x3502 + x3504;
        host_args.at(0) = x3493;
        host_args.at(1) = x3497;
        host_args.at(2) = x3501;
        host_args.at(3) = x3505;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3493);
          reg = x3493;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3497);
          reg = x3497;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3501);
          reg = x3501;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3505);
          reg = x3505;
        }
        {
          host_args.at(0) = x3201;
          host_args.at(1) = x3493;
          host_args.at(2) = x3497;
          host_args.at(3) = x3501;
          host_args.at(4) = x3505;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3506 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3507 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3508 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3509 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3509 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3201);
          reg = x3201;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2837);
          reg = x2837;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3506);
          reg = x3506;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3507);
          reg = x3507;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3508);
          reg = x3508;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3509);
          reg = x3509;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3510 = x2926 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3510 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x2915 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3511 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3512 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3513 = x3511 + x3512;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3514 = x3513 + x3098;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3515 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3516 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3517 = x3515 + x3516;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3518 = x3517 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3519 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3514);
          reg = x3514;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3518);
          reg = x3518;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3519);
          reg = x3519;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3519);
          reg = x3519;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3520 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3520 != Fp::invalid());
      if (x3520 != 0) {
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3521 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3521 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3522 = x3521 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3522 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3523 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3523 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3524 = x3523 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3525 = x3524 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3525 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3526 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3526 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3527 = x3526 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3528 = x102 - x3526;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3529 = x3528 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3530 = x3527 + x3529;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3531 = x3158 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3532 = x102 - x3158;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3533 = x3532 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3534 = x3531 + x3533;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3535 = x3526 * x3088;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3536 = x3528 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3537 = x3535 + x3536;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3538 = x3158 * x3088;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3539 = x3532 * x3209;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3540 = x3538 + x3539;
        host_args.at(0) = x3530;
        host_args.at(1) = x3537;
        host_args.at(2) = x3534;
        host_args.at(3) = x3540;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3530);
          reg = x3530;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3537);
          reg = x3537;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3534);
          reg = x3534;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3540);
          reg = x3540;
        }
        {
          host_args.at(0) = x3201;
          host_args.at(1) = x3530;
          host_args.at(2) = x3537;
          host_args.at(3) = x3534;
          host_args.at(4) = x3540;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3541 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3542 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3543 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3543 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3544 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3544 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3201);
          reg = x3201;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2837);
          reg = x2837;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3541);
          reg = x3541;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3542);
          reg = x3542;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3543);
          reg = x3543;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3544);
          reg = x3544;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3545 = x2926 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3545 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3546 = x2915 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3546 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3547 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3548 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3549 = x3547 + x3548;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3550 = x3549 + x3098;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3551 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3552 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3553 = x3551 + x3552;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3554 = x3553 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3555 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3550);
          reg = x3550;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3554);
          reg = x3554;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3555);
          reg = x3555;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3555);
          reg = x3555;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3556 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3556 != Fp::invalid());
      if (x3556 != 0) {
        if (x102 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3557 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3557 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3558 = x3557 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3558 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x101 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3559 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3559 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3560 = x3559 + x3158;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3561 = x3560 - x102;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3561 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3562 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3562 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3563 = x3562 * x3087;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3564 = x102 - x3562;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3565 = x3564 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3566 = x3563 + x3565;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3567 = x3562 * x3088;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3568 = x3564 * x3207;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3569 = x3567 + x3568;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3570 = x3562 * x3089;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3571 = x3564 * x3208;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3572 = x3570 + x3571;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3573 = x3562 * x3090;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3574 = x3564 * x3209;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3575 = x3573 + x3574;
        host_args.at(0) = x3566;
        host_args.at(1) = x3569;
        host_args.at(2) = x3572;
        host_args.at(3) = x3575;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3566);
          reg = x3566;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3569);
          reg = x3569;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3572);
          reg = x3572;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3575);
          reg = x3575;
        }
        {
          host_args.at(0) = x3201;
          host_args.at(1) = x3566;
          host_args.at(2) = x3569;
          host_args.at(3) = x3572;
          host_args.at(4) = x3575;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3576 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3576 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3577 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3578 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3579 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3579 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3201);
          reg = x3201;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2837);
          reg = x2837;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3576);
          reg = x3576;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3577);
          reg = x3577;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3578);
          reg = x3578;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3579);
          reg = x3579;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3580 = x2926 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3580 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3581 = x2915 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3581 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3582 = x2886 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3583 = x2889 * x68;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3584 = x3582 + x3583;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3585 = x3584 + x3098;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3586 = x2879 * x56;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3587 = x2881 * x99;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3588 = x3586 + x3587;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3589 = x3588 + x2883;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3590 = x2879 * x98;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3585);
          reg = x3585;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3590);
          reg = x3590;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3590);
          reg = x3590;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
    auto x3591 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x3591 != Fp::invalid());
    if (x3591 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3592 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x3592 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3593 = x603 * x83;
      {
        host_args.at(0) = x3593;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3594 = host_outs.at(0);
        auto x3595 = host_outs.at(1);
        auto x3596 = host_outs.at(2);
        auto x3597 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3594);
          reg = x3594;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3595);
          reg = x3595;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3596);
          reg = x3596;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3597);
          reg = x3597;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3598 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3599 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3600 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3601 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x3601 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3593);
        reg = x3593;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3592);
        reg = x3592;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3598);
        reg = x3598;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3599);
        reg = x3599;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3600);
        reg = x3600;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3601);
        reg = x3601;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3602 = Fp(x3601.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3603 = x3602 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3603);
          reg = x3603;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3604 = Fp(x3601.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3605 = x3604 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3605);
          reg = x3605;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3606 = Fp(x3601.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3607 = x3606 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3607);
          reg = x3607;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3608 = Fp(x3601.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3609 = x3608 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3609);
          reg = x3609;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3610 = Fp(x3601.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3611 = x3610 * x63;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3611);
          reg = x3611;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3612 = Fp(x3601.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3612);
          reg = x3612;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3613 = Fp(x3600.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3614 = x3613 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3614);
          reg = x3614;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3615 = Fp(x3600.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3616 = x3615 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3616);
          reg = x3616;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3617 = Fp(x3600.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3618 = x3617 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3618);
          reg = x3618;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3619 = Fp(x3600.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3620 = x3619 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3620);
          reg = x3620;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3621 = Fp(x3600.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3621);
          reg = x3621;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3622 = Fp(x3599.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3623 = x3622 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3623);
          reg = x3623;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3624 = Fp(x3599.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3625 = x3624 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3625);
          reg = x3625;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3626 = Fp(x3599.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3627 = x3626 * x65;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3627);
          reg = x3627;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3628 = Fp(x3599.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3629 = x3628 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3629);
          reg = x3629;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3630 = Fp(x3599.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3630);
          reg = x3630;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3631 = Fp(x3598.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3632 = x3631 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3632);
          reg = x3632;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3633 = Fp(x3598.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3633);
          reg = x3633;
        }
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3634 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x3634 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3635 = x3634 * x62;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3636 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3636 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3637 = x3636 * x66;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3638 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3638 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3639 = x3638 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3640 = x3637 + x3639;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3641 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3641 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3642 = x3641 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3643 = x3640 + x3642;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3644 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3644 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3645 = x3643 + x3644;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3646 = x3635 + x3645;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3647 = x3646 * x99;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3648 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3648 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3649 = x3647 + x3648;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3650 = x3601 - x3649;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3650 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3651 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3651 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3652 = x3651 * x77;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3653 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3653 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3654 = x3653 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3655 = x3652 + x3654;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3656 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3656 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3657 = x3655 + x3656;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3658 = x3657 * x66;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3659 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3659 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3660 = x3659 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3661 = x3658 + x3660;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3662 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3663 = x3661 + x3662;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3664 = x3600 - x3663;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3664 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3665 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3665 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3666 = x3665 * x71;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3667 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3667 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3668 = x3667 * x85;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3669 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3669 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3670 = x3668 + x3669;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3671 = x3670 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3672 = x3666 + x3671;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3673 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3673 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3674 = x3673 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3675 = x3672 + x3674;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3676 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3677 = x3675 + x3676;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3678 = x3599 - x3677;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3678 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3679 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3679 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3680 = x3679 * x71;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3681 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3681 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3682 = x3680 + x3681;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3683 = x3598 - x3682;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3683 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3598;
        host_args.at(1) = x3599;
        host_args.at(2) = x3600;
        host_args.at(3) = x3601;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3684 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3685 = (x3684 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3685);
            reg = x3685;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3686 = x3684 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3687 = (x3686 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3687);
            reg = x3687;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3688 = x3684 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3689 = (x3688 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3689);
            reg = x3689;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3690 = x3684 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3691 = (x3690 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3691);
            reg = x3691;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3692 = x3684 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3693 = (x3692 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3693);
            reg = x3693;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3694 = x3684 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3695 = (x3694 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3695);
            reg = x3695;
          }
        }
        // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3696 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x3696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3697 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x3697 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3698 = x3697 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3699 = x3696 + x3698;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3700 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x3700 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3701 = x3700 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3702 = x3699 + x3701;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3703 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x3703 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3704 = x3703 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3705 = x3702 + x3704;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3706 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x3706 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3707 = x3706 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3708 = x3705 + x3707;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3709 = x3708 - x3684;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3709 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      host_args.at(0) = x101;
      host_args.at(1) = x101;
      host_args.at(2) = x101;
      host_args.at(3) = x101;
      host_args.at(4) = x101;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3710 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3711 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3711 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3712 = x3710 + x3711;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3713 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3713 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3714 = x3712 + x3713;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3715 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3716 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3716 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3717 = x3715 + x3716;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3718 = x3659 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3719 = x3662 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3720 = x3718 + x3719;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3721 = x3720 + x3665;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3722 = x3721 + x55;
      {
        host_args.at(0) = x3722;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3723 = host_outs.at(0);
        auto x3724 = host_outs.at(1);
        auto x3725 = host_outs.at(2);
        auto x3726 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3723);
          reg = x3723;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3724);
          reg = x3724;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3725);
          reg = x3725;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3726);
          reg = x3726;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3727 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3728 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3729 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3730 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3730 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3722);
        reg = x3722;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3592);
        reg = x3592;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3727);
        reg = x3727;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3728);
        reg = x3728;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3729);
        reg = x3729;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3730);
        reg = x3730;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3731 = x3648 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3732 = x3731 + x3657;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3733 = x3732 + x55;
      {
        host_args.at(0) = x3733;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3734 = host_outs.at(0);
        auto x3735 = host_outs.at(1);
        auto x3736 = host_outs.at(2);
        auto x3737 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3734);
          reg = x3734;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3735);
          reg = x3735;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3736);
          reg = x3736;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3737);
          reg = x3737;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3738 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3739 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3740 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3741 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3741 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3733);
        reg = x3733;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3592);
        reg = x3592;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3738);
        reg = x3738;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3739);
        reg = x3739;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3740);
        reg = x3740;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3741);
        reg = x3741;
      }
      host_args.at(0) = x3721;
      host_args.at(1) = x3727;
      host_args.at(2) = x3728;
      host_args.at(3) = x3729;
      host_args.at(4) = x3730;
      host_args.at(5) = x3732;
      host_args.at(6) = x3738;
      host_args.at(7) = x3739;
      host_args.at(8) = x3740;
      host_args.at(9) = x3741;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3742 = x3641 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3743 = x3644 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3744 = x3742 + x3743;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3745 = x3744 + x3732;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3746 = x3716 * x3745;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3747 = x102 - x3716;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3748 = x3747 * x3738;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3749 = x3746 + x3748;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3750 = Fp(x3749.asUInt32() & x41.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3751 = x3750 * x61;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3751);
          reg = x3751;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3752 = Fp(x3749.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3753 = x3752 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3753);
          reg = x3753;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3754 = Fp(x3749.asUInt32() & x40.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3755 = Fp(x3754.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3755);
            reg = x3755;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3756 = Fp(x3754.asUInt32() & x99.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3757 = x3756 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3757);
            reg = x3757;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3758 = Fp(x3754.asUInt32() & x85.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3759 = x3758 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3759);
            reg = x3759;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3760 = Fp(x3754.asUInt32() & x77.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3761 = x3760 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3761);
            reg = x3761;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3762 = Fp(x3754.asUInt32() & x66.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3763 = x3762 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3763);
            reg = x3763;
          }
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3764 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x3764 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x3765 = x3764 * x39;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x3766 = x3765 + x102;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3767 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x3767 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x3768 = x3767 * x84;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x3769 = x3768 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3770 = x3766 * x3769;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3771 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x3771 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x3772 = x3771 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3773 = x3770 * x3772;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3774 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x3774 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3775 = x3774 * x99;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3776 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x3776 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3777 = x3775 + x3776;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3778 = (x3777 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x3779 = x3778 * x3773;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3780 = x3777 - x102;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3781 = (x3780 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x3782 = x3781 * x3773;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3783 = x3777 - x99;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3784 = (x3783 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x3785 = x3784 * x3773;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3786 = x3777 - x84;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3787 = (x3786 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x3788 = x3787 * x3773;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3779);
            reg = x3779;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3782);
            reg = x3782;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3785);
            reg = x3785;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3788);
            reg = x3788;
          }
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3789 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3789 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3790 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3790 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3791 = x3790 * x99;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3792 = x3789 + x3791;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3793 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3793 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3794 = x3793 * x85;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3795 = x3792 + x3794;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3796 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3796 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3797 = x3796 * x77;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3798 = x3795 + x3797;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3799 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x3799 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3800 = x3799 * x66;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3801 = x3798 + x3800;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3802 = x3801 - x3754;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3802 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3803 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3803 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3804 = x3803 * x62;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3805 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3805 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3806 = x3805 * x68;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3807 = x3804 + x3806;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3808 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3809 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3809 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3810 = x3809 * x99;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3811 = x3808 + x3810;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3812 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3812 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3813 = x3812 * x85;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3814 = x3811 + x3813;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3815 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3815 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3816 = x3815 * x77;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3817 = x3814 + x3816;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3818 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3818 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3819 = x3818 * x66;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3820 = x3817 + x3819;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3821 = x3807 + x3820;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3822 = x3749 - x3821;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3823 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3824 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3825 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3825 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3826 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3826 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3827 = x3717 * x3823;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3828 = x3717 * x3824;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3829 = x3717 * x3825;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3830 = x3717 * x3826;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3831 = x102 - x3717;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3832 = x3831 * x3738;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3833 = x3831 * x3739;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3834 = x3831 * x3740;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3835 = x3831 * x3741;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3836 = x3827 + x3832;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3837 = x3828 + x3833;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3838 = x3829 + x3834;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3839 = x3830 + x3835;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3840 = Fp(x3730.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3841 = x3840 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3841);
          reg = x3841;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3842 = Fp(x3730.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3843 = x3842 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3843);
          reg = x3843;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3844 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3844 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3845 = x3844 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3846 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3846 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3847 = x3846 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3848 = x3845 + x3847;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3849 = x3730 - x3848;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3849 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3850 = Fp(x3839.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3851 = x3850 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3851);
          reg = x3851;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3852 = Fp(x3839.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3853 = x3852 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3853);
          reg = x3853;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3854 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3854 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3855 = x3854 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3856 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3856 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3857 = x3856 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3858 = x3855 + x3857;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3859 = x3839 - x3858;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3859 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3860 = x3710 * x3854;
      // loc("cirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3860);
        reg = x3860;
      }
      // loc("cirgen/components/u32.cpp":214:13)
      auto x3861 = x3712 * x3844;
      // loc("cirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][205 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3861);
        reg = x3861;
      }
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3862 = x3727 * x3836;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3863 = x3728 * x3836;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3864 = x3727 * x3837;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3865 = x3863 + x3864;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3866 = x3865 * x97;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3867 = x3862 + x3866;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3868 = Fp(x3867.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3868);
          reg = x3868;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3869 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3869 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3870 = x3867 - x3869;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3871 = x3870 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3872 = Fp(x3871.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3872);
          reg = x3872;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3873 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3873 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3874 = x3871 - x3873;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3875 = x3874 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3876 = Fp(x3875.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3876);
          reg = x3876;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3877 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3877 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3878 = x3875 - x3877;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3879 = x3878 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3879);
        reg = x3879;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3880 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3880 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3881 = x3880 * x97;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3882 = x3877 + x3881;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3883 = x3729 * x3836;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3884 = x3728 * x3837;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3885 = x3883 + x3884;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3886 = x3727 * x3838;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3887 = x3885 + x3886;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3888 = x3882 + x3887;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3889 = x3730 * x3836;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3890 = x3729 * x3837;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3891 = x3889 + x3890;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3892 = x3728 * x3838;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3893 = x3891 + x3892;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3894 = x3727 * x3839;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3895 = x3893 + x3894;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3896 = x3895 * x97;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3897 = x3888 + x3896;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3898 = Fp(x3897.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3898);
          reg = x3898;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3899 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3899 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3900 = x3897 - x3899;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3901 = x3900 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3902 = Fp(x3901.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3902);
          reg = x3902;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3903 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3903 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3904 = x3901 - x3903;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3905 = x3904 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3906 = Fp(x3905.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3906);
          reg = x3906;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3907 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3907 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3908 = x3905 - x3907;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3909 = x3908 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3909);
        reg = x3909;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3910 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3910 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3911 = x3910 * x97;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3912 = x3907 + x3911;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3913 = x3730 * x3837;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3914 = x3729 * x3838;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3915 = x3913 + x3914;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3916 = x3728 * x3839;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3917 = x3915 + x3916;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3918 = x3912 + x3917;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3919 = x3730 * x3838;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3920 = x3729 * x3839;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3921 = x3919 + x3920;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3922 = x3921 * x97;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3923 = x3918 + x3922;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3924 = x3923 + x38;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3925 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3925 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      auto x3926 = x3728 * x97;
      // loc("cirgen/components/u32.cpp":234:38)
      auto x3927 = x3727 + x3926;
      // loc("cirgen/components/u32.cpp":234:30)
      auto x3928 = x3925 * x3927;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3929 = x3924 - x3928;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x3930 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x3930 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      auto x3931 = x3837 * x97;
      // loc("cirgen/components/u32.cpp":235:22)
      auto x3932 = x3836 + x3931;
      // loc("cirgen/components/u32.cpp":235:14)
      auto x3933 = x3930 * x3932;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3934 = x3929 - x3933;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3935 = Fp(x3934.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3935);
          reg = x3935;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3936 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x3936 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3937 = x3934 - x3936;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3938 = x3937 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3939 = Fp(x3938.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3939);
          reg = x3939;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3940 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x3940 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3941 = x3938 - x3940;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3942 = x3941 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3943 = Fp(x3942.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3943);
          reg = x3943;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3944 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x3944 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3945 = x3942 - x3944;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3946 = x3945 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3946);
        reg = x3946;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3947 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x3947 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3948 = x3947 * x97;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3949 = x3944 + x3948;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3950 = x3730 * x3839;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3951 = x3949 + x3950;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3952 = x3951 + x37;
      // loc("cirgen/components/u32.cpp":238:53)
      auto x3953 = x3730 * x97;
      // loc("cirgen/components/u32.cpp":238:38)
      auto x3954 = x3729 + x3953;
      // loc("cirgen/components/u32.cpp":238:30)
      auto x3955 = x3925 * x3954;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3956 = x3952 - x3955;
      // loc("cirgen/components/u32.cpp":239:37)
      auto x3957 = x3839 * x97;
      // loc("cirgen/components/u32.cpp":239:22)
      auto x3958 = x3838 + x3957;
      // loc("cirgen/components/u32.cpp":239:14)
      auto x3959 = x3930 * x3958;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3960 = x3956 - x3959;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3961 = Fp(x3960.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3961);
          reg = x3961;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3962 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x3962 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3963 = x3960 - x3962;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3964 = x3963 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3965 = Fp(x3964.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3965);
          reg = x3965;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3966 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x3966 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3967 = x3964 - x3966;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3968 = x3967 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3968);
        reg = x3968;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3969 = x3673 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3970 = x3676 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3971 = x3969 + x3970;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3972 = x3971 + x3679;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3973 = (x3972 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3973);
          reg = x3973;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3974 = inv(x3972);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3974);
          reg = x3974;
        }
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3975 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x3975 != Fp::invalid());
      if (x3975 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x3972 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x3976 = x102 - x3975;
      if (x3976 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x3977 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3977 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3978 = x3972 * x3977;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3979 = x3978 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x3979 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x3980 = x603 + x85;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3981 = x3980 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3982 = Fp(x3981.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3982);
          reg = x3982;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3983 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3983 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3984 = x3981 - x3983;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3985 = x3984 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3986 = Fp(x3985.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3986);
          reg = x3986;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3987 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3987 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3988 = x3985 - x3987;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3989 = x3988 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3990 = Fp(x3989.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3990);
          reg = x3990;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3991 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3991 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3992 = x3989 - x3991;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3993 = x3992 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3994 = Fp(x3993.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3994);
          reg = x3994;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3995 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3995 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3996 = x3993 - x3995;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3997 = x3996 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3997);
        reg = x3997;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3998 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3998 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3999 = x102 - x3998;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4000 = x3998 * x3999;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4000);
        reg = x4000;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4001 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4001 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4002 = x99 - x3998;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4003 = x4001 * x4002;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4003 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x82);
        reg = x82;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4004 = x3714 * x3976;
      if (x4004 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4005 = x3972 + x55;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3936);
          reg = x3936;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3940);
          reg = x3940;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3962);
          reg = x3962;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3966);
          reg = x3966;
        }
        {
          host_args.at(0) = x4005;
          host_args.at(1) = x3936;
          host_args.at(2) = x3940;
          host_args.at(3) = x3962;
          host_args.at(4) = x3966;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4006 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4006 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4007 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4007 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4008 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4008 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4009 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4009 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4005);
          reg = x4005;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4006);
          reg = x4006;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4007);
          reg = x4007;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4008);
          reg = x4008;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4009);
          reg = x4009;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4010 = x102 - x3714;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4011 = x4010 * x3976;
      if (x4011 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4012 = x3972 + x55;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3869);
          reg = x3869;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3873);
          reg = x3873;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3899);
          reg = x3899;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3903);
          reg = x3903;
        }
        {
          host_args.at(0) = x4012;
          host_args.at(1) = x3869;
          host_args.at(2) = x3873;
          host_args.at(3) = x3899;
          host_args.at(4) = x3903;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4013 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4013 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4014 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4014 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4015 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4015 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4016 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4016 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4012);
          reg = x4012;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4013);
          reg = x4013;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4014);
          reg = x4014;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4015);
          reg = x4015;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4016);
          reg = x4016;
        }
      }
      if (x3975 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/4/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4017 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4017 != Fp::invalid());
      if (x4017 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4018 = x3681 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4018 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3670 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4019 = x3646 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4019 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3710 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4020 = x3681 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4020 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4021 = x3670 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4021 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4022 = x3646 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4022 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3711 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4023 = x3681 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4023 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4024 = x3670 - x99;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4024 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4025 = x3646 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4025 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3713 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4026 = x3681 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4026 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4027 = x3670 - x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4027 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4028 = x3646 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4028 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3715 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4029 = x3681 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4029 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4030 = x3670 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4030 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3646 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3716 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4031 = x3681 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4031 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4032 = x3670 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4032 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3646 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
    auto x4033 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x4033 != Fp::invalid());
    if (x4033 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4034 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x4034 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4035 = x603 * x83;
      {
        host_args.at(0) = x4035;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4036 = host_outs.at(0);
        auto x4037 = host_outs.at(1);
        auto x4038 = host_outs.at(2);
        auto x4039 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4036);
          reg = x4036;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4037);
          reg = x4037;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4038);
          reg = x4038;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4039);
          reg = x4039;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4040 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4040 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4041 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4041 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4042 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4042 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4043 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4043 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4035);
        reg = x4035;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4034);
        reg = x4034;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4040);
        reg = x4040;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4041);
        reg = x4041;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4042);
        reg = x4042;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4043);
        reg = x4043;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4044 = Fp(x4043.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4045 = x4044 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4045);
          reg = x4045;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4046 = Fp(x4043.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4047 = x4046 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4047);
          reg = x4047;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4048 = Fp(x4043.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4049 = x4048 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4049);
          reg = x4049;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4050 = Fp(x4043.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4051 = x4050 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4051);
          reg = x4051;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4052 = Fp(x4043.asUInt32() & x79.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4053 = x4052 * x63;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4053);
          reg = x4053;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4054 = Fp(x4043.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4054);
          reg = x4054;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4055 = Fp(x4042.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4056 = x4055 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4056);
          reg = x4056;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4057 = Fp(x4042.asUInt32() & x69.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4058 = x4057 * x67;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4058);
          reg = x4058;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4059 = Fp(x4042.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4060 = x4059 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4060);
          reg = x4060;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4061 = Fp(x4042.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4062 = x4061 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4062);
          reg = x4062;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4063 = Fp(x4042.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4063);
          reg = x4063;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4064 = Fp(x4041.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4065 = x4064 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4065);
          reg = x4065;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4066 = Fp(x4041.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4067 = x4066 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4067);
          reg = x4067;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4068 = Fp(x4041.asUInt32() & x60.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4069 = x4068 * x65;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4069);
          reg = x4069;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4070 = Fp(x4041.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4071 = x4070 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4071);
          reg = x4071;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4072 = Fp(x4041.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4072);
          reg = x4072;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4073 = Fp(x4040.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4074 = x4073 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4074);
          reg = x4074;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4075 = Fp(x4040.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4075);
          reg = x4075;
        }
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4076 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4076 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4077 = x4076 * x62;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4078 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4078 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4079 = x4078 * x66;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4080 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4080 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4081 = x4080 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4082 = x4079 + x4081;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4083 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4083 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4084 = x4083 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4085 = x4082 + x4084;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4086 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4086 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4087 = x4085 + x4086;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4088 = x4077 + x4087;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4089 = x4088 * x99;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4090 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4090 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4091 = x4089 + x4090;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4092 = x4043 - x4091;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4092 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4093 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4093 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4094 = x4093 * x77;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4095 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4095 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4096 = x4095 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4097 = x4094 + x4096;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4098 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4098 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4099 = x4097 + x4098;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4100 = x4099 * x66;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4101 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4101 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4102 = x4101 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4103 = x4100 + x4102;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4104 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4104 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4105 = x4103 + x4104;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4106 = x4042 - x4105;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4106 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4107 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4107 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4108 = x4107 * x71;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4109 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4109 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4110 = x4109 * x85;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4111 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4111 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4112 = x4110 + x4111;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4113 = x4112 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4114 = x4108 + x4113;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4115 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4115 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4116 = x4115 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4117 = x4114 + x4116;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4118 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4118 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4119 = x4117 + x4118;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4120 = x4041 - x4119;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4120 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4121 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4121 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4122 = x4121 * x71;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4123 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4123 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4124 = x4122 + x4123;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4125 = x4040 - x4124;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4125 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4040;
        host_args.at(1) = x4041;
        host_args.at(2) = x4042;
        host_args.at(3) = x4043;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4126 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4127 = (x4126 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4127);
            reg = x4127;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4128 = x4126 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4129 = (x4128 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4129);
            reg = x4129;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4130 = x4126 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4131 = (x4130 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4131);
            reg = x4131;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4132 = x4126 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4133 = (x4132 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4133);
            reg = x4133;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4134 = x4126 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4135 = (x4134 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4135);
            reg = x4135;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4136 = x4126 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4137 = (x4136 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4137);
            reg = x4137;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4138 = x4126 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4139 = (x4138 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4139);
            reg = x4139;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4140 = x4126 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4141 = (x4140 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4141);
            reg = x4141;
          }
        }
        // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4142 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x4142 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4143 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x4143 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4144 = x4143 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4145 = x4142 + x4144;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4146 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x4146 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4147 = x4146 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4148 = x4145 + x4147;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4149 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x4149 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4150 = x4149 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4151 = x4148 + x4150;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4152 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x4152 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4153 = x4152 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4154 = x4151 + x4153;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4155 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x4155 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4156 = x4155 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4157 = x4154 + x4156;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4158 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x4158 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4159 = x4158 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4160 = x4157 + x4159;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x4161 = x4160 - x4126;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x4161 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4162 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4162 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4163 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4163 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4164 = x4162 + x4163;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4165 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4165 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4166 = x4163 + x4165;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4167 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4167 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4168 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4168 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4169 = x4167 + x4168;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4170 = x4164 + x4168;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4171 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4171 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4172 = x4169 + x4171;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4173 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4173 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4174 = x4171 + x4173;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4175 = x4172 + x4173;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4176 = x4170 + x4173;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4177 = x4168 + x4173;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][189 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4176);
        reg = x4176;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4177);
        reg = x4177;
      }
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4178 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4178 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4179 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4179 != Fp::invalid());
      host_args.at(0) = x4174;
      host_args.at(1) = x4175;
      host_args.at(2) = x4178;
      host_args.at(3) = x4179;
      host_args.at(4) = x4166;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4180 = x4101 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4181 = x4104 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4182 = x4180 + x4181;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4183 = x4182 + x4107;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4184 = x4183 + x55;
      {
        host_args.at(0) = x4184;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4185 = host_outs.at(0);
        auto x4186 = host_outs.at(1);
        auto x4187 = host_outs.at(2);
        auto x4188 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4185);
          reg = x4185;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4186);
          reg = x4186;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4187);
          reg = x4187;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4188);
          reg = x4188;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4189 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4189 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4190 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4190 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4191 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4191 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4192 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4192 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4184);
        reg = x4184;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4034);
        reg = x4034;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4189);
        reg = x4189;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4190);
        reg = x4190;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4191);
        reg = x4191;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4192);
        reg = x4192;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4193 = x4090 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4194 = x4193 + x4099;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4195 = x4194 + x55;
      {
        host_args.at(0) = x4195;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4196 = host_outs.at(0);
        auto x4197 = host_outs.at(1);
        auto x4198 = host_outs.at(2);
        auto x4199 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4196);
          reg = x4196;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4197);
          reg = x4197;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4198);
          reg = x4198;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4199);
          reg = x4199;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4200 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4200 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4201 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4201 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4202 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4202 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4203 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4203 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4195);
        reg = x4195;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4034);
        reg = x4034;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4200);
        reg = x4200;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4201);
        reg = x4201;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4202);
        reg = x4202;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4203);
        reg = x4203;
      }
      host_args.at(0) = x4183;
      host_args.at(1) = x4189;
      host_args.at(2) = x4190;
      host_args.at(3) = x4191;
      host_args.at(4) = x4192;
      host_args.at(5) = x4194;
      host_args.at(6) = x4200;
      host_args.at(7) = x4201;
      host_args.at(8) = x4202;
      host_args.at(9) = x4203;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4204 = x4083 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4205 = x4086 * x68;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4206 = x4204 + x4205;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4207 = x4206 + x4194;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4208 = x4174 * x4207;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4209 = x102 - x4174;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4210 = x4209 * x4200;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4211 = x4208 + x4210;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4212 = Fp(x4211.asUInt32() & x41.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4213 = x4212 * x61;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4213);
          reg = x4213;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4214 = Fp(x4211.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4215 = x4214 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4215);
          reg = x4215;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4216 = Fp(x4211.asUInt32() & x40.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4217 = Fp(x4216.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4217);
            reg = x4217;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4218 = Fp(x4216.asUInt32() & x99.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4219 = x4218 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4219);
            reg = x4219;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4220 = Fp(x4216.asUInt32() & x85.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4221 = x4220 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4221);
            reg = x4221;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4222 = Fp(x4216.asUInt32() & x77.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4223 = x4222 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4223);
            reg = x4223;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4224 = Fp(x4216.asUInt32() & x66.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4225 = x4224 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4225);
            reg = x4225;
          }
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4226 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x4226 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x4227 = x4226 * x39;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x4228 = x4227 + x102;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4229 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x4229 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x4230 = x4229 * x84;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x4231 = x4230 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4232 = x4228 * x4231;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4233 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x4233 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x4234 = x4233 + x102;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4235 = x4232 * x4234;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4236 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x4236 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4237 = x4236 * x99;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4238 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x4238 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4239 = x4237 + x4238;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4240 = (x4239 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x4241 = x4240 * x4235;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4242 = x4239 - x102;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4243 = (x4242 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x4244 = x4243 * x4235;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4245 = x4239 - x99;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4246 = (x4245 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x4247 = x4246 * x4235;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4248 = x4239 - x84;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4249 = (x4248 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x4250 = x4249 * x4235;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4241);
            reg = x4241;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4244);
            reg = x4244;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4247);
            reg = x4247;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4250);
            reg = x4250;
          }
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4251 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x4251 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4252 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4252 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4253 = x4252 * x99;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4254 = x4251 + x4253;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4255 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4255 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4256 = x4255 * x85;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4257 = x4254 + x4256;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4258 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4258 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4259 = x4258 * x77;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4260 = x4257 + x4259;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4261 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4261 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4262 = x4261 * x66;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4263 = x4260 + x4262;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4264 = x4263 - x4216;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4264 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4265 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4265 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4266 = x4265 * x62;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4267 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4267 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4268 = x4267 * x68;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4269 = x4266 + x4268;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4270 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4270 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4271 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4271 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4272 = x4271 * x99;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4273 = x4270 + x4272;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4274 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4274 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4275 = x4274 * x85;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4276 = x4273 + x4275;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4277 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4277 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4278 = x4277 * x77;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4279 = x4276 + x4278;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4280 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4280 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4281 = x4280 * x66;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4282 = x4279 + x4281;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4283 = x4269 + x4282;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4284 = x4211 - x4283;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4284 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4285 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4285 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4286 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4286 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4287 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4287 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4288 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4288 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4289 = x4175 * x4285;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4290 = x4175 * x4286;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4291 = x4175 * x4287;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4292 = x4175 * x4288;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4293 = x102 - x4175;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4294 = x4293 * x4200;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4295 = x4293 * x4201;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4296 = x4293 * x4202;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4297 = x4293 * x4203;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4298 = x4289 + x4294;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4299 = x4290 + x4295;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4300 = x4291 + x4296;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4301 = x4292 + x4297;
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4298);
        reg = x4298;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4299);
        reg = x4299;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4300);
        reg = x4300;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4301);
        reg = x4301;
      }
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x4302 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x4302 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x4303 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x4303 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x4304 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x4304 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x4305 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x4305 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4306 = x4178 + x4179;
        host_args.at(0) = x4189;
        host_args.at(1) = x4190;
        host_args.at(2) = x4191;
        host_args.at(3) = x4192;
        host_args.at(4) = x4302;
        host_args.at(5) = x4303;
        host_args.at(6) = x4304;
        host_args.at(7) = x4305;
        host_args.at(8) = x4306;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4307 = host_outs.at(0);
        auto x4308 = host_outs.at(1);
        auto x4309 = host_outs.at(2);
        auto x4310 = host_outs.at(3);
        auto x4311 = host_outs.at(4);
        auto x4312 = host_outs.at(5);
        auto x4313 = host_outs.at(6);
        auto x4314 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4307);
          reg = x4307;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4311);
          reg = x4311;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4308);
          reg = x4308;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4312);
          reg = x4312;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4309);
          reg = x4309;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4313);
          reg = x4313;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4310);
          reg = x4310;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4314);
          reg = x4314;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4315 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4315 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4316 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4316 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4317 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4317 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4318 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4318 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4319 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4319 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4320 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4320 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4321 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x4321 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4322 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x4322 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4323 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x4323 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4324 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x4324 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4325 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x4325 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4326 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x4326 != Fp::invalid());
      host_args.at(0) = x4189;
      host_args.at(1) = x4190;
      host_args.at(2) = x4191;
      host_args.at(3) = x4192;
      host_args.at(4) = x4315;
      host_args.at(5) = x4316;
      host_args.at(6) = x4317;
      host_args.at(7) = x4318;
      host_args.at(8) = x4319;
      host_args.at(9) = x4320;
      host_args.at(10) = x4321;
      host_args.at(11) = x4322;
      host_args.at(12) = x4323;
      host_args.at(13) = x4324;
      host_args.at(14) = x4325;
      host_args.at(15) = x4326;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4327 = x4115 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4328 = x4118 * x99;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4329 = x4327 + x4328;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4330 = x4329 + x4121;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4331 = (x4330 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4331);
          reg = x4331;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4332 = inv(x4330);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4332);
          reg = x4332;
        }
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4333 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4333 != Fp::invalid());
      if (x4333 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4330 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4334 = x102 - x4333;
      if (x4334 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4335 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4335 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4336 = x4330 * x4335;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4337 = x4336 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4337 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4338 = x4166 * x4334;
      if (x4338 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4339 = x4330 + x55;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4323);
          reg = x4323;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4324);
          reg = x4324;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4325);
          reg = x4325;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4326);
          reg = x4326;
        }
        {
          host_args.at(0) = x4339;
          host_args.at(1) = x4323;
          host_args.at(2) = x4324;
          host_args.at(3) = x4325;
          host_args.at(4) = x4326;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4340 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4341 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4342 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4342 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4343 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4343 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4339);
          reg = x4339;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4034);
          reg = x4034;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4340);
          reg = x4340;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4341);
          reg = x4341;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4342);
          reg = x4342;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4343);
          reg = x4343;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4344 = x102 - x4166;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4345 = x4344 * x4334;
      if (x4345 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4346 = x4330 + x55;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4319);
          reg = x4319;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4320);
          reg = x4320;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4321);
          reg = x4321;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4322);
          reg = x4322;
        }
        {
          host_args.at(0) = x4346;
          host_args.at(1) = x4319;
          host_args.at(2) = x4320;
          host_args.at(3) = x4321;
          host_args.at(4) = x4322;
          host_args.at(5) = x101;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4347 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4348 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4349 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4349 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4350 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4350 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4034);
          reg = x4034;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x99);
          reg = x99;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4347);
          reg = x4347;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4349);
          reg = x4349;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4350);
          reg = x4350;
        }
      }
      if (x4333 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4351 = x603 + x85;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4352 = x4351 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4353 = Fp(x4352.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4353);
          reg = x4353;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4354 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4354 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4355 = x4352 - x4354;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4356 = x4355 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4357 = Fp(x4356.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4357);
          reg = x4357;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4358 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4358 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4359 = x4356 - x4358;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4360 = x4359 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4361 = Fp(x4360.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4361);
          reg = x4361;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4362 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4362 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4363 = x4360 - x4362;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4364 = x4363 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4365 = Fp(x4364.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4365);
          reg = x4365;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4366 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4366 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4367 = x4364 - x4366;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4368 = x4367 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4368);
        reg = x4368;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4369 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4369 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4370 = x102 - x4369;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4371 = x4369 * x4370;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4371);
        reg = x4371;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4372 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4372 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4373 = x99 - x4369;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4374 = x4372 * x4373;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4374 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
      if (x4162 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4375 = x4123 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4375 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4376 = x4112 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4376 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4377 = x4088 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4377 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4378 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4378 != Fp::invalid());
      if (x4378 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4379 = x4123 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4379 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4380 = x4112 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4380 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4381 = x4088 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4381 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4163 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4382 = x4123 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4382 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4383 = x4112 - x79;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4383 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4384 = x4088 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4384 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4165 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4385 = x4123 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4385 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4386 = x4112 - x78;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4386 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4387 = x4088 - x102;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4387 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4167 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4388 = x4123 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4388 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4389 = x4112 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4389 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4088 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4168 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4390 = x4123 - x52;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4390 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4391 = x4112 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4391 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4392 = x4088 - x68;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4392 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4171 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4393 = x4123 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4393 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4394 = x4112 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4394 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4088 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4173 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4395 = x4123 - x51;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4396 = x4112 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4396 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4397 = x4088 - x68;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4397 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
    auto x4398 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x4398 != Fp::invalid());
    if (x4398 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4399 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4399 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4400 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4400 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4401 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4401 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4402 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4402 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4403 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x4403 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4404 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x4404 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4405 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x4405 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4406 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x4406 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4407 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x4407 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4408 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x4408 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4409 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x4409 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4410 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x4410 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4411 = Fp(x4399.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4411);
          reg = x4411;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4412 = Fp(x4403.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4412);
          reg = x4412;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4413 = Fp(x4399.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4414 = x4413 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4414);
          reg = x4414;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4415 = Fp(x4403.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4416 = x4415 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4416);
          reg = x4416;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4417 = Fp(x4399.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4418 = x4417 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4418);
          reg = x4418;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4419 = Fp(x4403.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4420 = x4419 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4420);
          reg = x4420;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4421 = Fp(x4399.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4422 = x4421 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4422);
          reg = x4422;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4423 = Fp(x4403.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4424 = x4423 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4424);
          reg = x4424;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4425 = Fp(x4399.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4426 = x4425 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4426);
          reg = x4426;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4427 = Fp(x4403.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4428 = x4427 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4428);
          reg = x4428;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4429 = Fp(x4399.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4430 = x4429 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4430);
          reg = x4430;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4431 = Fp(x4403.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4432 = x4431 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4432);
          reg = x4432;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4433 = Fp(x4399.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4434 = x4433 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4434);
          reg = x4434;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4435 = Fp(x4403.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4436 = x4435 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4436);
          reg = x4436;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4437 = Fp(x4399.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4438 = x4437 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4438);
          reg = x4438;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4439 = Fp(x4403.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4440 = x4439 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4440);
          reg = x4440;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4441 = Fp(x4400.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4441);
          reg = x4441;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4442 = Fp(x4404.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4442);
          reg = x4442;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4443 = Fp(x4400.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4444 = x4443 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4444);
          reg = x4444;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4445 = Fp(x4404.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4446 = x4445 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4446);
          reg = x4446;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4447 = Fp(x4400.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4448 = x4447 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4448);
          reg = x4448;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4449 = Fp(x4404.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4450 = x4449 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4450);
          reg = x4450;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4451 = Fp(x4400.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4452 = x4451 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4452);
          reg = x4452;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4453 = Fp(x4404.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4454 = x4453 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4454);
          reg = x4454;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4455 = Fp(x4400.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4456 = x4455 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4456);
          reg = x4456;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4457 = Fp(x4404.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4458 = x4457 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4458);
          reg = x4458;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4459 = Fp(x4400.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4460 = x4459 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4460);
          reg = x4460;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4461 = Fp(x4404.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4462 = x4461 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4462);
          reg = x4462;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4463 = Fp(x4400.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4464 = x4463 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4464);
          reg = x4464;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4465 = Fp(x4404.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4466 = x4465 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4466);
          reg = x4466;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4467 = Fp(x4400.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4468 = x4467 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4468);
          reg = x4468;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4469 = Fp(x4404.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4470 = x4469 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4470);
          reg = x4470;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4471 = Fp(x4401.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4471);
          reg = x4471;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4472 = Fp(x4405.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4472);
          reg = x4472;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4473 = Fp(x4401.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4474 = x4473 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4474);
          reg = x4474;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4475 = Fp(x4405.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4476 = x4475 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4476);
          reg = x4476;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4477 = Fp(x4401.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4478 = x4477 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4478);
          reg = x4478;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4479 = Fp(x4405.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4480 = x4479 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4480);
          reg = x4480;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4481 = Fp(x4401.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4482 = x4481 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4482);
          reg = x4482;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4483 = Fp(x4405.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4484 = x4483 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4484);
          reg = x4484;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4485 = Fp(x4401.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4486 = x4485 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4486);
          reg = x4486;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4487 = Fp(x4405.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4488 = x4487 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4488);
          reg = x4488;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4489 = Fp(x4401.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4490 = x4489 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4490);
          reg = x4490;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4491 = Fp(x4405.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4492 = x4491 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4492);
          reg = x4492;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4493 = Fp(x4401.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4494 = x4493 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4494);
          reg = x4494;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4495 = Fp(x4405.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4496 = x4495 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4496);
          reg = x4496;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4497 = Fp(x4401.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4498 = x4497 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4498);
          reg = x4498;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4499 = Fp(x4405.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4500 = x4499 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4501 = Fp(x4402.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4502 = Fp(x4406.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4502);
          reg = x4502;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4503 = Fp(x4402.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4504 = x4503 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4504);
          reg = x4504;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4505 = Fp(x4406.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4506 = x4505 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4506);
          reg = x4506;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4507 = Fp(x4402.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4508 = x4507 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4508);
          reg = x4508;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4509 = Fp(x4406.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4510 = x4509 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4510);
          reg = x4510;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4511 = Fp(x4402.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4512 = x4511 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4512);
          reg = x4512;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4513 = Fp(x4406.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4514 = x4513 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4514);
          reg = x4514;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4515 = Fp(x4402.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4516 = x4515 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4516);
          reg = x4516;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4517 = Fp(x4406.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4518 = x4517 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4518);
          reg = x4518;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4519 = Fp(x4402.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4520 = x4519 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4520);
          reg = x4520;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4521 = Fp(x4406.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4522 = x4521 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4522);
          reg = x4522;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4523 = Fp(x4402.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4524 = x4523 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4524);
          reg = x4524;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4525 = Fp(x4406.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4526 = x4525 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4526);
          reg = x4526;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4527 = Fp(x4402.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4528 = x4527 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4528);
          reg = x4528;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4529 = Fp(x4406.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4530 = x4529 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4530);
          reg = x4530;
        }
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4531 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4532 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4532 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4533 = x4531 * x4532;
      // loc("Top/Mux/4/Mux/6/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4534 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4535 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4535 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4536 = x4534 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4537 = x4531 + x4536;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4538 = x4535 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4539 = x4532 + x4538;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4540 = x4534 * x4535;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4541 = x4540 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4542 = x4533 + x4541;
      // loc("Top/Mux/4/Mux/6/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4543 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4544 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4544 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4545 = x4543 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4546 = x4537 + x4545;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4547 = x4544 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4548 = x4539 + x4547;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4549 = x4543 * x4544;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4550 = x4549 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4551 = x4542 + x4550;
      // loc("Top/Mux/4/Mux/6/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4552 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4553 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4553 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4554 = x4552 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4555 = x4546 + x4554;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4556 = x4553 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4557 = x4548 + x4556;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4558 = x4552 * x4553;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4559 = x4558 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4560 = x4551 + x4559;
      // loc("Top/Mux/4/Mux/6/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4561 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4562 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4562 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4563 = x4561 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4564 = x4555 + x4563;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4565 = x4562 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4566 = x4557 + x4565;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4567 = x4561 * x4562;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4568 = x4567 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4569 = x4560 + x4568;
      // loc("Top/Mux/4/Mux/6/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4570 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4571 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4571 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4572 = x4570 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4573 = x4564 + x4572;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4574 = x4571 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4575 = x4566 + x4574;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4576 = x4570 * x4571;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4577 = x4576 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4578 = x4569 + x4577;
      // loc("Top/Mux/4/Mux/6/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4579 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4580 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4580 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4581 = x4579 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4582 = x4573 + x4581;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4583 = x4580 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4584 = x4575 + x4583;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4585 = x4579 * x4580;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4586 = x4585 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4587 = x4578 + x4586;
      // loc("Top/Mux/4/Mux/6/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4588 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4589 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4589 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4590 = x4588 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4591 = x4582 + x4590;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4592 = x4589 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4593 = x4584 + x4592;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4594 = x4588 * x4589;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4595 = x4594 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4596 = x4587 + x4595;
      // loc("Top/Mux/4/Mux/6/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4597 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4598 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4598 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4599 = x4597 * x4598;
      // loc("Top/Mux/4/Mux/6/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4600 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4601 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4601 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4602 = x4600 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4603 = x4597 + x4602;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4604 = x4601 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4605 = x4598 + x4604;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4606 = x4600 * x4601;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4607 = x4606 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4608 = x4599 + x4607;
      // loc("Top/Mux/4/Mux/6/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4609 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4610 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4610 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4611 = x4609 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4612 = x4603 + x4611;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4613 = x4610 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4614 = x4605 + x4613;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4615 = x4609 * x4610;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4616 = x4615 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4617 = x4608 + x4616;
      // loc("Top/Mux/4/Mux/6/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4618 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4619 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4619 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4620 = x4618 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4621 = x4612 + x4620;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4622 = x4619 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4623 = x4614 + x4622;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4624 = x4618 * x4619;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4625 = x4624 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4626 = x4617 + x4625;
      // loc("Top/Mux/4/Mux/6/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4627 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4628 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4628 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4629 = x4627 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4630 = x4621 + x4629;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4631 = x4628 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4632 = x4623 + x4631;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4633 = x4627 * x4628;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4634 = x4633 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4635 = x4626 + x4634;
      // loc("Top/Mux/4/Mux/6/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4636 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4637 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4637 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4638 = x4636 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4639 = x4630 + x4638;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4640 = x4637 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4641 = x4632 + x4640;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4642 = x4636 * x4637;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4643 = x4642 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4644 = x4635 + x4643;
      // loc("Top/Mux/4/Mux/6/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4645 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4646 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4646 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4647 = x4645 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4648 = x4639 + x4647;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4649 = x4646 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4650 = x4641 + x4649;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4651 = x4645 * x4646;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4652 = x4651 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4653 = x4644 + x4652;
      // loc("Top/Mux/4/Mux/6/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4654 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4655 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4655 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4656 = x4654 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4657 = x4648 + x4656;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4658 = x4655 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4659 = x4650 + x4658;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4660 = x4654 * x4655;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4661 = x4660 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4662 = x4653 + x4661;
      // loc("Top/Mux/4/Mux/6/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4663 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4664 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4664 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4665 = x4663 * x4664;
      // loc("Top/Mux/4/Mux/6/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4666 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4667 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4667 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4668 = x4666 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4669 = x4663 + x4668;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4670 = x4667 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4671 = x4664 + x4670;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4672 = x4666 * x4667;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4673 = x4672 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4674 = x4665 + x4673;
      // loc("Top/Mux/4/Mux/6/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4675 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4676 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4677 = x4675 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4678 = x4669 + x4677;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4679 = x4676 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4680 = x4671 + x4679;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4681 = x4675 * x4676;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4682 = x4681 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4683 = x4674 + x4682;
      // loc("Top/Mux/4/Mux/6/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4684 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4685 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4685 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4686 = x4684 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4687 = x4678 + x4686;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4688 = x4685 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4689 = x4680 + x4688;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4690 = x4684 * x4685;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4691 = x4690 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4692 = x4683 + x4691;
      // loc("Top/Mux/4/Mux/6/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4693 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4694 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4694 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4695 = x4693 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4696 = x4687 + x4695;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4697 = x4694 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4698 = x4689 + x4697;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4699 = x4693 * x4694;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4700 = x4699 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4701 = x4692 + x4700;
      // loc("Top/Mux/4/Mux/6/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4702 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4703 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4703 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4704 = x4702 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4705 = x4696 + x4704;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4706 = x4703 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4707 = x4698 + x4706;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4708 = x4702 * x4703;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4709 = x4708 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4710 = x4701 + x4709;
      // loc("Top/Mux/4/Mux/6/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4711 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4712 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4712 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4713 = x4711 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4714 = x4705 + x4713;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4715 = x4712 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4716 = x4707 + x4715;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4717 = x4711 * x4712;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4718 = x4717 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4719 = x4710 + x4718;
      // loc("Top/Mux/4/Mux/6/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4720 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4721 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4721 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4722 = x4720 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4723 = x4714 + x4722;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4724 = x4721 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4725 = x4716 + x4724;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4726 = x4720 * x4721;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4727 = x4726 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4728 = x4719 + x4727;
      // loc("Top/Mux/4/Mux/6/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4729 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4730 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4730 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4731 = x4729 * x4730;
      // loc("Top/Mux/4/Mux/6/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4732 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4733 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4733 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4734 = x4732 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4735 = x4729 + x4734;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4736 = x4733 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4737 = x4730 + x4736;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4738 = x4732 * x4733;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4739 = x4738 * x99;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4740 = x4731 + x4739;
      // loc("Top/Mux/4/Mux/6/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4741 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4742 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4742 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4743 = x4741 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4744 = x4735 + x4743;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4745 = x4742 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4746 = x4737 + x4745;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4747 = x4741 * x4742;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4748 = x4747 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4749 = x4740 + x4748;
      // loc("Top/Mux/4/Mux/6/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4750 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4751 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4751 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4752 = x4750 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4753 = x4744 + x4752;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4754 = x4751 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4755 = x4746 + x4754;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4756 = x4750 * x4751;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4757 = x4756 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4758 = x4749 + x4757;
      // loc("Top/Mux/4/Mux/6/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4759 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4760 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4760 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4761 = x4759 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4762 = x4753 + x4761;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4763 = x4760 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4764 = x4755 + x4763;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4765 = x4759 * x4760;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4766 = x4765 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4767 = x4758 + x4766;
      // loc("Top/Mux/4/Mux/6/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4768 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4769 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4769 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4770 = x4768 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4771 = x4762 + x4770;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4772 = x4769 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4773 = x4764 + x4772;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4774 = x4768 * x4769;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4775 = x4774 * x68;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4776 = x4767 + x4775;
      // loc("Top/Mux/4/Mux/6/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4777 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4778 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4779 = x4777 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4780 = x4771 + x4779;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4781 = x4778 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4782 = x4773 + x4781;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4783 = x4777 * x4778;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4784 = x4783 * x62;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4785 = x4776 + x4784;
      // loc("Top/Mux/4/Mux/6/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4786 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4786 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4787 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4787 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4788 = x4786 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4789 = x4780 + x4788;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4790 = x4787 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4791 = x4782 + x4790;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4792 = x4786 * x4787;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4793 = x4792 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4794 = x4785 + x4793;
      host_args.at(0) = x4399;
      host_args.at(1) = x4400;
      host_args.at(2) = x4401;
      host_args.at(3) = x4402;
      host_args.at(4) = x4591;
      host_args.at(5) = x4657;
      host_args.at(6) = x4723;
      host_args.at(7) = x4789;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4403;
      host_args.at(1) = x4404;
      host_args.at(2) = x4405;
      host_args.at(3) = x4406;
      host_args.at(4) = x4593;
      host_args.at(5) = x4659;
      host_args.at(6) = x4725;
      host_args.at(7) = x4791;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4407;
      host_args.at(1) = x4408;
      host_args.at(2) = x4409;
      host_args.at(3) = x4410;
      host_args.at(4) = x4596;
      host_args.at(5) = x4662;
      host_args.at(6) = x4728;
      host_args.at(7) = x4794;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4795 = x4399 - x4591;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4795 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4796 = x4400 - x4657;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4796 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4797 = x4401 - x4723;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4797 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4798 = x4402 - x4789;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4798 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4799 = x4403 - x4593;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4799 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4800 = x4404 - x4659;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4800 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4801 = x4405 - x4725;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4801 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4802 = x4406 - x4791;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4802 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4803 = x4407 - x4596;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4803 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4804 = x4408 - x4662;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4804 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4805 = x4409 - x4728;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4805 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4806 = x4410 - x4794;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4806 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4807 = x603 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4808 = Fp(x4807.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4808);
          reg = x4808;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4809 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4809 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4810 = x4807 - x4809;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4811 = x4810 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4812 = Fp(x4811.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4812);
          reg = x4812;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4813 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4813 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4814 = x4811 - x4813;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4815 = x4814 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4816 = Fp(x4815.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4816);
          reg = x4816;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4817 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4817 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4818 = x4815 - x4817;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4819 = x4818 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4820 = Fp(x4819.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4820);
          reg = x4820;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4821 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4821 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4822 = x4819 - x4821;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4823 = x4822 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4823);
        reg = x4823;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4824 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4825 = x102 - x4824;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4826 = x4824 * x4825;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4826);
        reg = x4826;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4827 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4828 = x99 - x4824;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4829 = x4827 * x4828;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":235:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x82);
        reg = x82;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/components/mux.h":37:25))
    auto x4830 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x4830 != Fp::invalid());
    if (x4830 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4831 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4832 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4833 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4834 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4834 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4835 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x4835 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4836 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x4836 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4837 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x4837 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4838 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x4838 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4839 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x4839 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4840 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x4840 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4841 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x4841 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4842 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x4842 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4843 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x4843 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4844 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x4844 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4845 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4846 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x4846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x4847 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x4847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x4848 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x4848 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4849 = Fp(x4834.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4850 = x4849 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4850);
          reg = x4850;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4851 = Fp(x4834.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4852 = x4851 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4852);
          reg = x4852;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4853 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4853 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4854 = x4853 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4855 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x4855 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4856 = x4855 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4857 = x4854 + x4856;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4858 = x4834 - x4857;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4858 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4859 = Fp(x4838.asUInt32() & x71.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4860 = x4859 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4860);
          reg = x4860;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4861 = Fp(x4838.asUInt32() & x59.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4862 = x4861 * x99;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4862);
          reg = x4862;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4863 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4863 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4864 = x4863 * x71;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4865 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x4865 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4866 = x4865 * x63;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4867 = x4864 + x4866;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4868 = x4838 - x4867;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4868 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x4869 = x4847 * x4853;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4869);
        reg = x4869;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x4870 = x102 - x4848;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4871 = x4847 * x4870;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4872 = x4871 * x4863;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4872);
        reg = x4872;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4873 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4873 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x4874 = x102 - x4873;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4875 = x4874 * x4831;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4876 = x4874 * x4832;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4877 = x4874 * x4833;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4878 = x4874 * x4834;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4879 = x4875 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4880 = x4876 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4881 = x4877 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4882 = x4878 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4883 = x4873 * x4831;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4884 = x4873 * x4832;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4885 = x4873 * x4833;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4886 = x4873 * x4834;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4887 = x4879 - x4883;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4888 = x4880 - x4884;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4889 = x4881 - x4885;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4890 = x4882 - x4886;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x4891 = x4873 * x4848;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4892 = x4887 - x4891;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4893 = x4888 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4894 = x4892 + x4893;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4895 = Fp(x4894.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4895);
          reg = x4895;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4896 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x4896 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4897 = x4894 - x4896;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4898 = x4897 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4899 = Fp(x4898.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4899);
          reg = x4899;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4900 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x4900 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4901 = x4898 - x4900;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4902 = x4901 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4902);
        reg = x4902;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4903 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x4903 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4904 = x4903 + x4889;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4905 = x4890 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4906 = x4904 + x4905;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4907 = Fp(x4906.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4907);
          reg = x4907;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4908 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4908 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4909 = x4906 - x4908;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4910 = x4909 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4911 = Fp(x4910.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4911);
          reg = x4911;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4912 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4912 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4913 = x4910 - x4912;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4914 = x4913 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4914);
        reg = x4914;
      }
      host_args.at(0) = x4831;
      host_args.at(1) = x4832;
      host_args.at(2) = x4833;
      host_args.at(3) = x4834;
      host_args.at(4) = x4896;
      host_args.at(5) = x4900;
      host_args.at(6) = x4908;
      host_args.at(7) = x4912;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4915 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4915 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x4916 = x102 - x4915;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4917 = x4916 * x4835;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4918 = x4916 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4919 = x4916 * x4837;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4920 = x4916 * x4838;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4921 = x4917 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4922 = x4918 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4923 = x4919 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4924 = x4920 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4925 = x4915 * x4835;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4926 = x4915 * x4836;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4927 = x4915 * x4837;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4928 = x4915 * x4838;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4929 = x4921 - x4925;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4930 = x4922 - x4926;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4931 = x4923 - x4927;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4932 = x4924 - x4928;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x4933 = x4915 * x4848;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4934 = x4929 - x4933;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4935 = x4930 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4936 = x4934 + x4935;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4937 = Fp(x4936.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4937);
          reg = x4937;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4938 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4938 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4939 = x4936 - x4938;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4940 = x4939 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4941 = Fp(x4940.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4941);
          reg = x4941;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4942 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4942 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4943 = x4940 - x4942;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4944 = x4943 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4944);
        reg = x4944;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize1/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4945 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4945 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4946 = x4945 + x4931;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4947 = x4932 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4948 = x4946 + x4947;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4949 = Fp(x4948.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4949);
          reg = x4949;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4950 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4950 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4951 = x4948 - x4950;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4952 = x4951 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4953 = Fp(x4952.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4953);
          reg = x4953;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4954 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4954 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4955 = x4952 - x4954;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4956 = x4955 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4956);
        reg = x4956;
      }
      host_args.at(0) = x4835;
      host_args.at(1) = x4836;
      host_args.at(2) = x4837;
      host_args.at(3) = x4838;
      host_args.at(4) = x4938;
      host_args.at(5) = x4942;
      host_args.at(6) = x4950;
      host_args.at(7) = x4954;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      auto x4957 = x4942 * x97;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x4958 = x4938 + x4957;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4959 = (x4958 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4959);
          reg = x4959;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4960 = inv(x4958);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4960);
          reg = x4960;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4961 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4961 != Fp::invalid());
      if (x4961 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4958 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4962 = x102 - x4961;
      if (x4962 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4963 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x4963 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4964 = x4958 * x4963;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4965 = x4964 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4965 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x4966 = x4954 * x97;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4967 = x4950 + x4966;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x4968 = x4962 * x87;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4969 = x4967 + x4968;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4970 = (x4969 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4970);
          reg = x4970;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4971 = inv(x4969);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4971);
          reg = x4971;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4972 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4972 != Fp::invalid());
      if (x4972 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4969 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4973 = x102 - x4972;
      if (x4973 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x4974 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x4974 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4975 = x4969 * x4974;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4976 = x4975 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4976 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4977 = x4873 + x4915;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4978 = x4873 * x99;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4979 = x4978 * x4915;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4980 = x4977 - x4979;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x4981 = x4972 * x4873;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4982 = x4980 - x4981;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4982);
        reg = x4982;
      }
      // loc("Top/Mux/4/Mux/7/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x4983 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4983 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x4984 = x102 - x4983;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4985 = x4984 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4986 = x4984 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4987 = x4984 * x4841;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4988 = x4984 * x4842;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4989 = x4985 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4990 = x4986 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4991 = x4987 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4992 = x4988 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4993 = x4983 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4994 = x4983 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4995 = x4983 * x4841;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4996 = x4983 * x4842;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4997 = x4989 - x4993;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4998 = x4990 - x4994;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4999 = x4991 - x4995;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5000 = x4992 - x4996;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5001 = x4983 * x4848;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5002 = x4997 - x5001;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5003 = x4998 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5004 = x5002 + x5003;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5005 = Fp(x5004.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5005);
          reg = x5005;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5006 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5006 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5007 = x5004 - x5006;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5008 = x5007 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5009 = Fp(x5008.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5009);
          reg = x5009;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5010 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5010 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5011 = x5008 - x5010;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5012 = x5011 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5012);
        reg = x5012;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize2/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5013 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5013 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5014 = x5013 + x4999;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5015 = x5000 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5016 = x5014 + x5015;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5017 = Fp(x5016.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5017);
          reg = x5017;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5018 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5018 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5019 = x5016 - x5018;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5020 = x5019 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5021 = Fp(x5020.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5021);
          reg = x5021;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5022 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5022 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5023 = x5020 - x5022;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5024 = x5023 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5024);
        reg = x5024;
      }
      host_args.at(0) = x4839;
      host_args.at(1) = x4840;
      host_args.at(2) = x4841;
      host_args.at(3) = x4842;
      host_args.at(4) = x5006;
      host_args.at(5) = x5010;
      host_args.at(6) = x5018;
      host_args.at(7) = x5022;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5025 = x4874 * x4843;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5026 = x4874 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5027 = x4874 * x4845;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5028 = x4874 * x4846;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5029 = x5025 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5030 = x5026 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5031 = x5027 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5032 = x5028 + x98;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5033 = x4873 * x4843;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5034 = x4873 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5035 = x4873 * x4845;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5036 = x4873 * x4846;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5037 = x5029 - x5033;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5038 = x5030 - x5034;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5039 = x5031 - x5035;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5040 = x5032 - x5036;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5041 = x5037 - x4891;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5042 = x5038 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5043 = x5041 + x5042;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5044 = Fp(x5043.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5044);
          reg = x5044;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5045 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5045 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5046 = x5043 - x5045;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5047 = x5046 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5048 = Fp(x5047.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5048);
          reg = x5048;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5049 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5049 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5050 = x5047 - x5049;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5051 = x5050 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5051);
        reg = x5051;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5052 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5052 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5053 = x5052 + x5039;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5054 = x5040 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5055 = x5053 + x5054;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5056 = Fp(x5055.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5056);
          reg = x5056;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5057 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5057 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5058 = x5055 - x5057;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5059 = x5058 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5060 = Fp(x5059.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5060);
          reg = x5060;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5061 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5061 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5062 = x5059 - x5061;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5063 = x5062 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5063);
        reg = x5063;
      }
      host_args.at(0) = x4843;
      host_args.at(1) = x4844;
      host_args.at(2) = x4845;
      host_args.at(3) = x4846;
      host_args.at(4) = x5045;
      host_args.at(5) = x5049;
      host_args.at(6) = x5057;
      host_args.at(7) = x5061;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5064 = x4938 + x97;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5065 = x4942 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5066 = x4950 + x98;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5067 = x4954 + x98;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5068 = x5064 - x102;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5069 = x5068 - x5045;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5070 = x5065 - x5049;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5071 = x5066 - x5057;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5072 = x5067 - x5061;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5073 = x5070 * x97;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5074 = x5069 + x5073;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5075 = Fp(x5074.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5075);
          reg = x5075;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5076 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5076 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5077 = x5074 - x5076;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5078 = x5077 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5079 = Fp(x5078.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5079);
          reg = x5079;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5080 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5080 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5081 = x5078 - x5080;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5082 = x5081 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5082);
        reg = x5082;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5083 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5083 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5084 = x5083 + x5071;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5085 = x5072 * x97;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5086 = x5084 + x5085;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5087 = Fp(x5086.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5087);
          reg = x5087;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5088 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5088 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5089 = x5086 - x5088;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5090 = x5089 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5091 = Fp(x5090.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5091);
          reg = x5091;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5092 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5092 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5093 = x5090 - x5092;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5094 = x5093 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5094);
        reg = x5094;
      }
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5095 = x5006 * x4938;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5096 = x5095 + x5045;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5097 = x5006 * x4942;
      // loc("cirgen/components/u32.cpp":261:51)
      auto x5098 = x5010 * x4938;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5099 = x5097 + x5098;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5100 = x5099 + x5049;
      // loc("cirgen/components/u32.cpp":261:14)
      auto x5101 = x5100 * x97;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5102 = x5096 + x5101;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5103 = Fp(x5102.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5103);
          reg = x5103;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5104 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5104 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5105 = x5102 - x5104;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5106 = x5105 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5107 = Fp(x5106.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5107);
          reg = x5107;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5108 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5108 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5109 = x5106 - x5108;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5110 = x5109 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5111 = Fp(x5110.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5111);
          reg = x5111;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5112 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5112 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5113 = x5110 - x5112;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5114 = x5113 * x96;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5114);
        reg = x5114;
      }
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5115 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5115 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5116 = x5115 * x97;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5117 = x5116 + x5112;
      // loc("cirgen/components/u32.cpp":266:7)
      auto x5118 = x5010 * x4954;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5118 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      auto x5119 = x5018 * x4950;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5119 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      auto x5120 = x5022 * x4942;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5120 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      auto x5121 = x5018 * x4954;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5121 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      auto x5122 = x5022 * x4950;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5122 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      auto x5123 = x5022 * x4954;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5123 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5124 = x5018 * x4938;
      // loc("cirgen/components/u32.cpp":273:45)
      auto x5125 = x5010 * x4942;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5126 = x5124 + x5125;
      // loc("cirgen/components/u32.cpp":274:15)
      auto x5127 = x5006 * x4950;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5128 = x5126 + x5127;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5129 = x5128 + x5057;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5130 = x5129 + x5117;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5131 = x5022 * x4938;
      // loc("cirgen/components/u32.cpp":275:52)
      auto x5132 = x5018 * x4942;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5133 = x5131 + x5132;
      // loc("cirgen/components/u32.cpp":276:22)
      auto x5134 = x5010 * x4950;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5135 = x5133 + x5134;
      // loc("cirgen/components/u32.cpp":276:52)
      auto x5136 = x5006 * x4954;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5137 = x5135 + x5136;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5138 = x5137 + x5061;
      // loc("cirgen/components/u32.cpp":275:15)
      auto x5139 = x5138 * x97;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5140 = x5130 + x5139;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5141 = Fp(x5140.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5141);
          reg = x5141;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5142 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5142 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5143 = x5140 - x5142;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5144 = x5143 * x96;
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5144);
        reg = x5144;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x5145 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5145 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5146 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5146 != Fp::invalid());
      host_args.at(0) = x5104;
      host_args.at(1) = x5108;
      host_args.at(2) = x5142;
      host_args.at(3) = x5145;
      host_args.at(4) = x5146;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5147 = x5104 - x4896;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5147 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5148 = x5108 - x4900;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5148 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5149 = x5142 - x4908;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5149 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5150 = x5145 - x4912;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5150 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x4973 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5151 = x5146 - x102;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5151 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5152 = x603 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5153 = Fp(x5152.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5153);
          reg = x5153;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5154 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5154 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5155 = x5152 - x5154;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5156 = x5155 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5157 = Fp(x5156.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5157);
          reg = x5157;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5158 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5158 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5159 = x5156 - x5158;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5160 = x5159 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5161 = Fp(x5160.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5161);
          reg = x5161;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5162 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5162 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5163 = x5160 - x5162;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5164 = x5163 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5165 = Fp(x5164.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5165);
          reg = x5165;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5166 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5166 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5167 = x5164 - x5166;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5168 = x5167 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5168);
        reg = x5168;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5169 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5169 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5170 = x102 - x5169;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5171 = x5169 * x5170;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5171);
        reg = x5171;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5172 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5173 = x99 - x5169;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5174 = x5172 * x5173;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5174 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x82);
        reg = x82;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/components/mux.h":37:25))
    auto x5175 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x5175 != Fp::invalid());
    if (x5175 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5176 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":122:41)
      auto x5177 = x603 * x83;
      {
        host_args.at(0) = x5177;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5178 = host_outs.at(0);
        auto x5179 = host_outs.at(1);
        auto x5180 = host_outs.at(2);
        auto x5181 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5178);
          reg = x5178;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5179);
          reg = x5179;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5180);
          reg = x5180;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5181);
          reg = x5181;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5182 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5182 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5183 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5183 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5184 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5184 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5185 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5185 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5177);
        reg = x5177;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5176);
        reg = x5176;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5182);
        reg = x5182;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5183);
        reg = x5183;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5184);
        reg = x5184;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5185);
        reg = x5185;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      auto x5186 = x5182 - x36;
      // loc("cirgen/circuit/rv32im/ecall.cpp":124:6)
      if (x5186 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:124");
      // loc("cirgen/circuit/rv32im/ecall.cpp":125:7)
      if (x5183 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:125");
      // loc("cirgen/circuit/rv32im/ecall.cpp":126:7)
      if (x5184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:126");
      // loc("cirgen/circuit/rv32im/ecall.cpp":127:7)
      if (x5185 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:127");
      {
        host_args.at(0) = x35;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5187 = host_outs.at(0);
        auto x5188 = host_outs.at(1);
        auto x5189 = host_outs.at(2);
        auto x5190 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5187);
          reg = x5187;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5188);
          reg = x5188;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5189);
          reg = x5189;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5190);
          reg = x5190;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5191 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5191 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5192 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5192 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5193 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5193 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5194 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5194 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x35);
        reg = x35;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5176);
        reg = x5176;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5191);
        reg = x5191;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5192);
        reg = x5192;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5193);
        reg = x5193;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5194);
        reg = x5194;
      }
      {
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5195 = (x5191 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5195);
          reg = x5195;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5196 = x5191 - x102;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5197 = (x5196 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5197);
          reg = x5197;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5198 = x5191 - x99;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5199 = (x5198 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5199);
          reg = x5199;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5200 = x5191 - x84;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5201 = (x5200 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5201);
          reg = x5201;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5202 = x5191 - x85;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5203 = (x5202 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5203);
          reg = x5203;
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5204 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5204 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5205 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5205 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5206 = x5205 * x99;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5207 = x5204 + x5206;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5208 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5208 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5209 = x5208 * x84;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5210 = x5207 + x5209;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5211 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x5211 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5212 = x5211 * x85;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5213 = x5210 + x5212;
      // loc("./cirgen/components/onehot.h":38:8)
      auto x5214 = x5213 - x5191;
      // loc("./cirgen/components/onehot.h":38:8)
      if (x5214 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x5215 = (x5213 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":134:47)
        auto x5216 = x102 - x5215;
        if (x5216 != 0) {
          host_args.at(0) = x5191;
          host_args.at(1) = x5192;
          host_args.at(2) = x5193;
          host_args.at(3) = x5194;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("./cirgen/components/mux.h":37:25))
      auto x5217 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5217 != Fp::invalid());
      if (x5217 != 0) {
        {
          host_args.at(0) = x5191;
          host_args.at(1) = x5192;
          host_args.at(2) = x5193;
          host_args.at(3) = x5194;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5218 = x603 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5219 = Fp(x5218.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5219);
            reg = x5219;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5220 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5220 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5221 = x5218 - x5220;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5222 = x5221 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5223 = Fp(x5222.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5223);
            reg = x5223;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5224 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5224 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5225 = x5222 - x5224;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5226 = x5225 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5227 = Fp(x5226.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5227);
            reg = x5227;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5228 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5228 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5229 = x5226 - x5228;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5230 = x5229 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5231 = Fp(x5230.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5231);
            reg = x5231;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5232 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5232 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5233 = x5230 - x5232;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5234 = x5233 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5234);
          reg = x5234;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5235 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5235 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5236 = x102 - x5235;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5237 = x5235 * x5236;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5237);
          reg = x5237;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5238 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5238 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5239 = x99 - x5235;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5240 = x5238 * x5239;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5240 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
      }
      if (x5204 != 0) {
        {
          host_args.at(0) = x34;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5241 = host_outs.at(0);
          auto x5242 = host_outs.at(1);
          auto x5243 = host_outs.at(2);
          auto x5244 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5241);
            reg = x5241;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5242);
            reg = x5242;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5243);
            reg = x5243;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5244);
            reg = x5244;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5245 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5245 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5246 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5247 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5247 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5248 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5248 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x34);
          reg = x34;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5176);
          reg = x5176;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5245);
          reg = x5245;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5246);
          reg = x5246;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5248);
          reg = x5248;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5249 = host_outs.at(0);
          auto x5250 = host_outs.at(1);
          auto x5251 = host_outs.at(2);
          auto x5252 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5249);
            reg = x5249;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5250);
            reg = x5250;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5251);
            reg = x5251;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5252);
            reg = x5252;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5253 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5254 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5255 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5256 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5256 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5176);
          reg = x5176;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5253);
          reg = x5253;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5254);
          reg = x5254;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5255);
          reg = x5255;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5256);
          reg = x5256;
        }
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5257 = (x5245 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5257);
            reg = x5257;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5258 = x5245 - x102;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5259 = (x5258 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5259);
            reg = x5259;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5260 = x5245 - x99;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5261 = (x5260 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5261);
            reg = x5261;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5262 = x5245 - x84;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5263 = (x5262 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5263);
            reg = x5263;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5264 = x5245 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5265 = (x5264 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5265);
            reg = x5265;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5266 = x5245 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5267 = (x5266 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5267);
            reg = x5267;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5268 = x5245 - x79;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5269 = (x5268 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5269);
            reg = x5269;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5270 = x5245 - x78;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5271 = (x5270 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5271);
            reg = x5271;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5272 = x5245 - x77;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5273 = (x5272 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5273);
            reg = x5273;
          }
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5274 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x5274 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5275 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x5275 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5276 = x5275 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5277 = x5274 + x5276;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5278 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x5278 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5279 = x5278 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5280 = x5277 + x5279;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5281 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x5281 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5282 = x5281 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5283 = x5280 + x5282;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5284 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x5284 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5285 = x5284 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5286 = x5283 + x5285;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5287 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x5287 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5288 = x5287 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5289 = x5286 + x5288;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5290 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x5290 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5291 = x5290 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5292 = x5289 + x5291;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5293 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x5293 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5294 = x5293 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5295 = x5292 + x5294;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x5296 = x5295 - x5245;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x5296 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        auto x5297 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x5297 != Fp::invalid());
        if (x5297 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5298 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5299 = x5298 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][36] = x5299;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5300 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5301 = x5300 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][37] = x5301;
        }
        if (x5274 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5302 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5303 = x5302 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][38] = x5303;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5304 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5305 = x5304 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][39] = x5305;
        }
        if (x5275 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5306 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5307 = x5306 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][40] = x5307;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5308 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5309 = x5308 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][41] = x5309;
        }
        if (x5278 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5310 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5311 = x5310 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][42] = x5311;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5312 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5313 = x5312 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][43] = x5313;
        }
        if (x5281 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5314 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5315 = x5314 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][44] = x5315;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5316 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5317 = x5316 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][45] = x5317;
        }
        if (x5284 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5318 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5319 = x5318 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][46] = x5319;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5320 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5321 = x5320 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][47] = x5321;
        }
        if (x5287 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5322 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5323 = x5322 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][48] = x5323;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5324 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5325 = x5324 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][49] = x5325;
        }
        if (x5290 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5326 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5327 = x5326 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][50] = x5327;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5328 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5329 = x5328 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][51] = x5329;
        }
        if (x5293 != 0) {
          host_args.at(0) = x5295;
          host_args.at(1) = x5253;
          host_args.at(2) = x5254;
          host_args.at(3) = x5255;
          host_args.at(4) = x5256;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5330 = x5254 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5331 = x5330 + x5253;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][52] = x5331;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5332 = x5256 * x97;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5333 = x5332 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][53] = x5333;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        auto x5334 = x603 + x85;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5335 = x5334 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5336 = Fp(x5335.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5336);
            reg = x5336;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5337 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5337 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5338 = x5335 - x5337;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5339 = x5338 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5340 = Fp(x5339.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5340);
            reg = x5340;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5341 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5341 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5342 = x5339 - x5341;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5343 = x5342 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5344 = Fp(x5343.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5344);
            reg = x5344;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5345 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5345 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5346 = x5343 - x5345;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5347 = x5346 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5348 = Fp(x5347.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5348);
            reg = x5348;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5349 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5349 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5350 = x5347 - x5349;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5351 = x5350 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5351);
          reg = x5351;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5352 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5352 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5353 = x102 - x5352;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5354 = x5352 * x5353;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5354);
          reg = x5354;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5355 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5356 = x99 - x5352;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5357 = x5355 * x5356;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5357 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
      }
      if (x5205 != 0) {
        {
          host_args.at(0) = x5191;
          host_args.at(1) = x5192;
          host_args.at(2) = x5193;
          host_args.at(3) = x5194;
          host(ctx, "log", "  Doing syscall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
          host(ctx, "syscall", "", host_args.data(), 0, host_outs.data(), 8);
          auto x5358 = host_outs.at(0);
          auto x5359 = host_outs.at(1);
          auto x5360 = host_outs.at(2);
          auto x5361 = host_outs.at(3);
          auto x5362 = host_outs.at(4);
          auto x5363 = host_outs.at(5);
          auto x5364 = host_outs.at(6);
          auto x5365 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5358);
            reg = x5358;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5359);
            reg = x5359;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5360);
            reg = x5360;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5361);
            reg = x5361;
          }
          {
            host_args.at(0) = x34;
            host_args.at(1) = x5358;
            host_args.at(2) = x5359;
            host_args.at(3) = x5360;
            host_args.at(4) = x5361;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5366 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x5366 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5367 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x5367 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5368 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x5368 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5369 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x5369 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x34);
            reg = x34;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5176);
            reg = x5176;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5366);
            reg = x5366;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5367);
            reg = x5367;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5368);
            reg = x5368;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5369);
            reg = x5369;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5362);
            reg = x5362;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5363);
            reg = x5363;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5364);
            reg = x5364;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5365);
            reg = x5365;
          }
          {
            host_args.at(0) = x33;
            host_args.at(1) = x5362;
            host_args.at(2) = x5363;
            host_args.at(3) = x5364;
            host_args.at(4) = x5365;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5370 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x5370 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5371 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x5371 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5372 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x5372 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5373 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x5373 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x33);
            reg = x33;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5176);
            reg = x5176;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5370);
            reg = x5370;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5371);
            reg = x5371;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5372);
            reg = x5372;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5373);
            reg = x5373;
          }
          host_args.at(0) = x5366;
          host_args.at(1) = x5367;
          host_args.at(2) = x5368;
          host_args.at(3) = x5369;
          host(ctx, "log", "  A0 = %w", host_args.data(), 4, host_outs.data(), 0);
          host_args.at(0) = x5370;
          host_args.at(1) = x5371;
          host_args.at(2) = x5372;
          host_args.at(3) = x5373;
          host(ctx, "log", "  A1 = %w", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":148:10))
        auto x5374 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x5374 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        auto x5375 = x5374 - x5176;
        // loc("cirgen/circuit/rv32im/ecall.cpp":71:6)
        if (x5375 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:71");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("cirgen/components/ram.cpp":148:10))
        auto x5376 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x5376 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        auto x5377 = x5376 - x5176;
        // loc("cirgen/circuit/rv32im/ecall.cpp":72:6)
        if (x5377 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:72");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":144:10))
        auto x5378 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5378 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        auto x5379 = x5378 - x34;
        // loc("cirgen/circuit/rv32im/ecall.cpp":73:6)
        if (x5379 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:73");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("cirgen/components/ram.cpp":144:10))
        auto x5380 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5380 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        auto x5381 = x5380 - x33;
        // loc("cirgen/circuit/rv32im/ecall.cpp":74:6)
        if (x5381 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:74");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("cirgen/components/ram.cpp":152:10))
        auto x5382 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5382 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        auto x5383 = x5382 - x99;
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        if (x5383 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:75");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("cirgen/components/ram.cpp":152:10))
        auto x5384 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5384 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        auto x5385 = x5384 - x99;
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        if (x5385 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:76");
        // loc("cirgen/circuit/rv32im/ecall.cpp":78:17)
        auto x5386 = x603 + x85;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5387 = x5386 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5388 = Fp(x5387.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5388);
            reg = x5388;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5389 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5389 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5390 = x5387 - x5389;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5391 = x5390 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5392 = Fp(x5391.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5392);
            reg = x5392;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5393 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5393 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5394 = x5391 - x5393;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5395 = x5394 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5396 = Fp(x5395.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5396);
            reg = x5396;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5397 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5397 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5398 = x5395 - x5397;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5399 = x5398 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5400 = Fp(x5399.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5400);
            reg = x5400;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5401 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5401 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5402 = x5399 - x5401;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5403 = x5402 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5403);
          reg = x5403;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5404 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5404 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5405 = x102 - x5404;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5406 = x5404 * x5405;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5406);
          reg = x5406;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5407 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5407 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5408 = x99 - x5404;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5409 = x5407 * x5408;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5409 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":79:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
      }
      if (x5208 != 0) {
        {
          host_args.at(0) = x34;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5410 = host_outs.at(0);
          auto x5411 = host_outs.at(1);
          auto x5412 = host_outs.at(2);
          auto x5413 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5410);
            reg = x5410;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5411);
            reg = x5411;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5412);
            reg = x5412;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5413);
            reg = x5413;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5414 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5415 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5416 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5416 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5417 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5417 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x34);
          reg = x34;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5176);
          reg = x5176;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5414);
          reg = x5414;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5415);
          reg = x5415;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5416);
          reg = x5416;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5417);
          reg = x5417;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5418 = host_outs.at(0);
          auto x5419 = host_outs.at(1);
          auto x5420 = host_outs.at(2);
          auto x5421 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5418);
            reg = x5418;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5419);
            reg = x5419;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5420);
            reg = x5420;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5421);
            reg = x5421;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5422 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5422 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5423 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5423 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5424 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5424 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5425 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5425 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5176);
          reg = x5176;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5422);
          reg = x5422;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5423);
          reg = x5423;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5424);
          reg = x5424;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5425);
          reg = x5425;
        }
        {
          host_args.at(0) = x32;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5426 = host_outs.at(0);
          auto x5427 = host_outs.at(1);
          auto x5428 = host_outs.at(2);
          auto x5429 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5426);
            reg = x5426;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5427);
            reg = x5427;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5428);
            reg = x5428;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5429);
            reg = x5429;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5430 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5431 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5431 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5432 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5432 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5433 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5433 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x32);
          reg = x32;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5176);
          reg = x5176;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5430);
          reg = x5430;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5431);
          reg = x5431;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5432);
          reg = x5432;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5433);
          reg = x5433;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":92:17)
        auto x5434 = x603 + x85;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5435 = x5434 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5436 = Fp(x5435.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5436);
            reg = x5436;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5437 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5437 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5438 = x5435 - x5437;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5439 = x5438 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5440 = Fp(x5439.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5440);
            reg = x5440;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5441 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5441 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5442 = x5439 - x5441;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5443 = x5442 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5444 = Fp(x5443.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5444);
            reg = x5444;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5445 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5445 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5446 = x5443 - x5445;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5447 = x5446 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5448 = Fp(x5447.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5448);
            reg = x5448;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5449 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5450 = x5447 - x5449;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5451 = x5450 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5451);
          reg = x5451;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5452 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5452 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5453 = x102 - x5452;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5454 = x5452 * x5453;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5454);
          reg = x5454;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5455 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5455 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5456 = x99 - x5452;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5457 = x5455 * x5456;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5457 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x76);
          reg = x76;
        }
      }
      if (x5211 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":102:3)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x603);
          reg = x603;
        }
        {
          host_args.at(0) = x34;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5458 = host_outs.at(0);
          auto x5459 = host_outs.at(1);
          auto x5460 = host_outs.at(2);
          auto x5461 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5458);
            reg = x5458;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5459);
            reg = x5459;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5460);
            reg = x5460;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5461);
            reg = x5461;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5462 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5463 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5464 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5464 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5465 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5465 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x34);
          reg = x34;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5176);
          reg = x5176;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5462);
          reg = x5462;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5463);
          reg = x5463;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5464);
          reg = x5464;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5465);
          reg = x5465;
        }
        {
          host_args.at(0) = x33;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5466 = host_outs.at(0);
          auto x5467 = host_outs.at(1);
          auto x5468 = host_outs.at(2);
          auto x5469 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5466);
            reg = x5466;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5467);
            reg = x5467;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5468);
            reg = x5468;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5469);
            reg = x5469;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5470 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5470 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5471 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5471 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5472 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5472 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5473 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5473 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x33);
          reg = x33;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5176);
          reg = x5176;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5470);
          reg = x5470;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5471);
          reg = x5471;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5472);
          reg = x5472;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5473);
          reg = x5473;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5474 = x5463 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5475 = x5462 + x5474;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5476 = x5464 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5477 = x5475 + x5476;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5478 = x5465 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5479 = x5477 + x5478;
        // loc("cirgen/circuit/rv32im/ecall.cpp":111:17)
        auto x5480 = x5479 - x85;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5481 = x5480 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5482 = Fp(x5481.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5482);
            reg = x5482;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5483 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5483 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5484 = x5481 - x5483;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5485 = x5484 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5486 = Fp(x5485.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5486);
            reg = x5486;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5487 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5487 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5488 = x5485 - x5487;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5489 = x5488 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5490 = Fp(x5489.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5490);
            reg = x5490;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5491 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5491 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5492 = x5489 - x5491;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5493 = x5492 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5494 = Fp(x5493.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5494);
            reg = x5494;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5495 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5495 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5496 = x5493 - x5495;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5497 = x5496 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5497);
          reg = x5497;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5498 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5498 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5499 = x102 - x5498;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5500 = x5498 * x5499;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5500);
          reg = x5500;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5501 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5501 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5502 = x99 - x5498;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5503 = x5501 * x5502;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5503 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":112:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/components/mux.h":37:25))
    auto x5504 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x5504 != Fp::invalid());
    if (x5504 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5505 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5505 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5506 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x5506 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg13"("cirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5507 = args[2][107 * steps + ((cycle - 1) & mask)];
      assert(x5507 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5508 = x5506 + x5507;
      if (x5508 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5509 = x102 - x5506;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5510 = x5509 - x5507;
      if (x5510 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5511 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5511 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5511);
          reg = x5511;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5512 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5512 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5513 = x5512 - x102;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5513);
          reg = x5513;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5514 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x5514 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5515 = (x5514 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5515);
          reg = x5515;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5516 = inv(x5514);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5516);
          reg = x5516;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5517 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x5517 != Fp::invalid());
      if (x5517 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5514 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5518 = x102 - x5517;
      if (x5518 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5519 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x5519 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5520 = x5514 * x5519;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5521 = x5520 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5521 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x5517 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x75);
          reg = x75;
        }
      }
      if (x5518 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5522 = x2132 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5523 = x1347 + x5522;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5524 = x2836 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5525 = x5523 + x5524;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5526 = x3591 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5527 = x5525 + x5526;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5528 = x4033 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5529 = x5527 + x5528;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5530 = x4398 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5531 = x5529 + x5530;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5532 = x4830 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5533 = x5531 + x5532;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5534 = x5175 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5535 = x5533 + x5534;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5536 = x5504 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5537 = x5535 + x5536;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5538 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x5538 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5539 = x5538 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5540 = x5537 + x5539;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5541 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x5541 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5542 = x5541 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5543 = x5540 + x5542;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5544 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x5544 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5545 = x5544 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5546 = x5543 + x5545;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5547 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x5547 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5548 = x5547 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5549 = x5546 + x5548;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5549);
          reg = x5549;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5550 = x603 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5551 = Fp(x5550.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5551);
          reg = x5551;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5552 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5552 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5553 = x5550 - x5552;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5554 = x5553 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5555 = Fp(x5554.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5555);
          reg = x5555;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5556 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5556 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5557 = x5554 - x5556;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5558 = x5557 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5559 = Fp(x5558.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5559);
          reg = x5559;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5560 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5560 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5561 = x5558 - x5560;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5562 = x5561 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5563 = Fp(x5562.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5563);
          reg = x5563;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5564 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5564 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5565 = x5562 - x5564;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5566 = x5565 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5566);
        reg = x5566;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5567 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5567 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5568 = x102 - x5567;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5569 = x5567 * x5568;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5569);
        reg = x5569;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x5570 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5570 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5571 = x99 - x5567;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5572 = x5570 * x5571;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5572 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5573 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x5573 != Fp::invalid());
      host_args.at(0) = x76;
      host_args.at(1) = x5573;
      host_args.at(2) = x5514;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5506 != 0) {
        {
          host_args.at(0) = x31;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5574 = host_outs.at(0);
          auto x5575 = host_outs.at(1);
          auto x5576 = host_outs.at(2);
          auto x5577 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5574);
            reg = x5574;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5575);
            reg = x5575;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5576);
            reg = x5576;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5577);
            reg = x5577;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5578 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5579 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5580 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5580 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5581 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5581 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5505);
          reg = x5505;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5578);
          reg = x5578;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5579);
          reg = x5579;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5580);
          reg = x5580;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5581);
          reg = x5581;
        }
        {
          host_args.at(0) = x30;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5582 = host_outs.at(0);
          auto x5583 = host_outs.at(1);
          auto x5584 = host_outs.at(2);
          auto x5585 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5582);
            reg = x5582;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5583);
            reg = x5583;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5584);
            reg = x5584;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5585);
            reg = x5585;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5586 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5586 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5587 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5588 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5588 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5589 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5589 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x30);
          reg = x30;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5505);
          reg = x5505;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5586);
          reg = x5586;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5587);
          reg = x5587;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5588);
          reg = x5588;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5589);
          reg = x5589;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5590 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x5590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5591 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x5591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5592 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x5592 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5593 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x5593 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5594 = x5591 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5595 = x5590 + x5594;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5596 = x5592 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5597 = x5595 + x5596;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5598 = x5593 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5599 = x5597 + x5598;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5600 = x5599 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5600);
          reg = x5600;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5601 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5602 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5603 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5604 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5604 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5605 = x5602 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5606 = x5601 + x5605;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5607 = x5603 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5608 = x5606 + x5607;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5609 = x5604 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5610 = x5608 + x5609;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5611 = x5610 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5611);
          reg = x5611;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5612 = x5579 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5613 = x5578 + x5612;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5614 = x5580 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5615 = x5613 + x5614;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5616 = x5581 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5617 = x5615 + x5616;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5618 = x5617 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5618);
          reg = x5618;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5619 = x5587 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5620 = x5586 + x5619;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5621 = x5588 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5622 = x5620 + x5621;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5623 = x5589 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5624 = x5622 + x5623;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5625 = x5624 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5625);
          reg = x5625;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5626 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5627 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5628 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5629 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5629 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5630 = x5627 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5631 = x5626 + x5630;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5632 = x5628 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5633 = x5631 + x5632;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5634 = x5629 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5635 = x5633 + x5634;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5635);
          reg = x5635;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5636 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:10)
        auto x5637 = x5636 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5638 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5638 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5639 = x5638 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5640 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5640 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5641 = x5640 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5642 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5642 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5643 = x5642 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5644 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5644 != Fp::invalid());
        host_args.at(0) = x5637;
        host_args.at(1) = x5639;
        host_args.at(2) = x5641;
        host_args.at(3) = x5643;
        host_args.at(4) = x5644;
        host(ctx, "log", "  FromEcall: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5507 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/13/Reg1"("cirgen/circuit/rv32im/sha.cpp":214:53))
        auto x5645 = args[2][109 * steps + ((cycle - 1) & mask)];
        assert(x5645 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":214:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5645);
          reg = x5645;
        }
        // loc("Top/Mux/4/Mux/13/Reg2"("cirgen/circuit/rv32im/sha.cpp":215:51))
        auto x5646 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x5646 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5646);
          reg = x5646;
        }
        // loc("Top/Mux/4/Mux/13/Reg3"("cirgen/circuit/rv32im/sha.cpp":216:83))
        auto x5647 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x5647 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x5648 = x5647 * x29;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x5649 = x5648 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5649);
          reg = x5649;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":217:83)
        auto x5650 = x5649 + x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5650);
          reg = x5650;
        }
        // loc("Top/Mux/4/Mux/13/Reg4"("cirgen/circuit/rv32im/sha.cpp":218:49))
        auto x5651 = args[2][113 * steps + ((cycle - 1) & mask)];
        assert(x5651 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5651);
          reg = x5651;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5652 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5652 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":221:10)
        auto x5653 = x5652 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5654 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5654 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x5655 = x5654 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5656 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5656 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5657 = x5656 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5658 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5658 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5659 = x5658 * x85;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5660 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5660 != Fp::invalid());
        host_args.at(0) = x5653;
        host_args.at(1) = x5655;
        host_args.at(2) = x5657;
        host_args.at(3) = x5659;
        host_args.at(4) = x5660;
        host(ctx, "log", "  FromPageFault: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5510 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x5661 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5661 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5661);
          reg = x5661;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x5662 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5662 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5662);
          reg = x5662;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x5663 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5663 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5663);
          reg = x5663;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x5664 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5664 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5664);
          reg = x5664;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":232:38))
        auto x5665 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x5665 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5665);
          reg = x5665;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5666 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5666 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5666);
          reg = x5666;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5667 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5667 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:24)
        auto x5668 = x5667 + x5514;
        {
          host_args.at(0) = x5668;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5669 = host_outs.at(0);
          auto x5670 = host_outs.at(1);
          auto x5671 = host_outs.at(2);
          auto x5672 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5669);
            reg = x5669;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5670);
            reg = x5670;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5671);
            reg = x5671;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5672);
            reg = x5672;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5673 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5673 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5674 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5674 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5675 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5675 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5676 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5676 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5668);
          reg = x5668;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5505);
          reg = x5505;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5673);
          reg = x5673;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5674);
          reg = x5674;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5675);
          reg = x5675;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5676);
          reg = x5676;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":237:24)
        auto x5677 = x5668 + x85;
        {
          host_args.at(0) = x5677;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5678 = host_outs.at(0);
          auto x5679 = host_outs.at(1);
          auto x5680 = host_outs.at(2);
          auto x5681 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5678);
            reg = x5678;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5679);
            reg = x5679;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5680);
            reg = x5680;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5681);
            reg = x5681;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5682 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5682 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5683 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5683 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5684 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5684 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5685 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5685 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5677);
          reg = x5677;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5505);
          reg = x5505;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5682);
          reg = x5682;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5683);
          reg = x5683;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5684);
          reg = x5684;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5685);
          reg = x5685;
        }
      }
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5686 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x5686 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5687 = (x5686 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5687);
          reg = x5687;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5688 = inv(x5686);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5688);
          reg = x5688;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5689 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x5689 != Fp::invalid());
      if (x5689 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5686 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5690 = x102 - x5689;
      if (x5690 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x5691 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5691 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5692 = x5686 * x5691;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5693 = x5692 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5693 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5694 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5695 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5696 = x5695 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5697 = x5694 + x5696;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5698 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5698 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5699 = x5698 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5700 = x5697 + x5699;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5701 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5701 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5702 = x5701 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5703 = x5700 + x5702;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5704 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5704 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5705 = x5704 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5706 = x5703 + x5705;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5707 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5707 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5708 = x5707 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5709 = x5706 + x5708;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5710 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5710 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5711 = x5710 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5712 = x5709 + x5711;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5713 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5713 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5714 = x5713 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5715 = x5712 + x5714;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5716 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5716 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5717 = x5716 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5718 = x5715 + x5717;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5719 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5719 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5720 = x5719 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5721 = x5718 + x5720;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5722 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5722 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5723 = x5722 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5724 = x5721 + x5723;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5725 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5725 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5726 = x5725 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5727 = x5724 + x5726;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5728 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5729 = x5728 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5730 = x5727 + x5729;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5731 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5731 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5732 = x5731 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5733 = x5730 + x5732;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5734 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5734 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5735 = x5734 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5736 = x5733 + x5735;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5737 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5737 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5738 = x5737 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5739 = x5736 + x5738;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5740 = x101 - x5739;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5741 = x5740 * x16;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5741);
        reg = x5741;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5742 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5742 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5743 = Fp(x5742.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5743);
          reg = x5743;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5744 = Fp(x5742.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5745 = x5744 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5745);
          reg = x5745;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5746 = Fp(x5742.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5747 = x5746 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5747);
          reg = x5747;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5748 = Fp(x5742.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5749 = x5748 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5749);
          reg = x5749;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5750 = Fp(x5742.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5751 = x5750 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5751);
          reg = x5751;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5752 = Fp(x5742.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5753 = x5752 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5753);
          reg = x5753;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5754 = Fp(x5742.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5755 = x5754 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5755);
          reg = x5755;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5756 = Fp(x5742.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5757 = x5756 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5757);
          reg = x5757;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5758 = Fp(x5742.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5759 = x5758 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5759);
          reg = x5759;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5760 = Fp(x5742.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5761 = x5760 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5761);
          reg = x5761;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5762 = Fp(x5742.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5763 = x5762 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5763);
          reg = x5763;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5764 = Fp(x5742.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5765 = x5764 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5765);
          reg = x5765;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5766 = Fp(x5742.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5767 = x5766 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5767);
          reg = x5767;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5768 = Fp(x5742.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5769 = x5768 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5769);
          reg = x5769;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5770 = Fp(x5742.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5771 = x5770 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5771);
          reg = x5771;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5772 = Fp(x5742.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5773 = x5772 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5773);
          reg = x5773;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5774 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5774 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5775 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5775 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5776 = x5775 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5777 = x5774 + x5776;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5778 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5779 = x5778 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5780 = x5777 + x5779;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5781 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5781 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5782 = x5781 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5783 = x5780 + x5782;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5784 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5784 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5785 = x5784 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5786 = x5783 + x5785;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5787 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5787 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5788 = x5787 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5789 = x5786 + x5788;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5790 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5790 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5791 = x5790 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5792 = x5789 + x5791;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5793 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5793 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5794 = x5793 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5795 = x5792 + x5794;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5796 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5796 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5797 = x5796 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5798 = x5795 + x5797;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5799 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5799 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5800 = x5799 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5801 = x5798 + x5800;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5802 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5803 = x5802 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5804 = x5801 + x5803;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5805 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5805 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5806 = x5805 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5807 = x5804 + x5806;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5808 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5808 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5809 = x5808 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5810 = x5807 + x5809;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5811 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5812 = x5811 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5813 = x5810 + x5812;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5814 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5814 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5815 = x5814 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5816 = x5813 + x5815;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5817 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5817 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5818 = x5817 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5819 = x5816 + x5818;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5820 = x5742 - x5819;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5821 = x5820 * x16;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5821);
        reg = x5821;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5822 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5823 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5824 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5825 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5825 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5826 = x5824 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5827 = x5825 + x5826;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5828 = x5822 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5829 = x5823 + x5828;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5830 = Fp(x5827.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5830);
          reg = x5830;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5831 = Fp(x5827.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5832 = x5831 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5832);
          reg = x5832;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5833 = Fp(x5827.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5834 = x5833 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5834);
          reg = x5834;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5835 = Fp(x5827.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5836 = x5835 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5836);
          reg = x5836;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5837 = Fp(x5827.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5838 = x5837 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5838);
          reg = x5838;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5839 = Fp(x5827.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5840 = x5839 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5840);
          reg = x5840;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5841 = Fp(x5827.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5842 = x5841 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5842);
          reg = x5842;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5843 = Fp(x5827.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5844 = x5843 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5844);
          reg = x5844;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5845 = Fp(x5827.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5846 = x5845 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5846);
          reg = x5846;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5847 = Fp(x5827.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5848 = x5847 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5848);
          reg = x5848;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5849 = Fp(x5827.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5850 = x5849 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5850);
          reg = x5850;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5851 = Fp(x5827.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5852 = x5851 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5852);
          reg = x5852;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5853 = Fp(x5827.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5854 = x5853 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5854);
          reg = x5854;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5855 = Fp(x5827.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5856 = x5855 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5856);
          reg = x5856;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5857 = Fp(x5827.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5858 = x5857 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5858);
          reg = x5858;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5859 = Fp(x5827.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5860 = x5859 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5860);
          reg = x5860;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5861 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x5861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5862 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x5862 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5863 = x5862 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5864 = x5861 + x5863;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5865 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x5865 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5866 = x5865 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5867 = x5864 + x5866;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5868 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x5868 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5869 = x5868 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5870 = x5867 + x5869;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5871 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x5871 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5872 = x5871 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5873 = x5870 + x5872;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5874 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x5874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5875 = x5874 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5876 = x5873 + x5875;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5877 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x5877 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5878 = x5877 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5879 = x5876 + x5878;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5880 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x5880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5881 = x5880 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5882 = x5879 + x5881;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5883 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x5883 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5884 = x5883 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5885 = x5882 + x5884;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5886 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x5886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5887 = x5886 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5888 = x5885 + x5887;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5889 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5889 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5890 = x5889 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5891 = x5888 + x5890;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5892 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5892 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5893 = x5892 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5894 = x5891 + x5893;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5895 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5895 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5896 = x5895 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5897 = x5894 + x5896;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5898 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5898 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5899 = x5898 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5900 = x5897 + x5899;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5901 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5901 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5902 = x5901 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5903 = x5900 + x5902;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5904 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5904 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5905 = x5904 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5906 = x5903 + x5905;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5907 = x5827 - x5906;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5908 = x5907 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x5909 = Fp(x5908.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5909);
          reg = x5909;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5910 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5910 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x5911 = x5908 - x5910;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x5912 = x5911 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x5913 = x102 - x5912;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x5914 = x5912 * x5913;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x5914 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x5915 = x5829 + x5908;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5916 = Fp(x5915.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5916);
          reg = x5916;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5917 = Fp(x5915.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5918 = x5917 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5918);
          reg = x5918;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5919 = Fp(x5915.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5920 = x5919 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5920);
          reg = x5920;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5921 = Fp(x5915.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5922 = x5921 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5922);
          reg = x5922;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5923 = Fp(x5915.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5924 = x5923 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5924);
          reg = x5924;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5925 = Fp(x5915.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5926 = x5925 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5926);
          reg = x5926;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5927 = Fp(x5915.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5928 = x5927 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5928);
          reg = x5928;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5929 = Fp(x5915.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5930 = x5929 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5930);
          reg = x5930;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5931 = Fp(x5915.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5932 = x5931 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5932);
          reg = x5932;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5933 = Fp(x5915.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5934 = x5933 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5934);
          reg = x5934;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5935 = Fp(x5915.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5936 = x5935 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5936);
          reg = x5936;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5937 = Fp(x5915.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5938 = x5937 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5938);
          reg = x5938;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5939 = Fp(x5915.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5940 = x5939 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5940);
          reg = x5940;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5941 = Fp(x5915.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5942 = x5941 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5942);
          reg = x5942;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5943 = Fp(x5915.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5944 = x5943 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5944);
          reg = x5944;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5945 = Fp(x5915.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5946 = x5945 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5946);
          reg = x5946;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5947 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5948 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5948 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5949 = x5948 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5950 = x5947 + x5949;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5951 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x5951 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5952 = x5951 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5953 = x5950 + x5952;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5954 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x5954 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5955 = x5954 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5956 = x5953 + x5955;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5957 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x5957 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5958 = x5957 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5959 = x5956 + x5958;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5960 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x5960 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5961 = x5960 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5962 = x5959 + x5961;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5963 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x5963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5964 = x5963 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5965 = x5962 + x5964;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5966 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x5966 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5967 = x5966 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5968 = x5965 + x5967;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5969 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x5969 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5970 = x5969 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5971 = x5968 + x5970;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5972 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x5972 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5973 = x5972 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5974 = x5971 + x5973;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5975 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5975 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5976 = x5975 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5977 = x5974 + x5976;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5978 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5978 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5979 = x5978 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5980 = x5977 + x5979;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5981 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5981 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5982 = x5981 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5983 = x5980 + x5982;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5984 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5984 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5985 = x5984 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5986 = x5983 + x5985;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5987 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x5987 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5988 = x5987 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5989 = x5986 + x5988;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5990 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x5990 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5991 = x5990 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5992 = x5989 + x5991;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5993 = x5915 - x5992;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5994 = x5993 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x5995 = Fp(x5994.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5995);
          reg = x5995;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5996 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5996 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x5997 = x5994 - x5996;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x5998 = x5997 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x5999 = x102 - x5998;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6000 = x5998 * x5999;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6000 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6001 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6001 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6002 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6002 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6003 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6003 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6004 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6004 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6005 = x6003 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6006 = x6004 + x6005;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6007 = x6001 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6008 = x6002 + x6007;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6009 = Fp(x6006.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6009);
          reg = x6009;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6010 = Fp(x6006.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6011 = x6010 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6011);
          reg = x6011;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6012 = Fp(x6006.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6013 = x6012 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6013);
          reg = x6013;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6014 = Fp(x6006.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6015 = x6014 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6015);
          reg = x6015;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6016 = Fp(x6006.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6017 = x6016 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6017);
          reg = x6017;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6018 = Fp(x6006.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6019 = x6018 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6019);
          reg = x6019;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6020 = Fp(x6006.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6021 = x6020 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6021);
          reg = x6021;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6022 = Fp(x6006.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6023 = x6022 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6023);
          reg = x6023;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6024 = Fp(x6006.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6025 = x6024 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6025);
          reg = x6025;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6026 = Fp(x6006.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6027 = x6026 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6027);
          reg = x6027;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6028 = Fp(x6006.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6029 = x6028 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6029);
          reg = x6029;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6030 = Fp(x6006.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6031 = x6030 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6031);
          reg = x6031;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6032 = Fp(x6006.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6033 = x6032 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6033);
          reg = x6033;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6034 = Fp(x6006.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6035 = x6034 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6035);
          reg = x6035;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6036 = Fp(x6006.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6037 = x6036 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6037);
          reg = x6037;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6038 = Fp(x6006.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6039 = x6038 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6039);
          reg = x6039;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6040 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6040 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6041 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6041 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6042 = x6041 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6043 = x6040 + x6042;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6044 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6044 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6045 = x6044 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6046 = x6043 + x6045;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6047 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6047 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6048 = x6047 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6049 = x6046 + x6048;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6050 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6050 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6051 = x6050 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6052 = x6049 + x6051;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6053 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6053 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6054 = x6053 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6055 = x6052 + x6054;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6056 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6056 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6057 = x6056 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6058 = x6055 + x6057;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6059 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6059 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6060 = x6059 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6061 = x6058 + x6060;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6062 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6062 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6063 = x6062 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6064 = x6061 + x6063;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6065 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6065 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6066 = x6065 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6067 = x6064 + x6066;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6068 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6068 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6069 = x6068 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6070 = x6067 + x6069;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6071 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6071 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6072 = x6071 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6073 = x6070 + x6072;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6074 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6074 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6075 = x6074 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6076 = x6073 + x6075;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6077 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6077 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6078 = x6077 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6079 = x6076 + x6078;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6080 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6080 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6081 = x6080 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6082 = x6079 + x6081;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6083 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6083 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6084 = x6083 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6085 = x6082 + x6084;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6086 = x6006 - x6085;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6087 = x6086 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6088 = Fp(x6087.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6088);
          reg = x6088;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6089 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x6089 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6090 = x6087 - x6089;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6091 = x6090 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6092 = x102 - x6091;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6093 = x6091 * x6092;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6093 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6094 = x6008 + x6087;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6095 = Fp(x6094.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6095);
          reg = x6095;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6096 = Fp(x6094.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6097 = x6096 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6097);
          reg = x6097;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6098 = Fp(x6094.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6099 = x6098 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6099);
          reg = x6099;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6100 = Fp(x6094.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6101 = x6100 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6101);
          reg = x6101;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6102 = Fp(x6094.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6103 = x6102 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6103);
          reg = x6103;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6104 = Fp(x6094.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6105 = x6104 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6105);
          reg = x6105;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6106 = Fp(x6094.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6107 = x6106 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6107);
          reg = x6107;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6108 = Fp(x6094.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6109 = x6108 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6109);
          reg = x6109;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6110 = Fp(x6094.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6111 = x6110 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6111);
          reg = x6111;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6112 = Fp(x6094.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6113 = x6112 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6113);
          reg = x6113;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6114 = Fp(x6094.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6115 = x6114 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6115);
          reg = x6115;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6116 = Fp(x6094.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6117 = x6116 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6117);
          reg = x6117;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6118 = Fp(x6094.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6119 = x6118 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6119);
          reg = x6119;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6120 = Fp(x6094.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6121 = x6120 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6121);
          reg = x6121;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6122 = Fp(x6094.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6123 = x6122 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6123);
          reg = x6123;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6124 = Fp(x6094.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6125 = x6124 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6125);
          reg = x6125;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6126 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6126 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6127 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6127 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6128 = x6127 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6129 = x6126 + x6128;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6130 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6130 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6131 = x6130 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6132 = x6129 + x6131;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6133 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6134 = x6133 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6135 = x6132 + x6134;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6136 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6136 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6137 = x6136 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6138 = x6135 + x6137;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6139 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6139 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6140 = x6139 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6141 = x6138 + x6140;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6142 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6142 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6143 = x6142 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6144 = x6141 + x6143;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6145 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6145 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6146 = x6145 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6147 = x6144 + x6146;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6148 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6148 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6149 = x6148 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6150 = x6147 + x6149;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6151 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6151 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6152 = x6151 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6153 = x6150 + x6152;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6154 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6154 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6155 = x6154 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6156 = x6153 + x6155;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6157 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6157 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6158 = x6157 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6159 = x6156 + x6158;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6160 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6160 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6161 = x6160 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6162 = x6159 + x6161;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6163 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6163 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6164 = x6163 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6165 = x6162 + x6164;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6166 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6166 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6167 = x6166 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6168 = x6165 + x6167;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6169 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6169 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6170 = x6169 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6171 = x6168 + x6170;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6172 = x6094 - x6171;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6173 = x6172 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6174 = Fp(x6173.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6174);
          reg = x6174;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6175 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6176 = x6173 - x6175;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6177 = x6176 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6178 = x102 - x6177;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6179 = x6177 * x6178;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6179 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/components/mux.h":37:25))
    auto x6180 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x6180 != Fp::invalid());
    if (x6180 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6181 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x6181 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg9"("cirgen/circuit/rv32im/sha.cpp":259:70))
      auto x6182 = args[2][103 * steps + ((cycle - 1) & mask)];
      assert(x6182 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg11"("cirgen/circuit/rv32im/sha.cpp":260:70))
      auto x6183 = args[2][105 * steps + ((cycle - 1) & mask)];
      assert(x6183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":261:29)
      auto x6184 = x6182 + x6183;
      if (x6184 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":263:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6185 = x102 - x6182;
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6186 = x6185 - x6183;
      if (x6186 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6187 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x6187 != Fp::invalid());
        if (x6187 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":269:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":271:20)
        auto x6188 = x102 - x6187;
        if (x6188 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6189 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x6189 != Fp::invalid());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6189);
            reg = x6189;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":274:42))
          auto x6190 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x6190 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":274:42)
          auto x6191 = x6190 - x102;
          // loc("cirgen/circuit/rv32im/sha.cpp":274:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6191);
            reg = x6191;
          }
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6192 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x6192 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6193 = (x6192 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6193);
          reg = x6193;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6194 = inv(x6192);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6194);
          reg = x6194;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6195 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x6195 != Fp::invalid());
      if (x6195 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x6192 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x6196 = x102 - x6195;
      if (x6196 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6197 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x6197 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6198 = x6192 * x6197;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6199 = x6198 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x6199 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x6195 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6200 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6200 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":281:17)
        auto x6201 = x102 - x6200;
        if (x6201 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":281:21)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x75);
            reg = x75;
          }
        }
        if (x6200 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":282:17)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
      }
      if (x6196 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6202 = x2132 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6203 = x1347 + x6202;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6204 = x2836 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6205 = x6203 + x6204;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6206 = x3591 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6207 = x6205 + x6206;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6208 = x4033 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6209 = x6207 + x6208;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6210 = x4398 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6211 = x6209 + x6210;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6212 = x4830 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6213 = x6211 + x6212;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6214 = x5175 * x77;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6215 = x6213 + x6214;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6216 = x5504 * x76;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6217 = x6215 + x6216;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6218 = x6180 * x75;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6219 = x6217 + x6218;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6220 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x6220 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6221 = x6220 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6222 = x6219 + x6221;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6223 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x6223 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6224 = x6223 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6225 = x6222 + x6224;
        // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6226 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x6226 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6227 = x6226 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6228 = x6225 + x6227;
        // loc("cirgen/circuit/rv32im/sha.cpp":284:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6228);
          reg = x6228;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6229 = x603 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6230 = Fp(x6229.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6230);
          reg = x6230;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x6231 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x6231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6232 = x6229 - x6231;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6233 = x6232 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6234 = Fp(x6233.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6234);
          reg = x6234;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x6235 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x6235 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6236 = x6233 - x6235;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6237 = x6236 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6238 = Fp(x6237.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6238);
          reg = x6238;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x6239 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6239 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6240 = x6237 - x6239;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6241 = x6240 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6242 = Fp(x6241.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6242);
          reg = x6242;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6243 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x6243 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6244 = x6241 - x6243;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6245 = x6244 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6245);
        reg = x6245;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6246 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6246 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6247 = x102 - x6246;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6248 = x6246 * x6247;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6248);
        reg = x6248;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6249 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x6249 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6250 = x99 - x6246;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6251 = x6249 * x6250;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6251 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":287:40))
      auto x6252 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x6252 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":287:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6252);
        reg = x6252;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":288:38))
      auto x6253 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x6253 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":288:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6253);
        reg = x6253;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":289:34))
      auto x6254 = args[2][133 * steps + ((cycle - 1) & mask)];
      assert(x6254 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":289:3)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6254);
        reg = x6254;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":290:34))
      auto x6255 = args[2][134 * steps + ((cycle - 1) & mask)];
      assert(x6255 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6255);
        reg = x6255;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":291:36))
      auto x6256 = args[2][138 * steps + ((cycle - 1) & mask)];
      assert(x6256 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6256);
        reg = x6256;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6257 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x6257 != Fp::invalid());
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6257);
        reg = x6257;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6258 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x6258 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6259 = (x6258 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6259);
          reg = x6259;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6260 = inv(x6258);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6260);
          reg = x6260;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6261 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6261 != Fp::invalid());
      if (x6261 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x6258 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x6262 = x102 - x6261;
      if (x6262 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x6263 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6263 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6264 = x6258 * x6263;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6265 = x6264 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x6265 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6266 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x6266 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":300:8)
      auto x6267 = x6266 * x85;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6268 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x6268 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":301:8)
      auto x6269 = x6268 * x85;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x6270 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x6270 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":302:8)
      auto x6271 = x6270 * x85;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6272 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6272 != Fp::invalid());
      host_args.at(0) = x75;
      host_args.at(1) = x6272;
      host_args.at(2) = x6192;
      host_args.at(3) = x6267;
      host_args.at(4) = x6269;
      host_args.at(5) = x6271;
      host_args.at(6) = x6258;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = 0x%x, data1 = 0x%x, state = 0x%x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":306:15)
      auto x6273 = x102 - x6272;
      if (x6273 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6274 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6274 != Fp::invalid());
        if (x6274 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6275 = x6266 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6276 = x6275 - x6192;
          {
            host_args.at(0) = x6276;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6277 = host_outs.at(0);
            auto x6278 = host_outs.at(1);
            auto x6279 = host_outs.at(2);
            auto x6280 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6277);
              reg = x6277;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6278);
              reg = x6278;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6279);
              reg = x6279;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6280);
              reg = x6280;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6281 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6281 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6282 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6282 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6283 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6283 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6284 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6284 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6276);
            reg = x6276;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6181);
            reg = x6181;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6281);
            reg = x6281;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6282);
            reg = x6282;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6283);
            reg = x6283;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6284);
            reg = x6284;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":308:16)
        auto x6285 = x102 - x6274;
        if (x6285 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6286 = x6266 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6287 = x6286 - x6192;
          {
            host_args.at(0) = x6287;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6288 = host_outs.at(0);
            auto x6289 = host_outs.at(1);
            auto x6290 = host_outs.at(2);
            auto x6291 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6288);
              reg = x6288;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6289);
              reg = x6289;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6290);
              reg = x6290;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6291);
              reg = x6291;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6292 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6292 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6293 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6293 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6294 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6294 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6295 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6295 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6287);
            reg = x6287;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6181);
            reg = x6181;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6292);
            reg = x6292;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6293);
            reg = x6293;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6294);
            reg = x6294;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6295);
            reg = x6295;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
        auto x6296 = x15 - x6192;
        {
          host_args.at(0) = x6296;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6297 = host_outs.at(0);
          auto x6298 = host_outs.at(1);
          auto x6299 = host_outs.at(2);
          auto x6300 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6297);
            reg = x6297;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6298);
            reg = x6298;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6299);
            reg = x6299;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6300);
            reg = x6300;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6301 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6301 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6302 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6302 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6303 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6303 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6304 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6304 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6296);
          reg = x6296;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6181);
          reg = x6181;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6301);
          reg = x6301;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6302);
          reg = x6302;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6303);
          reg = x6303;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6304);
          reg = x6304;
        }
      }
      if (x6272 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6305 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6305 != Fp::invalid());
        if (x6305 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6306 = x6268 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6307 = x6306 - x6192;
          {
            host_args.at(0) = x6307;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6308 = host_outs.at(0);
            auto x6309 = host_outs.at(1);
            auto x6310 = host_outs.at(2);
            auto x6311 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6308);
              reg = x6308;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6309);
              reg = x6309;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6310);
              reg = x6310;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6311);
              reg = x6311;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6312 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6312 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6313 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6313 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6314 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6314 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6315 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6315 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6307);
            reg = x6307;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6181);
            reg = x6181;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6312);
            reg = x6312;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6313);
            reg = x6313;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6314);
            reg = x6314;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6315);
            reg = x6315;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":313:16)
        auto x6316 = x102 - x6305;
        if (x6316 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6317 = x6268 + x78;
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6318 = x6317 - x6192;
          {
            host_args.at(0) = x6318;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6319 = host_outs.at(0);
            auto x6320 = host_outs.at(1);
            auto x6321 = host_outs.at(2);
            auto x6322 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6319);
              reg = x6319;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6320);
              reg = x6320;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6321);
              reg = x6321;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6322);
              reg = x6322;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6323 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6323 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6324 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6324 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6325 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6325 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6326 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6326 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6318);
            reg = x6318;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6181);
            reg = x6181;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6323);
            reg = x6323;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6324);
            reg = x6324;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6325);
            reg = x6325;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6326);
            reg = x6326;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
        auto x6327 = x14 - x6192;
        {
          host_args.at(0) = x6327;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6328 = host_outs.at(0);
          auto x6329 = host_outs.at(1);
          auto x6330 = host_outs.at(2);
          auto x6331 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6328);
            reg = x6328;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6329);
            reg = x6329;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6330);
            reg = x6330;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6331);
            reg = x6331;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6332 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6333 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6333 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6334 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6334 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6335 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6335 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6327);
          reg = x6327;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6181);
          reg = x6181;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6332);
          reg = x6332;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6333);
          reg = x6333;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6334);
          reg = x6334;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6335);
          reg = x6335;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6336 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x6336 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6337 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6337 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6338 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6338 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6339 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x6339 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6340 = x6338 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6341 = x6339 + x6340;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6342 = x6336 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6343 = x6337 + x6342;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6344 = Fp(x6341.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6344);
          reg = x6344;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6345 = Fp(x6341.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6346 = x6345 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6346);
          reg = x6346;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6347 = Fp(x6341.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6348 = x6347 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6348);
          reg = x6348;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6349 = Fp(x6341.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6350 = x6349 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6350);
          reg = x6350;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6351 = Fp(x6341.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6352 = x6351 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6352);
          reg = x6352;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6353 = Fp(x6341.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6354 = x6353 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6354);
          reg = x6354;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6355 = Fp(x6341.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6356 = x6355 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6356);
          reg = x6356;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6357 = Fp(x6341.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6358 = x6357 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6358);
          reg = x6358;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6359 = Fp(x6341.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6360 = x6359 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6360);
          reg = x6360;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6361 = Fp(x6341.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6362 = x6361 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6362);
          reg = x6362;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6363 = Fp(x6341.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6364 = x6363 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6364);
          reg = x6364;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6365 = Fp(x6341.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6366 = x6365 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6366);
          reg = x6366;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6367 = Fp(x6341.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6368 = x6367 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6368);
          reg = x6368;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6369 = Fp(x6341.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6370 = x6369 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6370);
          reg = x6370;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6371 = Fp(x6341.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6372 = x6371 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6372);
          reg = x6372;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6373 = Fp(x6341.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6374 = x6373 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6374);
          reg = x6374;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6375 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6375 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6376 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6376 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6377 = x6376 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6378 = x6375 + x6377;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6379 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6379 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6380 = x6379 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6381 = x6378 + x6380;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6382 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6382 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6383 = x6382 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6384 = x6381 + x6383;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6385 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6386 = x6385 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6387 = x6384 + x6386;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6388 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6388 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6389 = x6388 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6390 = x6387 + x6389;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6391 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6392 = x6391 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6393 = x6390 + x6392;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6394 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x6394 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6395 = x6394 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6396 = x6393 + x6395;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6397 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x6397 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6398 = x6397 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6399 = x6396 + x6398;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6400 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x6400 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6401 = x6400 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6402 = x6399 + x6401;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6403 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6403 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6404 = x6403 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6405 = x6402 + x6404;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6406 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6406 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6407 = x6406 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6408 = x6405 + x6407;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6409 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6409 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6410 = x6409 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6411 = x6408 + x6410;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6412 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6412 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6413 = x6412 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6414 = x6411 + x6413;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6415 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6415 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6416 = x6415 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6417 = x6414 + x6416;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6418 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6419 = x6418 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6420 = x6417 + x6419;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6421 = x6341 - x6420;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6422 = x6421 * x16;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6422);
        reg = x6422;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6423 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6423 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6424 = x6343 + x6423;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6425 = Fp(x6424.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6425);
          reg = x6425;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6426 = Fp(x6424.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6427 = x6426 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6427);
          reg = x6427;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6428 = Fp(x6424.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6429 = x6428 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6429);
          reg = x6429;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6430 = Fp(x6424.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6431 = x6430 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6431);
          reg = x6431;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6432 = Fp(x6424.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6433 = x6432 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6433);
          reg = x6433;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6434 = Fp(x6424.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6435 = x6434 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6435);
          reg = x6435;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6436 = Fp(x6424.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6437 = x6436 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6437);
          reg = x6437;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6438 = Fp(x6424.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6439 = x6438 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6439);
          reg = x6439;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6440 = Fp(x6424.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6441 = x6440 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6441);
          reg = x6441;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6442 = Fp(x6424.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6443 = x6442 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6443);
          reg = x6443;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6444 = Fp(x6424.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6445 = x6444 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6445);
          reg = x6445;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6446 = Fp(x6424.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6447 = x6446 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6447);
          reg = x6447;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6448 = Fp(x6424.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6449 = x6448 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6449);
          reg = x6449;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6450 = Fp(x6424.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6451 = x6450 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6451);
          reg = x6451;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6452 = Fp(x6424.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6453 = x6452 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6453);
          reg = x6453;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6454 = Fp(x6424.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6455 = x6454 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6455);
          reg = x6455;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6456 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6456 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6457 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6457 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6458 = x6457 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6459 = x6456 + x6458;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6460 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6460 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6461 = x6460 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6462 = x6459 + x6461;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6463 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6463 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6464 = x6463 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6465 = x6462 + x6464;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6466 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6466 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6467 = x6466 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6468 = x6465 + x6467;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6469 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6469 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6470 = x6469 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6471 = x6468 + x6470;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6472 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6472 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6473 = x6472 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6474 = x6471 + x6473;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6475 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6475 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6476 = x6475 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6477 = x6474 + x6476;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6478 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6478 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6479 = x6478 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6480 = x6477 + x6479;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6481 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x6481 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6482 = x6481 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6483 = x6480 + x6482;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6484 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x6484 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6485 = x6484 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6486 = x6483 + x6485;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6487 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x6487 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6488 = x6487 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6489 = x6486 + x6488;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6490 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x6490 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6491 = x6490 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6492 = x6489 + x6491;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6493 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x6493 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6494 = x6493 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6495 = x6492 + x6494;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6496 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x6496 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6497 = x6496 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6498 = x6495 + x6497;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6499 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x6499 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6500 = x6499 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6501 = x6498 + x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6502 = x6424 - x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6503 = x6502 * x16;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6503);
        reg = x6503;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6504 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x6504 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6505 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6505 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6506 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6506 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6507 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x6507 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6508 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x6508 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6509 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x6509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6510 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x6510 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6511 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x6511 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6512 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x6512 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6513 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6513 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6514 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6514 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6515 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6515 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6516 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6517 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6517 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6518 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6518 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6519 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6519 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6520 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6520 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6521 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6521 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6522 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6523 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6524 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6525 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6526 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6527 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6528 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6529 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6530 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6531 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6532 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6533 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6534 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6535 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6535 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6536 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x6536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6537 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x6537 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6538 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x6538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6539 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6540 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x6540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6541 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x6541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6542 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6543 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x6543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6544 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x6544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6545 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6546 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6547 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6548 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6549 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6550 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6551 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6552 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6553 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6554 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6555 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6556 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6557 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6558 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6559 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6560 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6561 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6562 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6563 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6564 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6565 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6566 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6567 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6568 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x6568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6569 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x6569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6570 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x6570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6571 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x6571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6572 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6573 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x6573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6574 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x6574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6575 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6576 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x6576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6577 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6578 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6579 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6580 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6581 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6582 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6583 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6584 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6585 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6586 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6587 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6588 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6589 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6590 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6591 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6592 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6593 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6594 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6595 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6596 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6597 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6598 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6599 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6600 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6601 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6602 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6603 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6604 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6605 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6606 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6607 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6608 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6609 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6610 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6611 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6612 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6613 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6614 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6615 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6616 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6617 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6618 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6619 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6620 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6621 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6622 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6623 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6624 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6625 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6626 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6627 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6628 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6629 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6630 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6631 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6632 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6633 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6634 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6635 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6636 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6637 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6638 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6639 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6640 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6641 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6642 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6643 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6644 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6645 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6646 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6647 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6648 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6649 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6650 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6651 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6652 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6653 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6654 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6655 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6656 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6657 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6658 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6659 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6660 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6661 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6662 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6663 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6664 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6665 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6666 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6667 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6668 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6669 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6670 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6671 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6672 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6673 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6674 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6675 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6676 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6677 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6678 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6679 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6680 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6681 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6682 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6683 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6684 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6685 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6686 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6687 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6688 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6689 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6690 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6691 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6692 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6693 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6694 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6695 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6696 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6697 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6698 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6699 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6700 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6701 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6702 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6703 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6704 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6705 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6706 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6707 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6708 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6709 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6710 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6711 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6712 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6713 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6714 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6715 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6716 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6717 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6718 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6719 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6720 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6721 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6722 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6723 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6724 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6725 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6726 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6727 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6728 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6729 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6730 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6731 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6732 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6733 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6734 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6735 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6736 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6737 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6738 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6739 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6740 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6741 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6742 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6743 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6744 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6745 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6746 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6747 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6748 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6749 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6750 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6751 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6752 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6753 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6754 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6755 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6756 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6757 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6758 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6759 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6760 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6761 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6762 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6763 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6763 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6764 = x6761 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6765 = x6760 + x6764;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6766 = x6763 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6767 = x6762 + x6766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6768 = x6517 + x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6769 = x6517 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6770 = x6769 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6771 = x6768 - x6770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6772 = x6518 + x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6773 = x6518 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6774 = x6773 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6775 = x6772 - x6774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6776 = x6519 + x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6777 = x6519 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6778 = x6777 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6779 = x6776 - x6778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6780 = x6520 + x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6781 = x6520 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6782 = x6781 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6783 = x6780 - x6782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6784 = x6521 + x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6785 = x6521 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6786 = x6785 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6787 = x6784 - x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6788 = x6522 + x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6789 = x6522 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6790 = x6789 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6791 = x6788 - x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6792 = x6523 + x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6793 = x6523 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6794 = x6793 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6795 = x6792 - x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6796 = x6524 + x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6797 = x6524 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6798 = x6797 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6799 = x6796 - x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6800 = x6525 + x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6801 = x6525 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6802 = x6801 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6803 = x6800 - x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6804 = x6526 + x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6805 = x6526 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6806 = x6805 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6807 = x6804 - x6806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6808 = x6527 + x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6809 = x6527 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6810 = x6809 * x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6811 = x6808 - x6810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6812 = x6528 + x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6813 = x6528 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6814 = x6813 * x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6815 = x6812 - x6814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6816 = x6529 + x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6817 = x6529 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6818 = x6817 * x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6819 = x6816 - x6818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6820 = x6530 + x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6821 = x6530 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6822 = x6821 * x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6823 = x6820 - x6822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6824 = x6531 + x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6825 = x6531 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6826 = x6825 * x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6827 = x6824 - x6826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6828 = x6532 + x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6829 = x6532 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6830 = x6829 * x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6831 = x6828 - x6830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6832 = x6533 + x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6833 = x6533 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6834 = x6833 * x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6835 = x6832 - x6834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6836 = x6534 + x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6837 = x6534 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6838 = x6837 * x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6839 = x6836 - x6838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6840 = x6535 + x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6841 = x6535 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6842 = x6841 * x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6843 = x6840 - x6842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6844 = x6504 + x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6845 = x6504 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6846 = x6845 * x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6847 = x6844 - x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6848 = x6505 + x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6849 = x6505 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6850 = x6849 * x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6851 = x6848 - x6850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6852 = x6506 + x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6853 = x6506 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6854 = x6853 * x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6855 = x6852 - x6854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6856 = x6507 + x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6857 = x6507 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6858 = x6857 * x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6859 = x6856 - x6858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6860 = x6508 + x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6861 = x6508 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6862 = x6861 * x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6863 = x6860 - x6862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6864 = x6509 + x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6865 = x6509 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6866 = x6865 * x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6867 = x6864 - x6866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6868 = x6510 + x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6869 = x6510 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6870 = x6869 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6871 = x6868 - x6870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6872 = x6511 + x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6873 = x6511 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6874 = x6873 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6875 = x6872 - x6874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6876 = x6512 + x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6877 = x6512 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6878 = x6877 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6879 = x6876 - x6878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6880 = x6513 + x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6881 = x6513 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6882 = x6881 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6883 = x6880 - x6882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6884 = x6514 + x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6885 = x6514 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6886 = x6885 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6887 = x6884 - x6886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6888 = x6515 + x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6889 = x6515 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6890 = x6889 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6891 = x6888 - x6890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6892 = x6516 + x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6893 = x6516 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6894 = x6893 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6895 = x6892 - x6894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6896 = x6506 + x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6897 = x6853 * x6771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6898 = x6896 - x6897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6899 = x6507 + x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6900 = x6857 * x6775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6901 = x6899 - x6900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6902 = x6508 + x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6903 = x6861 * x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6904 = x6902 - x6903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6905 = x6509 + x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6906 = x6865 * x6783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6907 = x6905 - x6906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6908 = x6510 + x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6909 = x6869 * x6787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6910 = x6908 - x6909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6911 = x6511 + x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6912 = x6873 * x6791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6913 = x6911 - x6912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6914 = x6512 + x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6915 = x6877 * x6795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6916 = x6914 - x6915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6917 = x6513 + x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6918 = x6881 * x6799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6919 = x6917 - x6918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6920 = x6514 + x6803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6921 = x6885 * x6803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6922 = x6920 - x6921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6923 = x6515 + x6807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6924 = x6889 * x6807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6925 = x6923 - x6924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6926 = x6516 + x6811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6927 = x6893 * x6811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6928 = x6926 - x6927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6929 = x6517 + x6815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6930 = x6769 * x6815;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6931 = x6929 - x6930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6932 = x6518 + x6819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6933 = x6773 * x6819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6934 = x6932 - x6933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6935 = x6519 + x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6936 = x6777 * x6823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6937 = x6935 - x6936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6938 = x6520 + x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6939 = x6781 * x6827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6940 = x6938 - x6939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6941 = x6521 + x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6942 = x6785 * x6831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6943 = x6941 - x6942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6944 = x6522 + x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6945 = x6789 * x6835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6946 = x6944 - x6945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6947 = x6523 + x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6948 = x6793 * x6839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6949 = x6947 - x6948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6524 + x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6951 = x6797 * x6843;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6952 = x6950 - x6951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6953 = x6525 + x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6954 = x6801 * x6847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6955 = x6953 - x6954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6956 = x6526 + x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6957 = x6805 * x6851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6958 = x6956 - x6957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6959 = x6527 + x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6960 = x6809 * x6855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6961 = x6959 - x6960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6528 + x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6963 = x6813 * x6859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6964 = x6962 - x6963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6965 = x6529 + x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6966 = x6817 * x6863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6967 = x6965 - x6966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6968 = x6530 + x6867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6969 = x6821 * x6867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6970 = x6968 - x6969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6971 = x6531 + x6871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6972 = x6825 * x6871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6973 = x6971 - x6972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6532 + x6875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6975 = x6829 * x6875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6976 = x6974 - x6975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6977 = x6533 + x6879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6978 = x6833 * x6879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6979 = x6977 - x6978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6980 = x6534 + x6883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6981 = x6837 * x6883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6982 = x6980 - x6981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6535 + x6887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6984 = x6841 * x6887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6985 = x6983 - x6984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6504 + x6891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6987 = x6845 * x6891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6988 = x6986 - x6987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6989 = x6505 + x6895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6990 = x6849 * x6895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6991 = x6989 - x6990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6992 = x6643 + x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6993 = x6643 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6994 = x6993 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6995 = x6992 - x6994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6996 = x6644 + x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6997 = x6644 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6998 = x6997 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6999 = x6996 - x6998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7000 = x6645 + x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7001 = x6645 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7002 = x7001 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7003 = x7000 - x7002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7004 = x6646 + x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7005 = x6646 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7006 = x7005 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7007 = x7004 - x7006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7008 = x6647 + x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7009 = x6647 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7010 = x7009 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7011 = x7008 - x7010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7012 = x6648 + x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7013 = x6648 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7014 = x7013 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7015 = x7012 - x7014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7016 = x6649 + x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7017 = x6649 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7018 = x7017 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7019 = x7016 - x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7020 = x6650 + x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7021 = x6650 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7022 = x7021 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7023 = x7020 - x7022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7024 = x6651 + x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7025 = x6651 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7026 = x7025 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7027 = x7024 - x7026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7028 = x6652 + x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7029 = x6652 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7030 = x7029 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7031 = x7028 - x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7032 = x6653 + x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7033 = x6653 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7034 = x7033 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7035 = x7032 - x7034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7036 = x6654 + x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7037 = x6654 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7038 = x7037 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7039 = x7036 - x7038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7040 = x6655 + x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7041 = x6655 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7042 = x7041 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7043 = x7040 - x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7044 = x6656 + x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7045 = x6656 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7046 = x7045 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7047 = x7044 - x7046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7048 = x6657 + x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7049 = x6657 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7050 = x7049 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7051 = x7048 - x7050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7052 = x6658 + x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7053 = x6658 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7054 = x7053 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7055 = x7052 - x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7056 = x6659 + x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7057 = x6659 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7058 = x7057 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7059 = x7056 - x7058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7060 = x6660 + x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7061 = x6660 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7062 = x7061 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7063 = x7060 - x7062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7064 = x6661 + x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7065 = x6661 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7066 = x7065 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7067 = x7064 - x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7068 = x6662 + x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7069 = x6662 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7070 = x7069 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7071 = x7068 - x7070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7072 = x6663 + x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7073 = x6663 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7074 = x7073 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7075 = x7072 - x7074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7076 = x6632 + x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7077 = x6632 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7078 = x7077 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7079 = x7076 - x7078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7080 = x6633 + x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7081 = x6633 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7082 = x7081 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7083 = x7080 - x7082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7084 = x6634 + x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7085 = x6634 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7086 = x7085 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7087 = x7084 - x7086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7088 = x6635 + x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7089 = x6635 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7090 = x7089 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7091 = x7088 - x7090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7092 = x6636 + x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7093 = x6636 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7094 = x7093 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7095 = x7092 - x7094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7096 = x6637 + x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7097 = x6637 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7098 = x7097 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7099 = x7096 - x7098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7100 = x6638 + x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7101 = x6638 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7102 = x7101 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7103 = x7100 - x7102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7104 = x6639 + x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7105 = x6639 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7106 = x7105 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7107 = x7104 - x7106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7108 = x6640 + x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7109 = x6640 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7110 = x7109 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7111 = x7108 - x7110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7112 = x6641 + x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7113 = x6641 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7114 = x7113 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7115 = x7112 - x7114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7116 = x6642 + x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7117 = x6642 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7118 = x7117 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x7116 - x7118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7120 = x6638 + x6995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7121 = x7101 * x6995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x7120 - x7121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7123 = x6639 + x6999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7124 = x7105 * x6999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7125 = x7123 - x7124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7126 = x6640 + x7003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7127 = x7109 * x7003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7128 = x7126 - x7127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7129 = x6641 + x7007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7130 = x7113 * x7007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x7129 - x7130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7132 = x6642 + x7011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7133 = x7117 * x7011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x7132 - x7133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x6643 + x7015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7136 = x6993 * x7015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7137 = x7135 - x7136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x6644 + x7019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7139 = x6997 * x7019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7140 = x7138 - x7139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7141 = x6645 + x7023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7142 = x7001 * x7023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x7141 - x7142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7144 = x6646 + x7027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7145 = x7005 * x7027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x7144 - x7145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x6647 + x7031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7148 = x7009 * x7031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7149 = x7147 - x7148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x6648 + x7035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7151 = x7013 * x7035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7152 = x7150 - x7151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7153 = x6649 + x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7154 = x7017 * x7039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x7153 - x7154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7156 = x6650 + x7043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7157 = x7021 * x7043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x7156 - x7157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x6651 + x7047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7160 = x7025 * x7047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7161 = x7159 - x7160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x6652 + x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7163 = x7029 * x7051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7164 = x7162 - x7163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7165 = x6653 + x7055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7166 = x7033 * x7055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x7165 - x7166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7168 = x6654 + x7059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7169 = x7037 * x7059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x7168 - x7169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x6655 + x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7172 = x7041 * x7063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7173 = x7171 - x7172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x6656 + x7067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7175 = x7045 * x7067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7176 = x7174 - x7175;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7177 = x6657 + x7071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7178 = x7049 * x7071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7179 = x7177 - x7178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7180 = x6658 + x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7181 = x7053 * x7075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x7180 - x7181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x6659 + x7079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7184 = x7057 * x7079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7185 = x7183 - x7184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x6660 + x7083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7187 = x7061 * x7083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7188 = x7186 - x7187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7189 = x6661 + x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7190 = x7065 * x7087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7191 = x7189 - x7190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7192 = x6662 + x7091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7193 = x7069 * x7091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7194 = x7192 - x7193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7195 = x6663 + x7095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7196 = x7073 * x7095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7197 = x7195 - x7196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x6632 + x7099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7199 = x7077 * x7099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7200 = x7198 - x7199;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7201 = x6633 + x7103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7202 = x7081 * x7103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7203 = x7201 - x7202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7204 = x6634 + x7107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7205 = x7085 * x7107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7206 = x7204 - x7205;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x6635 + x7111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7208 = x7089 * x7111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7209 = x7207 - x7208;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x6636 + x7115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7211 = x7093 * x7115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7212 = x7210 - x7211;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7213 = x6637 + x7119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7214 = x7097 * x7119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7215 = x7213 - x7214;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7216 = x6729 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7217 = x6728 + x7216;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7218 = x6730 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7219 = x7217 + x7218;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7220 = x6731 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7221 = x7219 + x7220;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7222 = x6732 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7223 = x7221 + x7222;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7224 = x6733 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7225 = x7223 + x7224;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7226 = x6734 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7227 = x7225 + x7226;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7228 = x6735 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7229 = x7227 + x7228;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7230 = x6736 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7231 = x7229 + x7230;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7232 = x6737 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7233 = x7231 + x7232;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7234 = x6738 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7235 = x7233 + x7234;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7236 = x6739 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7237 = x7235 + x7236;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7238 = x6740 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7239 = x7237 + x7238;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7240 = x6741 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7241 = x7239 + x7240;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7242 = x6742 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7243 = x7241 + x7242;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7244 = x6743 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7245 = x7243 + x7244;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7246 = x6745 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7247 = x6744 + x7246;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7248 = x6746 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7249 = x7247 + x7248;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7250 = x6747 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7251 = x7249 + x7250;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7252 = x6748 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7253 = x7251 + x7252;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7254 = x6749 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7255 = x7253 + x7254;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7256 = x6750 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7257 = x7255 + x7256;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7258 = x6751 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7259 = x7257 + x7258;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7260 = x6752 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7261 = x7259 + x7260;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7262 = x6753 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7263 = x7261 + x7262;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7264 = x6754 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7265 = x7263 + x7264;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7266 = x6755 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7267 = x7265 + x7266;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7268 = x6756 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7269 = x7267 + x7268;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7270 = x6757 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7271 = x7269 + x7270;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7272 = x6758 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7273 = x7271 + x7272;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7274 = x6759 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7275 = x7273 + x7274;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7276 = x6632 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7277 = x102 - x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7278 = x7277 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7279 = x7276 + x7278;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7280 = x6633 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7281 = x102 - x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7282 = x7281 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7283 = x7280 + x7282;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7284 = x6634 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7285 = x102 - x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7286 = x7285 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7287 = x7284 + x7286;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7288 = x6635 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7289 = x102 - x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7290 = x7289 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7291 = x7288 + x7290;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7292 = x6636 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7293 = x102 - x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7294 = x7293 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7295 = x7292 + x7294;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7296 = x6637 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7297 = x102 - x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7298 = x7297 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7299 = x7296 + x7298;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7300 = x6638 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7301 = x102 - x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7302 = x7301 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7303 = x7300 + x7302;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7304 = x6639 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7305 = x102 - x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7306 = x7305 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7307 = x7304 + x7306;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7308 = x6640 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7309 = x102 - x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7310 = x7309 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7311 = x7308 + x7310;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7312 = x6641 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7313 = x102 - x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7314 = x7313 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7315 = x7312 + x7314;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7316 = x6642 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7317 = x102 - x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7318 = x7317 * x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7319 = x7316 + x7318;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7320 = x6643 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7321 = x102 - x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7322 = x7321 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7323 = x7320 + x7322;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7324 = x6644 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7325 = x102 - x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7326 = x7325 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7327 = x7324 + x7326;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7328 = x6645 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7329 = x102 - x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7330 = x7329 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7331 = x7328 + x7330;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7332 = x6646 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7333 = x102 - x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7334 = x7333 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7335 = x7332 + x7334;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7336 = x6647 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7337 = x102 - x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7338 = x7337 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7339 = x7336 + x7338;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7340 = x6648 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7341 = x102 - x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7342 = x7341 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7343 = x7340 + x7342;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7344 = x6649 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7345 = x102 - x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7346 = x7345 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7347 = x7344 + x7346;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7348 = x6650 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7349 = x102 - x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7350 = x7349 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7351 = x7348 + x7350;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7352 = x6651 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7353 = x102 - x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7354 = x7353 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7355 = x7352 + x7354;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7356 = x6652 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7357 = x102 - x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7358 = x7357 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7359 = x7356 + x7358;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7360 = x6653 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7361 = x102 - x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7362 = x7361 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7363 = x7360 + x7362;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7364 = x6654 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7365 = x102 - x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7366 = x7365 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7367 = x7364 + x7366;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7368 = x6655 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7369 = x102 - x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7370 = x7369 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7371 = x7368 + x7370;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7372 = x6656 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7373 = x102 - x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7374 = x7373 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7375 = x7372 + x7374;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7376 = x6657 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7377 = x102 - x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7378 = x7377 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7379 = x7376 + x7378;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7380 = x6658 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7381 = x102 - x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7382 = x7381 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7383 = x7380 + x7382;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7384 = x6659 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7385 = x102 - x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7386 = x7385 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7387 = x7384 + x7386;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7388 = x6660 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7389 = x102 - x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7390 = x7389 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7391 = x7388 + x7390;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7392 = x6661 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7393 = x102 - x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7394 = x7393 * x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7395 = x7392 + x7394;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7396 = x6662 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7397 = x102 - x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7398 = x7397 * x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7399 = x7396 + x7398;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7400 = x6663 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7401 = x102 - x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7402 = x7401 * x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7403 = x7400 + x7402;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7404 = x7283 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7405 = x7279 + x7404;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7406 = x7287 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7407 = x7405 + x7406;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7408 = x7291 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7409 = x7407 + x7408;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7410 = x7295 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7411 = x7409 + x7410;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7412 = x7299 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7413 = x7411 + x7412;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7414 = x7303 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7415 = x7413 + x7414;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7416 = x7307 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7417 = x7415 + x7416;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7418 = x7311 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7419 = x7417 + x7418;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7420 = x7315 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7421 = x7419 + x7420;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7422 = x7319 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7423 = x7421 + x7422;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7424 = x7323 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7425 = x7423 + x7424;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7426 = x7327 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7427 = x7425 + x7426;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7428 = x7331 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7429 = x7427 + x7428;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7430 = x7335 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7431 = x7429 + x7430;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7432 = x7339 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7433 = x7431 + x7432;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7434 = x7347 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7435 = x7343 + x7434;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7436 = x7351 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7437 = x7435 + x7436;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7438 = x7355 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7439 = x7437 + x7438;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7440 = x7359 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7441 = x7439 + x7440;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7442 = x7363 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7443 = x7441 + x7442;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7444 = x7367 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7445 = x7443 + x7444;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7446 = x7371 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7447 = x7445 + x7446;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7448 = x7375 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7449 = x7447 + x7448;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7450 = x7379 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7451 = x7449 + x7450;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7452 = x7383 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7453 = x7451 + x7452;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7454 = x7387 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7455 = x7453 + x7454;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7456 = x7391 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7457 = x7455 + x7456;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7458 = x7395 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7459 = x7457 + x7458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7460 = x7399 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7461 = x7459 + x7460;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7462 = x7403 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7463 = x7461 + x7462;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7464 = x7125 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7465 = x7122 + x7464;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7466 = x7128 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7467 = x7465 + x7466;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7468 = x7131 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7469 = x7467 + x7468;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7470 = x7134 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7471 = x7469 + x7470;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7472 = x7137 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7473 = x7471 + x7472;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7474 = x7140 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7475 = x7473 + x7474;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7476 = x7143 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7477 = x7475 + x7476;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7478 = x7146 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7479 = x7477 + x7478;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7480 = x7149 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7481 = x7479 + x7480;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7482 = x7152 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7483 = x7481 + x7482;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7484 = x7155 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7485 = x7483 + x7484;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7486 = x7158 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7487 = x7485 + x7486;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7488 = x7161 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7489 = x7487 + x7488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7490 = x7164 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7491 = x7489 + x7490;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7492 = x7167 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7493 = x7491 + x7492;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7494 = x7173 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7495 = x7170 + x7494;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7496 = x7176 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7497 = x7495 + x7496;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7498 = x7179 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7499 = x7497 + x7498;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7500 = x7182 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7501 = x7499 + x7500;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7502 = x7185 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7503 = x7501 + x7502;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7504 = x7188 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7505 = x7503 + x7504;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7506 = x7191 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7507 = x7505 + x7506;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7508 = x7194 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7509 = x7507 + x7508;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7510 = x7197 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7511 = x7509 + x7510;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7512 = x7200 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7513 = x7511 + x7512;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7514 = x7203 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7515 = x7513 + x7514;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7516 = x7206 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7517 = x7515 + x7516;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7518 = x7209 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7519 = x7517 + x7518;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7520 = x7212 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7521 = x7519 + x7520;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7522 = x7215 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7523 = x7521 + x7522;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7524 = x7433 + x7493;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7525 = x7463 + x7523;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7526 = x7245 + x7524;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7527 = x7275 + x7525;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7528 = x6765 + x7526;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7529 = x6767 + x7527;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7530 = x6420 + x7528;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7531 = x6501 + x7529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7532 = x6504 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7533 = x102 - x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7534 = x7532 * x7533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7535 = x102 - x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7536 = x6504 * x7535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7537 = x7536 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7538 = x7534 + x7537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7539 = x102 - x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7540 = x7539 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7541 = x7540 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7542 = x7538 + x7541;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7543 = x7532 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7544 = x7542 + x7543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7545 = x6505 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7546 = x102 - x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7547 = x7545 * x7546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7548 = x102 - x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7549 = x6505 * x7548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7550 = x7549 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7551 = x7547 + x7550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7552 = x102 - x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7553 = x7552 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7554 = x7553 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7555 = x7551 + x7554;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7556 = x7545 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7557 = x7555 + x7556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7558 = x6506 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7559 = x102 - x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7560 = x7558 * x7559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7561 = x102 - x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7562 = x6506 * x7561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7563 = x7562 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7564 = x7560 + x7563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7565 = x102 - x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7566 = x7565 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7567 = x7566 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7568 = x7564 + x7567;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7569 = x7558 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7570 = x7568 + x7569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7571 = x6507 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7572 = x102 - x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7573 = x7571 * x7572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7574 = x102 - x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7575 = x6507 * x7574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7576 = x7575 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7577 = x7573 + x7576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7578 = x102 - x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7579 = x7578 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7580 = x7579 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7581 = x7577 + x7580;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7582 = x7571 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7583 = x7581 + x7582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7584 = x6508 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7585 = x102 - x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7586 = x7584 * x7585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7587 = x102 - x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7588 = x6508 * x7587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7589 = x7588 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7590 = x7586 + x7589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7591 = x102 - x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7592 = x7591 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7593 = x7592 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7594 = x7590 + x7593;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7595 = x7584 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7596 = x7594 + x7595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7597 = x6509 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7598 = x102 - x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7599 = x7597 * x7598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7600 = x102 - x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7601 = x6509 * x7600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7602 = x7601 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7603 = x7599 + x7602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7604 = x102 - x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7605 = x7604 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7606 = x7605 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7607 = x7603 + x7606;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7608 = x7597 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7609 = x7607 + x7608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7610 = x6510 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7611 = x102 - x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7612 = x7610 * x7611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7613 = x102 - x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7614 = x6510 * x7613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7615 = x7614 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7616 = x7612 + x7615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7617 = x102 - x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7618 = x7617 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7619 = x7618 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7620 = x7616 + x7619;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7621 = x7610 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7622 = x7620 + x7621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7623 = x6511 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7624 = x102 - x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7625 = x7623 * x7624;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7626 = x102 - x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7627 = x6511 * x7626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7628 = x7627 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7629 = x7625 + x7628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7630 = x102 - x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7631 = x7630 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7632 = x7631 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7633 = x7629 + x7632;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7634 = x7623 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7635 = x7633 + x7634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7636 = x6512 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7637 = x102 - x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7638 = x7636 * x7637;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7639 = x102 - x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7640 = x6512 * x7639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7641 = x7640 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7642 = x7638 + x7641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7643 = x102 - x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7644 = x7643 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7645 = x7644 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7646 = x7642 + x7645;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7647 = x7636 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7648 = x7646 + x7647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7649 = x6513 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7650 = x102 - x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7651 = x7649 * x7650;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7652 = x102 - x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7653 = x6513 * x7652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7654 = x7653 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7655 = x7651 + x7654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7656 = x102 - x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7657 = x7656 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7658 = x7657 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7659 = x7655 + x7658;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7660 = x7649 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7661 = x7659 + x7660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7662 = x6514 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7663 = x102 - x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7664 = x7662 * x7663;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7665 = x102 - x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7666 = x6514 * x7665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7667 = x7666 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7668 = x7664 + x7667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7669 = x102 - x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7670 = x7669 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7671 = x7670 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7672 = x7668 + x7671;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7673 = x7662 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7674 = x7672 + x7673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7675 = x6515 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7676 = x102 - x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7677 = x7675 * x7676;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7678 = x102 - x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7679 = x6515 * x7678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7680 = x7679 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7681 = x7677 + x7680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7682 = x102 - x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7683 = x7682 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7684 = x7683 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7685 = x7681 + x7684;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7686 = x7675 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7687 = x7685 + x7686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7688 = x6516 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7689 = x102 - x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7690 = x7688 * x7689;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7691 = x102 - x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7692 = x6516 * x7691;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7693 = x7692 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7694 = x7690 + x7693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7695 = x102 - x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7696 = x7695 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7697 = x7696 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7698 = x7694 + x7697;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7699 = x7688 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7700 = x7698 + x7699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7701 = x6517 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7702 = x102 - x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7703 = x7701 * x7702;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7704 = x102 - x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7705 = x6517 * x7704;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7706 = x7705 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7707 = x7703 + x7706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7708 = x102 - x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7709 = x7708 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7710 = x7709 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7711 = x7707 + x7710;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7712 = x7701 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7713 = x7711 + x7712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7714 = x6518 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7715 = x102 - x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7716 = x7714 * x7715;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7717 = x102 - x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7718 = x6518 * x7717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7719 = x7718 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7720 = x7716 + x7719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7721 = x102 - x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7722 = x7721 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7723 = x7722 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7724 = x7720 + x7723;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7725 = x7714 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7726 = x7724 + x7725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7727 = x6519 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7728 = x102 - x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7729 = x7727 * x7728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7730 = x102 - x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7731 = x6519 * x7730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7732 = x7731 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7733 = x7729 + x7732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7734 = x102 - x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7735 = x7734 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7736 = x7735 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7737 = x7733 + x7736;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7738 = x7727 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7739 = x7737 + x7738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7740 = x6520 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7741 = x102 - x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7742 = x7740 * x7741;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7743 = x102 - x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7744 = x6520 * x7743;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7745 = x7744 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7746 = x7742 + x7745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7747 = x102 - x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7748 = x7747 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7749 = x7748 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7750 = x7746 + x7749;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7751 = x7740 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7752 = x7750 + x7751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7753 = x6521 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7754 = x102 - x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7755 = x7753 * x7754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7756 = x102 - x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7757 = x6521 * x7756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7758 = x7757 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7759 = x7755 + x7758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7760 = x102 - x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7761 = x7760 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7762 = x7761 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7763 = x7759 + x7762;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7764 = x7753 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7765 = x7763 + x7764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7766 = x6522 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7767 = x102 - x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7768 = x7766 * x7767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7769 = x102 - x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7770 = x6522 * x7769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7771 = x7770 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7772 = x7768 + x7771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7773 = x102 - x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7774 = x7773 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7775 = x7774 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7776 = x7772 + x7775;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7777 = x7766 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7778 = x7776 + x7777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7779 = x6523 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7780 = x102 - x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7781 = x7779 * x7780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7782 = x102 - x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7783 = x6523 * x7782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7784 = x7783 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7785 = x7781 + x7784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7786 = x102 - x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7787 = x7786 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7788 = x7787 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7789 = x7785 + x7788;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7790 = x7779 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7791 = x7789 + x7790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7792 = x6524 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7793 = x102 - x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7794 = x7792 * x7793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7795 = x102 - x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7796 = x6524 * x7795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7797 = x7796 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7798 = x7794 + x7797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7799 = x102 - x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7800 = x7799 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7801 = x7800 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7802 = x7798 + x7801;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7803 = x7792 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7804 = x7802 + x7803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7805 = x6525 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7806 = x102 - x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7807 = x7805 * x7806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7808 = x102 - x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7809 = x6525 * x7808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7810 = x7809 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7811 = x7807 + x7810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7812 = x102 - x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7813 = x7812 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7814 = x7813 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7815 = x7811 + x7814;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7816 = x7805 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7817 = x7815 + x7816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7818 = x6526 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7819 = x102 - x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7820 = x7818 * x7819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7821 = x102 - x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7822 = x6526 * x7821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7823 = x7822 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7824 = x7820 + x7823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7825 = x102 - x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7826 = x7825 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7827 = x7826 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7828 = x7824 + x7827;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7829 = x7818 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7830 = x7828 + x7829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7831 = x6527 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7832 = x102 - x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7833 = x7831 * x7832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7834 = x102 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7835 = x6527 * x7834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7836 = x7835 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7837 = x7833 + x7836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7838 = x102 - x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7839 = x7838 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7840 = x7839 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7841 = x7837 + x7840;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7842 = x7831 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7843 = x7841 + x7842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7844 = x6528 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7845 = x102 - x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7846 = x7844 * x7845;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7847 = x102 - x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7848 = x6528 * x7847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7849 = x7848 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7850 = x7846 + x7849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7851 = x102 - x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7852 = x7851 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7853 = x7852 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7854 = x7850 + x7853;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7855 = x7844 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7856 = x7854 + x7855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7857 = x6529 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7858 = x102 - x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7859 = x7857 * x7858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7860 = x102 - x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7861 = x6529 * x7860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7862 = x7861 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7863 = x7859 + x7862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7864 = x102 - x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7865 = x7864 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7866 = x7865 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7867 = x7863 + x7866;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7868 = x7857 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7869 = x7867 + x7868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7870 = x6530 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7871 = x102 - x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7872 = x7870 * x7871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7873 = x102 - x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7874 = x6530 * x7873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7875 = x7874 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7876 = x7872 + x7875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7877 = x102 - x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7878 = x7877 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7879 = x7878 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7880 = x7876 + x7879;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7881 = x7870 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7882 = x7880 + x7881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7883 = x6531 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7884 = x102 - x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7885 = x7883 * x7884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7886 = x102 - x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7887 = x6531 * x7886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7888 = x7887 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7889 = x7885 + x7888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7890 = x102 - x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7891 = x7890 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7892 = x7891 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7893 = x7889 + x7892;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7894 = x7883 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7895 = x7893 + x7894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7896 = x6532 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7897 = x102 - x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7898 = x7896 * x7897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7899 = x102 - x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7900 = x6532 * x7899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7901 = x7900 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7902 = x7898 + x7901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7903 = x102 - x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7904 = x7903 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7905 = x7904 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7906 = x7902 + x7905;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7907 = x7896 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7908 = x7906 + x7907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7909 = x6533 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7910 = x102 - x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7911 = x7909 * x7910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7912 = x102 - x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7913 = x6533 * x7912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7914 = x7913 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7915 = x7911 + x7914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7916 = x102 - x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7917 = x7916 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7918 = x7917 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7919 = x7915 + x7918;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7920 = x7909 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7921 = x7919 + x7920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7922 = x6534 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7923 = x102 - x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7924 = x7922 * x7923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7925 = x102 - x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7926 = x6534 * x7925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7927 = x7926 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7928 = x7924 + x7927;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7929 = x102 - x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7930 = x7929 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7931 = x7930 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7932 = x7928 + x7931;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7933 = x7922 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7934 = x7932 + x7933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7935 = x6535 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7936 = x102 - x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7937 = x7935 * x7936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7938 = x102 - x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7939 = x6535 * x7938;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7940 = x7939 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7941 = x7937 + x7940;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7942 = x102 - x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7943 = x7942 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7944 = x7943 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7945 = x7941 + x7944;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7946 = x7935 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7947 = x7945 + x7946;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7948 = x7557 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7949 = x7544 + x7948;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7950 = x7570 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7951 = x7949 + x7950;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7952 = x7583 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7953 = x7951 + x7952;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7954 = x7596 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7955 = x7953 + x7954;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7956 = x7609 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7957 = x7955 + x7956;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7958 = x7622 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7959 = x7957 + x7958;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7960 = x7635 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7961 = x7959 + x7960;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7962 = x7648 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7963 = x7961 + x7962;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7964 = x7661 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7965 = x7963 + x7964;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7966 = x7674 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7967 = x7965 + x7966;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7968 = x7687 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7969 = x7967 + x7968;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7970 = x7700 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7971 = x7969 + x7970;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7972 = x7713 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7973 = x7971 + x7972;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7974 = x7726 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7975 = x7973 + x7974;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7976 = x7739 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7977 = x7975 + x7976;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7978 = x7765 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7979 = x7752 + x7978;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7980 = x7778 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7981 = x7979 + x7980;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7982 = x7791 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7983 = x7981 + x7982;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7984 = x7804 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7985 = x7983 + x7984;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7986 = x7817 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7987 = x7985 + x7986;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7988 = x7830 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7989 = x7987 + x7988;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7990 = x7843 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7991 = x7989 + x7990;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7992 = x7856 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7993 = x7991 + x7992;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7994 = x7869 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7995 = x7993 + x7994;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7996 = x7882 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7997 = x7995 + x7996;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7998 = x7895 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7999 = x7997 + x7998;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8000 = x7908 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8001 = x7999 + x8000;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8002 = x7921 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8003 = x8001 + x8002;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8004 = x7934 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8005 = x8003 + x8004;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8006 = x7947 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8007 = x8005 + x8006;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8008 = x6901 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8009 = x6898 + x8008;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8010 = x6904 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8011 = x8009 + x8010;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8012 = x6907 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8013 = x8011 + x8012;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8014 = x6910 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8015 = x8013 + x8014;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8016 = x6913 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8017 = x8015 + x8016;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8018 = x6916 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8019 = x8017 + x8018;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8020 = x6919 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8021 = x8019 + x8020;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8022 = x6922 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8023 = x8021 + x8022;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8024 = x6925 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8025 = x8023 + x8024;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8026 = x6928 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8027 = x8025 + x8026;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8028 = x6931 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8029 = x8027 + x8028;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8030 = x6934 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8031 = x8029 + x8030;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8032 = x6937 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8033 = x8031 + x8032;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8034 = x6940 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8035 = x8033 + x8034;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8036 = x6943 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8037 = x8035 + x8036;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8038 = x6949 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8039 = x6946 + x8038;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8040 = x6952 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8041 = x8039 + x8040;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8042 = x6955 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8043 = x8041 + x8042;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8044 = x6958 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8045 = x8043 + x8044;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8046 = x6961 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8047 = x8045 + x8046;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8048 = x6964 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8049 = x8047 + x8048;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8050 = x6967 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8051 = x8049 + x8050;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8052 = x6970 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8053 = x8051 + x8052;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8054 = x6973 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8055 = x8053 + x8054;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8056 = x6976 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8057 = x8055 + x8056;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8058 = x6979 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8059 = x8057 + x8058;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8060 = x6982 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8061 = x8059 + x8060;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8062 = x6985 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8063 = x8061 + x8062;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8064 = x6988 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8065 = x8063 + x8064;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8066 = x6991 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8067 = x8065 + x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8068 = x7977 + x8037;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8069 = x8007 + x8067;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8070 = x7530 + x8068;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8071 = x7531 + x8069;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8072 = x6601 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8073 = x6600 + x8072;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8074 = x6602 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8075 = x8073 + x8074;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8076 = x6603 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8077 = x8075 + x8076;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8078 = x6604 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8079 = x8077 + x8078;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8080 = x6605 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8081 = x8079 + x8080;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8082 = x6606 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8083 = x8081 + x8082;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8084 = x6607 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8085 = x8083 + x8084;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8086 = x6608 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8087 = x8085 + x8086;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8088 = x6609 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8089 = x8087 + x8088;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8090 = x6610 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8091 = x8089 + x8090;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8092 = x6611 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8093 = x8091 + x8092;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8094 = x6612 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8095 = x8093 + x8094;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8096 = x6613 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8097 = x8095 + x8096;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8098 = x6614 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8099 = x8097 + x8098;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8100 = x6615 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8101 = x8099 + x8100;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8102 = x6617 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8103 = x6616 + x8102;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8104 = x6618 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8105 = x8103 + x8104;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8106 = x6619 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8107 = x8105 + x8106;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8108 = x6620 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8109 = x8107 + x8108;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8110 = x6621 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8111 = x8109 + x8110;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8112 = x6622 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8113 = x8111 + x8112;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8114 = x6623 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8115 = x8113 + x8114;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8116 = x6624 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8117 = x8115 + x8116;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8118 = x6625 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8119 = x8117 + x8118;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8120 = x6626 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8121 = x8119 + x8120;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8122 = x6627 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8123 = x8121 + x8122;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8124 = x6628 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8125 = x8123 + x8124;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8126 = x6629 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8127 = x8125 + x8126;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8128 = x6630 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8129 = x8127 + x8128;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8130 = x6631 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8131 = x8129 + x8130;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8132 = x7530 + x8101;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8133 = x7531 + x8131;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8070);
        reg = x8070;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8132);
        reg = x8132;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8071);
        reg = x8071;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8133);
        reg = x8133;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8134 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8134 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8135 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x8135 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8136 = Fp(x8134.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8136);
          reg = x8136;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8137 = Fp(x8134.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8138 = x8137 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8138);
          reg = x8138;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8139 = Fp(x8134.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8140 = x8139 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8140);
          reg = x8140;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8141 = Fp(x8134.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8142 = x8141 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8142);
          reg = x8142;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8143 = Fp(x8134.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8144 = x8143 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8144);
          reg = x8144;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8145 = Fp(x8134.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8146 = x8145 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8146);
          reg = x8146;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8147 = Fp(x8134.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8148 = x8147 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8148);
          reg = x8148;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8149 = Fp(x8134.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8150 = x8149 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8150);
          reg = x8150;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8151 = Fp(x8134.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8152 = x8151 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8152);
          reg = x8152;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8153 = Fp(x8134.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8154 = x8153 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8154);
          reg = x8154;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8155 = Fp(x8134.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8156 = x8155 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8156);
          reg = x8156;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8157 = Fp(x8134.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8158 = x8157 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8158);
          reg = x8158;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8159 = Fp(x8134.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8160 = x8159 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8160);
          reg = x8160;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8161 = Fp(x8134.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8162 = x8161 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8162);
          reg = x8162;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8163 = Fp(x8134.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8164 = x8163 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8164);
          reg = x8164;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8165 = Fp(x8134.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8166 = x8165 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8166);
          reg = x8166;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8167 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x8167 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8168 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x8168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8169 = x8168 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8170 = x8167 + x8169;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8171 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x8171 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8172 = x8171 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8173 = x8170 + x8172;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8174 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8175 = x8174 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8176 = x8173 + x8175;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8177 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8178 = x8177 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8179 = x8176 + x8178;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8180 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8180 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8181 = x8180 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8182 = x8179 + x8181;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8183 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8184 = x8183 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8185 = x8182 + x8184;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8186 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x8186 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8187 = x8186 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8188 = x8185 + x8187;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8189 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x8189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8190 = x8189 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8191 = x8188 + x8190;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8192 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8193 = x8192 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8194 = x8191 + x8193;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8195 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8195 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8196 = x8195 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8197 = x8194 + x8196;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8198 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8198 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8199 = x8198 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8200 = x8197 + x8199;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8201 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8202 = x8201 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8203 = x8200 + x8202;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8204 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8204 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8205 = x8204 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8206 = x8203 + x8205;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8207 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8207 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8208 = x8207 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8209 = x8206 + x8208;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8210 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8210 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8211 = x8210 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8212 = x8209 + x8211;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8213 = x8134 - x8212;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8214 = x8213 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8215 = Fp(x8214.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8215);
          reg = x8215;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8216 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8216 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8217 = x8214 - x8216;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8218 = x8217 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8219 = x102 - x8218;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8220 = x8218 * x8219;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8220 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8221 = x8135 + x8214;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8222 = Fp(x8221.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8222);
          reg = x8222;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8223 = Fp(x8221.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8224 = x8223 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8224);
          reg = x8224;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8225 = Fp(x8221.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8226 = x8225 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8226);
          reg = x8226;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8227 = Fp(x8221.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8228 = x8227 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8228);
          reg = x8228;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8229 = Fp(x8221.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8230 = x8229 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8230);
          reg = x8230;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8231 = Fp(x8221.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8232 = x8231 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8232);
          reg = x8232;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8233 = Fp(x8221.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8234 = x8233 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8234);
          reg = x8234;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8235 = Fp(x8221.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8236 = x8235 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8236);
          reg = x8236;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8237 = Fp(x8221.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8238 = x8237 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8238);
          reg = x8238;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8239 = Fp(x8221.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8240 = x8239 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8240);
          reg = x8240;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8241 = Fp(x8221.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8242 = x8241 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8242);
          reg = x8242;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8243 = Fp(x8221.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8244 = x8243 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8244);
          reg = x8244;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8245 = Fp(x8221.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8246 = x8245 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8246);
          reg = x8246;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8247 = Fp(x8221.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8248 = x8247 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8248);
          reg = x8248;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8249 = Fp(x8221.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8250 = x8249 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8250);
          reg = x8250;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8251 = Fp(x8221.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8252 = x8251 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8252);
          reg = x8252;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8253 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8253 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8254 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8254 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8255 = x8254 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8256 = x8253 + x8255;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8257 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8257 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8258 = x8257 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8259 = x8256 + x8258;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8260 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8260 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8261 = x8260 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8262 = x8259 + x8261;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8263 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8263 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8264 = x8263 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8265 = x8262 + x8264;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8266 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8266 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8267 = x8266 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8268 = x8265 + x8267;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8269 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8269 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8270 = x8269 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8271 = x8268 + x8270;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8272 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8272 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8273 = x8272 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8274 = x8271 + x8273;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8275 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8275 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8276 = x8275 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8277 = x8274 + x8276;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8278 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8278 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8279 = x8278 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8280 = x8277 + x8279;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8281 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8281 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8282 = x8281 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8283 = x8280 + x8282;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8284 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8284 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8285 = x8284 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8286 = x8283 + x8285;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8287 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8287 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8288 = x8287 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8289 = x8286 + x8288;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8290 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8290 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8291 = x8290 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8292 = x8289 + x8291;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8293 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8293 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8294 = x8293 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8295 = x8292 + x8294;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8296 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8296 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8297 = x8296 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8298 = x8295 + x8297;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8299 = x8221 - x8298;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8300 = x8299 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8301 = Fp(x8300.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8301);
          reg = x8301;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8302 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8302 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8303 = x8300 - x8302;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8304 = x8303 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8305 = x102 - x8304;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8306 = x8304 * x8305;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8306 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8307 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8307 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8308 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8308 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8309 = Fp(x8307.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8309);
          reg = x8309;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8310 = Fp(x8307.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8311 = x8310 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8311);
          reg = x8311;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8312 = Fp(x8307.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8313 = x8312 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8313);
          reg = x8313;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8314 = Fp(x8307.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8315 = x8314 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8315);
          reg = x8315;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8316 = Fp(x8307.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8317 = x8316 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8317);
          reg = x8317;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8318 = Fp(x8307.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8319 = x8318 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8319);
          reg = x8319;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8320 = Fp(x8307.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8321 = x8320 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8321);
          reg = x8321;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8322 = Fp(x8307.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8323 = x8322 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8323);
          reg = x8323;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8324 = Fp(x8307.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8325 = x8324 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8325);
          reg = x8325;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8326 = Fp(x8307.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8327 = x8326 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8327);
          reg = x8327;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8328 = Fp(x8307.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8329 = x8328 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8329);
          reg = x8329;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8330 = Fp(x8307.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8331 = x8330 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8331);
          reg = x8331;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8332 = Fp(x8307.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8333 = x8332 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8333);
          reg = x8333;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8334 = Fp(x8307.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8335 = x8334 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8335);
          reg = x8335;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8336 = Fp(x8307.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8337 = x8336 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8337);
          reg = x8337;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8338 = Fp(x8307.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8339 = x8338 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8339);
          reg = x8339;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8340 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8340 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8341 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8342 = x8341 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8343 = x8340 + x8342;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8344 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8344 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8345 = x8344 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8346 = x8343 + x8345;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8347 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8347 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8348 = x8347 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8349 = x8346 + x8348;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8350 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8350 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8351 = x8350 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8352 = x8349 + x8351;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8353 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8353 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8354 = x8353 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8355 = x8352 + x8354;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8356 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8356 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8357 = x8356 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8358 = x8355 + x8357;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8359 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8359 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8360 = x8359 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8361 = x8358 + x8360;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8362 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8362 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8363 = x8362 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8364 = x8361 + x8363;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8365 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8366 = x8365 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8367 = x8364 + x8366;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8368 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8368 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8369 = x8368 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8370 = x8367 + x8369;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8371 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8372 = x8371 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8373 = x8370 + x8372;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8374 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8375 = x8374 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8376 = x8373 + x8375;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8377 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8378 = x8377 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8379 = x8376 + x8378;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8380 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8380 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8381 = x8380 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8382 = x8379 + x8381;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8383 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8384 = x8383 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8385 = x8382 + x8384;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8386 = x8307 - x8385;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8387 = x8386 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8388 = Fp(x8387.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8388);
          reg = x8388;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8389 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8389 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8390 = x8387 - x8389;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8391 = x8390 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8392 = x102 - x8391;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8393 = x8391 * x8392;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8393 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8394 = x8308 + x8387;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8395 = Fp(x8394.asUInt32() & x102.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8395);
          reg = x8395;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8396 = Fp(x8394.asUInt32() & x99.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8397 = x8396 * x63;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8397);
          reg = x8397;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8398 = Fp(x8394.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8399 = x8398 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8399);
          reg = x8399;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8400 = Fp(x8394.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8401 = x8400 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8401);
          reg = x8401;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8402 = Fp(x8394.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8403 = x8402 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8403);
          reg = x8403;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8404 = Fp(x8394.asUInt32() & x68.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8405 = x8404 * x67;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8405);
          reg = x8405;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8406 = Fp(x8394.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8407 = x8406 * x61;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8407);
          reg = x8407;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8408 = Fp(x8394.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8409 = x8408 * x70;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8409);
          reg = x8409;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8410 = Fp(x8394.asUInt32() & x97.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8411 = x8410 * x96;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8411);
          reg = x8411;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8412 = Fp(x8394.asUInt32() & x28.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8413 = x8412 * x27;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8413);
          reg = x8413;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8414 = Fp(x8394.asUInt32() & x29.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8415 = x8414 * x26;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8415);
          reg = x8415;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8416 = Fp(x8394.asUInt32() & x25.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8417 = x8416 * x24;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8417);
          reg = x8417;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8418 = Fp(x8394.asUInt32() & x23.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8419 = x8418 * x22;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8419);
          reg = x8419;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8420 = Fp(x8394.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8421 = x8420 * x20;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8421);
          reg = x8421;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8422 = Fp(x8394.asUInt32() & x43.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8423 = x8422 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8423);
          reg = x8423;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8424 = Fp(x8394.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8425 = x8424 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8425);
          reg = x8425;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8426 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8426 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8427 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8428 = x8427 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8429 = x8426 + x8428;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8430 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8431 = x8430 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8432 = x8429 + x8431;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8433 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8433 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8434 = x8433 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8435 = x8432 + x8434;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8436 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8436 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8437 = x8436 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8438 = x8435 + x8437;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8439 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8439 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8440 = x8439 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8441 = x8438 + x8440;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8442 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8442 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8443 = x8442 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8444 = x8441 + x8443;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8445 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8445 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8446 = x8445 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8447 = x8444 + x8446;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8448 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8448 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8449 = x8448 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8450 = x8447 + x8449;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8451 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8451 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8452 = x8451 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8453 = x8450 + x8452;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8454 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8454 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8455 = x8454 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8456 = x8453 + x8455;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8457 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8457 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8458 = x8457 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8459 = x8456 + x8458;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8460 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8460 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8461 = x8460 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8462 = x8459 + x8461;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8463 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8463 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8464 = x8463 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8465 = x8462 + x8464;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8466 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8466 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8467 = x8466 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8468 = x8465 + x8467;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8469 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8469 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8470 = x8469 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8471 = x8468 + x8470;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8472 = x8394 - x8471;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8473 = x8472 * x16;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8474 = Fp(x8473.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8474);
          reg = x8474;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8475 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8475 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8476 = x8473 - x8475;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8477 = x8476 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8478 = x102 - x8477;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8479 = x8477 * x8478;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8479 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/components/mux.h":37:25))
    auto x8480 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x8480 != Fp::invalid());
    if (x8480 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8481 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x8481 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8482 = args[2][136 * steps + ((cycle - 1) & mask)];
      assert(x8482 != Fp::invalid());
      if (x8482 != 0) {
        // loc("Top/Mux/4/OneHot/Reg10"("cirgen/circuit/rv32im/sha.cpp":339:72))
        auto x8483 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x8483 != Fp::invalid());
        if (x8483 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":342:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13);
            reg = x13;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":343:40))
          auto x8484 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8484 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":343:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8484);
            reg = x8484;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":345:22)
        auto x8485 = x102 - x8483;
        if (x8485 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":347:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x84);
            reg = x84;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":348:44))
          auto x8486 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8486 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":348:44)
          auto x8487 = x8486 - x102;
          // loc("cirgen/circuit/rv32im/sha.cpp":348:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8487);
            reg = x8487;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":351:18)
      auto x8488 = x102 - x8482;
      if (x8488 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8489 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x8489 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8489);
          reg = x8489;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":354:40))
        auto x8490 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x8490 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":354:40)
        auto x8491 = x8490 - x102;
        // loc("cirgen/circuit/rv32im/sha.cpp":354:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8491);
          reg = x8491;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":355:38))
        auto x8492 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x8492 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":355:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8492);
          reg = x8492;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8493 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x8493 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8494 = (x8493 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8494);
          reg = x8494;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8495 = inv(x8493);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8495);
          reg = x8495;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8496 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x8496 != Fp::invalid());
      if (x8496 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x8493 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x8497 = x102 - x8496;
      if (x8497 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x8498 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x8498 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8499 = x8493 * x8498;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8500 = x8499 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x8500 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8501 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x8501 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":359:15)
      auto x8502 = x102 - x8501;
      if (x8496 != 0) {
        if (x8502 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        if (x8501 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
        }
      }
      if (x8497 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":369:38))
      auto x8503 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x8503 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":369:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8503);
        reg = x8503;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":370:40))
      auto x8504 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x8504 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":370:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8504);
        reg = x8504;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8505 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x8505 != Fp::invalid());
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8505);
        reg = x8505;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8506 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x8506 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8507 = (x8506 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8507);
          reg = x8507;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8508 = inv(x8506);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8508);
          reg = x8508;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8509 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x8509 != Fp::invalid());
      if (x8509 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x8506 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x8510 = x102 - x8509;
      if (x8510 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x8511 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x8511 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8512 = x8506 * x8511;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8513 = x8512 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x8513 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8514 = x603 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8515 = Fp(x8514.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8515);
          reg = x8515;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x8516 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x8516 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8517 = x8514 - x8516;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8518 = x8517 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8519 = Fp(x8518.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8519);
          reg = x8519;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x8520 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8520 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8521 = x8518 - x8520;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8522 = x8521 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8523 = Fp(x8522.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8523);
          reg = x8523;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x8524 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8524 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8525 = x8522 - x8524;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8526 = x8525 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8527 = Fp(x8526.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8527);
          reg = x8527;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8528 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8528 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8529 = x8526 - x8528;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8530 = x8529 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8530);
        reg = x8530;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8531 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8531 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8532 = x102 - x8531;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8533 = x8531 * x8532;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8533);
        reg = x8533;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x8534 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8534 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8535 = x99 - x8531;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8536 = x8534 * x8535;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8536 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x74;
      host_args.at(1) = x8501;
      host_args.at(2) = x8493;
      host_args.at(3) = x8506;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8502 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
        auto x8537 = x12 - x8493;
        {
          host_args.at(0) = x8537;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8538 = host_outs.at(0);
          auto x8539 = host_outs.at(1);
          auto x8540 = host_outs.at(2);
          auto x8541 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8538);
            reg = x8538;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8539);
            reg = x8539;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8540);
            reg = x8540;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8541);
            reg = x8541;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8542 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x8542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8543 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x8543 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8544 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x8544 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8545 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x8545 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8537);
          reg = x8537;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8481);
          reg = x8481;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8542);
          reg = x8542;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8543);
          reg = x8543;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8544);
          reg = x8544;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8545);
          reg = x8545;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8546 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8547 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8548 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8549 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8550 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8551 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8552 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8553 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x8553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8554 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x8554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8555 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x8555 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8556 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8556 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8557 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8557 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8558 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8558 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8559 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8559 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8560 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8560 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8561 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8561 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8562 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8562 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8563 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8563 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8564 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8564 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8565 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8565 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8566 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8566 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8567 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8567 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8568 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8568 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8569 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8569 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8570 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8570 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8571 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x8571 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8572 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8573 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x8573 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8574 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x8574 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8575 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x8575 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8576 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x8576 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8577 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x8577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8578 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8579 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8580 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8581 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8582 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8583 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8584 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8585 = args[2][89 * steps + ((cycle - 7) & mask)];
      assert(x8585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8586 = args[2][90 * steps + ((cycle - 7) & mask)];
      assert(x8586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8587 = args[2][91 * steps + ((cycle - 7) & mask)];
      assert(x8587 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8588 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8588 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8589 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8589 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8590 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8590 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8591 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8591 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8592 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8592 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8593 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8593 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8594 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8594 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8595 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8595 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8596 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8596 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8597 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8597 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8598 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8598 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8599 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8600 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8601 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8601 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8602 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8603 = args[2][34 * steps + ((cycle - 7) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8604 = args[2][35 * steps + ((cycle - 7) & mask)];
      assert(x8604 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8605 = args[2][36 * steps + ((cycle - 7) & mask)];
      assert(x8605 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8606 = args[2][37 * steps + ((cycle - 7) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8607 = args[2][38 * steps + ((cycle - 7) & mask)];
      assert(x8607 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8608 = args[2][39 * steps + ((cycle - 7) & mask)];
      assert(x8608 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8609 = args[2][40 * steps + ((cycle - 7) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8610 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8611 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8612 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8613 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8614 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8615 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8616 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8617 = args[2][89 * steps + ((cycle - 15) & mask)];
      assert(x8617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8618 = args[2][90 * steps + ((cycle - 15) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8619 = args[2][91 * steps + ((cycle - 15) & mask)];
      assert(x8619 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8620 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8620 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8621 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8622 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8622 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8623 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8623 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8624 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8625 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8625 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8626 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8626 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8627 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8628 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8629 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8630 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8631 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8632 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8633 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8634 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8635 = args[2][34 * steps + ((cycle - 15) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8636 = args[2][35 * steps + ((cycle - 15) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8637 = args[2][36 * steps + ((cycle - 15) & mask)];
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8638 = args[2][37 * steps + ((cycle - 15) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8639 = args[2][38 * steps + ((cycle - 15) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8640 = args[2][39 * steps + ((cycle - 15) & mask)];
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8641 = args[2][40 * steps + ((cycle - 15) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8642 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8643 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8644 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8645 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8646 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8647 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8648 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8649 = args[2][89 * steps + ((cycle - 16) & mask)];
      assert(x8649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8650 = args[2][90 * steps + ((cycle - 16) & mask)];
      assert(x8650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8651 = args[2][91 * steps + ((cycle - 16) & mask)];
      assert(x8651 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8652 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8652 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8653 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8653 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8654 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8654 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8655 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8655 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8656 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8656 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8657 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8657 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8658 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8658 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8659 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8659 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8660 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8660 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8661 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8661 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8662 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8662 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8663 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8663 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8664 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8664 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8665 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8665 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8666 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8666 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8667 = args[2][34 * steps + ((cycle - 16) & mask)];
      assert(x8667 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8668 = args[2][35 * steps + ((cycle - 16) & mask)];
      assert(x8668 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8669 = args[2][36 * steps + ((cycle - 16) & mask)];
      assert(x8669 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8670 = args[2][37 * steps + ((cycle - 16) & mask)];
      assert(x8670 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8671 = args[2][38 * steps + ((cycle - 16) & mask)];
      assert(x8671 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8672 = args[2][39 * steps + ((cycle - 16) & mask)];
      assert(x8672 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8673 = args[2][40 * steps + ((cycle - 16) & mask)];
      assert(x8673 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8674 = x8628 + x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8675 = x8628 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8676 = x8675 * x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8677 = x8674 - x8676;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8678 = x8629 + x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8679 = x8629 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8680 = x8679 * x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8681 = x8678 - x8680;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8682 = x8630 + x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8683 = x8630 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8684 = x8683 * x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8685 = x8682 - x8684;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8686 = x8631 + x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8687 = x8631 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8688 = x8687 * x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8689 = x8686 - x8688;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8690 = x8632 + x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8691 = x8632 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8692 = x8691 * x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8693 = x8690 - x8692;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8694 = x8633 + x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8695 = x8633 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8696 = x8695 * x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8697 = x8694 - x8696;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8698 = x8634 + x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8699 = x8634 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8700 = x8699 * x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8701 = x8698 - x8700;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8702 = x8635 + x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8703 = x8635 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8704 = x8703 * x8620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8705 = x8702 - x8704;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8706 = x8636 + x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8707 = x8636 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8708 = x8707 * x8621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8709 = x8706 - x8708;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8710 = x8637 + x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8711 = x8637 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8712 = x8711 * x8622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8713 = x8710 - x8712;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8714 = x8638 + x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8715 = x8638 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8716 = x8715 * x8623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8717 = x8714 - x8716;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8718 = x8639 + x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8719 = x8639 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8720 = x8719 * x8624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8721 = x8718 - x8720;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8722 = x8640 + x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8723 = x8640 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8724 = x8723 * x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8725 = x8722 - x8724;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8726 = x8641 + x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8727 = x8641 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8728 = x8727 * x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8729 = x8726 - x8728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8730 = x8610 + x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8731 = x8610 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8732 = x8731 * x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8733 = x8730 - x8732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8734 = x8611 + x8628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8735 = x8611 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8736 = x8735 * x8628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8737 = x8734 - x8736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8738 = x8612 + x8629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8739 = x8612 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8740 = x8739 * x8629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8741 = x8738 - x8740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8742 = x8613 + x8630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8743 = x8613 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8744 = x8743 * x8630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8745 = x8742 - x8744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8746 = x8614 + x8631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8747 = x8614 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8748 = x8747 * x8631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8749 = x8746 - x8748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8750 = x8615 + x8632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8751 = x8615 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8752 = x8751 * x8632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8753 = x8750 - x8752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8754 = x8616 + x8633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8755 = x8616 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8756 = x8755 * x8633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8757 = x8754 - x8756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8758 = x8617 + x8634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8759 = x8617 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8760 = x8759 * x8634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8761 = x8758 - x8760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8762 = x8618 + x8635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8763 = x8618 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8764 = x8763 * x8635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8765 = x8762 - x8764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8766 = x8619 + x8636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8767 = x8619 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8768 = x8767 * x8636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8769 = x8766 - x8768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8770 = x8620 + x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8771 = x8620 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8772 = x8771 * x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8773 = x8770 - x8772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8774 = x8621 + x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8775 = x8621 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8776 = x8775 * x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8777 = x8774 - x8776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8778 = x8622 + x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8779 = x8622 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8780 = x8779 * x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8781 = x8778 - x8780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8782 = x8623 + x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8783 = x8623 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8784 = x8783 * x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8785 = x8782 - x8784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8786 = x8624 + x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8787 = x8624 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8788 = x8787 * x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8789 = x8786 - x8788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8790 = x8617 + x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8791 = x8759 * x8677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8792 = x8790 - x8791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8793 = x8618 + x8681;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8794 = x8763 * x8681;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8795 = x8793 - x8794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8796 = x8619 + x8685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8797 = x8767 * x8685;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8798 = x8796 - x8797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8799 = x8620 + x8689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8800 = x8771 * x8689;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8801 = x8799 - x8800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8802 = x8621 + x8693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8803 = x8775 * x8693;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8804 = x8802 - x8803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8805 = x8622 + x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8806 = x8779 * x8697;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8807 = x8805 - x8806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8808 = x8623 + x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8809 = x8783 * x8701;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8810 = x8808 - x8809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8811 = x8624 + x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8812 = x8787 * x8705;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8813 = x8811 - x8812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8814 = x8625 + x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8815 = x8625 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8816 = x8815 * x8709;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8817 = x8814 - x8816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8818 = x8626 + x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8819 = x8626 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8820 = x8819 * x8713;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8821 = x8818 - x8820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8822 = x8627 + x8717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8823 = x8627 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8824 = x8823 * x8717;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8825 = x8822 - x8824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8826 = x8628 + x8721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8827 = x8675 * x8721;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8828 = x8826 - x8827;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8829 = x8629 + x8725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8830 = x8679 * x8725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8831 = x8829 - x8830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8832 = x8630 + x8729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8833 = x8683 * x8729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8834 = x8832 - x8833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8835 = x8631 + x8733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8836 = x8687 * x8733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8837 = x8835 - x8836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8838 = x8632 + x8737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8839 = x8691 * x8737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8840 = x8838 - x8839;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8841 = x8633 + x8741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8842 = x8695 * x8741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8843 = x8841 - x8842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8634 + x8745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8845 = x8699 * x8745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8846 = x8844 - x8845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8847 = x8635 + x8749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8848 = x8703 * x8749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8849 = x8847 - x8848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8850 = x8636 + x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8851 = x8707 * x8753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8852 = x8850 - x8851;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8853 = x8637 + x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8854 = x8711 * x8757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8855 = x8853 - x8854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8638 + x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8857 = x8715 * x8761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8858 = x8856 - x8857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8859 = x8639 + x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8860 = x8719 * x8765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8861 = x8859 - x8860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8862 = x8640 + x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8863 = x8723 * x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8864 = x8862 - x8863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8865 = x8641 + x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8866 = x8727 * x8773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8867 = x8865 - x8866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8868 = x8610 + x8777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8869 = x8731 * x8777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8870 = x8868 - x8869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8871 = x8611 + x8781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8872 = x8735 * x8781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8873 = x8871 - x8872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8874 = x8612 + x8785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8875 = x8739 * x8785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8876 = x8874 - x8875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8613 + x8789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8878 = x8743 * x8789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8879 = x8877 - x8878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8614 + x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8881 = x8747 * x8625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8882 = x8880 - x8881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8883 = x8615 + x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8884 = x8751 * x8626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8885 = x8883 - x8884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8886 = x8616 + x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8887 = x8755 * x8627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8888 = x8886 - x8887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8889 = x8565 + x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8890 = x8565 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8891 = x8890 * x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8892 = x8889 - x8891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8893 = x8566 + x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8894 = x8566 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8895 = x8894 * x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8896 = x8893 - x8895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8897 = x8567 + x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8898 = x8567 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8899 = x8898 * x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8900 = x8897 - x8899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8901 = x8568 + x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8902 = x8568 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8903 = x8902 * x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8904 = x8901 - x8903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8905 = x8569 + x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8906 = x8569 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8907 = x8906 * x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8908 = x8905 - x8907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8909 = x8570 + x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8910 = x8570 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8911 = x8910 * x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8912 = x8909 - x8911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8913 = x8571 + x8562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8914 = x8571 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8915 = x8914 * x8562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8916 = x8913 - x8915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8917 = x8572 + x8563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8918 = x8572 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8919 = x8918 * x8563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8920 = x8917 - x8919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8921 = x8573 + x8564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8922 = x8573 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8923 = x8922 * x8564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8924 = x8921 - x8923;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8925 = x8574 + x8565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8926 = x8574 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8927 = x8926 * x8565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8928 = x8925 - x8927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8929 = x8575 + x8566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8930 = x8575 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8931 = x8930 * x8566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8932 = x8929 - x8931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8933 = x8576 + x8567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8934 = x8576 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8935 = x8934 * x8567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8936 = x8933 - x8935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8937 = x8577 + x8568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8938 = x8577 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8939 = x8938 * x8568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8940 = x8937 - x8939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8941 = x8546 + x8569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8942 = x8546 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8943 = x8942 * x8569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8944 = x8941 - x8943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8945 = x8547 + x8570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8946 = x8547 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8947 = x8946 * x8570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8948 = x8945 - x8947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8949 = x8548 + x8571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8950 = x8548 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8951 = x8950 * x8571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8952 = x8949 - x8951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8953 = x8549 + x8572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8954 = x8549 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8955 = x8954 * x8572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8956 = x8953 - x8955;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8957 = x8550 + x8573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8958 = x8550 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8959 = x8958 * x8573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8960 = x8957 - x8959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8961 = x8551 + x8574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8962 = x8551 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8963 = x8962 * x8574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8964 = x8961 - x8963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8965 = x8552 + x8575;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8966 = x8552 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8967 = x8966 * x8575;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8968 = x8965 - x8967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8969 = x8553 + x8576;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8970 = x8553 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8971 = x8970 * x8576;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8972 = x8969 - x8971;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8973 = x8554 + x8577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8974 = x8554 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8975 = x8974 * x8577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8976 = x8973 - x8975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8977 = x8563 + x8892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8978 = x8563 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8979 = x8978 * x8892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8980 = x8977 - x8979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8981 = x8564 + x8896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8982 = x8564 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8983 = x8982 * x8896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8984 = x8981 - x8983;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8985 = x8565 + x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8986 = x8890 * x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8987 = x8985 - x8986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8988 = x8566 + x8904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8989 = x8894 * x8904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8990 = x8988 - x8989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8991 = x8567 + x8908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8992 = x8898 * x8908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8993 = x8991 - x8992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8994 = x8568 + x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8995 = x8902 * x8912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8996 = x8994 - x8995;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8997 = x8569 + x8916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8998 = x8906 * x8916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8999 = x8997 - x8998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9000 = x8570 + x8920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9001 = x8910 * x8920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9002 = x9000 - x9001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9003 = x8571 + x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9004 = x8914 * x8924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9005 = x9003 - x9004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9006 = x8572 + x8928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9007 = x8918 * x8928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9008 = x9006 - x9007;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x8573 + x8932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9010 = x8922 * x8932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9011 = x9009 - x9010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x8574 + x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9013 = x8926 * x8936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9014 = x9012 - x9013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9015 = x8575 + x8940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9016 = x8930 * x8940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9017 = x9015 - x9016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9018 = x8576 + x8944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9019 = x8934 * x8944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9020 = x9018 - x9019;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x8577 + x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9022 = x8938 * x8948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9023 = x9021 - x9022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x8546 + x8952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9025 = x8942 * x8952;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9026 = x9024 - x9025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9027 = x8547 + x8956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9028 = x8946 * x8956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9029 = x9027 - x9028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9030 = x8548 + x8960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9031 = x8950 * x8960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9032 = x9030 - x9031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9033 = x8549 + x8964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9034 = x8954 * x8964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9035 = x9033 - x9034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x8550 + x8968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9037 = x8958 * x8968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9038 = x9036 - x9037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x8551 + x8972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9040 = x8962 * x8972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9041 = x9039 - x9040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9042 = x8552 + x8976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9043 = x8966 * x8976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9044 = x9042 - x9043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9045 = x8553 + x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9046 = x8970 * x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9047 = x9045 - x9046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9048 = x8554 + x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9049 = x8974 * x8556;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9050 = x9048 - x9049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9051 = x8555 + x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9052 = x8555 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9053 = x9052 * x8557;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9054 = x9051 - x9053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9055 = x8556 + x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9056 = x8556 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9057 = x9056 * x8558;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9058 = x9055 - x9057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9059 = x8557 + x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9060 = x8557 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9061 = x9060 * x8559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9062 = x9059 - x9061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9063 = x8558 + x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9064 = x8558 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9065 = x9064 * x8560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9066 = x9063 - x9065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9067 = x8559 + x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9068 = x8559 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9069 = x9068 * x8561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9070 = x9067 - x9069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9071 = x8560 + x8562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9072 = x8560 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9073 = x9072 * x8562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9074 = x9071 - x9073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9075 = x8561 + x8563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9076 = x8561 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9077 = x9076 * x8563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9078 = x9075 - x9077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9079 = x8562 + x8564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9080 = x8562 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9081 = x9080 * x8564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9082 = x9079 - x9081;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9083 = x8643 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9084 = x8642 + x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9085 = x8644 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9086 = x9084 + x9085;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9087 = x8645 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9088 = x9086 + x9087;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9089 = x8646 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9090 = x9088 + x9089;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9091 = x8647 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9092 = x9090 + x9091;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9093 = x8648 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9094 = x9092 + x9093;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9095 = x8649 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9096 = x9094 + x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9097 = x8650 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9098 = x9096 + x9097;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9099 = x8651 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9100 = x9098 + x9099;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9101 = x8652 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9102 = x9100 + x9101;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9103 = x8653 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9104 = x9102 + x9103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9105 = x8654 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9106 = x9104 + x9105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9107 = x8655 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9108 = x9106 + x9107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9109 = x8656 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9110 = x9108 + x9109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9111 = x8657 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9112 = x9110 + x9111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9113 = x8659 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9114 = x8658 + x9113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9115 = x8660 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9116 = x9114 + x9115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9117 = x8661 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9118 = x9116 + x9117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9119 = x8662 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9120 = x9118 + x9119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9121 = x8663 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9122 = x9120 + x9121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9123 = x8664 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9124 = x9122 + x9123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9125 = x8665 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9126 = x9124 + x9125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9127 = x8666 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9128 = x9126 + x9127;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9129 = x8667 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9130 = x9128 + x9129;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9131 = x8668 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9132 = x9130 + x9131;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9133 = x8669 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9134 = x9132 + x9133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9135 = x8670 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9136 = x9134 + x9135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9137 = x8671 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9138 = x9136 + x9137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9139 = x8672 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9140 = x9138 + x9139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9141 = x8673 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9142 = x9140 + x9141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9143 = x8795 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9144 = x8792 + x9143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9145 = x8798 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9146 = x9144 + x9145;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9147 = x8801 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9148 = x9146 + x9147;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9149 = x8804 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9150 = x9148 + x9149;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9151 = x8807 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9152 = x9150 + x9151;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9153 = x8810 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9154 = x9152 + x9153;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9155 = x8813 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9156 = x9154 + x9155;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9157 = x8817 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9158 = x9156 + x9157;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9159 = x8821 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9160 = x9158 + x9159;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9161 = x8825 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9162 = x9160 + x9161;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9163 = x8828 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9164 = x9162 + x9163;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9165 = x8831 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9166 = x9164 + x9165;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9167 = x8834 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9168 = x9166 + x9167;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9169 = x8837 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9170 = x9168 + x9169;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9171 = x8840 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9172 = x9170 + x9171;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9173 = x8846 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9174 = x8843 + x9173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9175 = x8849 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9176 = x9174 + x9175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9177 = x8852 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9178 = x9176 + x9177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9179 = x8855 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9180 = x9178 + x9179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9181 = x8858 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9182 = x9180 + x9181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9183 = x8861 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9184 = x9182 + x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9185 = x8864 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9186 = x9184 + x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9187 = x8867 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9188 = x9186 + x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9189 = x8870 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9190 = x9188 + x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9191 = x8873 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9192 = x9190 + x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9193 = x8876 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9194 = x9192 + x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9195 = x8879 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9196 = x9194 + x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9197 = x8882 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9198 = x9196 + x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9199 = x8885 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9200 = x9198 + x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9201 = x8888 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9202 = x9200 + x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9203 = x8579 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9204 = x8578 + x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9205 = x8580 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9206 = x9204 + x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9207 = x8581 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9208 = x9206 + x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9209 = x8582 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9210 = x9208 + x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9211 = x8583 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9212 = x9210 + x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9213 = x8584 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9214 = x9212 + x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9215 = x8585 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9216 = x9214 + x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9217 = x8586 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9218 = x9216 + x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9219 = x8587 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9220 = x9218 + x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9221 = x8588 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9222 = x9220 + x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9223 = x8589 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9224 = x9222 + x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9225 = x8590 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9226 = x9224 + x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9227 = x8591 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9228 = x9226 + x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9229 = x8592 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9230 = x9228 + x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9231 = x8593 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9232 = x9230 + x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9233 = x8595 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9234 = x8594 + x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9235 = x8596 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9236 = x9234 + x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9237 = x8597 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9238 = x9236 + x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9239 = x8598 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9240 = x9238 + x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9241 = x8599 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9242 = x9240 + x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9243 = x8600 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9244 = x9242 + x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9245 = x8601 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9246 = x9244 + x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9247 = x8602 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9248 = x9246 + x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9249 = x8603 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9250 = x9248 + x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9251 = x8604 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9252 = x9250 + x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9253 = x8605 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9254 = x9252 + x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9255 = x8606 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9256 = x9254 + x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9257 = x8607 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9258 = x9256 + x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9259 = x8608 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9260 = x9258 + x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9261 = x8609 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9262 = x9260 + x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9263 = x8984 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9264 = x8980 + x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9265 = x8987 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9266 = x9264 + x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9267 = x8990 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9268 = x9266 + x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9269 = x8993 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9270 = x9268 + x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9271 = x8996 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9272 = x9270 + x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9273 = x8999 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9274 = x9272 + x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9275 = x9002 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9276 = x9274 + x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9277 = x9005 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9278 = x9276 + x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9279 = x9008 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9280 = x9278 + x9279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9281 = x9011 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9282 = x9280 + x9281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9283 = x9014 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9284 = x9282 + x9283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9285 = x9017 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9286 = x9284 + x9285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9287 = x9020 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9288 = x9286 + x9287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9289 = x9023 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9290 = x9288 + x9289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9291 = x9026 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9292 = x9290 + x9291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9293 = x9032 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9294 = x9029 + x9293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9295 = x9035 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9296 = x9294 + x9295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9297 = x9038 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9298 = x9296 + x9297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9299 = x9041 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9300 = x9298 + x9299;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9301 = x9044 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9302 = x9300 + x9301;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9303 = x9047 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9304 = x9302 + x9303;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9305 = x9050 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9306 = x9304 + x9305;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9307 = x9054 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9308 = x9306 + x9307;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9309 = x9058 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9310 = x9308 + x9309;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9311 = x9062 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9312 = x9310 + x9311;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9313 = x9066 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9314 = x9312 + x9313;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9315 = x9070 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9316 = x9314 + x9315;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9317 = x9074 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9318 = x9316 + x9317;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9319 = x9078 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9320 = x9318 + x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9321 = x9082 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9322 = x9320 + x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9323 = x9232 + x9292;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9324 = x9262 + x9322;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9325 = x9172 + x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9326 = x9202 + x9324;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9327 = x9112 + x9325;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9328 = x9142 + x9326;
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][148 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9327);
        reg = x9327;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][149 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9328);
        reg = x9328;
      }
      if (x8501 != 0) {
        {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9329 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9330 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9330 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9331 = x9330 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9332 = x9329 + x9331;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9333 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9333 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9334 = x9333 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9335 = x9332 + x9334;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9336 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9336 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9337 = x9336 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9338 = x9335 + x9337;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9339 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9339 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9340 = x9339 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9341 = x9338 + x9340;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9342 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9342 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9343 = x9342 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9344 = x9341 + x9343;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9345 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9345 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9346 = x9345 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9347 = x9344 + x9346;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9348 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9348 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9349 = x9348 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9350 = x9347 + x9349;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9351 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9351 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9352 = x9351 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9353 = x9350 + x9352;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9354 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9354 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9355 = x9354 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9356 = x9353 + x9355;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9357 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9357 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9358 = x9357 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9359 = x9356 + x9358;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9360 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9360 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9361 = x9360 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9362 = x9359 + x9361;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9363 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9363 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9364 = x9363 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9365 = x9362 + x9364;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9366 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9366 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9367 = x9366 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9368 = x9365 + x9367;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9369 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9369 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9370 = x9369 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9371 = x9368 + x9370;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9372 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9372 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9373 = x9372 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9374 = x9371 + x9373;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9375 = x101 - x9374;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9376 = x9375 * x16;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9376);
          reg = x9376;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9377 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9377 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9378 = Fp(x9377.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9378);
            reg = x9378;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9379 = Fp(x9377.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9380 = x9379 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9380);
            reg = x9380;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9381 = Fp(x9377.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9382 = x9381 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9382);
            reg = x9382;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9383 = Fp(x9377.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9384 = x9383 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9384);
            reg = x9384;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9385 = Fp(x9377.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9386 = x9385 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9386);
            reg = x9386;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9387 = Fp(x9377.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9388 = x9387 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9388);
            reg = x9388;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9389 = Fp(x9377.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9390 = x9389 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9390);
            reg = x9390;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9391 = Fp(x9377.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9392 = x9391 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9392);
            reg = x9392;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9393 = Fp(x9377.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9394 = x9393 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9394);
            reg = x9394;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9395 = Fp(x9377.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9396 = x9395 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9396);
            reg = x9396;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9397 = Fp(x9377.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9398 = x9397 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9398);
            reg = x9398;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9399 = Fp(x9377.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9400 = x9399 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9400);
            reg = x9400;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9401 = Fp(x9377.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9402 = x9401 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9402);
            reg = x9402;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9403 = Fp(x9377.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9404 = x9403 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9404);
            reg = x9404;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9405 = Fp(x9377.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9406 = x9405 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9406);
            reg = x9406;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9407 = Fp(x9377.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9408 = x9407 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9408);
            reg = x9408;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9409 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9409 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9410 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9410 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9411 = x9410 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9412 = x9409 + x9411;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9413 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9413 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9414 = x9413 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9415 = x9412 + x9414;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9416 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9416 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9417 = x9416 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9418 = x9415 + x9417;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9419 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9419 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9420 = x9419 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9421 = x9418 + x9420;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9422 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9422 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9423 = x9422 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9424 = x9421 + x9423;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9425 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9425 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9426 = x9425 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9427 = x9424 + x9426;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9428 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9429 = x9428 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9430 = x9427 + x9429;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9431 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9431 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9432 = x9431 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9433 = x9430 + x9432;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9434 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9434 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9435 = x9434 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9436 = x9433 + x9435;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9437 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9437 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9438 = x9437 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9439 = x9436 + x9438;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9440 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9440 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9441 = x9440 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9442 = x9439 + x9441;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9443 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9443 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9444 = x9443 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9445 = x9442 + x9444;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9446 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9446 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9447 = x9446 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9448 = x9445 + x9447;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9449 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9450 = x9449 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9451 = x9448 + x9450;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9452 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9452 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9453 = x9452 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9454 = x9451 + x9453;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9455 = x9377 - x9454;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9456 = x9455 * x16;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9456);
          reg = x9456;
        }
      }
      if (x8502 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg10"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9457 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x9457 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg11"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9458 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x9458 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9459 = Fp(x9457.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9459);
            reg = x9459;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9460 = Fp(x9457.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9461 = x9460 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9461);
            reg = x9461;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9462 = Fp(x9457.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9463 = x9462 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9463);
            reg = x9463;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9464 = Fp(x9457.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9465 = x9464 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9465);
            reg = x9465;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9466 = Fp(x9457.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9467 = x9466 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9467);
            reg = x9467;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9468 = Fp(x9457.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9469 = x9468 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9469);
            reg = x9469;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9470 = Fp(x9457.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9471 = x9470 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9471);
            reg = x9471;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9472 = Fp(x9457.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9473 = x9472 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9473);
            reg = x9473;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9474 = Fp(x9457.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9475 = x9474 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9475);
            reg = x9475;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9476 = Fp(x9457.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9477 = x9476 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9477);
            reg = x9477;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9478 = Fp(x9457.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9479 = x9478 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9479);
            reg = x9479;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9480 = Fp(x9457.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9481 = x9480 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9481);
            reg = x9481;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9482 = Fp(x9457.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9483 = x9482 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9483);
            reg = x9483;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9484 = Fp(x9457.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9485 = x9484 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9485);
            reg = x9485;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9486 = Fp(x9457.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9487 = x9486 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9487);
            reg = x9487;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9488 = Fp(x9457.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9489 = x9488 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9489);
            reg = x9489;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9490 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9491 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9491 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9492 = x9491 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9493 = x9490 + x9492;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9494 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9494 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9495 = x9494 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9496 = x9493 + x9495;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9497 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9497 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9498 = x9497 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9499 = x9496 + x9498;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9500 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9500 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9501 = x9500 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9502 = x9499 + x9501;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9503 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9503 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9504 = x9503 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9505 = x9502 + x9504;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9506 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9506 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9507 = x9506 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9508 = x9505 + x9507;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9509 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9509 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9510 = x9509 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9511 = x9508 + x9510;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9512 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9512 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9513 = x9512 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9514 = x9511 + x9513;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9515 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9515 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9516 = x9515 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9517 = x9514 + x9516;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9518 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9518 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9519 = x9518 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9520 = x9517 + x9519;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9521 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9521 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9522 = x9521 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9523 = x9520 + x9522;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9524 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9524 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9525 = x9524 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9526 = x9523 + x9525;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9527 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9527 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9528 = x9527 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9529 = x9526 + x9528;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9530 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9530 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9531 = x9530 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9532 = x9529 + x9531;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9533 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9533 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9534 = x9533 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9535 = x9532 + x9534;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9536 = x9457 - x9535;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9537 = x9536 * x16;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9537);
          reg = x9537;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9538 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9538 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9539 = x9458 + x9538;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9540 = Fp(x9539.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9540);
            reg = x9540;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9541 = Fp(x9539.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9542 = x9541 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9542);
            reg = x9542;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9543 = Fp(x9539.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9544 = x9543 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9544);
            reg = x9544;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9545 = Fp(x9539.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9546 = x9545 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9546);
            reg = x9546;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9547 = Fp(x9539.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9548 = x9547 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9548);
            reg = x9548;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9549 = Fp(x9539.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9550 = x9549 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9550);
            reg = x9550;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9551 = Fp(x9539.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9552 = x9551 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9552);
            reg = x9552;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9553 = Fp(x9539.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9554 = x9553 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9554);
            reg = x9554;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9555 = Fp(x9539.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9556 = x9555 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9556);
            reg = x9556;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9557 = Fp(x9539.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9558 = x9557 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9558);
            reg = x9558;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9559 = Fp(x9539.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9560 = x9559 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9560);
            reg = x9560;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9561 = Fp(x9539.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9562 = x9561 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9562);
            reg = x9562;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9563 = Fp(x9539.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9564 = x9563 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9564);
            reg = x9564;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9565 = Fp(x9539.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9566 = x9565 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9566);
            reg = x9566;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9567 = Fp(x9539.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9568 = x9567 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9568);
            reg = x9568;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9569 = Fp(x9539.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9570 = x9569 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9570);
            reg = x9570;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9571 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9571 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9572 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9572 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9573 = x9572 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9574 = x9571 + x9573;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9575 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9575 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9576 = x9575 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9577 = x9574 + x9576;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9578 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9578 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9579 = x9578 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9580 = x9577 + x9579;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9581 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9581 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9582 = x9581 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9583 = x9580 + x9582;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9584 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9584 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9585 = x9584 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9586 = x9583 + x9585;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9587 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9587 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9588 = x9587 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9589 = x9586 + x9588;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9590 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9590 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9591 = x9590 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9592 = x9589 + x9591;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9593 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9593 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9594 = x9593 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9595 = x9592 + x9594;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9596 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9596 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9597 = x9596 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9598 = x9595 + x9597;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9599 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9599 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9600 = x9599 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9601 = x9598 + x9600;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9602 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9602 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9603 = x9602 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9604 = x9601 + x9603;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9605 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9605 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9606 = x9605 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9607 = x9604 + x9606;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9608 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9608 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9609 = x9608 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9610 = x9607 + x9609;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9611 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9611 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9612 = x9611 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9613 = x9610 + x9612;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9614 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9614 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9615 = x9614 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9616 = x9613 + x9615;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9617 = x9539 - x9616;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9618 = x9617 * x16;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9618);
          reg = x9618;
        }
      }
      if (x8501 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9619 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x9619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9620 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x9620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9621 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x9621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9622 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x9622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9623 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x9623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9624 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x9624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9625 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x9625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9626 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x9626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9627 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x9627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9628 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9629 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9629 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9630 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9630 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9631 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9632 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9633 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9633 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9634 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9635 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9636 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9636 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9637 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9637 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9638 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9638 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9639 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9640 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9641 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9642 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9643 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9643 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9644 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9645 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9645 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9646 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9647 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9648 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9649 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9649 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9650 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9650 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9651 = x9620 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9652 = x9619 + x9651;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9653 = x9621 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9654 = x9652 + x9653;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9655 = x9622 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9656 = x9654 + x9655;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9657 = x9623 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9658 = x9656 + x9657;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9659 = x9624 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9660 = x9658 + x9659;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9661 = x9625 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9662 = x9660 + x9661;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9663 = x9626 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9664 = x9662 + x9663;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9665 = x9627 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9666 = x9664 + x9665;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9667 = x9628 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9668 = x9666 + x9667;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9669 = x9629 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9670 = x9668 + x9669;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9671 = x9630 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9672 = x9670 + x9671;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9673 = x9631 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9674 = x9672 + x9673;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9675 = x9632 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9676 = x9674 + x9675;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9677 = x9633 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9678 = x9676 + x9677;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9679 = x9634 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9680 = x9678 + x9679;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9681 = x9636 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9682 = x9635 + x9681;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9683 = x9637 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9684 = x9682 + x9683;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9685 = x9638 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9686 = x9684 + x9685;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9687 = x9639 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9688 = x9686 + x9687;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9689 = x9640 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9690 = x9688 + x9689;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9691 = x9641 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9692 = x9690 + x9691;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9693 = x9642 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9694 = x9692 + x9693;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9695 = x9643 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9696 = x9694 + x9695;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9697 = x9644 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9698 = x9696 + x9697;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9699 = x9645 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9700 = x9698 + x9699;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9701 = x9646 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9702 = x9700 + x9701;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9703 = x9647 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9704 = x9702 + x9703;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9705 = x9648 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9706 = x9704 + x9705;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9707 = x9649 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9708 = x9706 + x9707;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9709 = x9650 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9710 = x9708 + x9709;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9711 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x9711 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9712 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x9712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9713 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x9713 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9714 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x9714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9715 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x9715 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9716 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x9716 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9717 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x9717 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9718 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x9718 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9719 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x9719 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9720 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9720 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9721 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9721 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9722 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9723 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9723 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9724 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9724 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9725 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9725 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9726 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9726 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9727 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9727 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9728 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9728 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9729 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9729 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9730 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9730 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9731 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9731 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9732 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9732 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9733 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9733 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9734 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9734 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9735 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9735 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9736 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9736 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9737 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9737 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9738 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9738 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9739 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9739 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9740 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9740 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9741 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x9741 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9742 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x9742 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9743 = x9712 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9744 = x9711 + x9743;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9745 = x9713 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9746 = x9744 + x9745;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9747 = x9714 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9748 = x9746 + x9747;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9749 = x9715 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9750 = x9748 + x9749;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9751 = x9716 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9752 = x9750 + x9751;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9753 = x9717 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9754 = x9752 + x9753;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9755 = x9718 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9756 = x9754 + x9755;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9757 = x9719 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9758 = x9756 + x9757;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9759 = x9720 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9760 = x9758 + x9759;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9761 = x9721 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9762 = x9760 + x9761;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9763 = x9722 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9764 = x9762 + x9763;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9765 = x9723 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9766 = x9764 + x9765;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9767 = x9724 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9768 = x9766 + x9767;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9769 = x9725 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9770 = x9768 + x9769;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9771 = x9726 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9772 = x9770 + x9771;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9773 = x9728 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9774 = x9727 + x9773;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9775 = x9729 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9776 = x9774 + x9775;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9777 = x9730 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9778 = x9776 + x9777;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9779 = x9731 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9780 = x9778 + x9779;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9781 = x9732 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9782 = x9780 + x9781;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9783 = x9733 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9784 = x9782 + x9783;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9785 = x9734 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9786 = x9784 + x9785;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9787 = x9735 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9788 = x9786 + x9787;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9789 = x9736 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9790 = x9788 + x9789;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9791 = x9737 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9792 = x9790 + x9791;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9793 = x9738 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9794 = x9792 + x9793;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9795 = x9739 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9796 = x9794 + x9795;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9797 = x9740 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9798 = x9796 + x9797;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9799 = x9741 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9800 = x9798 + x9799;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9801 = x9742 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9802 = x9800 + x9801;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9803 = x9680 + x9772;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9804 = x9710 + x9802;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9805 = Fp(x9803.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9805);
            reg = x9805;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9806 = Fp(x9803.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9807 = x9806 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9807);
            reg = x9807;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9808 = Fp(x9803.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9809 = x9808 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9809);
            reg = x9809;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9810 = Fp(x9803.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9811 = x9810 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9811);
            reg = x9811;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9812 = Fp(x9803.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9813 = x9812 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9813);
            reg = x9813;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9814 = Fp(x9803.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9815 = x9814 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9815);
            reg = x9815;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9816 = Fp(x9803.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9817 = x9816 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9817);
            reg = x9817;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9818 = Fp(x9803.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9819 = x9818 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9819);
            reg = x9819;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9820 = Fp(x9803.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9821 = x9820 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9821);
            reg = x9821;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9822 = Fp(x9803.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9823 = x9822 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9823);
            reg = x9823;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9824 = Fp(x9803.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9825 = x9824 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9825);
            reg = x9825;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9826 = Fp(x9803.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9827 = x9826 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9827);
            reg = x9827;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9828 = Fp(x9803.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9829 = x9828 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9829);
            reg = x9829;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9830 = Fp(x9803.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9831 = x9830 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9831);
            reg = x9831;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9832 = Fp(x9803.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9833 = x9832 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9833);
            reg = x9833;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9834 = Fp(x9803.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9835 = x9834 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9835);
            reg = x9835;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9836 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x9836 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9837 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x9837 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9838 = x9837 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9839 = x9836 + x9838;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9840 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x9840 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9841 = x9840 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9842 = x9839 + x9841;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9843 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x9843 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9844 = x9843 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9845 = x9842 + x9844;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9846 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x9846 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9847 = x9846 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9848 = x9845 + x9847;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9849 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x9849 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9850 = x9849 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9851 = x9848 + x9850;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9852 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x9852 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9853 = x9852 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9854 = x9851 + x9853;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9855 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9856 = x9855 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9857 = x9854 + x9856;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9858 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9858 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9859 = x9858 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9860 = x9857 + x9859;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9861 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9861 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9862 = x9861 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9863 = x9860 + x9862;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9864 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9864 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9865 = x9864 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9866 = x9863 + x9865;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9867 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9867 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9868 = x9867 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9869 = x9866 + x9868;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9870 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9870 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9871 = x9870 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9872 = x9869 + x9871;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9873 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9873 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9874 = x9873 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9875 = x9872 + x9874;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9876 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9876 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9877 = x9876 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9878 = x9875 + x9877;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9879 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9879 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9880 = x9879 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9881 = x9878 + x9880;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9882 = x9803 - x9881;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9883 = x9882 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9884 = Fp(x9883.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9884);
            reg = x9884;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9885 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x9885 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9886 = x9883 - x9885;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x9887 = x9886 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9888 = x102 - x9887;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9889 = x9887 * x9888;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9889 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x9890 = x9804 + x9883;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9891 = Fp(x9890.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9891);
            reg = x9891;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9892 = Fp(x9890.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9893 = x9892 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9893);
            reg = x9893;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9894 = Fp(x9890.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9895 = x9894 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9895);
            reg = x9895;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9896 = Fp(x9890.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9897 = x9896 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9897);
            reg = x9897;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9898 = Fp(x9890.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9899 = x9898 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9899);
            reg = x9899;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9900 = Fp(x9890.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9901 = x9900 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9901);
            reg = x9901;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9902 = Fp(x9890.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9903 = x9902 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9903);
            reg = x9903;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9904 = Fp(x9890.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9905 = x9904 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9905);
            reg = x9905;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9906 = Fp(x9890.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9907 = x9906 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9907);
            reg = x9907;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9908 = Fp(x9890.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9909 = x9908 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9909);
            reg = x9909;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9910 = Fp(x9890.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9911 = x9910 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9911);
            reg = x9911;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9912 = Fp(x9890.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9913 = x9912 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9913);
            reg = x9913;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9914 = Fp(x9890.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9915 = x9914 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9915);
            reg = x9915;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9916 = Fp(x9890.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9917 = x9916 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9917);
            reg = x9917;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9918 = Fp(x9890.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9919 = x9918 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9919);
            reg = x9919;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9920 = Fp(x9890.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9921 = x9920 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9921);
            reg = x9921;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9922 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9922 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9923 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9923 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9924 = x9923 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9925 = x9922 + x9924;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9926 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x9926 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9927 = x9926 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9928 = x9925 + x9927;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9929 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x9929 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9930 = x9929 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9931 = x9928 + x9930;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9932 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x9932 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9933 = x9932 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9934 = x9931 + x9933;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9935 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x9935 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9936 = x9935 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9937 = x9934 + x9936;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9938 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x9938 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9939 = x9938 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9940 = x9937 + x9939;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9941 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x9941 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9942 = x9941 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9943 = x9940 + x9942;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9944 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x9944 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9945 = x9944 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9946 = x9943 + x9945;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9947 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x9947 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9948 = x9947 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9949 = x9946 + x9948;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9950 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x9950 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9951 = x9950 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9952 = x9949 + x9951;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9953 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x9953 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9954 = x9953 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9955 = x9952 + x9954;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9956 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x9956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9957 = x9956 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9958 = x9955 + x9957;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9959 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x9959 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9960 = x9959 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9961 = x9958 + x9960;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9962 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x9962 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9963 = x9962 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9964 = x9961 + x9963;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9965 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x9965 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9966 = x9965 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9967 = x9964 + x9966;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9968 = x9890 - x9967;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9969 = x9968 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x9970 = Fp(x9969.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9970);
            reg = x9970;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9971 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9971 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x9972 = x9969 - x9971;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x9973 = x9972 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x9974 = x102 - x9973;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x9975 = x9973 * x9974;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x9975 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9976 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9976 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9977 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x9977 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9978 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x9978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9979 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x9979 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9980 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x9980 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9981 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x9981 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9982 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x9982 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9983 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x9983 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9984 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x9984 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9985 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x9985 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9986 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x9986 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9987 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x9987 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9988 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x9988 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9989 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x9989 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9990 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x9990 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9991 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x9991 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9992 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x9992 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9993 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x9993 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9994 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x9994 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9995 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x9995 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9996 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x9996 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9997 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x9997 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9998 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x9998 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9999 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x9999 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10000 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x10000 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10001 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x10001 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10002 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x10002 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10003 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10003 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10004 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10004 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10005 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10005 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10006 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x10006 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10007 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x10007 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10008 = x9977 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10009 = x9976 + x10008;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10010 = x9978 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10011 = x10009 + x10010;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10012 = x9979 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10013 = x10011 + x10012;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10014 = x9980 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10015 = x10013 + x10014;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10016 = x9981 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10017 = x10015 + x10016;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10018 = x9982 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10019 = x10017 + x10018;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10020 = x9983 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10021 = x10019 + x10020;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10022 = x9984 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10023 = x10021 + x10022;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10024 = x9985 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10025 = x10023 + x10024;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10026 = x9986 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10027 = x10025 + x10026;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10028 = x9987 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10029 = x10027 + x10028;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10030 = x9988 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10031 = x10029 + x10030;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10032 = x9989 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10033 = x10031 + x10032;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10034 = x9990 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10035 = x10033 + x10034;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10036 = x9991 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10037 = x10035 + x10036;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10038 = x9993 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10039 = x9992 + x10038;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10040 = x9994 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10041 = x10039 + x10040;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10042 = x9995 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10043 = x10041 + x10042;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10044 = x9996 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10045 = x10043 + x10044;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10046 = x9997 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10047 = x10045 + x10046;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10048 = x9998 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10049 = x10047 + x10048;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10050 = x9999 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10051 = x10049 + x10050;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10052 = x10000 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10053 = x10051 + x10052;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10054 = x10001 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10055 = x10053 + x10054;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10056 = x10002 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10057 = x10055 + x10056;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10058 = x10003 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10059 = x10057 + x10058;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10060 = x10004 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10061 = x10059 + x10060;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10062 = x10005 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10063 = x10061 + x10062;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10064 = x10006 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10065 = x10063 + x10064;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10066 = x10007 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10067 = x10065 + x10066;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10068 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10069 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10070 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10071 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10072 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10073 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10074 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10074 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10075 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10075 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10076 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10077 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10078 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10079 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10080 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10080 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10081 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10081 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10082 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10082 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10083 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10083 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10084 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10084 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10085 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10085 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10086 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10086 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10087 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10087 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10088 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10088 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10089 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10089 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10090 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10090 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10091 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10091 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10092 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10092 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10093 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10093 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10094 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10094 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10095 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10095 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10096 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10096 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10097 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10097 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10098 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10098 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10099 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10099 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10100 = x10069 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10101 = x10068 + x10100;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10102 = x10070 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10103 = x10101 + x10102;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10104 = x10071 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10105 = x10103 + x10104;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10106 = x10072 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10107 = x10105 + x10106;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10108 = x10073 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10109 = x10107 + x10108;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10110 = x10074 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10111 = x10109 + x10110;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10112 = x10075 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10113 = x10111 + x10112;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10114 = x10076 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10115 = x10113 + x10114;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10116 = x10077 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10117 = x10115 + x10116;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10118 = x10078 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10119 = x10117 + x10118;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10120 = x10079 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10121 = x10119 + x10120;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10122 = x10080 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10123 = x10121 + x10122;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10124 = x10081 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10125 = x10123 + x10124;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10126 = x10082 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10127 = x10125 + x10126;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10128 = x10083 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10129 = x10127 + x10128;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10130 = x10085 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10131 = x10084 + x10130;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10132 = x10086 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10133 = x10131 + x10132;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10134 = x10087 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10135 = x10133 + x10134;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10136 = x10088 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10137 = x10135 + x10136;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10138 = x10089 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10139 = x10137 + x10138;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10140 = x10090 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10141 = x10139 + x10140;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10142 = x10091 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10143 = x10141 + x10142;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10144 = x10092 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10145 = x10143 + x10144;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10146 = x10093 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10147 = x10145 + x10146;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10148 = x10094 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10149 = x10147 + x10148;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10150 = x10095 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10151 = x10149 + x10150;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10152 = x10096 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10153 = x10151 + x10152;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10154 = x10097 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10155 = x10153 + x10154;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10156 = x10098 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10157 = x10155 + x10156;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10158 = x10099 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10159 = x10157 + x10158;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10160 = x10037 + x10129;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10161 = x10067 + x10159;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10162 = Fp(x10160.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10162);
            reg = x10162;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10163 = Fp(x10160.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10164 = x10163 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10164);
            reg = x10164;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10165 = Fp(x10160.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10166 = x10165 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10166);
            reg = x10166;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10167 = Fp(x10160.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10168 = x10167 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10168);
            reg = x10168;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10169 = Fp(x10160.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10170 = x10169 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10170);
            reg = x10170;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10171 = Fp(x10160.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10172 = x10171 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10172);
            reg = x10172;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10173 = Fp(x10160.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10174 = x10173 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10174);
            reg = x10174;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10175 = Fp(x10160.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10176 = x10175 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10176);
            reg = x10176;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10177 = Fp(x10160.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10178 = x10177 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10178);
            reg = x10178;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10179 = Fp(x10160.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10180 = x10179 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10180);
            reg = x10180;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10181 = Fp(x10160.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10182 = x10181 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10182);
            reg = x10182;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10183 = Fp(x10160.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10184 = x10183 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10184);
            reg = x10184;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10185 = Fp(x10160.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10186 = x10185 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10186);
            reg = x10186;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10187 = Fp(x10160.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10188 = x10187 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10188);
            reg = x10188;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10189 = Fp(x10160.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10190 = x10189 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10190);
            reg = x10190;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10191 = Fp(x10160.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10192 = x10191 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10192);
            reg = x10192;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10193 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10193 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10194 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10194 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10195 = x10194 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10196 = x10193 + x10195;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10197 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10197 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10198 = x10197 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10199 = x10196 + x10198;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10200 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10200 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10201 = x10200 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10202 = x10199 + x10201;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10203 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10203 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10204 = x10203 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10205 = x10202 + x10204;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10206 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10206 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10207 = x10206 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10208 = x10205 + x10207;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10209 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10209 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10210 = x10209 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10211 = x10208 + x10210;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10212 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10212 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10213 = x10212 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10214 = x10211 + x10213;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10215 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10215 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10216 = x10215 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10217 = x10214 + x10216;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10218 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10218 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10219 = x10218 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10220 = x10217 + x10219;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10221 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10221 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10222 = x10221 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10223 = x10220 + x10222;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10224 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10224 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10225 = x10224 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10226 = x10223 + x10225;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10227 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10227 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10228 = x10227 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10229 = x10226 + x10228;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10230 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10230 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10231 = x10230 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10232 = x10229 + x10231;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10233 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10233 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10234 = x10233 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10235 = x10232 + x10234;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10236 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10236 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10237 = x10236 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10238 = x10235 + x10237;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10239 = x10160 - x10238;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10240 = x10239 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10241 = Fp(x10240.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10241);
            reg = x10241;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10242 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x10242 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10243 = x10240 - x10242;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10244 = x10243 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10245 = x102 - x10244;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10246 = x10244 * x10245;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10246 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10247 = x10161 + x10240;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10248 = Fp(x10247.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10248);
            reg = x10248;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10249 = Fp(x10247.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10250 = x10249 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10250);
            reg = x10250;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10251 = Fp(x10247.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10252 = x10251 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10252);
            reg = x10252;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10253 = Fp(x10247.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10254 = x10253 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10254);
            reg = x10254;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10255 = Fp(x10247.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10256 = x10255 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10256);
            reg = x10256;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10257 = Fp(x10247.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10258 = x10257 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10258);
            reg = x10258;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10259 = Fp(x10247.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10260 = x10259 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10260);
            reg = x10260;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10261 = Fp(x10247.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10262 = x10261 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10262);
            reg = x10262;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10263 = Fp(x10247.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10264 = x10263 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10264);
            reg = x10264;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10265 = Fp(x10247.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10266 = x10265 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10266);
            reg = x10266;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10267 = Fp(x10247.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10268 = x10267 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10268);
            reg = x10268;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10269 = Fp(x10247.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10270 = x10269 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10270);
            reg = x10270;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10271 = Fp(x10247.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10272 = x10271 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10272);
            reg = x10272;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10273 = Fp(x10247.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10274 = x10273 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10274);
            reg = x10274;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10275 = Fp(x10247.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10276 = x10275 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10276);
            reg = x10276;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10277 = Fp(x10247.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10278 = x10277 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10278);
            reg = x10278;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10279 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10280 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10280 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10281 = x10280 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10282 = x10279 + x10281;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10283 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10283 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10284 = x10283 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10285 = x10282 + x10284;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10286 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10286 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10287 = x10286 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10288 = x10285 + x10287;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10289 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10289 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10290 = x10289 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10291 = x10288 + x10290;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10292 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10292 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10293 = x10292 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10294 = x10291 + x10293;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10295 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10295 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10296 = x10295 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10297 = x10294 + x10296;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10298 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10298 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10299 = x10298 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10300 = x10297 + x10299;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10301 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10301 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10302 = x10301 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10303 = x10300 + x10302;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10304 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10304 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10305 = x10304 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10306 = x10303 + x10305;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10307 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10307 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10308 = x10307 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10309 = x10306 + x10308;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10310 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10310 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10311 = x10310 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10312 = x10309 + x10311;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10313 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10313 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10314 = x10313 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10315 = x10312 + x10314;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10316 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10316 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10317 = x10316 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10318 = x10315 + x10317;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10319 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10319 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10320 = x10319 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10321 = x10318 + x10320;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10322 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10322 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10323 = x10322 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10324 = x10321 + x10323;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10325 = x10247 - x10324;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10326 = x10325 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10327 = Fp(x10326.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10327);
            reg = x10327;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10328 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x10328 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10329 = x10326 - x10328;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10330 = x10329 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10331 = x102 - x10330;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10332 = x10330 * x10331;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10332 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10333 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x10333 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":399:17)
      auto x10334 = x102 - x10333;
      if (x8509 != 0) {
        if (x10333 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x10335 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10335 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":403:26)
          auto x10336 = x10335 + x8493;
          {
            host_args.at(0) = x10336;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10337 = host_outs.at(0);
            auto x10338 = host_outs.at(1);
            auto x10339 = host_outs.at(2);
            auto x10340 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10337);
              reg = x10337;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10338);
              reg = x10338;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10339);
              reg = x10339;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10340);
              reg = x10340;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10341 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10341 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10342 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10342 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10343 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10343 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10344 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10344 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10336);
            reg = x10336;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8481);
            reg = x8481;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10341);
            reg = x10341;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10342);
            reg = x10342;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10343);
            reg = x10343;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10344);
            reg = x10344;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10345 = x10335 + x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10346 = x10345 + x8493;
          {
            host_args.at(0) = x10346;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10347 = host_outs.at(0);
            auto x10348 = host_outs.at(1);
            auto x10349 = host_outs.at(2);
            auto x10350 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10347);
              reg = x10347;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10348);
              reg = x10348;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10349);
              reg = x10349;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10350);
              reg = x10350;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10351 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10351 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10352 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10352 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10353 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10353 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10354 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10354 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10346);
            reg = x10346;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8481);
            reg = x8481;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10351);
            reg = x10351;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10352);
            reg = x10352;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10353);
            reg = x10353;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10354);
            reg = x10354;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":144:10))
          auto x10355 = args[2][108 * steps + ((cycle - 0) & mask)];
          assert(x10355 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":405:39)
          auto x10356 = x10355 * x85;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10357 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10357 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10358 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10358 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10359 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10359 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10360 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10360 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10361 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10361 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10362 = x10361 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10363 = x10357 + x10362;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10364 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10364 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10365 = x10364 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10366 = x10358 + x10365;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10367 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10367 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10368 = x10367 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10369 = x10359 + x10368;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10370 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10370 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10371 = x10370 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10372 = x10360 + x10371;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10373 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10373 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10374 = x10373 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10375 = x10363 + x10374;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10376 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10376 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10377 = x10376 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10378 = x10366 + x10377;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10379 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10379 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10380 = x10379 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10381 = x10369 + x10380;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10382 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10382 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10383 = x10382 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10384 = x10372 + x10383;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10385 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10385 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10386 = x10385 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10387 = x10375 + x10386;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10388 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10388 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10389 = x10388 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10390 = x10378 + x10389;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10391 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10391 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10392 = x10391 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10393 = x10381 + x10392;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10394 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10394 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10395 = x10394 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10396 = x10384 + x10395;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10397 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10397 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10398 = x10397 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10399 = x10387 + x10398;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10400 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10400 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10401 = x10400 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10402 = x10390 + x10401;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10403 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10403 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10404 = x10403 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10405 = x10393 + x10404;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10406 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10406 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10407 = x10406 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10408 = x10396 + x10407;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10409 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10409 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10410 = x10409 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10411 = x10399 + x10410;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10412 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10412 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10413 = x10412 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10414 = x10402 + x10413;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10415 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10415 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10416 = x10415 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10417 = x10405 + x10416;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10418 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10418 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10419 = x10418 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10420 = x10408 + x10419;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10421 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10421 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10422 = x10421 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10423 = x10411 + x10422;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10424 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10424 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10425 = x10424 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10426 = x10414 + x10425;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10427 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10427 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10428 = x10427 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10429 = x10417 + x10428;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10430 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10430 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10431 = x10430 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10432 = x10420 + x10431;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10433 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10433 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10434 = x10433 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10435 = x10423 + x10434;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10436 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10436 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10437 = x10436 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10438 = x10426 + x10437;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10439 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10439 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10440 = x10439 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10441 = x10429 + x10440;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10442 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10442 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10443 = x10442 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10444 = x10432 + x10443;
          host_args.at(0) = x10356;
          host_args.at(1) = x10341;
          host_args.at(2) = x10342;
          host_args.at(3) = x10343;
          host_args.at(4) = x10344;
          host_args.at(5) = x10444;
          host_args.at(6) = x10441;
          host_args.at(7) = x10438;
          host_args.at(8) = x10435;
          host(ctx, "log", "  io0: [0x%x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":144:10))
          auto x10445 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x10445 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:39)
          auto x10446 = x10445 * x85;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10447 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10447 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10448 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10448 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10449 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10449 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10450 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10450 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10451 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10451 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10452 = x10451 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10453 = x10447 + x10452;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10454 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10454 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10455 = x10454 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10456 = x10448 + x10455;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10457 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10457 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10458 = x10457 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10459 = x10449 + x10458;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10460 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10460 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10461 = x10460 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10462 = x10450 + x10461;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10463 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10463 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10464 = x10463 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10465 = x10453 + x10464;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10466 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10466 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10467 = x10466 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10468 = x10456 + x10467;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10469 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10469 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10470 = x10469 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10471 = x10459 + x10470;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10472 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10472 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10473 = x10472 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10474 = x10462 + x10473;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10475 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10475 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10476 = x10475 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10477 = x10465 + x10476;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10478 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10478 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10479 = x10478 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10480 = x10468 + x10479;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10481 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10481 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10482 = x10481 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10483 = x10471 + x10482;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10484 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10484 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10485 = x10484 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10486 = x10474 + x10485;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10487 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10487 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10488 = x10487 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10489 = x10477 + x10488;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10490 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10490 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10491 = x10490 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10492 = x10480 + x10491;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10493 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10493 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10494 = x10493 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10495 = x10483 + x10494;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10496 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10496 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10497 = x10496 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10498 = x10486 + x10497;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10499 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10499 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10500 = x10499 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10501 = x10489 + x10500;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10502 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10502 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10503 = x10502 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10504 = x10492 + x10503;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10505 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10505 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10506 = x10505 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10507 = x10495 + x10506;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10508 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10508 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10509 = x10508 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10510 = x10498 + x10509;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10511 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10511 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10512 = x10511 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10513 = x10501 + x10512;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10514 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10514 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10515 = x10514 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10516 = x10504 + x10515;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10517 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10517 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10518 = x10517 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10519 = x10507 + x10518;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10520 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10520 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10521 = x10520 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10522 = x10510 + x10521;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10523 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10523 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10524 = x10523 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10525 = x10513 + x10524;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10526 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10526 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10527 = x10526 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10528 = x10516 + x10527;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10529 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10529 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10530 = x10529 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10531 = x10519 + x10530;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10532 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10532 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10533 = x10532 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10534 = x10522 + x10533;
          host_args.at(0) = x10446;
          host_args.at(1) = x10351;
          host_args.at(2) = x10352;
          host_args.at(3) = x10353;
          host_args.at(4) = x10354;
          host_args.at(5) = x10534;
          host_args.at(6) = x10531;
          host_args.at(7) = x10528;
          host_args.at(8) = x10525;
          host(ctx, "log", "  io1: [0x%x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          auto x10535 = x10342 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10536 = x10341 + x10535;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10537 = x10343 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10538 = x10536 + x10537;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10539 = x10344 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10540 = x10538 + x10539;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10541 = x10441 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10542 = x10444 + x10541;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10543 = x10438 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10544 = x10542 + x10543;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10545 = x10435 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10546 = x10544 + x10545;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          auto x10547 = x10540 - x10546;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          if (x10547 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:407");
          // loc("./cirgen/components/u32.h":25:12)
          auto x10548 = x10352 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10549 = x10351 + x10548;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10550 = x10353 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10551 = x10549 + x10550;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10552 = x10354 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10553 = x10551 + x10552;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10554 = x10531 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10555 = x10534 + x10554;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10556 = x10528 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10557 = x10555 + x10556;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10558 = x10525 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10559 = x10557 + x10558;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          auto x10560 = x10553 - x10559;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          if (x10560 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:408");
        }
        if (x10334 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x10561 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10561 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":411:27)
          auto x10562 = x10561 + x8493;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10563 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10563 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10564 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10564 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10565 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10565 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10566 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10566 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10567 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10567 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10568 = x10567 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10569 = x10563 + x10568;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10570 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10570 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10571 = x10570 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10572 = x10564 + x10571;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10573 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10573 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10574 = x10573 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10575 = x10565 + x10574;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10576 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10576 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10577 = x10576 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10578 = x10566 + x10577;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10579 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10579 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10580 = x10579 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10581 = x10569 + x10580;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10582 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10582 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10583 = x10582 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10584 = x10572 + x10583;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10585 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10585 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10586 = x10585 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10587 = x10575 + x10586;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10588 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10588 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10589 = x10588 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10590 = x10578 + x10589;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10591 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10591 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10592 = x10591 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10593 = x10581 + x10592;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10594 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10594 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10595 = x10594 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10596 = x10584 + x10595;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10597 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10597 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10598 = x10597 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10599 = x10587 + x10598;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10600 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10600 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10601 = x10600 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10602 = x10590 + x10601;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10603 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10603 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10604 = x10603 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10605 = x10593 + x10604;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10606 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10606 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10607 = x10606 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10608 = x10596 + x10607;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10609 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10609 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10610 = x10609 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10611 = x10599 + x10610;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10612 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10612 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10613 = x10612 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10614 = x10602 + x10613;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10615 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10615 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10616 = x10615 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10617 = x10605 + x10616;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10618 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10618 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10619 = x10618 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10620 = x10608 + x10619;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10621 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10621 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10622 = x10621 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10623 = x10611 + x10622;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10624 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10624 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10625 = x10624 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10626 = x10614 + x10625;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10627 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10627 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10628 = x10627 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10629 = x10617 + x10628;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10630 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10630 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10631 = x10630 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10632 = x10620 + x10631;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10633 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10633 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10634 = x10633 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10635 = x10623 + x10634;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10636 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10636 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10637 = x10636 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10638 = x10626 + x10637;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10639 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10639 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10640 = x10639 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10641 = x10629 + x10640;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10642 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10642 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10643 = x10642 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10644 = x10632 + x10643;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10645 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10645 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10646 = x10645 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10647 = x10635 + x10646;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10648 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10648 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10649 = x10648 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10650 = x10638 + x10649;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10650);
            reg = x10650;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10647);
            reg = x10647;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10644);
            reg = x10644;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10641);
            reg = x10641;
          }
          {
            host_args.at(0) = x10562;
            host_args.at(1) = x10650;
            host_args.at(2) = x10647;
            host_args.at(3) = x10644;
            host_args.at(4) = x10641;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10651 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10651 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10652 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10652 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10653 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10653 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10654 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10654 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10562);
            reg = x10562;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8481);
            reg = x8481;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10651);
            reg = x10651;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10652);
            reg = x10652;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10653);
            reg = x10653;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10654);
            reg = x10654;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10655 = x10561 + x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10656 = x10655 + x8493;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10657 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10657 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10658 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10658 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10659 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10659 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10660 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10660 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10661 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10661 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10662 = x10661 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10663 = x10657 + x10662;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10664 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10664 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10665 = x10664 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10666 = x10658 + x10665;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10667 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10667 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10668 = x10667 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10669 = x10659 + x10668;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10670 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10670 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10671 = x10670 * x99;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10672 = x10660 + x10671;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10673 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10673 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10674 = x10673 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10675 = x10663 + x10674;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10676 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10676 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10677 = x10676 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10678 = x10666 + x10677;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10679 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10679 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10680 = x10679 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10681 = x10669 + x10680;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10682 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10682 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10683 = x10682 * x85;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10684 = x10672 + x10683;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10685 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10685 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10686 = x10685 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10687 = x10675 + x10686;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10688 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10688 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10689 = x10688 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10690 = x10678 + x10689;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10691 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10691 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10692 = x10691 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10693 = x10681 + x10692;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10694 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10694 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10695 = x10694 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10696 = x10684 + x10695;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10697 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10697 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10698 = x10697 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10699 = x10687 + x10698;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10700 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10700 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10701 = x10700 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10702 = x10690 + x10701;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10703 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10703 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10704 = x10703 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10705 = x10693 + x10704;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10706 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10706 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10707 = x10706 * x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10708 = x10696 + x10707;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10709 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10709 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10710 = x10709 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10711 = x10699 + x10710;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10712 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10712 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10713 = x10712 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10714 = x10702 + x10713;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10715 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10715 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10716 = x10715 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10717 = x10705 + x10716;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10718 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10718 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10719 = x10718 * x68;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10720 = x10708 + x10719;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10721 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10721 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10722 = x10721 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10723 = x10711 + x10722;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10724 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10724 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10725 = x10724 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10726 = x10714 + x10725;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10727 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10727 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10728 = x10727 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10729 = x10717 + x10728;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10730 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10730 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10731 = x10730 * x62;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10732 = x10720 + x10731;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10733 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10733 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10734 = x10733 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10735 = x10723 + x10734;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10736 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10736 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10737 = x10736 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10738 = x10726 + x10737;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10739 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10739 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10740 = x10739 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10741 = x10729 + x10740;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10742 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10742 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10743 = x10742 * x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10744 = x10732 + x10743;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10744);
            reg = x10744;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10741);
            reg = x10741;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10738);
            reg = x10738;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10735);
            reg = x10735;
          }
          {
            host_args.at(0) = x10656;
            host_args.at(1) = x10744;
            host_args.at(2) = x10741;
            host_args.at(3) = x10738;
            host_args.at(4) = x10735;
            host_args.at(5) = x101;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10745 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10745 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10746 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10746 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10747 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10747 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10748 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10748 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10656);
            reg = x10656;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8481);
            reg = x8481;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10745);
            reg = x10745;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10746);
            reg = x10746;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10747);
            reg = x10747;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10748);
            reg = x10748;
          }
        }
      }
      if (x8510 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        if (x8501 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10749 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x10749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10750 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x10750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10751 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x10751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10752 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x10752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10753 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x10753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10754 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x10754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10755 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x10755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10756 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x10756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10757 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x10757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10758 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10759 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10760 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10761 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10762 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10763 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10764 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10765 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10766 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10767 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10768 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10769 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10770 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10771 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10772 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10773 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10774 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10775 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10776 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10777 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10778 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10778 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10779 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10779 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10780 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10780 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10781 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x10781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10782 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x10782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10783 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x10783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10784 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x10784 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10785 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x10785 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10786 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x10786 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10787 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x10787 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10788 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x10788 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10789 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x10789 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10790 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10790 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10791 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10792 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10792 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10793 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10793 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10794 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10794 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10795 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10795 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10796 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10796 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10797 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10797 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10798 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10798 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10799 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10800 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10801 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10802 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10803 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10804 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10804 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10805 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10805 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10806 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10806 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10807 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10808 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10809 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10810 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10811 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10812 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10813 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x10813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10814 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x10814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10815 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x10815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10816 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x10816 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10817 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x10817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10818 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x10818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10819 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x10819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10820 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x10820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10821 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x10821 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10822 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10823 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10824 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10825 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10825 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10826 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10827 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10828 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10829 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10830 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10831 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10832 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10833 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10834 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10835 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10836 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10837 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10838 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10839 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10840 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10841 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10841 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10842 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10843 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10844 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10845 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x10845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10846 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x10846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10847 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x10847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10848 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x10848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10849 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x10849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10850 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x10850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10851 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x10851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10852 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x10852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10853 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x10853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10854 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10855 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10856 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10857 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10858 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10859 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10859 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10860 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10860 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10861 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10862 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10862 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10863 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10863 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10864 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10864 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10865 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10866 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10867 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10868 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10869 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10869 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10870 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x10870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10871 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x10871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10872 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x10872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10873 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x10873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10874 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x10874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10875 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x10875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10876 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x10876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10877 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10878 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10879 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10880 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10881 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10882 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10883 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10884 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10884 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10885 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10885 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10886 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x10886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10887 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x10887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10888 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x10888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10889 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x10889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10890 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x10890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10891 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x10891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10892 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x10892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10893 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x10893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10894 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x10894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10895 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x10895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10896 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x10896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10897 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x10897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10898 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x10898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10899 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x10899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10900 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x10900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10901 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x10901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10902 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x10902 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10903 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x10903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10904 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x10904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10905 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x10905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10906 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x10906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10907 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x10907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10908 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x10908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10909 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10910 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10911 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10912 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10913 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10914 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10915 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10916 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10917 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10917 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10918 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x10918 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10919 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x10919 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10920 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x10920 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10921 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x10921 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10922 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x10922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10923 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x10923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10924 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x10924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10925 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x10925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10926 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x10926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10927 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x10927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10928 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x10928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10929 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x10929 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10930 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x10930 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10931 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x10931 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10932 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x10932 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10933 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x10933 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10934 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x10934 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10935 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x10935 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10936 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x10936 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10937 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x10937 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10938 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x10938 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10939 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x10939 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10940 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x10940 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10941 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10941 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10942 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10943 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10943 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10944 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10945 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10945 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10946 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10946 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10947 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10948 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10948 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10949 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x10949 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10950 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x10950 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10951 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x10951 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10952 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x10952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10953 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x10953 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10954 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x10954 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10955 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x10955 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10956 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x10956 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10957 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x10957 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10958 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x10958 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10959 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x10959 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10960 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x10960 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10961 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x10961 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10962 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x10962 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10963 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x10963 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10964 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x10964 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10965 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x10965 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10966 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x10966 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10967 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x10967 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10968 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x10968 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10969 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x10969 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10970 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x10970 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10971 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x10971 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10972 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x10972 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10973 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x10973 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10974 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x10974 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10975 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x10975 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10976 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x10976 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10977 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x10977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10978 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x10978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10979 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x10979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10980 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x10980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10981 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x10981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10982 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x10982 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10983 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x10983 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10984 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x10984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10985 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x10985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10986 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x10986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10987 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x10987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10988 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x10988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10989 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x10989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10990 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x10990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10991 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x10991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10992 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x10992 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10993 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x10993 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10994 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x10994 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10995 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x10995 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10996 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x10996 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10997 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x10997 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10998 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x10998 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10999 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x10999 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11000 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x11000 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11001 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x11001 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11002 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x11002 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11003 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x11003 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11004 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x11004 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11005 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x11005 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11006 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x11006 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11007 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x11007 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11008 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x11008 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11009 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x11009 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11010 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x11010 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11011 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x11011 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11012 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11013 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x11013 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11014 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x11014 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11015 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11015 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11016 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11016 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11017 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11017 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11018 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11018 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11019 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11019 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11020 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11020 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11021 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11021 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11022 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11022 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11023 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11023 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11024 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11024 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11025 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11025 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11026 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11026 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11027 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11027 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11028 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11028 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11029 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11029 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11030 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11030 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11031 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11031 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11032 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11032 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11033 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11033 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11034 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11034 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11035 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11035 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11036 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11036 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11037 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x11037 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11038 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x11038 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11039 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x11039 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x11040 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x11040 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11041 = x11038 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11042 = x11037 + x11041;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11043 = x11040 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11044 = x11039 + x11043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11045 = x10762 + x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11046 = x10762 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11047 = x11046 * x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11048 = x11045 - x11047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11049 = x10763 + x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11050 = x10763 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11051 = x11050 * x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11052 = x11049 - x11051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11053 = x10764 + x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11054 = x10764 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11055 = x11054 * x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11056 = x11053 - x11055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11057 = x10765 + x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11058 = x10765 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11059 = x11058 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11060 = x11057 - x11059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11061 = x10766 + x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11062 = x10766 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11063 = x11062 * x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11064 = x11061 - x11063;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11065 = x10767 + x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11066 = x10767 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11067 = x11066 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11068 = x11065 - x11067;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11069 = x10768 + x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11070 = x10768 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11071 = x11070 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11072 = x11069 - x11071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11073 = x10769 + x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11074 = x10769 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11075 = x11074 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11076 = x11073 - x11075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11077 = x10770 + x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11078 = x10770 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11079 = x11078 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11080 = x11077 - x11079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11081 = x10771 + x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11082 = x10771 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11083 = x11082 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11084 = x11081 - x11083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11085 = x10772 + x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11086 = x10772 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11087 = x11086 * x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11088 = x11085 - x11087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11089 = x10773 + x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11090 = x10773 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11091 = x11090 * x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11092 = x11089 - x11091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11093 = x10774 + x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11094 = x10774 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11095 = x11094 * x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11096 = x11093 - x11095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11097 = x10775 + x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11098 = x10775 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11099 = x11098 * x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11100 = x11097 - x11099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11101 = x10776 + x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11102 = x10776 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11103 = x11102 * x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11104 = x11101 - x11103;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11105 = x10777 + x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11106 = x10777 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11107 = x11106 * x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11108 = x11105 - x11107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11109 = x10778 + x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11110 = x10778 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11111 = x11110 * x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11112 = x11109 - x11111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11113 = x10779 + x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11114 = x10779 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11115 = x11114 * x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11116 = x11113 - x11115;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11117 = x10780 + x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11118 = x10780 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11119 = x11118 * x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11120 = x11117 - x11119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11121 = x10749 + x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11122 = x10749 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11123 = x11122 * x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11124 = x11121 - x11123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11125 = x10750 + x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11126 = x10750 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11127 = x11126 * x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11128 = x11125 - x11127;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11129 = x10751 + x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11130 = x10751 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11131 = x11130 * x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11132 = x11129 - x11131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11133 = x10752 + x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11134 = x10752 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11135 = x11134 * x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11136 = x11133 - x11135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11137 = x10753 + x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11138 = x10753 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11139 = x11138 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11140 = x11137 - x11139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11141 = x10754 + x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11142 = x10754 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11143 = x11142 * x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11144 = x11141 - x11143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11145 = x10755 + x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11146 = x10755 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11147 = x11146 * x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11148 = x11145 - x11147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11149 = x10756 + x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11150 = x10756 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11151 = x11150 * x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11152 = x11149 - x11151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11153 = x10757 + x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11154 = x10757 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11155 = x11154 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11156 = x11153 - x11155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11157 = x10758 + x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11158 = x10758 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11159 = x11158 * x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11160 = x11157 - x11159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11161 = x10759 + x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11162 = x10759 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11163 = x11162 * x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11164 = x11161 - x11163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11165 = x10760 + x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11166 = x10760 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11167 = x11166 * x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11168 = x11165 - x11167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11169 = x10761 + x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11170 = x10761 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11171 = x11170 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11172 = x11169 - x11171;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11173 = x10751 + x11048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11174 = x11130 * x11048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11175 = x11173 - x11174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11176 = x10752 + x11052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11177 = x11134 * x11052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11178 = x11176 - x11177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11179 = x10753 + x11056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11180 = x11138 * x11056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11181 = x11179 - x11180;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11182 = x10754 + x11060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11183 = x11142 * x11060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11184 = x11182 - x11183;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11185 = x10755 + x11064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11186 = x11146 * x11064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11187 = x11185 - x11186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11188 = x10756 + x11068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11189 = x11150 * x11068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11190 = x11188 - x11189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11191 = x10757 + x11072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11192 = x11154 * x11072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11193 = x11191 - x11192;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11194 = x10758 + x11076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11195 = x11158 * x11076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11196 = x11194 - x11195;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11197 = x10759 + x11080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11198 = x11162 * x11080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11199 = x11197 - x11198;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11200 = x10760 + x11084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11201 = x11166 * x11084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11202 = x11200 - x11201;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11203 = x10761 + x11088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11204 = x11170 * x11088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11205 = x11203 - x11204;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11206 = x10762 + x11092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11207 = x11046 * x11092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11208 = x11206 - x11207;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11209 = x10763 + x11096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11210 = x11050 * x11096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11211 = x11209 - x11210;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11212 = x10764 + x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11213 = x11054 * x11100;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11214 = x11212 - x11213;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11215 = x10765 + x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11216 = x11058 * x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11217 = x11215 - x11216;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11218 = x10766 + x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11219 = x11062 * x11108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11220 = x11218 - x11219;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11221 = x10767 + x11112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11222 = x11066 * x11112;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11223 = x11221 - x11222;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11224 = x10768 + x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11225 = x11070 * x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11226 = x11224 - x11225;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11227 = x10769 + x11120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11228 = x11074 * x11120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11229 = x11227 - x11228;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11230 = x10770 + x11124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11231 = x11078 * x11124;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11232 = x11230 - x11231;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11233 = x10771 + x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11234 = x11082 * x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11235 = x11233 - x11234;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11236 = x10772 + x11132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11237 = x11086 * x11132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11238 = x11236 - x11237;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11239 = x10773 + x11136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11240 = x11090 * x11136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11241 = x11239 - x11240;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11242 = x10774 + x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11243 = x11094 * x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11244 = x11242 - x11243;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11245 = x10775 + x11144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11246 = x11098 * x11144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11247 = x11245 - x11246;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11248 = x10776 + x11148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11249 = x11102 * x11148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11250 = x11248 - x11249;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11251 = x10777 + x11152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11252 = x11106 * x11152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11253 = x11251 - x11252;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11254 = x10778 + x11156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11255 = x11110 * x11156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11256 = x11254 - x11255;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11257 = x10779 + x11160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11258 = x11114 * x11160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11259 = x11257 - x11258;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11260 = x10780 + x11164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11261 = x11118 * x11164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11262 = x11260 - x11261;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11263 = x10749 + x11168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11264 = x11122 * x11168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11265 = x11263 - x11264;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11266 = x10750 + x11172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11267 = x11126 * x11172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11268 = x11266 - x11267;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11269 = x10888 + x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11270 = x10888 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11271 = x11270 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11272 = x11269 - x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11273 = x10889 + x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11274 = x10889 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11275 = x11274 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11276 = x11273 - x11275;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11277 = x10890 + x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11278 = x10890 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11279 = x11278 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11280 = x11277 - x11279;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11281 = x10891 + x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11282 = x10891 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11283 = x11282 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11284 = x11281 - x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11285 = x10892 + x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11286 = x10892 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11287 = x11286 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11288 = x11285 - x11287;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11289 = x10893 + x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11290 = x10893 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11291 = x11290 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11292 = x11289 - x11291;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11293 = x10894 + x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11294 = x10894 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11295 = x11294 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11296 = x11293 - x11295;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11297 = x10895 + x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11298 = x10895 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11299 = x11298 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11300 = x11297 - x11299;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11301 = x10896 + x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11302 = x10896 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11303 = x11302 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11304 = x11301 - x11303;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11305 = x10897 + x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11306 = x10897 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11307 = x11306 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11308 = x11305 - x11307;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11309 = x10898 + x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11310 = x10898 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11311 = x11310 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11312 = x11309 - x11311;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11313 = x10899 + x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11314 = x10899 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11315 = x11314 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11316 = x11313 - x11315;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11317 = x10900 + x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11318 = x10900 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11319 = x11318 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11320 = x11317 - x11319;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11321 = x10901 + x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11322 = x10901 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11323 = x11322 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11324 = x11321 - x11323;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11325 = x10902 + x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11326 = x10902 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11327 = x11326 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11328 = x11325 - x11327;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11329 = x10903 + x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11330 = x10903 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11331 = x11330 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11332 = x11329 - x11331;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11333 = x10904 + x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11334 = x10904 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11335 = x11334 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11336 = x11333 - x11335;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11337 = x10905 + x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11338 = x10905 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11339 = x11338 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11340 = x11337 - x11339;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11341 = x10906 + x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11342 = x10906 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11343 = x11342 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11344 = x11341 - x11343;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11345 = x10907 + x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11346 = x10907 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11347 = x11346 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11348 = x11345 - x11347;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11349 = x10908 + x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11350 = x10908 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11351 = x11350 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11352 = x11349 - x11351;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11353 = x10877 + x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11354 = x10877 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11355 = x11354 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11356 = x11353 - x11355;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11357 = x10878 + x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11358 = x10878 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11359 = x11358 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11360 = x11357 - x11359;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11361 = x10879 + x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11362 = x10879 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11363 = x11362 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11364 = x11361 - x11363;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11365 = x10880 + x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11366 = x10880 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11367 = x11366 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11368 = x11365 - x11367;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11369 = x10881 + x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11370 = x10881 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11371 = x11370 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11372 = x11369 - x11371;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11373 = x10882 + x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11374 = x10882 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11375 = x11374 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11376 = x11373 - x11375;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11377 = x10883 + x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11378 = x10883 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11379 = x11378 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11380 = x11377 - x11379;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11381 = x10884 + x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11382 = x10884 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11383 = x11382 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11384 = x11381 - x11383;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11385 = x10885 + x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11386 = x10885 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11387 = x11386 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11388 = x11385 - x11387;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11389 = x10886 + x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11390 = x10886 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11391 = x11390 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11392 = x11389 - x11391;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11393 = x10887 + x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11394 = x10887 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11395 = x11394 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11396 = x11393 - x11395;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11397 = x10883 + x11272;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11398 = x11378 * x11272;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11399 = x11397 - x11398;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11400 = x10884 + x11276;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11401 = x11382 * x11276;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11402 = x11400 - x11401;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11403 = x10885 + x11280;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11404 = x11386 * x11280;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11405 = x11403 - x11404;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11406 = x10886 + x11284;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11407 = x11390 * x11284;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11408 = x11406 - x11407;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11409 = x10887 + x11288;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11410 = x11394 * x11288;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11411 = x11409 - x11410;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11412 = x10888 + x11292;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11413 = x11270 * x11292;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11414 = x11412 - x11413;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11415 = x10889 + x11296;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11416 = x11274 * x11296;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11417 = x11415 - x11416;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11418 = x10890 + x11300;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11419 = x11278 * x11300;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11420 = x11418 - x11419;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11421 = x10891 + x11304;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11422 = x11282 * x11304;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11423 = x11421 - x11422;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11424 = x10892 + x11308;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11425 = x11286 * x11308;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11426 = x11424 - x11425;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11427 = x10893 + x11312;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11428 = x11290 * x11312;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11429 = x11427 - x11428;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11430 = x10894 + x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11431 = x11294 * x11316;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11432 = x11430 - x11431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11433 = x10895 + x11320;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11434 = x11298 * x11320;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11435 = x11433 - x11434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11436 = x10896 + x11324;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11437 = x11302 * x11324;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11438 = x11436 - x11437;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11439 = x10897 + x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11440 = x11306 * x11328;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11441 = x11439 - x11440;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11442 = x10898 + x11332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11443 = x11310 * x11332;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11444 = x11442 - x11443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11445 = x10899 + x11336;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11446 = x11314 * x11336;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11447 = x11445 - x11446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11448 = x10900 + x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11449 = x11318 * x11340;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11450 = x11448 - x11449;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x10901 + x11344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11452 = x11322 * x11344;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11453 = x11451 - x11452;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11454 = x10902 + x11348;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11455 = x11326 * x11348;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11456 = x11454 - x11455;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11457 = x10903 + x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11458 = x11330 * x11352;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11459 = x11457 - x11458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11460 = x10904 + x11356;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11461 = x11334 * x11356;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11462 = x11460 - x11461;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x10905 + x11360;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11464 = x11338 * x11360;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11465 = x11463 - x11464;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11466 = x10906 + x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11467 = x11342 * x11364;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11468 = x11466 - x11467;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11469 = x10907 + x11368;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11470 = x11346 * x11368;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11471 = x11469 - x11470;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11472 = x10908 + x11372;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11473 = x11350 * x11372;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11474 = x11472 - x11473;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11475 = x10877 + x11376;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11476 = x11354 * x11376;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11477 = x11475 - x11476;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11478 = x10878 + x11380;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11479 = x11358 * x11380;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11480 = x11478 - x11479;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11481 = x10879 + x11384;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11482 = x11362 * x11384;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11483 = x11481 - x11482;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11484 = x10880 + x11388;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11485 = x11366 * x11388;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11486 = x11484 - x11485;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11487 = x10881 + x11392;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11488 = x11370 * x11392;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11489 = x11487 - x11488;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11490 = x10882 + x11396;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11491 = x11374 * x11396;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11492 = x11490 - x11491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11493 = x11006 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11494 = x11005 + x11493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11495 = x11007 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11496 = x11494 + x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11497 = x11008 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11498 = x11496 + x11497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11499 = x11009 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11500 = x11498 + x11499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11501 = x11010 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11502 = x11500 + x11501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11503 = x11011 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11504 = x11502 + x11503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11505 = x11012 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11506 = x11504 + x11505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11507 = x11013 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11508 = x11506 + x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11509 = x11014 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11510 = x11508 + x11509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11511 = x11015 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11512 = x11510 + x11511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11513 = x11016 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11514 = x11512 + x11513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11515 = x11017 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11516 = x11514 + x11515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11517 = x11018 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11518 = x11516 + x11517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11519 = x11019 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11520 = x11518 + x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11521 = x11020 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11522 = x11520 + x11521;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11523 = x11022 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11524 = x11021 + x11523;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11525 = x11023 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11526 = x11524 + x11525;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11527 = x11024 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11528 = x11526 + x11527;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11529 = x11025 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11530 = x11528 + x11529;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11531 = x11026 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11532 = x11530 + x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11533 = x11027 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11534 = x11532 + x11533;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11535 = x11028 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11536 = x11534 + x11535;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11537 = x11029 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11538 = x11536 + x11537;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11539 = x11030 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11540 = x11538 + x11539;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11541 = x11031 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11542 = x11540 + x11541;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11543 = x11032 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11544 = x11542 + x11543;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11545 = x11033 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11546 = x11544 + x11545;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11547 = x11034 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11548 = x11546 + x11547;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11549 = x11035 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11550 = x11548 + x11549;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11551 = x11036 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11552 = x11550 + x11551;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11553 = x10974 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11554 = x10973 + x11553;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11555 = x10975 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11556 = x11554 + x11555;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11557 = x10976 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11558 = x11556 + x11557;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11559 = x10977 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11560 = x11558 + x11559;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11561 = x10978 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11562 = x11560 + x11561;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11563 = x10979 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11564 = x11562 + x11563;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11565 = x10980 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11566 = x11564 + x11565;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11567 = x10981 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11568 = x11566 + x11567;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11569 = x10982 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11570 = x11568 + x11569;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11571 = x10983 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11572 = x11570 + x11571;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11573 = x10984 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11574 = x11572 + x11573;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11575 = x10985 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11576 = x11574 + x11575;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11577 = x10986 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11578 = x11576 + x11577;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11579 = x10987 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11580 = x11578 + x11579;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11581 = x10988 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11582 = x11580 + x11581;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11583 = x10990 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11584 = x10989 + x11583;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11585 = x10991 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11586 = x11584 + x11585;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11587 = x10992 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11588 = x11586 + x11587;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11589 = x10993 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11590 = x11588 + x11589;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11591 = x10994 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11592 = x11590 + x11591;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11593 = x10995 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11594 = x11592 + x11593;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11595 = x10996 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11596 = x11594 + x11595;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11597 = x10997 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11598 = x11596 + x11597;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11599 = x10998 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11600 = x11598 + x11599;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11601 = x10999 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11602 = x11600 + x11601;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11603 = x11000 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11604 = x11602 + x11603;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11605 = x11001 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11606 = x11604 + x11605;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11607 = x11002 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11608 = x11606 + x11607;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11609 = x11003 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11610 = x11608 + x11609;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11611 = x11004 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11612 = x11610 + x11611;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11613 = x10877 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11614 = x102 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11615 = x11614 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11616 = x11613 + x11615;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11617 = x10878 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11618 = x102 - x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11619 = x11618 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11620 = x11617 + x11619;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11621 = x10879 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11622 = x102 - x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11623 = x11622 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11624 = x11621 + x11623;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11625 = x10880 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11626 = x102 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11627 = x11626 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11628 = x11625 + x11627;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11629 = x10881 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11630 = x102 - x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11631 = x11630 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11632 = x11629 + x11631;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11633 = x10882 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11634 = x102 - x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11635 = x11634 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11636 = x11633 + x11635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11637 = x10883 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11638 = x102 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11639 = x11638 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11640 = x11637 + x11639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11641 = x10884 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11642 = x102 - x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11643 = x11642 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11644 = x11641 + x11643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11645 = x10885 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11646 = x102 - x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11647 = x11646 * x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11648 = x11645 + x11647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11649 = x10886 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11650 = x102 - x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11651 = x11650 * x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11652 = x11649 + x11651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11653 = x10887 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11654 = x102 - x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11655 = x11654 * x10951;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11656 = x11653 + x11655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11657 = x10888 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11658 = x102 - x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11659 = x11658 * x10952;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11660 = x11657 + x11659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11661 = x10889 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11662 = x102 - x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11663 = x11662 * x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11664 = x11661 + x11663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11665 = x10890 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11666 = x102 - x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11667 = x11666 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11668 = x11665 + x11667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11669 = x10891 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11670 = x102 - x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11671 = x11670 * x10955;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11672 = x11669 + x11671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11673 = x10892 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11674 = x102 - x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11675 = x11674 * x10956;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11676 = x11673 + x11675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11677 = x10893 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11678 = x102 - x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11679 = x11678 * x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11680 = x11677 + x11679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11681 = x10894 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11682 = x102 - x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11683 = x11682 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11684 = x11681 + x11683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11685 = x10895 * x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11686 = x102 - x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11687 = x11686 * x10959;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11688 = x11685 + x11687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11689 = x10896 * x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11690 = x102 - x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11691 = x11690 * x10960;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11692 = x11689 + x11691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11693 = x10897 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11694 = x102 - x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11695 = x11694 * x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11696 = x11693 + x11695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11697 = x10898 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11698 = x102 - x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11699 = x11698 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11700 = x11697 + x11699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11701 = x10899 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11702 = x102 - x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11703 = x11702 * x10963;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11704 = x11701 + x11703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11705 = x10900 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11706 = x102 - x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11707 = x11706 * x10964;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11708 = x11705 + x11707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11709 = x10901 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11710 = x102 - x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11711 = x11710 * x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11712 = x11709 + x11711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11713 = x10902 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11714 = x102 - x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11715 = x11714 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11716 = x11713 + x11715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11717 = x10903 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11718 = x102 - x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11719 = x11718 * x10967;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11720 = x11717 + x11719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11721 = x10904 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11722 = x102 - x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11723 = x11722 * x10968;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11724 = x11721 + x11723;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11725 = x10905 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11726 = x102 - x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11727 = x11726 * x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11728 = x11725 + x11727;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11729 = x10906 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11730 = x102 - x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11731 = x11730 * x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11732 = x11729 + x11731;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11733 = x10907 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11734 = x102 - x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11735 = x11734 * x10971;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11736 = x11733 + x11735;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11737 = x10908 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11738 = x102 - x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11739 = x11738 * x10972;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11740 = x11737 + x11739;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11741 = x11620 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11742 = x11616 + x11741;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11743 = x11624 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11744 = x11742 + x11743;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11745 = x11628 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11746 = x11744 + x11745;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11747 = x11632 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11748 = x11746 + x11747;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11749 = x11636 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11750 = x11748 + x11749;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11751 = x11640 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11752 = x11750 + x11751;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11753 = x11644 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11754 = x11752 + x11753;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11755 = x11648 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11756 = x11754 + x11755;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11757 = x11652 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11758 = x11756 + x11757;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11759 = x11656 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11760 = x11758 + x11759;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11761 = x11660 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11762 = x11760 + x11761;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11763 = x11664 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11764 = x11762 + x11763;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11765 = x11668 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11766 = x11764 + x11765;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11767 = x11672 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11768 = x11766 + x11767;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11769 = x11676 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11770 = x11768 + x11769;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11771 = x11684 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11772 = x11680 + x11771;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11773 = x11688 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11774 = x11772 + x11773;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11775 = x11692 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11776 = x11774 + x11775;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11777 = x11696 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11778 = x11776 + x11777;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11779 = x11700 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11780 = x11778 + x11779;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11781 = x11704 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11782 = x11780 + x11781;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11783 = x11708 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11784 = x11782 + x11783;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11785 = x11712 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11786 = x11784 + x11785;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11787 = x11716 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11788 = x11786 + x11787;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11789 = x11720 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11790 = x11788 + x11789;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11791 = x11724 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11792 = x11790 + x11791;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11793 = x11728 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11794 = x11792 + x11793;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11795 = x11732 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11796 = x11794 + x11795;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11797 = x11736 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11798 = x11796 + x11797;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11799 = x11740 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11800 = x11798 + x11799;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11801 = x11402 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11802 = x11399 + x11801;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11803 = x11405 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11804 = x11802 + x11803;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11805 = x11408 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11806 = x11804 + x11805;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11807 = x11411 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11808 = x11806 + x11807;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11809 = x11414 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11810 = x11808 + x11809;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11811 = x11417 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11812 = x11810 + x11811;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11813 = x11420 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11814 = x11812 + x11813;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11815 = x11423 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11816 = x11814 + x11815;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11817 = x11426 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11818 = x11816 + x11817;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11819 = x11429 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11820 = x11818 + x11819;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11821 = x11432 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11822 = x11820 + x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11823 = x11435 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11824 = x11822 + x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11825 = x11438 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11826 = x11824 + x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11827 = x11441 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11828 = x11826 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11829 = x11444 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11830 = x11828 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11831 = x11450 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11832 = x11447 + x11831;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11833 = x11453 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11834 = x11832 + x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11835 = x11456 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11836 = x11834 + x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11837 = x11459 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11838 = x11836 + x11837;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11839 = x11462 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11840 = x11838 + x11839;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11841 = x11465 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11842 = x11840 + x11841;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11843 = x11468 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11844 = x11842 + x11843;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11845 = x11471 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11846 = x11844 + x11845;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11847 = x11474 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11848 = x11846 + x11847;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11849 = x11477 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11850 = x11848 + x11849;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11851 = x11480 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11852 = x11850 + x11851;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11853 = x11483 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11854 = x11852 + x11853;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11855 = x11486 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11856 = x11854 + x11855;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11857 = x11489 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11858 = x11856 + x11857;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11859 = x11492 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11860 = x11858 + x11859;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11861 = x11770 + x11830;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11862 = x11800 + x11860;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11863 = x11582 + x11861;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11864 = x11612 + x11862;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11865 = x11042 + x11863;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11866 = x11044 + x11864;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11867 = x11522 + x11865;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11868 = x11552 + x11866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11869 = x10749 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11870 = x102 - x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11871 = x11869 * x11870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11872 = x102 - x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11873 = x10749 * x11872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11874 = x11873 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11875 = x11871 + x11874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11876 = x102 - x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11877 = x11876 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11878 = x11877 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11879 = x11875 + x11878;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11880 = x11869 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11881 = x11879 + x11880;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11882 = x10750 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11883 = x102 - x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11884 = x11882 * x11883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11885 = x102 - x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11886 = x10750 * x11885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11887 = x11886 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11888 = x11884 + x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11889 = x102 - x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11890 = x11889 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11891 = x11890 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11892 = x11888 + x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11893 = x11882 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11894 = x11892 + x11893;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11895 = x10751 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11896 = x102 - x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11897 = x11895 * x11896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11898 = x102 - x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11899 = x10751 * x11898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11900 = x11899 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11901 = x11897 + x11900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11902 = x102 - x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11903 = x11902 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11904 = x11903 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11905 = x11901 + x11904;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11906 = x11895 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11907 = x11905 + x11906;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11908 = x10752 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11909 = x102 - x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11910 = x11908 * x11909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11911 = x102 - x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11912 = x10752 * x11911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11913 = x11912 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11914 = x11910 + x11913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11915 = x102 - x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11916 = x11915 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11917 = x11916 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11918 = x11914 + x11917;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11919 = x11908 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11920 = x11918 + x11919;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11921 = x10753 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11922 = x102 - x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11923 = x11921 * x11922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11924 = x102 - x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11925 = x10753 * x11924;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11926 = x11925 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11927 = x11923 + x11926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11928 = x102 - x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11929 = x11928 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11930 = x11929 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11931 = x11927 + x11930;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11932 = x11921 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11933 = x11931 + x11932;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11934 = x10754 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11935 = x102 - x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11936 = x11934 * x11935;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11937 = x102 - x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11938 = x10754 * x11937;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11939 = x11938 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11940 = x11936 + x11939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11941 = x102 - x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11942 = x11941 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11943 = x11942 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11944 = x11940 + x11943;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11945 = x11934 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11946 = x11944 + x11945;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11947 = x10755 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11948 = x102 - x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11949 = x11947 * x11948;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11950 = x102 - x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11951 = x10755 * x11950;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11952 = x11951 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11953 = x11949 + x11952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11954 = x102 - x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11955 = x11954 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11956 = x11955 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11957 = x11953 + x11956;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11958 = x11947 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11959 = x11957 + x11958;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11960 = x10756 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11961 = x102 - x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11962 = x11960 * x11961;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11963 = x102 - x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11964 = x10756 * x11963;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11965 = x11964 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11966 = x11962 + x11965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11967 = x102 - x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11968 = x11967 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11969 = x11968 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11970 = x11966 + x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11971 = x11960 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11972 = x11970 + x11971;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11973 = x10757 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11974 = x102 - x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11975 = x11973 * x11974;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11976 = x102 - x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11977 = x10757 * x11976;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11978 = x11977 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11979 = x11975 + x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11980 = x102 - x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11981 = x11980 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11982 = x11981 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11983 = x11979 + x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11984 = x11973 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11985 = x11983 + x11984;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11986 = x10758 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11987 = x102 - x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11988 = x11986 * x11987;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11989 = x102 - x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11990 = x10758 * x11989;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11991 = x11990 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11992 = x11988 + x11991;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11993 = x102 - x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11994 = x11993 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11995 = x11994 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11996 = x11992 + x11995;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11997 = x11986 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11998 = x11996 + x11997;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11999 = x10759 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12000 = x102 - x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12001 = x11999 * x12000;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12002 = x102 - x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12003 = x10759 * x12002;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12004 = x12003 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12005 = x12001 + x12004;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12006 = x102 - x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12007 = x12006 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12008 = x12007 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12009 = x12005 + x12008;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12010 = x11999 * x10823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12011 = x12009 + x12010;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12012 = x10760 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12013 = x102 - x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12014 = x12012 * x12013;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12015 = x102 - x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12016 = x10760 * x12015;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12017 = x12016 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12018 = x12014 + x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12019 = x102 - x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12020 = x12019 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12021 = x12020 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12022 = x12018 + x12021;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12023 = x12012 * x10824;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12024 = x12022 + x12023;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12025 = x10761 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12026 = x102 - x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12027 = x12025 * x12026;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12028 = x102 - x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12029 = x10761 * x12028;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12030 = x12029 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12031 = x12027 + x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12032 = x102 - x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12033 = x12032 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12034 = x12033 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12035 = x12031 + x12034;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12036 = x12025 * x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12037 = x12035 + x12036;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12038 = x10762 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12039 = x102 - x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12040 = x12038 * x12039;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12041 = x102 - x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12042 = x10762 * x12041;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12043 = x12042 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12044 = x12040 + x12043;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12045 = x102 - x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12046 = x12045 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12047 = x12046 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12048 = x12044 + x12047;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12049 = x12038 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12050 = x12048 + x12049;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12051 = x10763 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12052 = x102 - x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12053 = x12051 * x12052;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12054 = x102 - x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12055 = x10763 * x12054;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12056 = x12055 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12057 = x12053 + x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12058 = x102 - x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12059 = x12058 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12060 = x12059 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12061 = x12057 + x12060;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12062 = x12051 * x10827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12063 = x12061 + x12062;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12064 = x10764 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12065 = x102 - x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12066 = x12064 * x12065;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12067 = x102 - x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12068 = x10764 * x12067;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12069 = x12068 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12070 = x12066 + x12069;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12071 = x102 - x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12072 = x12071 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12073 = x12072 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12074 = x12070 + x12073;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12075 = x12064 * x10828;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12076 = x12074 + x12075;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12077 = x10765 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12078 = x102 - x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12079 = x12077 * x12078;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12080 = x102 - x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12081 = x10765 * x12080;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12082 = x12081 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12083 = x12079 + x12082;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12084 = x102 - x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12085 = x12084 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12086 = x12085 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12087 = x12083 + x12086;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12088 = x12077 * x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12089 = x12087 + x12088;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12090 = x10766 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12091 = x102 - x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12092 = x12090 * x12091;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12093 = x102 - x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12094 = x10766 * x12093;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12095 = x12094 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12096 = x12092 + x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12097 = x102 - x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12098 = x12097 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12099 = x12098 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12100 = x12096 + x12099;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12101 = x12090 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12102 = x12100 + x12101;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12103 = x10767 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12104 = x102 - x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12105 = x12103 * x12104;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12106 = x102 - x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12107 = x10767 * x12106;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12108 = x12107 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12109 = x12105 + x12108;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12110 = x102 - x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12111 = x12110 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12112 = x12111 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12113 = x12109 + x12112;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12114 = x12103 * x10831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12115 = x12113 + x12114;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12116 = x10768 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12117 = x102 - x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12118 = x12116 * x12117;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12119 = x102 - x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12120 = x10768 * x12119;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12121 = x12120 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12122 = x12118 + x12121;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12123 = x102 - x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12124 = x12123 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12125 = x12124 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12126 = x12122 + x12125;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12127 = x12116 * x10832;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12128 = x12126 + x12127;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12129 = x10769 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12130 = x102 - x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12131 = x12129 * x12130;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12132 = x102 - x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12133 = x10769 * x12132;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12134 = x12133 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12135 = x12131 + x12134;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12136 = x102 - x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12137 = x12136 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12138 = x12137 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12139 = x12135 + x12138;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12140 = x12129 * x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12141 = x12139 + x12140;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12142 = x10770 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12143 = x102 - x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12144 = x12142 * x12143;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12145 = x102 - x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12146 = x10770 * x12145;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12147 = x12146 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12148 = x12144 + x12147;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12149 = x102 - x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12150 = x12149 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12151 = x12150 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12152 = x12148 + x12151;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12153 = x12142 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12154 = x12152 + x12153;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12155 = x10771 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12156 = x102 - x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12157 = x12155 * x12156;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12158 = x102 - x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12159 = x10771 * x12158;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12160 = x12159 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12161 = x12157 + x12160;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12162 = x102 - x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12163 = x12162 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12164 = x12163 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12165 = x12161 + x12164;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12166 = x12155 * x10835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12167 = x12165 + x12166;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12168 = x10772 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12169 = x102 - x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12170 = x12168 * x12169;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12171 = x102 - x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12172 = x10772 * x12171;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12173 = x12172 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12174 = x12170 + x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12175 = x102 - x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12176 = x12175 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12177 = x12176 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12178 = x12174 + x12177;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12179 = x12168 * x10836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12180 = x12178 + x12179;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12181 = x10773 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12182 = x102 - x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12183 = x12181 * x12182;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12184 = x102 - x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12185 = x10773 * x12184;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12186 = x12185 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12187 = x12183 + x12186;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12188 = x102 - x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12189 = x12188 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12190 = x12189 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12191 = x12187 + x12190;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12192 = x12181 * x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12193 = x12191 + x12192;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12194 = x10774 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12195 = x102 - x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12196 = x12194 * x12195;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12197 = x102 - x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12198 = x10774 * x12197;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12199 = x12198 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12200 = x12196 + x12199;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12201 = x102 - x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12202 = x12201 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12203 = x12202 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12204 = x12200 + x12203;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12205 = x12194 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12206 = x12204 + x12205;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12207 = x10775 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12208 = x102 - x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12209 = x12207 * x12208;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12210 = x102 - x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12211 = x10775 * x12210;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12212 = x12211 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12213 = x12209 + x12212;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12214 = x102 - x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12215 = x12214 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12216 = x12215 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12217 = x12213 + x12216;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12218 = x12207 * x10839;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12219 = x12217 + x12218;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12220 = x10776 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12221 = x102 - x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12222 = x12220 * x12221;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12223 = x102 - x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12224 = x10776 * x12223;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12225 = x12224 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12226 = x12222 + x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12227 = x102 - x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12228 = x12227 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12229 = x12228 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12230 = x12226 + x12229;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12231 = x12220 * x10840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12232 = x12230 + x12231;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12233 = x10777 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12234 = x102 - x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12235 = x12233 * x12234;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12236 = x102 - x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12237 = x10777 * x12236;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12238 = x12237 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12239 = x12235 + x12238;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12240 = x102 - x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12241 = x12240 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12242 = x12241 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12243 = x12239 + x12242;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12244 = x12233 * x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12245 = x12243 + x12244;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12246 = x10778 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12247 = x102 - x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12248 = x12246 * x12247;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12249 = x102 - x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12250 = x10778 * x12249;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12251 = x12250 * x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12252 = x12248 + x12251;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12253 = x102 - x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12254 = x12253 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12255 = x12254 * x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12256 = x12252 + x12255;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12257 = x12246 * x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12258 = x12256 + x12257;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12259 = x10779 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12260 = x102 - x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12261 = x12259 * x12260;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12262 = x102 - x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12263 = x10779 * x12262;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12264 = x12263 * x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12265 = x12261 + x12264;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12266 = x102 - x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12267 = x12266 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12268 = x12267 * x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12269 = x12265 + x12268;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12270 = x12259 * x10843;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12271 = x12269 + x12270;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12272 = x10780 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12273 = x102 - x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12274 = x12272 * x12273;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12275 = x102 - x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12276 = x10780 * x12275;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12277 = x12276 * x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12278 = x12274 + x12277;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12279 = x102 - x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12280 = x12279 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12281 = x12280 * x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12282 = x12278 + x12281;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12283 = x12272 * x10844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12284 = x12282 + x12283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12285 = x11894 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12286 = x11881 + x12285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12287 = x11907 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12288 = x12286 + x12287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12289 = x11920 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12290 = x12288 + x12289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12291 = x11933 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12292 = x12290 + x12291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12293 = x11946 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12294 = x12292 + x12293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12295 = x11959 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12296 = x12294 + x12295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12297 = x11972 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12298 = x12296 + x12297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12299 = x11985 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12300 = x12298 + x12299;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12301 = x11998 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12302 = x12300 + x12301;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12303 = x12011 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12304 = x12302 + x12303;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12305 = x12024 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12306 = x12304 + x12305;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12307 = x12037 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12308 = x12306 + x12307;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12309 = x12050 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12310 = x12308 + x12309;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12311 = x12063 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12312 = x12310 + x12311;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12313 = x12076 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12314 = x12312 + x12313;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12315 = x12102 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12316 = x12089 + x12315;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12317 = x12115 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12318 = x12316 + x12317;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12319 = x12128 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12320 = x12318 + x12319;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12321 = x12141 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12322 = x12320 + x12321;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12323 = x12154 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12324 = x12322 + x12323;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12325 = x12167 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12326 = x12324 + x12325;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12327 = x12180 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12328 = x12326 + x12327;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12329 = x12193 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12330 = x12328 + x12329;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12331 = x12206 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12332 = x12330 + x12331;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12333 = x12219 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12334 = x12332 + x12333;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12335 = x12232 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12336 = x12334 + x12335;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12337 = x12245 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12338 = x12336 + x12337;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12339 = x12258 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12340 = x12338 + x12339;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12341 = x12271 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12342 = x12340 + x12341;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12343 = x12284 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12344 = x12342 + x12343;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12345 = x11178 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12346 = x11175 + x12345;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12347 = x11181 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12348 = x12346 + x12347;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12349 = x11184 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12350 = x12348 + x12349;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12351 = x11187 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12352 = x12350 + x12351;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12353 = x11190 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12354 = x12352 + x12353;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12355 = x11193 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12356 = x12354 + x12355;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12357 = x11196 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12358 = x12356 + x12357;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12359 = x11199 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12360 = x12358 + x12359;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12361 = x11202 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12362 = x12360 + x12361;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12363 = x11205 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12364 = x12362 + x12363;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12365 = x11208 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12366 = x12364 + x12365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12367 = x11211 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12368 = x12366 + x12367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12369 = x11214 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12370 = x12368 + x12369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12371 = x11217 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12372 = x12370 + x12371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12373 = x11220 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12374 = x12372 + x12373;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12375 = x11226 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12376 = x11223 + x12375;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12377 = x11229 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12378 = x12376 + x12377;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12379 = x11232 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12380 = x12378 + x12379;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12381 = x11235 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12382 = x12380 + x12381;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12383 = x11238 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12384 = x12382 + x12383;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12385 = x11241 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12386 = x12384 + x12385;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12387 = x11244 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12388 = x12386 + x12387;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12389 = x11247 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12390 = x12388 + x12389;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12391 = x11250 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12392 = x12390 + x12391;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12393 = x11253 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12394 = x12392 + x12393;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12395 = x11256 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12396 = x12394 + x12395;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12397 = x11259 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12398 = x12396 + x12397;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12399 = x11262 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12400 = x12398 + x12399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12401 = x11265 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12402 = x12400 + x12401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12403 = x11268 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12404 = x12402 + x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12405 = x12314 + x12374;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12406 = x12344 + x12404;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12407 = x11867 + x12405;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12408 = x11868 + x12406;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12409 = x10846 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12410 = x10845 + x12409;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12411 = x10847 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12412 = x12410 + x12411;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12413 = x10848 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12414 = x12412 + x12413;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12415 = x10849 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12416 = x12414 + x12415;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12417 = x10850 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12418 = x12416 + x12417;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12419 = x10851 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12420 = x12418 + x12419;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12421 = x10852 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12422 = x12420 + x12421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12423 = x10853 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12424 = x12422 + x12423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12425 = x10854 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12426 = x12424 + x12425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12427 = x10855 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12428 = x12426 + x12427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12429 = x10856 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12430 = x12428 + x12429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12431 = x10857 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12432 = x12430 + x12431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12433 = x10858 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12434 = x12432 + x12433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12435 = x10859 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12436 = x12434 + x12435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12437 = x10860 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12438 = x12436 + x12437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12439 = x10862 * x99;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12440 = x10861 + x12439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12441 = x10863 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12442 = x12440 + x12441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12443 = x10864 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12444 = x12442 + x12443;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12445 = x10865 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12446 = x12444 + x12445;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12447 = x10866 * x68;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12448 = x12446 + x12447;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12449 = x10867 * x62;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12450 = x12448 + x12449;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12451 = x10868 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12452 = x12450 + x12451;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12453 = x10869 * x97;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12454 = x12452 + x12453;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12455 = x10870 * x28;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12456 = x12454 + x12455;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12457 = x10871 * x29;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12458 = x12456 + x12457;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12459 = x10872 * x25;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12460 = x12458 + x12459;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12461 = x10873 * x23;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12462 = x12460 + x12461;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12463 = x10874 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12464 = x12462 + x12463;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12465 = x10875 * x43;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12466 = x12464 + x12465;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12467 = x10876 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12468 = x12466 + x12467;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12469 = x11867 + x12438;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12470 = x11868 + x12468;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12407);
        reg = x12407;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12469);
        reg = x12469;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12408);
        reg = x12408;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12470);
        reg = x12470;
      }
      if (x8502 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12471 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x12471 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12472 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x12472 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12473 = Fp(x12471.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12473);
            reg = x12473;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12474 = Fp(x12471.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12475 = x12474 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12475);
            reg = x12475;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12476 = Fp(x12471.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12477 = x12476 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12477);
            reg = x12477;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12478 = Fp(x12471.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12479 = x12478 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12479);
            reg = x12479;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12480 = Fp(x12471.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12481 = x12480 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12481);
            reg = x12481;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12482 = Fp(x12471.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12483 = x12482 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12483);
            reg = x12483;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12484 = Fp(x12471.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12485 = x12484 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12485);
            reg = x12485;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12486 = Fp(x12471.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12487 = x12486 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12487);
            reg = x12487;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12488 = Fp(x12471.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12489 = x12488 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12489);
            reg = x12489;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12490 = Fp(x12471.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12491 = x12490 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12491);
            reg = x12491;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12492 = Fp(x12471.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12493 = x12492 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12493);
            reg = x12493;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12494 = Fp(x12471.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12495 = x12494 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12495);
            reg = x12495;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12496 = Fp(x12471.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12497 = x12496 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12497);
            reg = x12497;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12498 = Fp(x12471.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12499 = x12498 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12499);
            reg = x12499;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12500 = Fp(x12471.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12501 = x12500 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12501);
            reg = x12501;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12502 = Fp(x12471.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12503 = x12502 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12503);
            reg = x12503;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12504 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x12504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12505 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x12505 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12506 = x12505 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12507 = x12504 + x12506;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12508 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x12508 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12509 = x12508 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12510 = x12507 + x12509;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12511 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12511 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12512 = x12511 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12513 = x12510 + x12512;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12514 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12514 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12515 = x12514 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12516 = x12513 + x12515;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12517 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12517 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12518 = x12517 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12519 = x12516 + x12518;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12520 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12520 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12521 = x12520 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12522 = x12519 + x12521;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12523 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x12523 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12524 = x12523 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12525 = x12522 + x12524;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12526 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x12526 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12527 = x12526 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12528 = x12525 + x12527;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12529 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12529 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12530 = x12529 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12531 = x12528 + x12530;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12532 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12532 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12533 = x12532 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12534 = x12531 + x12533;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12535 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12535 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12536 = x12535 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12537 = x12534 + x12536;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12538 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12538 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12539 = x12538 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12540 = x12537 + x12539;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12541 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12541 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12542 = x12541 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12543 = x12540 + x12542;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12544 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12544 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12545 = x12544 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12546 = x12543 + x12545;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12547 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12547 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12548 = x12547 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12549 = x12546 + x12548;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12550 = x12471 - x12549;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12551 = x12550 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12552 = Fp(x12551.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12552);
            reg = x12552;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12553 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12553 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12554 = x12551 - x12553;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12555 = x12554 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12556 = x102 - x12555;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12557 = x12555 * x12556;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12557 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12558 = x12472 + x12551;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12559 = Fp(x12558.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12559);
            reg = x12559;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12560 = Fp(x12558.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12561 = x12560 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12561);
            reg = x12561;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12562 = Fp(x12558.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12563 = x12562 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12563);
            reg = x12563;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12564 = Fp(x12558.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12565 = x12564 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12565);
            reg = x12565;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12566 = Fp(x12558.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12567 = x12566 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12567);
            reg = x12567;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12568 = Fp(x12558.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12569 = x12568 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12569);
            reg = x12569;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12570 = Fp(x12558.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12571 = x12570 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12571);
            reg = x12571;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12572 = Fp(x12558.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12573 = x12572 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12573);
            reg = x12573;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12574 = Fp(x12558.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12575 = x12574 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12575);
            reg = x12575;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12576 = Fp(x12558.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12577 = x12576 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12577);
            reg = x12577;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12578 = Fp(x12558.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12579 = x12578 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12579);
            reg = x12579;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12580 = Fp(x12558.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12581 = x12580 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12581);
            reg = x12581;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12582 = Fp(x12558.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12583 = x12582 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12583);
            reg = x12583;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12584 = Fp(x12558.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12585 = x12584 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12585);
            reg = x12585;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12586 = Fp(x12558.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12587 = x12586 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12587);
            reg = x12587;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12588 = Fp(x12558.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12589 = x12588 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12589);
            reg = x12589;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12590 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12591 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12591 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12592 = x12591 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12593 = x12590 + x12592;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12594 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12594 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12595 = x12594 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12596 = x12593 + x12595;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12597 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12597 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12598 = x12597 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12599 = x12596 + x12598;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12600 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12600 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12601 = x12600 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12602 = x12599 + x12601;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12603 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12603 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12604 = x12603 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12605 = x12602 + x12604;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12606 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12606 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12607 = x12606 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12608 = x12605 + x12607;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12609 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12609 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12610 = x12609 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12611 = x12608 + x12610;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12612 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12612 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12613 = x12612 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12614 = x12611 + x12613;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12615 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12615 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12616 = x12615 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12617 = x12614 + x12616;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12618 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12618 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12619 = x12618 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12620 = x12617 + x12619;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12621 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12622 = x12621 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12623 = x12620 + x12622;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12624 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12624 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12625 = x12624 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12626 = x12623 + x12625;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12627 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12628 = x12627 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12629 = x12626 + x12628;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12630 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12631 = x12630 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12632 = x12629 + x12631;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12633 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12634 = x12633 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12635 = x12632 + x12634;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12636 = x12558 - x12635;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12637 = x12636 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12638 = Fp(x12637.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12638);
            reg = x12638;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12639 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x12639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12640 = x12637 - x12639;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12641 = x12640 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12642 = x102 - x12641;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12643 = x12641 * x12642;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12643 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12644 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x12644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12645 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x12645 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12646 = Fp(x12644.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12646);
            reg = x12646;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12647 = Fp(x12644.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12648 = x12647 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12648);
            reg = x12648;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12649 = Fp(x12644.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12650 = x12649 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12650);
            reg = x12650;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12651 = Fp(x12644.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12652 = x12651 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12652);
            reg = x12652;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12653 = Fp(x12644.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12654 = x12653 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12654);
            reg = x12654;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12655 = Fp(x12644.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12656 = x12655 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12656);
            reg = x12656;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12657 = Fp(x12644.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12658 = x12657 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12658);
            reg = x12658;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12659 = Fp(x12644.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12660 = x12659 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12660);
            reg = x12660;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12661 = Fp(x12644.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12662 = x12661 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12662);
            reg = x12662;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12663 = Fp(x12644.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12664 = x12663 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12664);
            reg = x12664;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12665 = Fp(x12644.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12666 = x12665 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12666);
            reg = x12666;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12667 = Fp(x12644.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12668 = x12667 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12668);
            reg = x12668;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12669 = Fp(x12644.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12670 = x12669 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12670);
            reg = x12670;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12671 = Fp(x12644.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12672 = x12671 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12672);
            reg = x12672;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12673 = Fp(x12644.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12674 = x12673 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12674);
            reg = x12674;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12675 = Fp(x12644.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12676 = x12675 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12676);
            reg = x12676;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12677 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12677 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12678 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12678 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12679 = x12678 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12680 = x12677 + x12679;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12681 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12681 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12682 = x12681 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12683 = x12680 + x12682;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12684 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12684 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12685 = x12684 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12686 = x12683 + x12685;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12687 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12687 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12688 = x12687 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12689 = x12686 + x12688;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12690 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12690 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12691 = x12690 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12692 = x12689 + x12691;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12693 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12693 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12694 = x12693 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12695 = x12692 + x12694;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12696 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12696 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12697 = x12696 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12698 = x12695 + x12697;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12699 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12699 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12700 = x12699 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12701 = x12698 + x12700;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12702 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12702 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12703 = x12702 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12704 = x12701 + x12703;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12705 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12706 = x12705 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12707 = x12704 + x12706;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12708 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12709 = x12708 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12710 = x12707 + x12709;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12711 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12711 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12712 = x12711 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12713 = x12710 + x12712;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12714 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12715 = x12714 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12716 = x12713 + x12715;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12717 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12718 = x12717 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12719 = x12716 + x12718;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12720 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12720 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12721 = x12720 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12722 = x12719 + x12721;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12723 = x12644 - x12722;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12724 = x12723 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12725 = Fp(x12724.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12725);
            reg = x12725;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12726 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x12726 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12727 = x12724 - x12726;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12728 = x12727 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12729 = x102 - x12728;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12730 = x12728 * x12729;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12730 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12731 = x12645 + x12724;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12732 = Fp(x12731.asUInt32() & x102.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12732);
            reg = x12732;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12733 = Fp(x12731.asUInt32() & x99.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12734 = x12733 * x63;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12734);
            reg = x12734;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12735 = Fp(x12731.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12736 = x12735 * x83;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12736);
            reg = x12736;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12737 = Fp(x12731.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12738 = x12737 * x64;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12738);
            reg = x12738;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12739 = Fp(x12731.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12740 = x12739 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12740);
            reg = x12740;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12741 = Fp(x12731.asUInt32() & x68.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12742 = x12741 * x67;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12742);
            reg = x12742;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12743 = Fp(x12731.asUInt32() & x62.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12744 = x12743 * x61;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12744);
            reg = x12744;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12745 = Fp(x12731.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12746 = x12745 * x70;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12746);
            reg = x12746;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12747 = Fp(x12731.asUInt32() & x97.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12748 = x12747 * x96;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12748);
            reg = x12748;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12749 = Fp(x12731.asUInt32() & x28.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12750 = x12749 * x27;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12750);
            reg = x12750;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12751 = Fp(x12731.asUInt32() & x29.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12752 = x12751 * x26;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12752);
            reg = x12752;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12753 = Fp(x12731.asUInt32() & x25.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12754 = x12753 * x24;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12754);
            reg = x12754;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12755 = Fp(x12731.asUInt32() & x23.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12756 = x12755 * x22;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12756);
            reg = x12756;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12757 = Fp(x12731.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12758 = x12757 * x20;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12758);
            reg = x12758;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12759 = Fp(x12731.asUInt32() & x43.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12760 = x12759 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12760);
            reg = x12760;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12761 = Fp(x12731.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12762 = x12761 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12762);
            reg = x12762;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12763 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12763 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12764 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12765 = x12764 * x99;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12766 = x12763 + x12765;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12767 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12767 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12768 = x12767 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12769 = x12766 + x12768;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12770 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12770 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12771 = x12770 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12772 = x12769 + x12771;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12773 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12773 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12774 = x12773 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12775 = x12772 + x12774;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12776 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12776 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12777 = x12776 * x68;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12778 = x12775 + x12777;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12779 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12779 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12780 = x12779 * x62;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12781 = x12778 + x12780;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12782 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12782 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12783 = x12782 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12784 = x12781 + x12783;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12785 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12785 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12786 = x12785 * x97;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12787 = x12784 + x12786;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12788 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12788 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12789 = x12788 * x28;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12790 = x12787 + x12789;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12791 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12791 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12792 = x12791 * x29;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12793 = x12790 + x12792;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12794 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12794 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12795 = x12794 * x25;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12796 = x12793 + x12795;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12797 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12797 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12798 = x12797 * x23;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12799 = x12796 + x12798;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12800 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12800 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12801 = x12800 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12802 = x12799 + x12801;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12803 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x12803 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12804 = x12803 * x43;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12805 = x12802 + x12804;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit66/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12806 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x12806 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12807 = x12806 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12808 = x12805 + x12807;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12809 = x12731 - x12808;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12810 = x12809 * x16;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12811 = Fp(x12810.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12811);
            reg = x12811;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12812 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x12812 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12813 = x12810 - x12812;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12814 = x12813 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12815 = x102 - x12814;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12816 = x12814 * x12815;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12816 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12817 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x12817 != Fp::invalid());
      if (x12817 != 0) {
        if (x8509 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":430:38))
          auto x12818 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12818 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":430:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12818);
            reg = x12818;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":431:38))
          auto x12819 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12819 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":431:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12819);
            reg = x12819;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":432:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        if (x8510 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":436:51))
          auto x12820 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12820 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":436:51)
          auto x12821 = x12820 + x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":436:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12821);
            reg = x12821;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":437:51))
          auto x12822 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12822 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":437:51)
          auto x12823 = x12822 + x66;
          // loc("cirgen/circuit/rv32im/sha.cpp":437:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12823);
            reg = x12823;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":438:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x75);
            reg = x75;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":441:27)
      auto x12824 = x102 - x12817;
      if (x12824 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":442:36))
        auto x12825 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12825 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":442:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12825);
          reg = x12825;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":443:36))
        auto x12826 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12826 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":443:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12826);
          reg = x12826;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":444:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/components/mux.h":37:25))
    auto x12827 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x12827 != Fp::invalid());
    if (x12827 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12828 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x12828 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":251:41)
      auto x12829 = x603 * x83;
      {
        host_args.at(0) = x12829;
        host_args.at(1) = x101;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x12830 = host_outs.at(0);
        auto x12831 = host_outs.at(1);
        auto x12832 = host_outs.at(2);
        auto x12833 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12830);
          reg = x12830;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12831);
          reg = x12831;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12832);
          reg = x12832;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12833);
          reg = x12833;
        }
      }
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12834 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x12834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12835 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x12835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12836 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x12836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12837 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x12837 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":137:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12829);
        reg = x12829;
      }
      // loc("cirgen/components/ram.cpp":138:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12828);
        reg = x12828;
      }
      // loc("cirgen/components/ram.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x102);
        reg = x102;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12834);
        reg = x12834;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12835);
        reg = x12835;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12836);
        reg = x12836;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12837);
        reg = x12837;
      }
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/ffpu.cpp":253:70))
      auto x12838 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x12838 != Fp::invalid());
      if (x12838 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12839 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x12839 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12840 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12840 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12841 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12841 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12842 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x12842 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x12843 = x12840 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12844 = x12839 + x12843;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12845 = x12841 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12846 = x12844 + x12845;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12847 = x12842 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12848 = x12846 + x12847;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":259:27)
        auto x12849 = x12848 * x83;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":259:5)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12849);
          reg = x12849;
        }
        {
          host_args.at(0) = x31;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x12850 = host_outs.at(0);
          auto x12851 = host_outs.at(1);
          auto x12852 = host_outs.at(2);
          auto x12853 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12850);
            reg = x12850;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12851);
            reg = x12851;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12852);
            reg = x12852;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12853);
            reg = x12853;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12854 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12854 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12855 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12855 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12856 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12856 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12857 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x12857 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x31);
          reg = x31;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12854);
          reg = x12854;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12855);
          reg = x12855;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12856);
          reg = x12856;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12857);
          reg = x12857;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x12858 = x12855 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12859 = x12854 + x12858;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12860 = x12856 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12861 = x12859 + x12860;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12862 = x12857 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12863 = x12861 + x12862;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":262:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12863);
          reg = x12863;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/8/Mux/4/Reg"("cirgen/circuit/rv32im/ffpu.cpp":266:50))
        auto x12864 = args[2][181 * steps + ((cycle - 1) & mask)];
        assert(x12864 != Fp::invalid());
        host_args.at(0) = x12864;
        host(ctx, "log", "origPc: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":268:24)
        auto x12865 = x12864 + x85;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":268:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12865);
          reg = x12865;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12866 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12866 != Fp::invalid());
        host_args.at(0) = x12848;
        host_args.at(1) = x12866;
        host_args.at(2) = x12864;
        host(ctx, "log", "FFPU INIT, baseAddr = %u, haltPos = %u, origPc = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":276:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":277:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        {
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12867 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12867 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12868 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12868 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12869 = x12868 * x99;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12870 = x12867 + x12869;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12871 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12871 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12872 = x12871 * x84;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12873 = x12870 + x12872;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12874 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12874 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12875 = x12874 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12876 = x12873 + x12875;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12877 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12877 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12878 = x12877 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12879 = x12876 + x12878;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12880 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12880 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12881 = x12880 * x79;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12882 = x12879 + x12881;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x12883 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12883 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12884 = x12883 * x78;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12885 = x12882 + x12884;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x12885 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":282:22)
      auto x12886 = x102 - x12838;
      if (x12886 != 0) {
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":284:58))
        auto x12887 = args[2][175 * steps + ((cycle - 1) & mask)];
        assert(x12887 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":284:5)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12887);
          reg = x12887;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":285:40))
        auto x12888 = args[2][169 * steps + ((cycle - 1) & mask)];
        assert(x12888 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":285:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12888);
          reg = x12888;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":286:52))
        auto x12889 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x12889 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":286:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12889);
          reg = x12889;
        }
        // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12890 = args[2][179 * steps + ((cycle - 1) & mask)];
        assert(x12890 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12890);
          reg = x12890;
        }
        // loc("Top/Mux/4/Mux/12/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":289:60))
        auto x12891 = args[2][173 * steps + ((cycle - 1) & mask)];
        assert(x12891 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":289:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12891);
          reg = x12891;
        }
      }
      {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":304:20)
        auto x12892 = Fp(x12834.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12892);
          reg = x12892;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":305:23)
        auto x12893 = Fp(x12834.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":305:22)
        auto x12894 = x12893 * x83;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12894);
          reg = x12894;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":306:25)
        auto x12895 = Fp(x12834.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":306:24)
        auto x12896 = x12895 * x64;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12896);
          reg = x12896;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":307:21)
        auto x12897 = Fp(x12834.asUInt32() & x50.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":307:20)
        auto x12898 = x12897 * x65;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x12899 = Fp(x12898.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12899);
            reg = x12899;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12900 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x12900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12901 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x12901 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:18)
      auto x12902 = x12901 * x85;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12903 = x12900 + x12902;
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12904 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x12904 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:43)
      auto x12905 = x12904 * x77;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12906 = x12903 + x12905;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x12907 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12907 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:70)
      auto x12908 = x12907 * x66;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12909 = x12906 + x12908;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12910 = x12909 - x12834;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      if (x12910 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:309");
      // loc("cirgen/circuit/rv32im/ffpu.cpp":323:17)
      auto x12911 = x12837 * x97;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":323:17)
      auto x12912 = x12911 + x12836;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12913 = x12835 * x62;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:34)
      auto x12914 = x12907 * x85;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12915 = x12913 + x12914;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:57)
      auto x12916 = x12904 * x99;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12917 = x12915 + x12916;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12918 = x12917 + x12901;
      {
        if (x12886 != 0) {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":343:31)
          auto x12919 = x12900 - x102;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":343:31)
          auto x12920 = (x12919 == 0) ? Fp(1) : Fp(0);
          if (x12920 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x102);
                reg = x102;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12921 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12921 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12922 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12922 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12923 = x12922 * x99;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12924 = x12921 + x12923;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12925 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12925 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12926 = x12925 * x84;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12927 = x12924 + x12926;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12928 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12928 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12929 = x12928 * x85;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12930 = x12927 + x12929;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12931 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12931 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12932 = x12931 * x80;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12933 = x12930 + x12932;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12934 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12934 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12935 = x12934 * x79;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12936 = x12933 + x12935;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12937 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x12937 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12938 = x12937 * x78;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12939 = x12936 + x12938;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12940 = x12939 - x102;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12940 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":344:31)
          auto x12941 = x12900 - x99;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":344:31)
          auto x12942 = (x12941 == 0) ? Fp(1) : Fp(0);
          if (x12942 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x102);
                reg = x102;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12943 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12943 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12944 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12944 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12945 = x12944 * x99;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12946 = x12943 + x12945;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12947 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12947 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12948 = x12947 * x84;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12949 = x12946 + x12948;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12950 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12950 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12951 = x12950 * x85;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12952 = x12949 + x12951;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12953 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12953 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12954 = x12953 * x80;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12955 = x12952 + x12954;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12956 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12956 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12957 = x12956 * x79;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12958 = x12955 + x12957;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12959 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x12959 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12960 = x12959 * x78;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12961 = x12958 + x12960;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12962 = x12961 - x99;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12962 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":345:31)
          auto x12963 = x12900 - x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":345:31)
          auto x12964 = (x12963 == 0) ? Fp(1) : Fp(0);
          if (x12964 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x102);
                reg = x102;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][168 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x101);
                reg = x101;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12965 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12965 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12966 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12966 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12967 = x12966 * x99;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12968 = x12965 + x12967;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12969 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12969 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12970 = x12969 * x84;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12971 = x12968 + x12970;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12972 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12972 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12973 = x12972 * x85;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12974 = x12971 + x12973;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12975 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12975 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12976 = x12975 * x80;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12977 = x12974 + x12976;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12978 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12978 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12979 = x12978 * x79;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12980 = x12977 + x12979;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
            auto x12981 = args[2][168 * steps + ((cycle - 0) & mask)];
            assert(x12981 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12982 = x12981 * x78;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12983 = x12980 + x12982;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12984 = x12983 - x84;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12984 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":346:24)
          auto x12985 = (x12900 == 0) ? Fp(1) : Fp(0);
          if (x12985 != 0) {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":347:29)
            auto x12986 = x102 - x12904;
            if (x12986 != 0) {
              if (x12901 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12987 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x12987 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12988 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x12988 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12989 = x12988 * x99;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12990 = x12987 + x12989;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12991 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x12991 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12992 = x12991 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12993 = x12990 + x12992;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12994 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x12994 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12995 = x12994 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12996 = x12993 + x12995;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x12997 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x12997 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12998 = x12997 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12999 = x12996 + x12998;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13000 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13000 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13001 = x13000 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13002 = x12999 + x13001;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13003 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13003 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13004 = x13003 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13005 = x13002 + x13004;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13006 = x13005 - x85;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13006 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":349:29)
              auto x13007 = x102 - x12901;
              if (x13007 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13008 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x13008 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13009 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13009 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13010 = x13009 * x99;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13011 = x13008 + x13010;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13012 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13012 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13013 = x13012 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13014 = x13011 + x13013;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13015 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13015 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13016 = x13015 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13017 = x13014 + x13016;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13018 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13018 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13019 = x13018 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13020 = x13017 + x13019;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13021 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13021 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13022 = x13021 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13023 = x13020 + x13022;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13024 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13024 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13025 = x13024 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13026 = x13023 + x13025;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13027 = x13026 - x80;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13027 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
            }
            if (x12904 != 0) {
              // loc("cirgen/circuit/rv32im/ffpu.cpp":352:30)
              auto x13028 = (x12835 == 0) ? Fp(1) : Fp(0);
              if (x13028 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13029 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x13029 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13030 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13030 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13031 = x13030 * x99;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13032 = x13029 + x13031;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13033 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13033 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13034 = x13033 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13035 = x13032 + x13034;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13036 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13036 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13037 = x13036 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13038 = x13035 + x13037;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13039 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13039 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13040 = x13039 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13041 = x13038 + x13040;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13042 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13042 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13043 = x13042 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13044 = x13041 + x13043;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13045 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13045 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13046 = x13045 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13047 = x13044 + x13046;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13048 = x13047 - x79;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13048 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":353:34)
              auto x13049 = x12835 - x102;
              // loc("cirgen/circuit/rv32im/ffpu.cpp":353:34)
              auto x13050 = (x13049 == 0) ? Fp(1) : Fp(0);
              if (x13050 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x101);
                    reg = x101;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][168 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x102);
                    reg = x102;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13051 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x13051 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13052 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x13052 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13053 = x13052 * x99;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13054 = x13051 + x13053;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13055 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x13055 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13056 = x13055 * x84;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13057 = x13054 + x13056;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13058 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x13058 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13059 = x13058 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13060 = x13057 + x13059;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13061 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x13061 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13062 = x13061 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13063 = x13060 + x13062;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13064 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x13064 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13065 = x13064 * x79;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13066 = x13063 + x13065;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
                auto x13067 = args[2][168 * steps + ((cycle - 0) & mask)];
                assert(x13067 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x13068 = x13067 * x78;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x13069 = x13066 + x13068;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x13070 = x13069 - x78;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x13070 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
            }
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg"("cirgen/circuit/rv32im/ffpu.cpp":364:21))
        auto x13071 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x13071 != Fp::invalid());
        if (x13071 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded INIT from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":365:26))
        auto x13072 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13072 != Fp::invalid());
        if (x13072 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded BINOP_ADD from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":366:26))
        auto x13073 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x13073 != Fp::invalid());
        if (x13073 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded BINOP_SUB from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":367:26))
        auto x13074 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x13074 != Fp::invalid());
        if (x13074 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded BINOP_MUL from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":368:20))
        auto x13075 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13075 != Fp::invalid());
        if (x13075 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded SET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":369:20))
        auto x13076 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13076 != Fp::invalid());
        if (x13076 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded GET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":370:30))
        auto x13077 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x13077 != Fp::invalid());
        if (x13077 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded UNOP_IDENTITY from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":371:25))
        auto x13078 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x13078 != Fp::invalid());
        if (x13078 != 0) {
          host_args.at(0) = x12834;
          host_args.at(1) = x12835;
          host_args.at(2) = x12836;
          host_args.at(3) = x12837;
          host_args.at(4) = x603;
          host(ctx, "log", "FFPU Decoded UNOP_INV from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":376:32))
      auto x13079 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x13079 != Fp::invalid());
      if (x13079 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        auto x13080 = x12900 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        if (x13080 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:377");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13081 = x12912 + x11;
        {
          host_args.at(0) = x13081;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13082 = host_outs.at(0);
          auto x13083 = host_outs.at(1);
          auto x13084 = host_outs.at(2);
          auto x13085 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13082);
            reg = x13082;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13083);
            reg = x13083;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13084);
            reg = x13084;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13085);
            reg = x13085;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13086 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13086 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13087 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13087 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13088 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13088 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13089 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13089 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13081);
          reg = x13081;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13086);
          reg = x13086;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13087);
          reg = x13087;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13088);
          reg = x13088;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13089);
          reg = x13089;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13090 = x12918 + x11;
        {
          host_args.at(0) = x13090;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13091 = host_outs.at(0);
          auto x13092 = host_outs.at(1);
          auto x13093 = host_outs.at(2);
          auto x13094 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13091);
            reg = x13091;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13092);
            reg = x13092;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13093);
            reg = x13093;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13094);
            reg = x13094;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13095 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13095 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13096 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13096 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13097 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13097 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13098 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13098 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13090);
          reg = x13090;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13095);
          reg = x13095;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13096);
          reg = x13096;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13097);
          reg = x13097;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13098);
          reg = x13098;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13099 = x13086 + x13095;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13100 = x13087 + x13096;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13101 = x13088 + x13097;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x13102 = x13089 + x13098;
        host_args.at(0) = x12912;
        host_args.at(1) = x13086;
        host_args.at(2) = x13087;
        host_args.at(3) = x13088;
        host_args.at(4) = x13089;
        host_args.at(5) = x12918;
        host_args.at(6) = x13095;
        host_args.at(7) = x13096;
        host_args.at(8) = x13097;
        host_args.at(9) = x13098;
        host_args.at(10) = x13099;
        host_args.at(11) = x13100;
        host_args.at(12) = x13101;
        host_args.at(13) = x13102;
        host(ctx, "log", "FFPU: Add %%%u (%w) + %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13103 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13103 != Fp::invalid());
        host_args.at(0) = x13103;
        host_args.at(1) = x13099;
        host_args.at(2) = x13100;
        host_args.at(3) = x13101;
        host_args.at(4) = x13102;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13104 = x13103 + x11;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13099);
          reg = x13099;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13100);
          reg = x13100;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13101);
          reg = x13101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13102);
          reg = x13102;
        }
        {
          host_args.at(0) = x13104;
          host_args.at(1) = x13099;
          host_args.at(2) = x13100;
          host_args.at(3) = x13101;
          host_args.at(4) = x13102;
          host_args.at(5) = x102;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13105 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13105 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13106 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13106 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13107 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13107 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13108 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13108 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13104);
          reg = x13104;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13105);
          reg = x13105;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13106);
          reg = x13106;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13107);
          reg = x13107;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13108);
          reg = x13108;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13109 = x13103 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13109);
          reg = x13109;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":380:32))
      auto x13110 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x13110 != Fp::invalid());
      if (x13110 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        auto x13111 = x12900 - x99;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        if (x13111 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:381");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13112 = x12912 + x11;
        {
          host_args.at(0) = x13112;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13113 = host_outs.at(0);
          auto x13114 = host_outs.at(1);
          auto x13115 = host_outs.at(2);
          auto x13116 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13113);
            reg = x13113;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13114);
            reg = x13114;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13115);
            reg = x13115;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13116);
            reg = x13116;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13117 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13117 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13118 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13118 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13119 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13119 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13120 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13120 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13112);
          reg = x13112;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13117);
          reg = x13117;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13118);
          reg = x13118;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13119);
          reg = x13119;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13120);
          reg = x13120;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13121 = x12918 + x11;
        {
          host_args.at(0) = x13121;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13122 = host_outs.at(0);
          auto x13123 = host_outs.at(1);
          auto x13124 = host_outs.at(2);
          auto x13125 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13122);
            reg = x13122;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13123);
            reg = x13123;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13124);
            reg = x13124;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13125);
            reg = x13125;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13126 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13126 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13127 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13127 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13128 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13128 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13129 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13129 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13121);
          reg = x13121;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13126);
          reg = x13126;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13127);
          reg = x13127;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13128);
          reg = x13128;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13129);
          reg = x13129;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13130 = x13117 - x13126;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13131 = x13118 - x13127;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13132 = x13119 - x13128;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x13133 = x13120 - x13129;
        host_args.at(0) = x12912;
        host_args.at(1) = x13117;
        host_args.at(2) = x13118;
        host_args.at(3) = x13119;
        host_args.at(4) = x13120;
        host_args.at(5) = x12918;
        host_args.at(6) = x13126;
        host_args.at(7) = x13127;
        host_args.at(8) = x13128;
        host_args.at(9) = x13129;
        host_args.at(10) = x13130;
        host_args.at(11) = x13131;
        host_args.at(12) = x13132;
        host_args.at(13) = x13133;
        host(ctx, "log", "FFPU: Sub %%%u (%w) - %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13134 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13134 != Fp::invalid());
        host_args.at(0) = x13134;
        host_args.at(1) = x13130;
        host_args.at(2) = x13131;
        host_args.at(3) = x13132;
        host_args.at(4) = x13133;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13135 = x13134 + x11;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13130);
          reg = x13130;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13131);
          reg = x13131;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13132);
          reg = x13132;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13133);
          reg = x13133;
        }
        {
          host_args.at(0) = x13135;
          host_args.at(1) = x13130;
          host_args.at(2) = x13131;
          host_args.at(3) = x13132;
          host_args.at(4) = x13133;
          host_args.at(5) = x102;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13136 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13136 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13137 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13137 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13138 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13138 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13139 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13139 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13135);
          reg = x13135;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13136);
          reg = x13136;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13137);
          reg = x13137;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13138);
          reg = x13138;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13139);
          reg = x13139;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13140 = x13134 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13140);
          reg = x13140;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":384:32))
      auto x13141 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x13141 != Fp::invalid());
      if (x13141 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":385:8)
        auto x13142 = x12900 - x84;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":385:8)
        if (x13142 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:385");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13143 = x12912 + x11;
        {
          host_args.at(0) = x13143;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13144 = host_outs.at(0);
          auto x13145 = host_outs.at(1);
          auto x13146 = host_outs.at(2);
          auto x13147 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13144);
            reg = x13144;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13145);
            reg = x13145;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13146);
            reg = x13146;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13147);
            reg = x13147;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13148 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13148 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13149 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13149 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13150 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13150 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13151 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13151 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13143);
          reg = x13143;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13148);
          reg = x13148;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13149);
          reg = x13149;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13150);
          reg = x13150;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13151);
          reg = x13151;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13152 = x12918 + x11;
        {
          host_args.at(0) = x13152;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13153 = host_outs.at(0);
          auto x13154 = host_outs.at(1);
          auto x13155 = host_outs.at(2);
          auto x13156 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13153);
            reg = x13153;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13154);
            reg = x13154;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13155);
            reg = x13155;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13156);
            reg = x13156;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13157 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13157 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13158 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13158 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13159 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13159 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13160 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13160 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13152);
          reg = x13152;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13157);
          reg = x13157;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13158);
          reg = x13158;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13159);
          reg = x13159;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13160);
          reg = x13160;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13161 = x13148 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13162 = x13149 * x13160;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13163 = x13150 * x13159;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13164 = x13162 + x13163;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13165 = x13151 * x13158;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13166 = x13164 + x13165;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13167 = x13166 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13168 = x13161 + x13167;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13169 = x13148 * x13158;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13170 = x13149 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13171 = x13169 + x13170;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13172 = x13150 * x13160;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13173 = x13151 * x13159;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13174 = x13172 + x13173;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13175 = x13174 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13176 = x13171 + x13175;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13177 = x13148 * x13159;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13178 = x13149 * x13158;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13179 = x13177 + x13178;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13180 = x13150 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13181 = x13179 + x13180;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13182 = x13151 * x13160;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13183 = x13182 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13184 = x13181 + x13183;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13185 = x13148 * x13160;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13186 = x13149 * x13159;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13187 = x13185 + x13186;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13188 = x13150 * x13158;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13189 = x13187 + x13188;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13190 = x13151 * x13157;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x13191 = x13189 + x13190;
        host_args.at(0) = x12912;
        host_args.at(1) = x13148;
        host_args.at(2) = x13149;
        host_args.at(3) = x13150;
        host_args.at(4) = x13151;
        host_args.at(5) = x12918;
        host_args.at(6) = x13157;
        host_args.at(7) = x13158;
        host_args.at(8) = x13159;
        host_args.at(9) = x13160;
        host_args.at(10) = x13168;
        host_args.at(11) = x13176;
        host_args.at(12) = x13184;
        host_args.at(13) = x13191;
        host(ctx, "log", "FFPU: Mul %%%u (%w) * %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13192 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13192 != Fp::invalid());
        host_args.at(0) = x13192;
        host_args.at(1) = x13168;
        host_args.at(2) = x13176;
        host_args.at(3) = x13184;
        host_args.at(4) = x13191;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13193 = x13192 + x11;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13168);
          reg = x13168;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13176);
          reg = x13176;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13184);
          reg = x13184;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13191);
          reg = x13191;
        }
        {
          host_args.at(0) = x13193;
          host_args.at(1) = x13168;
          host_args.at(2) = x13176;
          host_args.at(3) = x13184;
          host_args.at(4) = x13191;
          host_args.at(5) = x102;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13194 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13194 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13195 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13195 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13196 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13196 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13197 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13197 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13193);
          reg = x13193;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13194);
          reg = x13194;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13195);
          reg = x13195;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13196);
          reg = x13196;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13197);
          reg = x13197;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13198 = x13192 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13198);
          reg = x13198;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":388:26))
      auto x13199 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x13199 != Fp::invalid());
      if (x13199 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":389:8)
        if (x12900 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:389");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":390:8)
        auto x13200 = x12901 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":390:8)
        if (x13200 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:390");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":391:8)
        if (x12904 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:391");
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":165:46))
        auto x13201 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13201 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":165:46)
        auto x13202 = x13201 + x12835;
        {
          host_args.at(0) = x13202;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13203 = host_outs.at(0);
          auto x13204 = host_outs.at(1);
          auto x13205 = host_outs.at(2);
          auto x13206 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13203);
            reg = x13203;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13204);
            reg = x13204;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13205);
            reg = x13205;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13206);
            reg = x13206;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13207 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13207 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13208 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13208 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13209 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13209 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13210 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13210 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13202);
          reg = x13202;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13207);
          reg = x13207;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13208);
          reg = x13208;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13209);
          reg = x13209;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13210);
          reg = x13210;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x13211 = x13208 * x97;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13212 = x13207 + x13211;
        // loc("./cirgen/components/u32.h":26:12)
        auto x13213 = x13209 * x87;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13214 = x13212 + x13213;
        // loc("./cirgen/components/u32.h":27:12)
        auto x13215 = x13210 * x86;
        // loc("./cirgen/components/u32.h":24:12)
        auto x13216 = x13214 + x13215;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":165:18)
        auto x13217 = x13216 * x83;
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13218 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x13218 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":167:27)
        auto x13219 = x102 - x13218;
        if (x13219 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13220 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x13220 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13221 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x13221 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13222 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x13222 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13223 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x13223 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":183:38)
            auto x13224 = x12912 * x85;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":183:27)
            auto x13225 = x13217 + x13224;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13226 = x13220 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13227 = Fp(x13226.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13228 = Fp(x13226.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13229 = Fp(x13226.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13230 = x13226 - x13227;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13231 = x13230 - x13228;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13232 = x13231 - x13229;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13233 = x13228 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13234 = x13229 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13235 = x13232 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13227);
              reg = x13227;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13233);
              reg = x13233;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13234);
              reg = x13234;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13235);
              reg = x13235;
            }
            {
              host_args.at(0) = x13225;
              host_args.at(1) = x13227;
              host_args.at(2) = x13233;
              host_args.at(3) = x13234;
              host_args.at(4) = x13235;
              host_args.at(5) = x101;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13236 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x13236 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13237 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x13237 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13238 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x13238 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13239 = args[2][121 * steps + ((cycle - 0) & mask)];
            assert(x13239 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13225);
              reg = x13225;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12828);
              reg = x12828;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13236);
              reg = x13236;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13237);
              reg = x13237;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13238);
              reg = x13238;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13239);
              reg = x13239;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":184:27)
            auto x13240 = x13225 + x102;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13241 = x13221 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13242 = Fp(x13241.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13243 = Fp(x13241.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13244 = Fp(x13241.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13245 = x13241 - x13242;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13246 = x13245 - x13243;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13247 = x13246 - x13244;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13248 = x13243 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13249 = x13244 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13250 = x13247 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13242);
              reg = x13242;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13248);
              reg = x13248;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13249);
              reg = x13249;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13250);
              reg = x13250;
            }
            {
              host_args.at(0) = x13240;
              host_args.at(1) = x13242;
              host_args.at(2) = x13248;
              host_args.at(3) = x13249;
              host_args.at(4) = x13250;
              host_args.at(5) = x101;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13251 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x13251 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13252 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x13252 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13253 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x13253 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13254 = args[2][128 * steps + ((cycle - 0) & mask)];
            assert(x13254 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13240);
              reg = x13240;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12828);
              reg = x12828;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13251);
              reg = x13251;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13252);
              reg = x13252;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13253);
              reg = x13253;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13254);
              reg = x13254;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13255 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x13255 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          auto x13256 = x13255 - x12828;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          if (x13256 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:186");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13257 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13257 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:32)
          auto x13258 = x12912 * x85;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:21)
          auto x13259 = x13217 + x13258;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          auto x13260 = x13257 - x13259;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          if (x13260 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:187");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13261 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13261 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13262 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13262 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13263 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13263 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13264 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13264 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13265 = x13262 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13266 = x13261 + x13265;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13267 = x13263 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13268 = x13266 + x13267;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13269 = x13264 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13270 = x13268 + x13269;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13271 = x13220 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          auto x13272 = x13270 - x13271;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          if (x13272 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:188");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13273 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13273 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":190:8)
          auto x13274 = x13273 - x12828;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":190:8)
          if (x13274 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:190");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13275 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13275 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:21)
          auto x13276 = x13259 + x102;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:8)
          auto x13277 = x13275 - x13276;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:8)
          if (x13277 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:191");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13278 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13278 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13279 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13279 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13280 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13280 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13281 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13281 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13282 = x13279 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13283 = x13278 + x13282;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13284 = x13280 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13285 = x13283 + x13284;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13286 = x13281 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13287 = x13285 + x13286;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13288 = x13221 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          auto x13289 = x13287 - x13288;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          if (x13289 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:192");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":196:10)
          auto x13290 = x13217 * x85;
          host_args.at(0) = x12835;
          host_args.at(1) = x13290;
          host_args.at(2) = x12912;
          host_args.at(3) = x13220;
          host_args.at(4) = x13221;
          host_args.at(5) = x13222;
          host_args.at(6) = x13223;
          host_args.at(7) = x13220;
          host_args.at(8) = x13221;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (%u, %u, ...)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13291 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13291 != Fp::invalid());
          host_args.at(0) = x13291;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13291);
            reg = x13291;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
        }
        if (x13218 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13292 = args[2][132 * steps + ((cycle - 2) & mask)];
          assert(x13292 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13293 = args[2][133 * steps + ((cycle - 2) & mask)];
          assert(x13293 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13294 = args[2][134 * steps + ((cycle - 2) & mask)];
          assert(x13294 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13295 = args[2][135 * steps + ((cycle - 2) & mask)];
          assert(x13295 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:38)
            auto x13296 = x12912 * x85;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:27)
            auto x13297 = x13217 + x13296;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:27)
            auto x13298 = x13297 + x99;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13299 = x13294 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13300 = Fp(x13299.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13301 = Fp(x13299.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13302 = Fp(x13299.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13303 = x13299 - x13300;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13304 = x13303 - x13301;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13305 = x13304 - x13302;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13306 = x13301 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13307 = x13302 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13308 = x13305 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13300);
              reg = x13300;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13306);
              reg = x13306;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13307);
              reg = x13307;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13308);
              reg = x13308;
            }
            {
              host_args.at(0) = x13298;
              host_args.at(1) = x13300;
              host_args.at(2) = x13306;
              host_args.at(3) = x13307;
              host_args.at(4) = x13308;
              host_args.at(5) = x101;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13309 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x13309 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13310 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x13310 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13311 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x13311 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13312 = args[2][121 * steps + ((cycle - 0) & mask)];
            assert(x13312 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13298);
              reg = x13298;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12828);
              reg = x12828;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13309);
              reg = x13309;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13310);
              reg = x13310;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13311);
              reg = x13311;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13312);
              reg = x13312;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":222:27)
            auto x13313 = x13297 + x84;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13314 = x13295 * x1;
            // loc("cirgen/components/u32.cpp":47:12)
            auto x13315 = Fp(x13314.asUInt32() & x98.asUInt32());
            // loc("cirgen/components/u32.cpp":48:12)
            auto x13316 = Fp(x13314.asUInt32() & x9.asUInt32());
            // loc("cirgen/components/u32.cpp":49:12)
            auto x13317 = Fp(x13314.asUInt32() & x8.asUInt32());
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13318 = x13314 - x13315;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13319 = x13318 - x13316;
            // loc("cirgen/components/u32.cpp":50:12)
            auto x13320 = x13319 - x13317;
            // loc("cirgen/components/u32.cpp":54:21)
            auto x13321 = x13316 * x96;
            // loc("cirgen/components/u32.cpp":55:21)
            auto x13322 = x13317 * x16;
            // loc("cirgen/components/u32.cpp":56:21)
            auto x13323 = x13320 * x7;
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13315);
              reg = x13315;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13321);
              reg = x13321;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13322);
              reg = x13322;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13323);
              reg = x13323;
            }
            {
              host_args.at(0) = x13313;
              host_args.at(1) = x13315;
              host_args.at(2) = x13321;
              host_args.at(3) = x13322;
              host_args.at(4) = x13323;
              host_args.at(5) = x101;
              host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13324 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x13324 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13325 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x13325 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13326 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x13326 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13327 = args[2][128 * steps + ((cycle - 0) & mask)];
            assert(x13327 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":137:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13313);
              reg = x13313;
            }
            // loc("cirgen/components/ram.cpp":138:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12828);
              reg = x12828;
            }
            // loc("cirgen/components/ram.cpp":139:3)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x99);
              reg = x99;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13324);
              reg = x13324;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13325);
              reg = x13325;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13326);
              reg = x13326;
            }
            // loc("cirgen/components/u32.cpp":34:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13327);
              reg = x13327;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13328 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x13328 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          auto x13329 = x13328 - x12828;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          if (x13329 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:224");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13330 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13330 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:32)
          auto x13331 = x12912 * x85;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:21)
          auto x13332 = x13217 + x13331;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:21)
          auto x13333 = x13332 + x99;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          auto x13334 = x13330 - x13333;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          if (x13334 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:225");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13335 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13335 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13336 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13336 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13337 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13337 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13338 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13338 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13339 = x13336 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13340 = x13335 + x13339;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13341 = x13337 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13342 = x13340 + x13341;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13343 = x13338 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13344 = x13342 + x13343;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13345 = x13294 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          auto x13346 = x13344 - x13345;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          if (x13346 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:226");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":148:10))
          auto x13347 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13347 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":228:8)
          auto x13348 = x13347 - x12828;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":228:8)
          if (x13348 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:228");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":144:10))
          auto x13349 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13349 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:21)
          auto x13350 = x13332 + x84;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:8)
          auto x13351 = x13349 - x13350;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:8)
          if (x13351 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:229");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13352 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13352 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13353 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13353 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13354 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13354 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13355 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13355 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13356 = x13353 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13357 = x13352 + x13356;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13358 = x13354 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13359 = x13357 + x13358;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13360 = x13355 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13361 = x13359 + x13360;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13362 = x13295 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          auto x13363 = x13361 - x13362;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          if (x13363 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:230");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":234:10)
          auto x13364 = x13217 * x85;
          host_args.at(0) = x12835;
          host_args.at(1) = x13364;
          host_args.at(2) = x12912;
          host_args.at(3) = x13292;
          host_args.at(4) = x13293;
          host_args.at(5) = x13294;
          host_args.at(6) = x13295;
          host_args.at(7) = x13294;
          host_args.at(8) = x13295;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (... %u, %u)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13365 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13365 != Fp::invalid());
          host_args.at(0) = x13365;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13365);
            reg = x13365;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":394:26))
      auto x13366 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x13366 != Fp::invalid());
      if (x13366 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":395:8)
        if (x12900 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:395");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":396:8)
        if (x12901 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:396");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":397:8)
        if (x12904 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:397");
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13367 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x13367 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":115:27)
        auto x13368 = x102 - x13367;
        if (x13368 != 0) {
          // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":118:48))
          auto x13369 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x13369 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":118:48)
          auto x13370 = x13369 + x12835;
          {
            host_args.at(0) = x13370;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13371 = host_outs.at(0);
            auto x13372 = host_outs.at(1);
            auto x13373 = host_outs.at(2);
            auto x13374 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][132 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13371);
              reg = x13371;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13372);
              reg = x13372;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][134 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13373);
              reg = x13373;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][135 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13374);
              reg = x13374;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13375 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13375 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13376 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13376 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13377 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13377 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13378 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13378 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13370);
            reg = x13370;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13375);
            reg = x13375;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13376);
            reg = x13376;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13377);
            reg = x13377;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13378);
            reg = x13378;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13379 = x13376 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13380 = x13375 + x13379;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13381 = x13377 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13382 = x13380 + x13381;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13383 = x13378 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13384 = x13382 + x13383;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":118:20)
          auto x13385 = x13384 * x83;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":120:64)
          auto x13386 = x12912 * x85;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":120:53)
          auto x13387 = x13385 + x13386;
          {
            host_args.at(0) = x13387;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13388 = host_outs.at(0);
            auto x13389 = host_outs.at(1);
            auto x13390 = host_outs.at(2);
            auto x13391 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13388);
              reg = x13388;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13389);
              reg = x13389;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13390);
              reg = x13390;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13391);
              reg = x13391;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13392 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13392 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13393 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13393 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13394 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13394 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13395 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13395 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13387);
            reg = x13387;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13392);
            reg = x13392;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13393);
            reg = x13393;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13394);
            reg = x13394;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13395);
            reg = x13395;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13396 = x13393 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13397 = x13392 + x13396;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13398 = x13394 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13399 = x13397 + x13398;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13400 = x13395 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13401 = x13399 + x13400;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13402 = x13401 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":121:53)
          auto x13403 = x13387 + x102;
          {
            host_args.at(0) = x13403;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13404 = host_outs.at(0);
            auto x13405 = host_outs.at(1);
            auto x13406 = host_outs.at(2);
            auto x13407 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13404);
              reg = x13404;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13405);
              reg = x13405;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13406);
              reg = x13406;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13407);
              reg = x13407;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13408 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13408 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13409 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13409 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13410 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13410 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13411 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13411 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13403);
            reg = x13403;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13408);
            reg = x13408;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13409);
            reg = x13409;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13410);
            reg = x13410;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13411);
            reg = x13411;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13412 = x13409 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13413 = x13408 + x13412;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13414 = x13410 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13415 = x13413 + x13414;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13416 = x13411 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13417 = x13415 + x13416;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13418 = x13417 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":125:10)
          auto x13419 = x13385 * x85;
          host_args.at(0) = x12835;
          host_args.at(1) = x13419;
          host_args.at(2) = x12912;
          host_args.at(3) = x13402;
          host_args.at(4) = x13418;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, ..", host_args.data(), 5, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13420 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13420 != Fp::invalid());
          host_args.at(0) = x13420;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13420);
            reg = x13420;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
        }
        if (x13367 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13421 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x13421 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13422 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x13422 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13423 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x13423 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13424 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x13424 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13425 = x13422 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13426 = x13421 + x13425;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13427 = x13423 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13428 = x13426 + x13427;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13429 = x13424 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13430 = x13428 + x13429;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":138:59)
          auto x13431 = x13430 * x83;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13432 = args[2][118 * steps + ((cycle - 1) & mask)];
          assert(x13432 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13433 = args[2][119 * steps + ((cycle - 1) & mask)];
          assert(x13433 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13434 = args[2][120 * steps + ((cycle - 1) & mask)];
          assert(x13434 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13435 = args[2][121 * steps + ((cycle - 1) & mask)];
          assert(x13435 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13436 = x13433 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13437 = x13432 + x13436;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13438 = x13434 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13439 = x13437 + x13438;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13440 = x13435 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13441 = x13439 + x13440;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13442 = x13441 * x0;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13443 = args[2][125 * steps + ((cycle - 1) & mask)];
          assert(x13443 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13444 = args[2][126 * steps + ((cycle - 1) & mask)];
          assert(x13444 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13445 = args[2][127 * steps + ((cycle - 1) & mask)];
          assert(x13445 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13446 = args[2][128 * steps + ((cycle - 1) & mask)];
          assert(x13446 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13447 = x13444 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13448 = x13443 + x13447;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13449 = x13445 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13450 = x13448 + x13449;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13451 = x13446 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13452 = x13450 + x13451;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13453 = x13452 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:64)
          auto x13454 = x12912 * x85;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:53)
          auto x13455 = x13431 + x13454;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:53)
          auto x13456 = x13455 + x99;
          {
            host_args.at(0) = x13456;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13457 = host_outs.at(0);
            auto x13458 = host_outs.at(1);
            auto x13459 = host_outs.at(2);
            auto x13460 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13457);
              reg = x13457;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13458);
              reg = x13458;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13459);
              reg = x13459;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13460);
              reg = x13460;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13461 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13461 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13462 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13462 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13463 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13463 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13464 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13464 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13456);
            reg = x13456;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13461);
            reg = x13461;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13462);
            reg = x13462;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13463);
            reg = x13463;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13464);
            reg = x13464;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13465 = x13462 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13466 = x13461 + x13465;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13467 = x13463 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13468 = x13466 + x13467;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13469 = x13464 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13470 = x13468 + x13469;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13471 = x13470 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":143:53)
          auto x13472 = x13455 + x84;
          {
            host_args.at(0) = x13472;
            host_args.at(1) = x101;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13473 = host_outs.at(0);
            auto x13474 = host_outs.at(1);
            auto x13475 = host_outs.at(2);
            auto x13476 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13473);
              reg = x13473;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13474);
              reg = x13474;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13475);
              reg = x13475;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13476);
              reg = x13476;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13477 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13477 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13478 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13478 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13479 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13479 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13480 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13480 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13472);
            reg = x13472;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13477);
            reg = x13477;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13478);
            reg = x13478;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13479);
            reg = x13479;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13480);
            reg = x13480;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13481 = x13478 * x97;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13482 = x13477 + x13481;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13483 = x13479 * x87;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13484 = x13482 + x13483;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13485 = x13480 * x86;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13486 = x13484 + x13485;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13487 = x13486 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":148:10)
          auto x13488 = x13431 * x85;
          host_args.at(0) = x12835;
          host_args.at(1) = x13488;
          host_args.at(2) = x12912;
          host_args.at(3) = x13442;
          host_args.at(4) = x13453;
          host_args.at(5) = x13471;
          host_args.at(6) = x13487;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, %u, %u", host_args.data(), 7, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
          auto x13489 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x13489 != Fp::invalid());
          host_args.at(0) = x13489;
          host_args.at(1) = x13442;
          host_args.at(2) = x13453;
          host_args.at(3) = x13471;
          host_args.at(4) = x13487;
          host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
          auto x13490 = x13489 + x11;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13442);
            reg = x13442;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13453);
            reg = x13453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13471);
            reg = x13471;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13487);
            reg = x13487;
          }
          {
            host_args.at(0) = x13490;
            host_args.at(1) = x13442;
            host_args.at(2) = x13453;
            host_args.at(3) = x13471;
            host_args.at(4) = x13487;
            host_args.at(5) = x102;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13491 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13491 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13492 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13492 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13493 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13493 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13494 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13494 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13490);
            reg = x13490;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13491);
            reg = x13491;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13492);
            reg = x13492;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13493);
            reg = x13493;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13494);
            reg = x13494;
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
          auto x13495 = x13489 + x102;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13495);
            reg = x13495;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":400:36))
      auto x13496 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x13496 != Fp::invalid());
      if (x13496 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":401:8)
        if (x12900 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:401");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":402:8)
        if (x12901 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:402");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":403:8)
        auto x13497 = x12904 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":403:8)
        if (x13497 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:403");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":404:8)
        if (x12835 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:404");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13498 = x12912 + x11;
        {
          host_args.at(0) = x13498;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13499 = host_outs.at(0);
          auto x13500 = host_outs.at(1);
          auto x13501 = host_outs.at(2);
          auto x13502 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13499);
            reg = x13499;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13500);
            reg = x13500;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13501);
            reg = x13501;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13502);
            reg = x13502;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13503 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13504 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13505 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13506 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13506 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13498);
          reg = x13498;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13503);
          reg = x13503;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13504);
          reg = x13504;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13505);
          reg = x13505;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13506);
          reg = x13506;
        }
        host_args.at(0) = x12912;
        host_args.at(1) = x13503;
        host_args.at(2) = x13504;
        host_args.at(3) = x13505;
        host_args.at(4) = x13506;
        host(ctx, "log", "FFPU: Identity %%%u (%w)", host_args.data(), 5, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13507 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13507 != Fp::invalid());
        host_args.at(0) = x13507;
        host_args.at(1) = x13503;
        host_args.at(2) = x13504;
        host_args.at(3) = x13505;
        host_args.at(4) = x13506;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13508 = x13507 + x11;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13503);
          reg = x13503;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13504);
          reg = x13504;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13505);
          reg = x13505;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13506);
          reg = x13506;
        }
        {
          host_args.at(0) = x13508;
          host_args.at(1) = x13503;
          host_args.at(2) = x13504;
          host_args.at(3) = x13505;
          host_args.at(4) = x13506;
          host_args.at(5) = x102;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13509 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13510 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13510 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13511 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13511 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13512 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13512 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13508);
          reg = x13508;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13509);
          reg = x13509;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13510);
          reg = x13510;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13511);
          reg = x13511;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13512);
          reg = x13512;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13513 = x13507 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13513);
          reg = x13513;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":407:31))
      auto x13514 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x13514 != Fp::invalid());
      if (x13514 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":408:8)
        if (x12900 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:408");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":409:8)
        if (x12901 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:409");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        auto x13515 = x12904 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        if (x13515 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:410");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":411:8)
        auto x13516 = x12835 - x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":411:8)
        if (x13516 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:411");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13517 = x12912 + x11;
        {
          host_args.at(0) = x13517;
          host_args.at(1) = x101;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13518 = host_outs.at(0);
          auto x13519 = host_outs.at(1);
          auto x13520 = host_outs.at(2);
          auto x13521 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13518);
            reg = x13518;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13519);
            reg = x13519;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13520);
            reg = x13520;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13521);
            reg = x13521;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13522 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13523 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13524 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13524 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13525 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13525 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13517);
          reg = x13517;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13522);
          reg = x13522;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13523);
          reg = x13523;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13524);
          reg = x13524;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13525);
          reg = x13525;
        }
        {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13526 = x13522 * x13522;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13527 = x13525 + x13525;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13528 = x13523 * x13527;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13529 = x13524 * x13524;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13530 = x13528 - x13529;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13531 = x13530 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13532 = x13526 + x13531;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13533 = x13524 + x13524;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13534 = x13522 * x13533;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13535 = x13523 * x13523;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13536 = x13534 - x13535;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13537 = x13525 * x13525;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13538 = x13537 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13539 = x13536 + x13538;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13540 = x13532 * x13532;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13541 = x13539 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13542 = x13541 * x13539;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13543 = x13540 + x13542;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13544 = inv(x13543);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13545 = x13532 * x13544;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13546 = x13539 * x13544;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13547 = x13522 * x13545;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13548 = x13524 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13549 = x13548 * x13546;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13550 = x13547 + x13549;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13551 = -x13523;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13552 = x13551 * x13545;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13553 = x13525 * x74;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13554 = x13553 * x13546;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13555 = x13552 - x13554;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13556 = -x13522;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13557 = x13556 * x13546;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13558 = x13524 * x13545;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13559 = x13557 + x13558;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13560 = x13523 * x13546;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13561 = x13525 * x13545;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13562 = x13560 - x13561;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13550);
            reg = x13550;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13555);
            reg = x13555;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13559);
            reg = x13559;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13562);
            reg = x13562;
          }
        }
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13563 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x13563 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13564 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x13564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13565 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x13565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13566 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x13566 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13567 = x13563 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13568 = x13564 * x13525;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13569 = x13565 * x13524;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13570 = x13568 + x13569;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13571 = x13566 * x13523;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13572 = x13570 + x13571;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13573 = x13572 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13574 = x13567 + x13573;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13575 = x13563 * x13523;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13576 = x13564 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13577 = x13575 + x13576;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13578 = x13565 * x13525;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13579 = x13566 * x13524;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13580 = x13578 + x13579;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13581 = x13580 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13582 = x13577 + x13581;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13583 = x13563 * x13524;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13584 = x13564 * x13523;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13585 = x13583 + x13584;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13586 = x13565 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13587 = x13585 + x13586;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13588 = x13566 * x13525;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13589 = x13588 * x10;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13590 = x13587 + x13589;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13591 = x13563 * x13525;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13592 = x13564 * x13524;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13593 = x13591 + x13592;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13594 = x13565 * x13523;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13595 = x13593 + x13594;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13596 = x13566 * x13522;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13597 = x13595 + x13596;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13598 = x102 - x13574;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13598 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13599 = x101 - x13582;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13599 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13600 = x101 - x13590;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13600 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13601 = x101 - x13597;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13601 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        host_args.at(0) = x12912;
        host_args.at(1) = x13522;
        host_args.at(2) = x13523;
        host_args.at(3) = x13524;
        host_args.at(4) = x13525;
        host_args.at(5) = x13563;
        host_args.at(6) = x13564;
        host_args.at(7) = x13565;
        host_args.at(8) = x13566;
        host(ctx, "log", "FFPU: Inv %%%u (%w) -> %w", host_args.data(), 9, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13602 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13602 != Fp::invalid());
        host_args.at(0) = x13602;
        host_args.at(1) = x13563;
        host_args.at(2) = x13564;
        host_args.at(3) = x13565;
        host_args.at(4) = x13566;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13603 = x13602 + x11;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13563);
          reg = x13563;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13564);
          reg = x13564;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13565);
          reg = x13565;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13566);
          reg = x13566;
        }
        {
          host_args.at(0) = x13603;
          host_args.at(1) = x13563;
          host_args.at(2) = x13564;
          host_args.at(3) = x13565;
          host_args.at(4) = x13566;
          host_args.at(5) = x102;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13604 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13605 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13606 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13607 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13607 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13603);
          reg = x13603;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13604);
          reg = x13604;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13605);
          reg = x13605;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13606);
          reg = x13606;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13607);
          reg = x13607;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13608 = x13602 + x102;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13608);
          reg = x13608;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x13609 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x13609 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":416:57)
      auto x13610 = x603 + x85;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":416:20)
      auto x13611 = x13609 - x13610;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13612 = (x13611 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13612);
          reg = x13612;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13613 = inv(x13611);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13613);
          reg = x13613;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13614 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x13614 != Fp::invalid());
      if (x13614 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x13611 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x13615 = x102 - x13614;
      if (x13615 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13616 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13616 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13617 = x13611 * x13616;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13618 = x13617 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x13618 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13619 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13619 != Fp::invalid());
      if (x13619 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":419:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13620 = Fp(x13610.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13620);
            reg = x13620;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13621 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13621 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13622 = x13610 - x13621;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13623 = x13622 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13624 = Fp(x13623.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13624);
            reg = x13624;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13625 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13625 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13626 = x13623 - x13625;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13627 = x13626 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13628 = Fp(x13627.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13628);
            reg = x13628;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13629 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13629 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13630 = x13627 - x13629;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13631 = x13630 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13632 = Fp(x13631.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13632);
            reg = x13632;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13633 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13634 = x13631 - x13633;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13635 = x13634 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13635);
          reg = x13635;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13636 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13637 = x102 - x13636;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13638 = x13636 * x13637;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13638);
          reg = x13638;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13639 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13640 = x99 - x13636;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13641 = x13639 * x13640;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13641 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":425:25)
      auto x13642 = x102 - x13619;
      if (x13642 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13615);
          reg = x13615;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13614);
          reg = x13614;
        }
      }
      // loc("Top/Mux/4/Mux/12/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13643 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x13643 != Fp::invalid());
      if (x13643 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":431:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13644 = x13610 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13645 = Fp(x13644.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13645);
            reg = x13645;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13646 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13646 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13647 = x13644 - x13646;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13648 = x13647 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13649 = Fp(x13648.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13649);
            reg = x13649;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13650 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13650 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13651 = x13648 - x13650;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13652 = x13651 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13653 = Fp(x13652.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13653);
            reg = x13653;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13654 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13654 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13655 = x13652 - x13654;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13656 = x13655 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13657 = Fp(x13656.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13657);
            reg = x13657;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13658 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13658 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13659 = x13656 - x13658;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13660 = x13659 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13660);
          reg = x13660;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13661 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13661 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13662 = x102 - x13661;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13663 = x13661 * x13662;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13663);
          reg = x13663;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13664 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13664 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13665 = x99 - x13661;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13666 = x13664 * x13665;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13666 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
      // loc("Top/Mux/4/Mux/12/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13667 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x13667 != Fp::invalid());
      if (x13667 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":436:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":437:29))
        auto x13668 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13668 != Fp::invalid());
        host_args.at(0) = x13668;
        host(ctx, "log", "Returning to %x", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13669 = x13668 + x85;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13670 = Fp(x13669.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13670);
            reg = x13670;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13671 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13671 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13672 = x13669 - x13671;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13673 = x13672 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13674 = Fp(x13673.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13674);
            reg = x13674;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13675 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13675 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13676 = x13673 - x13675;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13677 = x13676 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13678 = Fp(x13677.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13678);
            reg = x13678;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13679 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13679 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13680 = x13677 - x13679;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13681 = x13680 * x96;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13682 = Fp(x13681.asUInt32() & x84.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13682);
            reg = x13682;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13683 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13683 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13684 = x13681 - x13683;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13685 = x13684 * x83;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13685);
          reg = x13685;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13686 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13686 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13687 = x102 - x13686;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13688 = x13686 * x13687;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13688);
          reg = x13688;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13689 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13689 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13690 = x99 - x13686;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13691 = x13689 * x13690;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13691 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/components/mux.h":37:25))
    auto x13692 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13692 != Fp::invalid());
    if (x13692 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13693 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x13693 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x13694 = x603 + x85;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x13695 = Fp(x13694.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13695);
          reg = x13695;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x13696 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x13696 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x13697 = x13694 - x13696;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x13698 = x13697 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x13699 = Fp(x13698.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13699);
          reg = x13699;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x13700 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x13700 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x13701 = x13698 - x13700;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x13702 = x13701 * x96;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x13703 = Fp(x13702.asUInt32() & x98.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13703);
          reg = x13703;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x13704 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x13704 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x13705 = x13702 - x13704;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x13706 = x13705 * x96;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x13707 = Fp(x13706.asUInt32() & x84.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13707);
          reg = x13707;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13708 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x13708 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x13709 = x13706 - x13708;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x13710 = x13709 * x83;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13710);
        reg = x13710;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13711 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x13711 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x13712 = x102 - x13711;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x13713 = x13711 * x13712;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13713);
        reg = x13713;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x13714 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x13714 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x13715 = x99 - x13711;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x13716 = x13714 * x13715;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x13716 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x603;
      host(ctx, "log", "  PageFault: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
      // loc("Top/Code/OneHot/Reg4"("cirgen/circuit/rv32im/page_fault.cpp":84:67))
      auto x13717 = args[0][5 * steps + ((cycle - 1) & mask)];
      assert(x13717 != Fp::invalid());
      if (x13717 != 0) {
        // loc("Top/Mux/4/OneHot/Reg13"("cirgen/circuit/rv32im/page_fault.cpp":86:79))
        auto x13718 = args[2][107 * steps + ((cycle - 1) & mask)];
        assert(x13718 != Fp::invalid());
        if (x13718 != 0) {
          // loc("Top/Mux/4/Mux/13/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13719 = args[2][118 * steps + ((cycle - 1) & mask)];
          assert(x13719 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:23)
          auto x13720 = x102 - x13719;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:7)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13720);
            reg = x13720;
          }
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":91:27)
        auto x13721 = x102 - x13718;
        if (x13721 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":91:31)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":93:20)
      auto x13722 = x102 - x13717;
      if (x13722 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":93:24)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13723 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13723 != Fp::invalid());
      if (x13723 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg3"("cirgen/circuit/rv32im/page_fault.cpp":96:44))
        auto x13724 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x13724 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":96:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13724);
          reg = x13724;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":99:20)
      auto x13725 = x102 - x13723;
      if (x13725 != 0) {
        {
          host_args.at(0) = x603;
          host(ctx, "pageRead", "", host_args.data(), 1, host_outs.data(), 2);
          auto x13726 = host_outs.at(0);
          auto x13727 = host_outs.at(1);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":102:7)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13726);
            reg = x13726;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13727);
            reg = x13727;
          }
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
      auto x13728 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x13728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":109:20)
      auto x13729 = x13728 - x6;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13730 = (x13729 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13730);
          reg = x13730;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13731 = inv(x13729);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13731);
          reg = x13731;
        }
      }
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13732 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13732 != Fp::invalid());
      if (x13732 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x13729 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x13733 = x102 - x13732;
      if (x13733 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13734 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13734 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13735 = x13729 * x13734;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13736 = x13735 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x13736 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x13732 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":112:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
      }
      if (x13733 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":115:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":116:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
      if (x13725 != 0) {
        // loc("Top/Mux/4/Mux/13/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13737 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13737 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:38)
        auto x13738 = x102 - x13737;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:37)
        auto x13739 = x13738 * x18;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:22)
        auto x13740 = x13737 + x13739;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        auto x13741 = x13737 * x18;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:51)
        auto x13742 = x13738 * x5;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        auto x13743 = x13741 + x13742;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":130:17)
        auto x13744 = x13728 - x13740;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13745 = Fp(x13744.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13745);
            reg = x13745;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13746 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x13746 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13747 = x13744 - x13746;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13748 = x13747 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13749 = Fp(x13748.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13749);
            reg = x13749;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13750 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x13750 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13751 = x13748 - x13750;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13752 = x13751 * x96;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13752);
          reg = x13752;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x13753 = x13743 - x102;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x13754 = x13753 - x13728;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13755 = Fp(x13754.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13755);
            reg = x13755;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13756 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x13756 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13757 = x13754 - x13756;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13758 = x13757 * x96;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13759 = Fp(x13758.asUInt32() & x98.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13759);
            reg = x13759;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13760 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x13760 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13761 = x13758 - x13760;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13762 = x13761 * x96;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13762);
          reg = x13762;
        }
        if (x13737 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":134:7)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4);
            reg = x4;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          auto x13763 = x13728 * x29;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          auto x13764 = x13763 * x83;
          // loc("Top/Mux/4/Mux/13/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x13765 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13765 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
          auto x13766 = x13765 * x85;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
          auto x13767 = x13764 + x13766;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
          auto x13768 = x13767 * x85;
          host_args.at(0) = x13765;
          host_args.at(1) = x13728;
          host_args.at(2) = x13768;
          host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
          {
            host_args.at(0) = x13767;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13769 = host_outs.at(0);
            auto x13770 = host_outs.at(1);
            auto x13771 = host_outs.at(2);
            auto x13772 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13769);
              reg = x13769;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13770);
              reg = x13770;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13771);
              reg = x13771;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13772);
              reg = x13772;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13773 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x13773 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13774 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x13774 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13775 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13775 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13776 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13776 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13767);
            reg = x13767;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13693);
            reg = x13693;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13773);
            reg = x13773;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13774);
            reg = x13774;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13775);
            reg = x13775;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13776);
            reg = x13776;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x13777 = x13767 + x102;
          {
            host_args.at(0) = x13777;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13778 = host_outs.at(0);
            auto x13779 = host_outs.at(1);
            auto x13780 = host_outs.at(2);
            auto x13781 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][130 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13778);
              reg = x13778;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][131 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13779);
              reg = x13779;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][132 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13780);
              reg = x13780;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13781);
              reg = x13781;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13782 = args[2][130 * steps + ((cycle - 0) & mask)];
          assert(x13782 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13783 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x13783 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13784 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13784 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13785 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13785 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13777);
            reg = x13777;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13693);
            reg = x13693;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13782);
            reg = x13782;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13783);
            reg = x13783;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13784);
            reg = x13784;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13785);
            reg = x13785;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x13786 = x13767 + x99;
          {
            host_args.at(0) = x13786;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13787 = host_outs.at(0);
            auto x13788 = host_outs.at(1);
            auto x13789 = host_outs.at(2);
            auto x13790 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][137 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13787);
              reg = x13787;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][138 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13788);
              reg = x13788;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][139 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13789);
              reg = x13789;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][140 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13790);
              reg = x13790;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13791 = args[2][137 * steps + ((cycle - 0) & mask)];
          assert(x13791 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13792 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x13792 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13793 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x13793 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13794 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x13794 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13786);
            reg = x13786;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13693);
            reg = x13693;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13791);
            reg = x13791;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13792);
            reg = x13792;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13793);
            reg = x13793;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13794);
            reg = x13794;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x13795 = x13767 + x84;
          {
            host_args.at(0) = x13795;
            host_args.at(1) = x102;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x13796 = host_outs.at(0);
            auto x13797 = host_outs.at(1);
            auto x13798 = host_outs.at(2);
            auto x13799 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][144 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13796);
              reg = x13796;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][145 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13797);
              reg = x13797;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][146 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13798);
              reg = x13798;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][147 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13799);
              reg = x13799;
            }
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13800 = args[2][144 * steps + ((cycle - 0) & mask)];
          assert(x13800 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13801 = args[2][145 * steps + ((cycle - 0) & mask)];
          assert(x13801 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13802 = args[2][146 * steps + ((cycle - 0) & mask)];
          assert(x13802 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13803 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x13803 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":137:3)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13795);
            reg = x13795;
          }
          // loc("cirgen/components/ram.cpp":138:3)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13693);
            reg = x13693;
          }
          // loc("cirgen/components/ram.cpp":139:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13800);
            reg = x13800;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13801);
            reg = x13801;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13802);
            reg = x13802;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13803);
            reg = x13803;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":136:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        if (x13738 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          auto x13804 = x13728 - x18;
          // loc("Top/Mux/4/Mux/13/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
          auto x13805 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x13805 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          auto x13806 = x13804 + x13805;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:40)
          auto x13807 = x13806 * x77;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
          auto x13808 = x13807 + x3;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":142:7)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13808);
            reg = x13808;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":143:7)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2);
            reg = x2;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":147:7)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":148:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x76);
            reg = x76;
          }
        }
      }
      if (x13723 != 0) {
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("Top/Mux/4/Mux/13/Reg6"("cirgen/circuit/rv32im/page_fault.cpp":156:40))
        auto x13809 = args[2][117 * steps + ((cycle - 1) & mask)];
        assert(x13809 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:40)
        auto x13810 = x13809 - x102;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13810);
          reg = x13810;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x13811 = x13728 * x29;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x13812 = x13811 * x83;
        // loc("Top/Mux/4/Mux/13/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13813 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13813 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
        auto x13814 = x13813 * x85;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
        auto x13815 = x13812 + x13814;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
        auto x13816 = x13815 * x85;
        host_args.at(0) = x13813;
        host_args.at(1) = x13728;
        host_args.at(2) = x13816;
        host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
        {
          host_args.at(0) = x13815;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13817 = host_outs.at(0);
          auto x13818 = host_outs.at(1);
          auto x13819 = host_outs.at(2);
          auto x13820 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13817);
            reg = x13817;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13818);
            reg = x13818;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13819);
            reg = x13819;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13820);
            reg = x13820;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13821 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13821 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13822 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13822 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13823 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13823 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13824 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13824 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13815);
          reg = x13815;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13693);
          reg = x13693;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13821);
          reg = x13821;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13822);
          reg = x13822;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13823);
          reg = x13823;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13824);
          reg = x13824;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x13825 = x13815 + x102;
        {
          host_args.at(0) = x13825;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13826 = host_outs.at(0);
          auto x13827 = host_outs.at(1);
          auto x13828 = host_outs.at(2);
          auto x13829 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13826);
            reg = x13826;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13827);
            reg = x13827;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13828);
            reg = x13828;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13829);
            reg = x13829;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13830 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13830 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13831 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13831 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13832 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13832 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13833 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13833 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13825);
          reg = x13825;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13693);
          reg = x13693;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13830);
          reg = x13830;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13831);
          reg = x13831;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13832);
          reg = x13832;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13833);
          reg = x13833;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x13834 = x13815 + x99;
        {
          host_args.at(0) = x13834;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13835 = host_outs.at(0);
          auto x13836 = host_outs.at(1);
          auto x13837 = host_outs.at(2);
          auto x13838 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13835);
            reg = x13835;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13836);
            reg = x13836;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13837);
            reg = x13837;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13838);
            reg = x13838;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13839 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13839 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13840 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13840 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13841 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13841 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13842 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13842 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13834);
          reg = x13834;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13693);
          reg = x13693;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13839);
          reg = x13839;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13840);
          reg = x13840;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13841);
          reg = x13841;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13842);
          reg = x13842;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x13843 = x13815 + x84;
        {
          host_args.at(0) = x13843;
          host_args.at(1) = x102;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13844 = host_outs.at(0);
          auto x13845 = host_outs.at(1);
          auto x13846 = host_outs.at(2);
          auto x13847 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13844);
            reg = x13844;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13845);
            reg = x13845;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13846);
            reg = x13846;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13847);
            reg = x13847;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13848 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x13848 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13849 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x13849 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13850 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x13850 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13851 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x13851 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":137:3)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13843);
          reg = x13843;
        }
        // loc("cirgen/components/ram.cpp":138:3)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13693);
          reg = x13693;
        }
        // loc("cirgen/components/ram.cpp":139:3)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13848);
          reg = x13848;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13849);
          reg = x13849;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13850);
          reg = x13850;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13851);
          reg = x13851;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg6"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13852 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13852 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13853 = (x13852 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13853);
          reg = x13853;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13854 = inv(x13852);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13854);
          reg = x13854;
        }
      }
      // loc("Top/Mux/4/Mux/13/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13855 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13855 != Fp::invalid());
      if (x13855 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x13852 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x13856 = x102 - x13855;
      if (x13856 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
        auto x13857 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13857 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13858 = x13852 * x13857;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13859 = x13858 - x102;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x13859 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x13723 != 0) {
        if (x13855 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":163:31)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x82);
            reg = x82;
          }
        }
        if (x13856 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":164:35)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
      }
    }
  }
  // loc("Top/Code/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
  auto x13860 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x13860 != Fp::invalid());
  if (x13860 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x13861 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13861 != Fp::invalid());
    host_args.at(0) = x13861;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13862 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x13862 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13863 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x13863 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13864 = x13863 * x99;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13865 = x13862 + x13864;
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13866 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x13866 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13867 = x13866 * x84;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13868 = x13865 + x13867;
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13869 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x13869 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13870 = x13869 * x85;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13871 = x13868 + x13870;
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13872 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x13872 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13873 = x13872 * x80;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13874 = x13871 + x13873;
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13875 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x13875 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13876 = x13875 * x79;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13877 = x13874 + x13876;
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13878 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x13878 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13879 = x13878 * x78;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13880 = x13877 + x13879;
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13881 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x13881 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13882 = x13881 * x77;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13883 = x13880 + x13882;
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13884 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x13884 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13885 = x13884 * x76;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13886 = x13883 + x13885;
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13887 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x13887 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13888 = x13887 * x75;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13889 = x13886 + x13888;
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13890 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x13890 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13891 = x13890 * x74;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13892 = x13889 + x13891;
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13893 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x13893 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13894 = x13893 * x73;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13895 = x13892 + x13894;
    // loc("Top/Mux/4/OneHot/Reg13"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13896 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x13896 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13897 = x13896 * x72;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13898 = x13895 + x13897;
    // loc("cirgen/circuit/rv32im/top.cpp":49:38)
    auto x13899 = x13898 - x77;
    // loc("cirgen/circuit/rv32im/top.cpp":49:38)
    if (x13899 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:49");
    // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13900 = args[2][177 * steps + ((cycle - 1) & mask)];
    assert(x13900 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13901 = args[2][178 * steps + ((cycle - 1) & mask)];
    assert(x13901 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13902 = x13901 * x99;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13903 = x13900 + x13902;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13904 = args[2][179 * steps + ((cycle - 1) & mask)];
    assert(x13904 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13905 = x13904 * x84;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13906 = x13903 + x13905;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":111:61))
    auto x13907 = args[2][180 * steps + ((cycle - 1) & mask)];
    assert(x13907 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13908 = x13907 * x85;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13909 = x13906 + x13908;
    // loc("cirgen/circuit/rv32im/top.cpp":51:39)
    if (x13909 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:51");
  }
  // loc("Top/Code/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
  auto x13910 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x13910 != Fp::invalid());
  if (x13910 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x13911 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13911 != Fp::invalid());
    host_args.at(0) = x13911;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":72:27))
  auto x13912 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x13912 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13913 = x13912 + x103;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13914 = x13913 + x428;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13915 = x13914 + x481;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13916 = x13915 + x589;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13917 = x13916 + x13860;
  // loc("cirgen/circuit/rv32im/top.cpp":72:16)
  auto x13918 = x13917 + x13910;
  if (x589 != 0) {
    // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/top.cpp":80:19))
    auto x13919 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13919 != Fp::invalid());
    if (x13919 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":83:20))
      auto x13920 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13920 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":84:7)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13920);
        reg = x13920;
      }
    }
    // loc("cirgen/circuit/rv32im/top.cpp":86:19)
    auto x13921 = x102 - x13919;
    if (x13921 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":86:23)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":88:23)
  auto x13922 = x13918 - x589;
  if (x13922 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":88:27)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x101);
      reg = x101;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":111:61))
  auto x13923 = args[2][9 * steps + ((cycle - 0) & mask)];
  assert(x13923 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":89:10)
  auto x13924 = x102 - x13923;
  if (x428 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  if (x481 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  if (x589 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13925 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13925 != Fp::invalid());
    if (x13925 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13926 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13926 != Fp::invalid());
    if (x13926 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13927 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13927 != Fp::invalid());
    if (x13927 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13928 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13928 != Fp::invalid());
    if (x13928 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13929 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13929 != Fp::invalid());
    if (x13929 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x102);
          reg = x102;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13930 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13930 != Fp::invalid());
    if (x13930 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13931 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x13931 != Fp::invalid());
    if (x13931 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13932 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x13932 != Fp::invalid());
    if (x13932 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13933 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13933 != Fp::invalid());
    if (x13933 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13934 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13934 != Fp::invalid());
      if (x13934 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13935 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13935 != Fp::invalid());
      if (x13935 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13936 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13936 != Fp::invalid());
      if (x13936 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13937 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13937 != Fp::invalid());
      if (x13937 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13938 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x13938 != Fp::invalid());
      if (x13938 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13939 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13939 != Fp::invalid());
    if (x13939 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13940 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13940 != Fp::invalid());
    if (x13940 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13941 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13941 != Fp::invalid());
    if (x13941 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13942 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13942 != Fp::invalid());
    if (x13942 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13943 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13943 != Fp::invalid());
    if (x13943 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x101);
          reg = x101;
        }
      }
    }
  }
  if (x13860 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x101);
        reg = x101;
      }
    }
  }
  if (x428 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13944 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x13944 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13945 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x13945 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13946 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x13946 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13947 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x13947 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13948 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x13948 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13949 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x13949 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13950 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x13950 != Fp::invalid());
      host_args.at(0) = x13944;
      host_args.at(1) = x13945;
      host_args.at(2) = x13946;
      host_args.at(3) = x13947;
      host_args.at(4) = x13948;
      host_args.at(5) = x13949;
      host_args.at(6) = x13950;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13951 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x13951 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13952 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x13952 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13953 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x13953 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13954 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x13954 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13955 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x13955 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13956 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x13956 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13957 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x13957 != Fp::invalid());
      host_args.at(0) = x13951;
      host_args.at(1) = x13952;
      host_args.at(2) = x13953;
      host_args.at(3) = x13954;
      host_args.at(4) = x13955;
      host_args.at(5) = x13956;
      host_args.at(6) = x13957;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13958 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x13958 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13959 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x13959 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13960 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x13960 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13961 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x13961 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13962 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x13962 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13963 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x13963 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13964 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x13964 != Fp::invalid());
      host_args.at(0) = x13958;
      host_args.at(1) = x13959;
      host_args.at(2) = x13960;
      host_args.at(3) = x13961;
      host_args.at(4) = x13962;
      host_args.at(5) = x13963;
      host_args.at(6) = x13964;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x481 != 0) {
    {
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13965 = args[2][94 * steps + ((cycle - 0) & mask)];
      assert(x13965 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13966 = args[2][95 * steps + ((cycle - 0) & mask)];
      assert(x13966 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13967 = args[2][96 * steps + ((cycle - 0) & mask)];
      assert(x13967 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13968 = args[2][97 * steps + ((cycle - 0) & mask)];
      assert(x13968 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13969 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x13969 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13970 = args[2][99 * steps + ((cycle - 0) & mask)];
      assert(x13970 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13971 = args[2][100 * steps + ((cycle - 0) & mask)];
      assert(x13971 != Fp::invalid());
      host_args.at(0) = x13965;
      host_args.at(1) = x13966;
      host_args.at(2) = x13967;
      host_args.at(3) = x13968;
      host_args.at(4) = x13969;
      host_args.at(5) = x13970;
      host_args.at(6) = x13971;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13972 = args[2][101 * steps + ((cycle - 0) & mask)];
      assert(x13972 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13973 = args[2][102 * steps + ((cycle - 0) & mask)];
      assert(x13973 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13974 = args[2][103 * steps + ((cycle - 0) & mask)];
      assert(x13974 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13975 = args[2][104 * steps + ((cycle - 0) & mask)];
      assert(x13975 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13976 = args[2][105 * steps + ((cycle - 0) & mask)];
      assert(x13976 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13977 = args[2][106 * steps + ((cycle - 0) & mask)];
      assert(x13977 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13978 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x13978 != Fp::invalid());
      host_args.at(0) = x13972;
      host_args.at(1) = x13973;
      host_args.at(2) = x13974;
      host_args.at(3) = x13975;
      host_args.at(4) = x13976;
      host_args.at(5) = x13977;
      host_args.at(6) = x13978;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13979 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13979 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13980 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x13980 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13981 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x13981 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13982 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x13982 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13983 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x13983 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13984 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x13984 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13985 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13985 != Fp::invalid());
      host_args.at(0) = x13979;
      host_args.at(1) = x13980;
      host_args.at(2) = x13981;
      host_args.at(3) = x13982;
      host_args.at(4) = x13983;
      host_args.at(5) = x13984;
      host_args.at(6) = x13985;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13986 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13986 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13987 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13987 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13988 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13988 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13989 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13989 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13990 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13990 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13991 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13991 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13992 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13992 != Fp::invalid());
      host_args.at(0) = x13986;
      host_args.at(1) = x13987;
      host_args.at(2) = x13988;
      host_args.at(3) = x13989;
      host_args.at(4) = x13990;
      host_args.at(5) = x13991;
      host_args.at(6) = x13992;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13993 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13993 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13994 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13994 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13995 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13995 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13996 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13996 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13997 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13997 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13998 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13998 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13999 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13999 != Fp::invalid());
      host_args.at(0) = x13993;
      host_args.at(1) = x13994;
      host_args.at(2) = x13995;
      host_args.at(3) = x13996;
      host_args.at(4) = x13997;
      host_args.at(5) = x13998;
      host_args.at(6) = x13999;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14000 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x14000 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14001 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x14001 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14002 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x14002 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14003 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x14003 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14004 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x14004 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14005 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x14005 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement5/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14006 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x14006 != Fp::invalid());
      host_args.at(0) = x14000;
      host_args.at(1) = x14001;
      host_args.at(2) = x14002;
      host_args.at(3) = x14003;
      host_args.at(4) = x14004;
      host_args.at(5) = x14005;
      host_args.at(6) = x14006;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14007 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x14007 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14008 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x14008 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14009 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x14009 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14010 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x14010 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14011 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x14011 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14012 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x14012 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement6/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14013 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x14013 != Fp::invalid());
      host_args.at(0) = x14007;
      host_args.at(1) = x14008;
      host_args.at(2) = x14009;
      host_args.at(3) = x14010;
      host_args.at(4) = x14011;
      host_args.at(5) = x14012;
      host_args.at(6) = x14013;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14014 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x14014 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14015 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x14015 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14016 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x14016 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14017 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x14017 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14018 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x14018 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14019 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x14019 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement7/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x14020 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x14020 != Fp::invalid());
      host_args.at(0) = x14014;
      host_args.at(1) = x14015;
      host_args.at(2) = x14016;
      host_args.at(3) = x14017;
      host_args.at(4) = x14018;
      host_args.at(5) = x14019;
      host_args.at(6) = x14020;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x589 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14021 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x14021 != Fp::invalid());
    if (x14021 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14022 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14022 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14023 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14023 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14024 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14024 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14025 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14025 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14026 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14026 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14027 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14027 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14028 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14028 != Fp::invalid());
        host_args.at(0) = x14022;
        host_args.at(1) = x14023;
        host_args.at(2) = x14024;
        host_args.at(3) = x14025;
        host_args.at(4) = x14026;
        host_args.at(5) = x14027;
        host_args.at(6) = x14028;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14029 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14029 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14030 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14030 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14031 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14031 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14032 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14032 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14033 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14033 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14034 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14034 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14035 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14035 != Fp::invalid());
        host_args.at(0) = x14029;
        host_args.at(1) = x14030;
        host_args.at(2) = x14031;
        host_args.at(3) = x14032;
        host_args.at(4) = x14033;
        host_args.at(5) = x14034;
        host_args.at(6) = x14035;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14036 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14036 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14037 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14037 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14038 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14038 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14039 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14039 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14040 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14040 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14041 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14041 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14042 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14042 != Fp::invalid());
        host_args.at(0) = x14036;
        host_args.at(1) = x14037;
        host_args.at(2) = x14038;
        host_args.at(3) = x14039;
        host_args.at(4) = x14040;
        host_args.at(5) = x14041;
        host_args.at(6) = x14042;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14043 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14043 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14044 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14044 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14045 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14045 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14046 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14046 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14047 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14047 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14048 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14048 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14049 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14049 != Fp::invalid());
        host_args.at(0) = x14043;
        host_args.at(1) = x14044;
        host_args.at(2) = x14045;
        host_args.at(3) = x14046;
        host_args.at(4) = x14047;
        host_args.at(5) = x14048;
        host_args.at(6) = x14049;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14050 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x14050 != Fp::invalid());
    if (x14050 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14051 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14051 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14052 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14052 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14053 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14054 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14055 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14055 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14056 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14056 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14057 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14057 != Fp::invalid());
        host_args.at(0) = x14051;
        host_args.at(1) = x14052;
        host_args.at(2) = x14053;
        host_args.at(3) = x14054;
        host_args.at(4) = x14055;
        host_args.at(5) = x14056;
        host_args.at(6) = x14057;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14058 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14058 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14059 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14059 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14060 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14060 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14061 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14061 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14062 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14062 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14063 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14064 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14064 != Fp::invalid());
        host_args.at(0) = x14058;
        host_args.at(1) = x14059;
        host_args.at(2) = x14060;
        host_args.at(3) = x14061;
        host_args.at(4) = x14062;
        host_args.at(5) = x14063;
        host_args.at(6) = x14064;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14065 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14066 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14067 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14067 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14068 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14069 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14070 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14071 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14071 != Fp::invalid());
        host_args.at(0) = x14065;
        host_args.at(1) = x14066;
        host_args.at(2) = x14067;
        host_args.at(3) = x14068;
        host_args.at(4) = x14069;
        host_args.at(5) = x14070;
        host_args.at(6) = x14071;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14072 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14073 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14074 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14074 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14075 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14075 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14076 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14077 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14078 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14078 != Fp::invalid());
        host_args.at(0) = x14072;
        host_args.at(1) = x14073;
        host_args.at(2) = x14074;
        host_args.at(3) = x14075;
        host_args.at(4) = x14076;
        host_args.at(5) = x14077;
        host_args.at(6) = x14078;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14079 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x14079 != Fp::invalid());
    if (x14079 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14080 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14080 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14081 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14081 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14082 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14082 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14083 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14083 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14084 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14084 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14085 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14085 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14086 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14086 != Fp::invalid());
        host_args.at(0) = x14080;
        host_args.at(1) = x14081;
        host_args.at(2) = x14082;
        host_args.at(3) = x14083;
        host_args.at(4) = x14084;
        host_args.at(5) = x14085;
        host_args.at(6) = x14086;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14087 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14087 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14088 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14088 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14089 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14089 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14090 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14090 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14091 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14091 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14092 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14092 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14093 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14093 != Fp::invalid());
        host_args.at(0) = x14087;
        host_args.at(1) = x14088;
        host_args.at(2) = x14089;
        host_args.at(3) = x14090;
        host_args.at(4) = x14091;
        host_args.at(5) = x14092;
        host_args.at(6) = x14093;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14094 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14094 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14095 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14095 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14096 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14096 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14097 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14097 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14098 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14098 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14099 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14099 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14100 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14100 != Fp::invalid());
        host_args.at(0) = x14094;
        host_args.at(1) = x14095;
        host_args.at(2) = x14096;
        host_args.at(3) = x14097;
        host_args.at(4) = x14098;
        host_args.at(5) = x14099;
        host_args.at(6) = x14100;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14101 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14101 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14102 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14102 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14103 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14103 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14104 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14104 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14105 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14105 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14106 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14106 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14107 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14107 != Fp::invalid());
        host_args.at(0) = x14101;
        host_args.at(1) = x14102;
        host_args.at(2) = x14103;
        host_args.at(3) = x14104;
        host_args.at(4) = x14105;
        host_args.at(5) = x14106;
        host_args.at(6) = x14107;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14108 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x14108 != Fp::invalid());
    if (x14108 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14109 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14109 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14110 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14110 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14111 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14111 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14112 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14112 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14113 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14113 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14114 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14114 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14115 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14115 != Fp::invalid());
        host_args.at(0) = x14109;
        host_args.at(1) = x14110;
        host_args.at(2) = x14111;
        host_args.at(3) = x14112;
        host_args.at(4) = x14113;
        host_args.at(5) = x14114;
        host_args.at(6) = x14115;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14116 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14116 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14117 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14117 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14118 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14118 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14119 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14119 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14120 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14120 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14121 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14121 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14122 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14122 != Fp::invalid());
        host_args.at(0) = x14116;
        host_args.at(1) = x14117;
        host_args.at(2) = x14118;
        host_args.at(3) = x14119;
        host_args.at(4) = x14120;
        host_args.at(5) = x14121;
        host_args.at(6) = x14122;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14123 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14123 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14124 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14124 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14125 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14125 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14126 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14126 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14127 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14127 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14128 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14128 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14129 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14129 != Fp::invalid());
        host_args.at(0) = x14123;
        host_args.at(1) = x14124;
        host_args.at(2) = x14125;
        host_args.at(3) = x14126;
        host_args.at(4) = x14127;
        host_args.at(5) = x14128;
        host_args.at(6) = x14129;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14130 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14130 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14131 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14131 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14132 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14132 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14133 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14133 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14134 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14134 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14135 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14135 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14136 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14136 != Fp::invalid());
        host_args.at(0) = x14130;
        host_args.at(1) = x14131;
        host_args.at(2) = x14132;
        host_args.at(3) = x14133;
        host_args.at(4) = x14134;
        host_args.at(5) = x14135;
        host_args.at(6) = x14136;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14137 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14137 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14138 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14138 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14139 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14139 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14140 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14140 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14141 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14141 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14142 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14142 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14143 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14143 != Fp::invalid());
        host_args.at(0) = x14137;
        host_args.at(1) = x14138;
        host_args.at(2) = x14139;
        host_args.at(3) = x14140;
        host_args.at(4) = x14141;
        host_args.at(5) = x14142;
        host_args.at(6) = x14143;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14144 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x14144 != Fp::invalid());
    if (x14144 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14145 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14145 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14146 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14146 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14147 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14147 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14148 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14148 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14149 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14149 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14150 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14150 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14151 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14151 != Fp::invalid());
        host_args.at(0) = x14145;
        host_args.at(1) = x14146;
        host_args.at(2) = x14147;
        host_args.at(3) = x14148;
        host_args.at(4) = x14149;
        host_args.at(5) = x14150;
        host_args.at(6) = x14151;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14152 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14152 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14153 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14153 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14154 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14154 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14155 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14155 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14156 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14156 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14157 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14157 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14158 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14158 != Fp::invalid());
        host_args.at(0) = x14152;
        host_args.at(1) = x14153;
        host_args.at(2) = x14154;
        host_args.at(3) = x14155;
        host_args.at(4) = x14156;
        host_args.at(5) = x14157;
        host_args.at(6) = x14158;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14159 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14159 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14160 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14160 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14161 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14161 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14162 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14162 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14163 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14163 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14164 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14164 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14165 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14165 != Fp::invalid());
        host_args.at(0) = x14159;
        host_args.at(1) = x14160;
        host_args.at(2) = x14161;
        host_args.at(3) = x14162;
        host_args.at(4) = x14163;
        host_args.at(5) = x14164;
        host_args.at(6) = x14165;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14166 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14166 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14167 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14167 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14168 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14168 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14169 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14169 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14170 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14170 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14171 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14171 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14172 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14172 != Fp::invalid());
        host_args.at(0) = x14166;
        host_args.at(1) = x14167;
        host_args.at(2) = x14168;
        host_args.at(3) = x14169;
        host_args.at(4) = x14170;
        host_args.at(5) = x14171;
        host_args.at(6) = x14172;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14173 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14173 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14174 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14174 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14175 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14175 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14176 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14176 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14177 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14177 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14178 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14178 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14179 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14179 != Fp::invalid());
        host_args.at(0) = x14173;
        host_args.at(1) = x14174;
        host_args.at(2) = x14175;
        host_args.at(3) = x14176;
        host_args.at(4) = x14177;
        host_args.at(5) = x14178;
        host_args.at(6) = x14179;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14180 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x14180 != Fp::invalid());
    if (x14180 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14181 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14181 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14182 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14182 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14183 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14183 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14184 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14184 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14185 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14185 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14186 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14186 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14187 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14187 != Fp::invalid());
        host_args.at(0) = x14181;
        host_args.at(1) = x14182;
        host_args.at(2) = x14183;
        host_args.at(3) = x14184;
        host_args.at(4) = x14185;
        host_args.at(5) = x14186;
        host_args.at(6) = x14187;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14188 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14188 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14189 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14189 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14190 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14190 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14191 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14191 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14192 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14192 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14193 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14193 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14194 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14194 != Fp::invalid());
        host_args.at(0) = x14188;
        host_args.at(1) = x14189;
        host_args.at(2) = x14190;
        host_args.at(3) = x14191;
        host_args.at(4) = x14192;
        host_args.at(5) = x14193;
        host_args.at(6) = x14194;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14195 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14195 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14196 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14196 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14197 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14197 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14198 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14198 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14199 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14199 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14200 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14200 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14201 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14201 != Fp::invalid());
        host_args.at(0) = x14195;
        host_args.at(1) = x14196;
        host_args.at(2) = x14197;
        host_args.at(3) = x14198;
        host_args.at(4) = x14199;
        host_args.at(5) = x14200;
        host_args.at(6) = x14201;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14202 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14202 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14203 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14203 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14204 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14204 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14205 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14205 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14206 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14206 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14207 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14207 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14208 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14208 != Fp::invalid());
        host_args.at(0) = x14202;
        host_args.at(1) = x14203;
        host_args.at(2) = x14204;
        host_args.at(3) = x14205;
        host_args.at(4) = x14206;
        host_args.at(5) = x14207;
        host_args.at(6) = x14208;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14209 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x14209 != Fp::invalid());
    if (x14209 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14210 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14210 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14211 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14211 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14212 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14212 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14213 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14213 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14214 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14214 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14215 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14215 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14216 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14216 != Fp::invalid());
        host_args.at(0) = x14210;
        host_args.at(1) = x14211;
        host_args.at(2) = x14212;
        host_args.at(3) = x14213;
        host_args.at(4) = x14214;
        host_args.at(5) = x14215;
        host_args.at(6) = x14216;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14217 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14217 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14218 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14218 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14219 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14219 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14220 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14220 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14221 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14221 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14222 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14222 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14223 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14223 != Fp::invalid());
        host_args.at(0) = x14217;
        host_args.at(1) = x14218;
        host_args.at(2) = x14219;
        host_args.at(3) = x14220;
        host_args.at(4) = x14221;
        host_args.at(5) = x14222;
        host_args.at(6) = x14223;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14224 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14224 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14225 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14225 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14226 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14226 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14227 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14227 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14228 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14228 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14229 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14229 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14230 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14230 != Fp::invalid());
        host_args.at(0) = x14224;
        host_args.at(1) = x14225;
        host_args.at(2) = x14226;
        host_args.at(3) = x14227;
        host_args.at(4) = x14228;
        host_args.at(5) = x14229;
        host_args.at(6) = x14230;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14231 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14231 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14232 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14232 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14233 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14233 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14234 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14234 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14235 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14235 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14236 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14236 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14237 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14237 != Fp::invalid());
        host_args.at(0) = x14231;
        host_args.at(1) = x14232;
        host_args.at(2) = x14233;
        host_args.at(3) = x14234;
        host_args.at(4) = x14235;
        host_args.at(5) = x14236;
        host_args.at(6) = x14237;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14238 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14238 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14239 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14239 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14240 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14240 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14241 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14241 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14242 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14242 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14243 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14243 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14244 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14244 != Fp::invalid());
        host_args.at(0) = x14238;
        host_args.at(1) = x14239;
        host_args.at(2) = x14240;
        host_args.at(3) = x14241;
        host_args.at(4) = x14242;
        host_args.at(5) = x14243;
        host_args.at(6) = x14244;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14245 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x14245 != Fp::invalid());
    if (x14245 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14246 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14246 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14247 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14247 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14248 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14248 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14249 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14249 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14250 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14250 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14251 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14251 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14252 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14252 != Fp::invalid());
        host_args.at(0) = x14246;
        host_args.at(1) = x14247;
        host_args.at(2) = x14248;
        host_args.at(3) = x14249;
        host_args.at(4) = x14250;
        host_args.at(5) = x14251;
        host_args.at(6) = x14252;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14253 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14253 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14254 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14254 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14255 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14256 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14256 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14257 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14257 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14258 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14258 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14259 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14259 != Fp::invalid());
        host_args.at(0) = x14253;
        host_args.at(1) = x14254;
        host_args.at(2) = x14255;
        host_args.at(3) = x14256;
        host_args.at(4) = x14257;
        host_args.at(5) = x14258;
        host_args.at(6) = x14259;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14260 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x14260 != Fp::invalid());
    if (x14260 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14261 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14261 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14262 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14262 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14263 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14263 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14264 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14264 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14265 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14265 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14266 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14266 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14267 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14267 != Fp::invalid());
        host_args.at(0) = x14261;
        host_args.at(1) = x14262;
        host_args.at(2) = x14263;
        host_args.at(3) = x14264;
        host_args.at(4) = x14265;
        host_args.at(5) = x14266;
        host_args.at(6) = x14267;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14268 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14268 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14269 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14269 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14270 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14270 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14271 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14271 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14272 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14272 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14273 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14273 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14274 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14274 != Fp::invalid());
        host_args.at(0) = x14268;
        host_args.at(1) = x14269;
        host_args.at(2) = x14270;
        host_args.at(3) = x14271;
        host_args.at(4) = x14272;
        host_args.at(5) = x14273;
        host_args.at(6) = x14274;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14275 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x14275 != Fp::invalid());
    if (x14275 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14276 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14276 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14277 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14277 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14278 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14278 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14279 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14280 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14280 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14281 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14281 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14282 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14282 != Fp::invalid());
        host_args.at(0) = x14276;
        host_args.at(1) = x14277;
        host_args.at(2) = x14278;
        host_args.at(3) = x14279;
        host_args.at(4) = x14280;
        host_args.at(5) = x14281;
        host_args.at(6) = x14282;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14283 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14283 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14284 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14284 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14285 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14285 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14286 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14286 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14287 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14287 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14288 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14288 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14289 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14289 != Fp::invalid());
        host_args.at(0) = x14283;
        host_args.at(1) = x14284;
        host_args.at(2) = x14285;
        host_args.at(3) = x14286;
        host_args.at(4) = x14287;
        host_args.at(5) = x14288;
        host_args.at(6) = x14289;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14290 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x14290 != Fp::invalid());
    if (x14290 != 0) {
      {
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14291 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x14291 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14292 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x14292 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14293 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x14293 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14294 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x14294 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14295 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x14295 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14296 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x14296 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14297 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x14297 != Fp::invalid());
        host_args.at(0) = x14291;
        host_args.at(1) = x14292;
        host_args.at(2) = x14293;
        host_args.at(3) = x14294;
        host_args.at(4) = x14295;
        host_args.at(5) = x14296;
        host_args.at(6) = x14297;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14298 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x14298 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14299 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x14299 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14300 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x14300 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14301 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x14301 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14302 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x14302 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14303 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14303 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14304 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14304 != Fp::invalid());
        host_args.at(0) = x14298;
        host_args.at(1) = x14299;
        host_args.at(2) = x14300;
        host_args.at(3) = x14301;
        host_args.at(4) = x14302;
        host_args.at(5) = x14303;
        host_args.at(6) = x14304;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14305 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14306 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14306 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14307 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14307 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14308 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14308 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14309 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14309 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14310 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14310 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14311 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14311 != Fp::invalid());
        host_args.at(0) = x14305;
        host_args.at(1) = x14306;
        host_args.at(2) = x14307;
        host_args.at(3) = x14308;
        host_args.at(4) = x14309;
        host_args.at(5) = x14310;
        host_args.at(6) = x14311;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14312 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14313 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14314 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14314 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14315 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14315 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14316 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14316 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14317 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14317 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14318 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14318 != Fp::invalid());
        host_args.at(0) = x14312;
        host_args.at(1) = x14313;
        host_args.at(2) = x14314;
        host_args.at(3) = x14315;
        host_args.at(4) = x14316;
        host_args.at(5) = x14317;
        host_args.at(6) = x14318;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x14319 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x14319 != Fp::invalid());
    if (x14319 != 0) {
      {
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14320 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x14320 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14321 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x14321 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14322 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x14322 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14323 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x14323 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14324 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x14324 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14325 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x14325 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14326 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x14326 != Fp::invalid());
        host_args.at(0) = x14320;
        host_args.at(1) = x14321;
        host_args.at(2) = x14322;
        host_args.at(3) = x14323;
        host_args.at(4) = x14324;
        host_args.at(5) = x14325;
        host_args.at(6) = x14326;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14327 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x14327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14328 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x14328 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14329 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x14329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14330 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x14330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14331 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x14331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14332 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x14332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14333 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x14333 != Fp::invalid());
        host_args.at(0) = x14327;
        host_args.at(1) = x14328;
        host_args.at(2) = x14329;
        host_args.at(3) = x14330;
        host_args.at(4) = x14331;
        host_args.at(5) = x14332;
        host_args.at(6) = x14333;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14334 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x14334 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14335 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x14335 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14336 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x14336 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14337 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x14337 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14338 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x14338 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14339 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x14339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14340 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x14340 != Fp::invalid());
        host_args.at(0) = x14334;
        host_args.at(1) = x14335;
        host_args.at(2) = x14336;
        host_args.at(3) = x14337;
        host_args.at(4) = x14338;
        host_args.at(5) = x14339;
        host_args.at(6) = x14340;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14341 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x14341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14342 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x14342 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14343 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x14343 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14344 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x14344 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14345 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x14345 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14346 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x14346 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x14347 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x14347 != Fp::invalid());
        host_args.at(0) = x14341;
        host_args.at(1) = x14342;
        host_args.at(2) = x14343;
        host_args.at(3) = x14344;
        host_args.at(4) = x14345;
        host_args.at(5) = x14346;
        host_args.at(6) = x14347;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x13924;
}

} // namespace risc0::circuit::rv32im
// clang-format on
