// Copyright 2022 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/ffpu.cpp":45:20)
  Fp x0(943718400);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":41:25)
  Fp x1(268435454);
  // loc("cirgen/components/u32.cpp":50:26)
  Fp x2(2013265801);
  // loc("cirgen/components/u32.cpp":43:17)
  Fp x3(16711680);
  // loc("cirgen/components/u32.cpp":42:17)
  Fp x4(65280);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
  Fp x5(2013265910);
  // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
  Fp x6(50331840);
  // loc("cirgen/circuit/rv32im/sha.cpp":364:24)
  Fp x7(50331743);
  // loc("cirgen/circuit/rv32im/sha.cpp":319:18)
  Fp x8(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":290:24)
  Fp x9(50331695);
  // loc("cirgen/circuit/rv32im/sha.cpp":286:24)
  Fp x10(50331687);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x11(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x12(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x13(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x14(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x15(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x16(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x18(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x19(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x20(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x21(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x22(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x23(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x24(512);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x25(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x26(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":94:25)
  Fp x27(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":42:45)
  Fp x28(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":40:43)
  Fp x29(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":133:49)
  Fp x30(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":128:21)
  Fp x31(115);
  // loc("cirgen/components/u32.cpp":232:19)
  Fp x32(131070);
  // loc("cirgen/components/u32.cpp":228:19)
  Fp x33(131072);
  // loc("cirgen/components/u32.cpp":183:21)
  Fp x34(15);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x35(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x36(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
  Fp x37(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:79)
  Fp x38(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:56)
  Fp x39(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x40(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x41(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x42(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
  Fp x43(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
  Fp x44(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x45(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
  Fp x46(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
  Fp x47(51);
  // loc("cirgen/components/u32.cpp":59:36)
  Fp x48(1996488705);
  // loc("cirgen/components/u32.cpp":59:28)
  Fp x49(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x50(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x51(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x52(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x53(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x54(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x55(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x56(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x57(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x58(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x59(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x60(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x61(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x62(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x63(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x64(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x65(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x66(128);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x67(12);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x68(11);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x69(10);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x70(9);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x71(8);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x72(7);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x73(6);
  // loc("./cirgen/components/onehot.h":35:32)
  Fp x74(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x75(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":30:21)
  Fp x76(16777216);
  // loc("cirgen/circuit/rv32im/body.cpp":29:21)
  Fp x77(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":43:18)
  Fp x78(13);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x79(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x80(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x81(4);
  // loc("cirgen/components/bytes.cpp":83:30)
  Fp x82(2005401601);
  // loc("cirgen/components/bytes.cpp":83:30)
  Fp x83(256);
  // loc("cirgen/components/bytes.cpp":82:26)
  Fp x84(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x85(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x86(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x87(0);
  // loc("cirgen/circuit/rv32im/top.cpp":18:17)
  Fp x88(1);
  // loc("Top/Code/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
  auto x89 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x89 != Fp::invalid());
  if (x89 != 0) {
    // loc("Top/Code/OneHot/Reg1"("cirgen/circuit/rv32im/top.cpp":18:69))
    auto x90 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x90 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":18:17)
    auto x91 = x88 - x90;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x92 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x92 != Fp::invalid());
    if (x91 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
    // loc("cirgen/components/bytes.cpp":103:17)
    auto x93 = x88 - x91;
    if (x93 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x94 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x94 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x95 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x95 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x96 = x95 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x97 = (x96 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x98 = x88 - x97;
        if (x98 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x99 = x95 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x99);
            reg = x99;
          }
        }
        if (x97 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x100 = x94 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x100);
            reg = x100;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x101 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x101 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x102 = x101 - x94;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x103 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x103 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x104 = x103 - x95;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x105 = x102 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x106 = x102 * x105;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x106 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x107 = x104 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x108 = x102 * x107;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x108 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x109 = x104 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x110 = x105 * x109;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x110 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x111 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x111 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x112 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x112 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x113 = x112 - x86;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x114 = (x113 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x115 = x88 - x114;
      if (x115 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x111);
          reg = x111;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x116 = x112 + x85;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x116);
          reg = x116;
        }
      }
      if (x114 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x117 = x111 + x88;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x117);
          reg = x117;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x118 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x118 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x119 = x118 - x111;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement1/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x120 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x120 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x121 = x120 - x112;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x122 = x119 - x88;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x123 = x119 * x122;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x123 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x124 = x121 + x86;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x125 = x119 * x124;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x125 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x126 = x121 - x85;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x127 = x122 * x126;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x127 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x128 = x120 - x86;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x129 = (x128 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x130 = x88 - x129;
      if (x130 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x118);
          reg = x118;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x131 = x120 + x85;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x131);
          reg = x131;
        }
      }
      if (x129 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x132 = x118 + x88;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x132);
          reg = x132;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x133 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x133 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x134 = x133 - x118;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement2/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x135 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x135 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x136 = x135 - x120;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x137 = x134 - x88;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x138 = x134 * x137;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x138 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x139 = x136 + x86;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x140 = x134 * x139;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x140 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x141 = x136 - x85;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x142 = x137 * x141;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x142 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x143 = x135 - x86;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x144 = (x143 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x145 = x88 - x144;
      if (x145 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x133);
          reg = x133;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x146 = x135 + x85;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x146);
          reg = x146;
        }
      }
      if (x144 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x147 = x133 + x88;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x147);
          reg = x147;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x148 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x148 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x149 = x148 - x133;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement3/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x150 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x150 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x151 = x150 - x135;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x152 = x149 - x88;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x153 = x149 * x152;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x153 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x154 = x151 + x86;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x155 = x149 * x154;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x155 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x156 = x151 - x85;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x157 = x152 * x156;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x157 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x158 = x150 - x86;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x159 = (x158 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x160 = x88 - x159;
      if (x160 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x148);
          reg = x148;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x161 = x150 + x85;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x161);
          reg = x161;
        }
      }
      if (x159 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x162 = x148 + x88;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x162);
          reg = x162;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x163 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x163 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x164 = x163 - x148;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x165 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x165 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x166 = x165 - x150;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x167 = x164 - x88;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x168 = x164 * x167;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x168 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x169 = x166 + x86;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x170 = x164 * x169;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x170 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x171 = x166 - x85;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x172 = x167 * x171;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x172 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x173 = x165 - x86;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x174 = (x173 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x175 = x88 - x174;
      if (x175 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x163);
          reg = x163;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x176 = x165 + x85;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x176);
          reg = x176;
        }
      }
      if (x174 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x177 = x163 + x88;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x177);
          reg = x177;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x178 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x178 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x179 = x178 - x163;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x180 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x180 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x181 = x180 - x165;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x182 = x179 - x88;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x183 = x179 * x182;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x183 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x184 = x181 + x86;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x185 = x179 * x184;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x185 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x186 = x181 - x85;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x187 = x182 * x186;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x187 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x188 = x180 - x86;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x189 = (x188 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x190 = x88 - x189;
      if (x190 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x178);
          reg = x178;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x191 = x180 + x85;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x191);
          reg = x191;
        }
      }
      if (x189 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x192 = x178 + x88;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x192);
          reg = x192;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x193 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x193 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x194 = x193 - x178;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x195 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x195 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x196 = x195 - x180;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x197 = x194 - x88;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x198 = x194 * x197;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x198 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x199 = x196 + x86;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x200 = x194 * x199;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x200 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x201 = x196 - x85;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x202 = x197 * x201;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x202 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x203 = x195 - x86;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x204 = (x203 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x205 = x88 - x204;
      if (x205 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x193);
          reg = x193;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x206 = x195 + x85;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x206);
          reg = x206;
        }
      }
      if (x204 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x207 = x193 + x88;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x207);
          reg = x207;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x208 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x208 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x209 = x208 - x193;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x210 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x210 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x211 = x210 - x195;
    // loc("cirgen/components/bytes.cpp":46:19)
    auto x212 = x209 - x88;
    // loc("cirgen/components/bytes.cpp":46:7)
    auto x213 = x209 * x212;
    // loc("cirgen/components/bytes.cpp":46:7)
    if (x213 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
    // loc("cirgen/components/bytes.cpp":47:19)
    auto x214 = x211 + x86;
    // loc("cirgen/components/bytes.cpp":47:7)
    auto x215 = x209 * x214;
    // loc("cirgen/components/bytes.cpp":47:7)
    if (x215 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
    // loc("cirgen/components/bytes.cpp":48:25)
    auto x216 = x211 - x85;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x217 = x212 * x216;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x217 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    if (x92 != 0) {
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":112:7)
      {
        auto& reg = args[2][50 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/bytes.cpp":113:7)
      {
        auto& reg = args[2][51 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
    // loc("cirgen/components/bytes.cpp":116:16)
    auto x218 = x88 - x92;
    if (x218 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x219 = x210 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x220 = (x219 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x221 = x88 - x220;
        if (x221 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x208);
            reg = x208;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x222 = x210 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x222);
            reg = x222;
          }
        }
        if (x220 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x223 = x208 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x223);
            reg = x223;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x224 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x224 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x225 = x224 - x208;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x226 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x226 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x227 = x226 - x210;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x228 = x225 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x229 = x225 * x228;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x229 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x230 = x227 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x231 = x225 * x230;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x231 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x232 = x227 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x233 = x228 * x232;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x233 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x234 = x226 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x235 = (x234 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x236 = x88 - x235;
        if (x236 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x224);
            reg = x224;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x237 = x226 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x237);
            reg = x237;
          }
        }
        if (x235 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x238 = x224 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x238);
            reg = x238;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x239 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x239 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x240 = x239 - x224;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x241 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x241 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x242 = x241 - x226;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x243 = x240 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x244 = x240 * x243;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x244 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x245 = x242 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x246 = x240 * x245;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x246 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x247 = x242 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x248 = x243 * x247;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x248 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x249 = x241 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x250 = (x249 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x251 = x88 - x250;
        if (x251 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x239);
            reg = x239;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x252 = x241 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x252);
            reg = x252;
          }
        }
        if (x250 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x253 = x239 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x253);
            reg = x253;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x254 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x254 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x255 = x254 - x239;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x256 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x256 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x257 = x256 - x241;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x258 = x255 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x259 = x255 * x258;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x259 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x260 = x257 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x261 = x255 * x260;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x261 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x262 = x257 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x263 = x258 * x262;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x263 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x264 = x256 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x265 = (x264 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x266 = x88 - x265;
        if (x266 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x254);
            reg = x254;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x267 = x256 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x267);
            reg = x267;
          }
        }
        if (x265 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x268 = x254 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x268);
            reg = x268;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x269 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x269 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x270 = x269 - x254;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x271 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x271 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x272 = x271 - x256;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x273 = x270 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x274 = x270 * x273;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x274 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x275 = x272 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x276 = x270 * x275;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x276 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x277 = x272 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x278 = x273 * x277;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x278 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x279 = x271 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x280 = (x279 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x281 = x88 - x280;
        if (x281 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x269);
            reg = x269;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x282 = x271 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x282);
            reg = x282;
          }
        }
        if (x280 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x283 = x269 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x283);
            reg = x283;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x284 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x284 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x285 = x284 - x269;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x286 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x286 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x287 = x286 - x271;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x288 = x285 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x289 = x285 * x288;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x289 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x290 = x287 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x291 = x285 * x290;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x291 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x292 = x287 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x293 = x288 * x292;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x293 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x294 = x286 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x295 = (x294 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x296 = x88 - x295;
        if (x296 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x284);
            reg = x284;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x297 = x286 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x297);
            reg = x297;
          }
        }
        if (x295 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x298 = x284 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x298);
            reg = x298;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x299 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x299 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x300 = x299 - x284;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x301 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x301 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x302 = x301 - x286;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x303 = x300 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x304 = x300 * x303;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x304 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x305 = x302 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x306 = x300 * x305;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x306 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x307 = x302 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x308 = x303 * x307;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x308 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x309 = x301 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x310 = (x309 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x311 = x88 - x310;
        if (x311 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x299);
            reg = x299;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x312 = x301 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x312);
            reg = x312;
          }
        }
        if (x310 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x313 = x299 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x313);
            reg = x313;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x314 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x314 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x315 = x314 - x299;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x316 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x316 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x317 = x316 - x301;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x318 = x315 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x319 = x315 * x318;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x319 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x320 = x317 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x321 = x315 * x320;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x321 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x322 = x317 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x323 = x318 * x322;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x323 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x324 = x316 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x325 = (x324 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x326 = x88 - x325;
        if (x326 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x314);
            reg = x314;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x327 = x316 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x327);
            reg = x327;
          }
        }
        if (x325 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x328 = x314 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x328);
            reg = x328;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x329 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x329 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x330 = x329 - x314;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement15/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x331 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x331 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x332 = x331 - x316;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x333 = x330 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x334 = x330 * x333;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x334 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x335 = x332 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x336 = x330 * x335;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x336 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x337 = x332 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x338 = x333 * x337;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x338 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x339 = x331 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x340 = (x339 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x341 = x88 - x340;
        if (x341 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x329);
            reg = x329;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x342 = x331 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x342);
            reg = x342;
          }
        }
        if (x340 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x343 = x329 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x343);
            reg = x343;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x344 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x344 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x345 = x344 - x329;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement16/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x346 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x346 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x347 = x346 - x331;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x348 = x345 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x349 = x345 * x348;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x349 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x350 = x347 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x351 = x345 * x350;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x351 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x352 = x347 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x353 = x348 * x352;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x353 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x354 = x346 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x355 = (x354 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x356 = x88 - x355;
        if (x356 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x344);
            reg = x344;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x357 = x346 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x357);
            reg = x357;
          }
        }
        if (x355 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x358 = x344 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x358);
            reg = x358;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x359 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x359 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x360 = x359 - x344;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement17/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x361 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x361 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x362 = x361 - x346;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x363 = x360 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x364 = x360 * x363;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x364 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x365 = x362 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x366 = x360 * x365;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x366 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x367 = x362 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x368 = x363 * x367;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x368 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x369 = x361 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x370 = (x369 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x371 = x88 - x370;
        if (x371 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x359);
            reg = x359;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x372 = x361 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x372);
            reg = x372;
          }
        }
        if (x370 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x373 = x359 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x373);
            reg = x373;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x374 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x374 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x375 = x374 - x359;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement18/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x376 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x376 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x377 = x376 - x361;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x378 = x375 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x379 = x375 * x378;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x379 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x380 = x377 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x381 = x375 * x380;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x381 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x382 = x377 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x383 = x378 * x382;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x383 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x384 = x376 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x385 = (x384 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x386 = x88 - x385;
        if (x386 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x374);
            reg = x374;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x387 = x376 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x387);
            reg = x387;
          }
        }
        if (x385 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x388 = x374 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x388);
            reg = x388;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x389 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x389 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x390 = x389 - x374;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement19/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x391 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x391 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x392 = x391 - x376;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x393 = x390 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x394 = x390 * x393;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x394 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x395 = x392 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x396 = x390 * x395;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x396 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x397 = x392 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x398 = x393 * x397;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x398 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x399 = x391 - x86;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x400 = (x399 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x401 = x88 - x400;
        if (x401 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x389);
            reg = x389;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x402 = x391 + x85;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x402);
            reg = x402;
          }
        }
        if (x400 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x403 = x389 + x88;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x403);
            reg = x403;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x404 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x404 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x405 = x404 - x389;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement20/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x406 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x406 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x407 = x406 - x391;
      // loc("cirgen/components/bytes.cpp":46:19)
      auto x408 = x405 - x88;
      // loc("cirgen/components/bytes.cpp":46:7)
      auto x409 = x405 * x408;
      // loc("cirgen/components/bytes.cpp":46:7)
      if (x409 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:46");
      // loc("cirgen/components/bytes.cpp":47:19)
      auto x410 = x407 + x86;
      // loc("cirgen/components/bytes.cpp":47:7)
      auto x411 = x405 * x410;
      // loc("cirgen/components/bytes.cpp":47:7)
      if (x411 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:47");
      // loc("cirgen/components/bytes.cpp":48:25)
      auto x412 = x407 - x85;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x413 = x408 * x412;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x413 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    }
  }
  // loc("Top/Code/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
  auto x414 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x414 != Fp::invalid());
  if (x414 != 0) {
    // loc("Top/Code/Mux/2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x415 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x415 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x416 = Fp(x415.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x416);
        reg = x416;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x417 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x417 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x418 = x415 - x417;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x419 = x418 * x82;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x419);
      reg = x419;
    }
    // loc("Top/Code/Mux/2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x420 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x420 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x421 = Fp(x420.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x421);
        reg = x421;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x422 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x422 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x423 = x420 - x422;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x424 = x423 * x82;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x424);
      reg = x424;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x425 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x425 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x426 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x426 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x427 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x427 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x428 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x428 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x417);
      reg = x417;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x425);
      reg = x425;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x422);
      reg = x422;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x426);
      reg = x426;
    }
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x429 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x429 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x430 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x430 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x431 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x431 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x432 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x432 != Fp::invalid());
      host_args.at(0) = x428;
      host_args.at(1) = x429;
      host_args.at(2) = x430;
      host_args.at(3) = x431;
      host_args.at(4) = x432;
      host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x433 = args[2][58 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x434 = args[2][59 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x435 = args[2][60 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x436 = args[2][61 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":104:3)
    {
      auto& reg = args[2][55 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x428);
      reg = x428;
    }
    // loc("cirgen/components/ram.cpp":105:3)
    {
      auto& reg = args[2][56 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("cirgen/components/ram.cpp":106:3)
    {
      auto& reg = args[2][57 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x88);
      reg = x88;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][58 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][59 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][60 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][61 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("Top/Code/Mux/2/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x437 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x438 = Fp(x437.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x438);
        reg = x438;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x439 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x440 = x437 - x439;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x441 = x440 * x82;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x441);
      reg = x441;
    }
    // loc("Top/Code/Mux/2/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
    auto x442 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x442 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x443 = Fp(x442.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x443);
        reg = x443;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x444 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x444 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x445 = x442 - x444;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x446 = x445 * x82;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x446);
      reg = x446;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x447 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x447 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x448 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x448 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":35:42)
    auto x449 = x428 + x88;
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x447);
      reg = x447;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x444);
      reg = x444;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x450 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x450 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x451 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x451 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x452 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x452 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x453 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x453 != Fp::invalid());
      host_args.at(0) = x449;
      host_args.at(1) = x450;
      host_args.at(2) = x451;
      host_args.at(3) = x452;
      host_args.at(4) = x453;
      host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x454 = args[2][65 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x455 = args[2][66 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x456 = args[2][67 * steps + ((cycle - 0) & mask)];
    assert(x456 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x457 = args[2][68 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":104:3)
    {
      auto& reg = args[2][62 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x449);
      reg = x449;
    }
    // loc("cirgen/components/ram.cpp":105:3)
    {
      auto& reg = args[2][63 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("cirgen/components/ram.cpp":106:3)
    {
      auto& reg = args[2][64 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x88);
      reg = x88;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][65 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][66 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][67 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][68 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("Top/Code/Mux/2/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
    auto x458 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x458 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x459 = Fp(x458.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x459);
        reg = x459;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x460 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x461 = x458 - x460;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x462 = x461 * x82;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][28 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("Top/Code/Mux/2/Reg6"("./cirgen/compiler/edsl/component.h":85:27))
    auto x463 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x463 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x464 = Fp(x463.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x464);
        reg = x464;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x465 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x465 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x466 = x463 - x465;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x467 = x466 * x82;
    // loc("cirgen/components/bytes.cpp":87:3)
    {
      auto& reg = args[2][30 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x468 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x469 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x469 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":35:42)
    auto x470 = x428 + x85;
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x460);
      reg = x460;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x465);
      reg = x465;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x471 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x471 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x472 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x472 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x473 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x473 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x474 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x474 != Fp::invalid());
      host_args.at(0) = x470;
      host_args.at(1) = x471;
      host_args.at(2) = x472;
      host_args.at(3) = x473;
      host_args.at(4) = x474;
      host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x475 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
    auto x476 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
    auto x477 = args[2][74 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
    auto x478 = args[2][75 * steps + ((cycle - 0) & mask)];
    assert(x478 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":104:3)
    {
      auto& reg = args[2][69 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("cirgen/components/ram.cpp":105:3)
    {
      auto& reg = args[2][70 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("cirgen/components/ram.cpp":106:3)
    {
      auto& reg = args[2][71 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x88);
      reg = x88;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][72 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x475);
      reg = x475;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x476);
      reg = x476;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][74 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x477);
      reg = x477;
    }
    // loc("cirgen/components/u32.cpp":28:5)
    {
      auto& reg = args[2][75 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x478);
      reg = x478;
    }
  }
  // loc("Top/Code/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
  auto x479 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x479 != Fp::invalid());
  if (x479 != 0) {
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x480 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x480 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":14:23)
    auto x481 = x480 + x81;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x482 = Fp(x481.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
    auto x483 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x483 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x484 = x481 - x483;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x485 = x484 * x82;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x486 = Fp(x485.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x486);
        reg = x486;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
    auto x487 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x487 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x488 = x485 - x487;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x489 = x488 * x82;
    {
      // loc("cirgen/components/bytes.cpp":82:21)
      auto x490 = Fp(x489.asUInt32() & x84.asUInt32());
      // loc("cirgen/components/bytes.cpp":82:12)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x490);
        reg = x490;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
    auto x491 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x491 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":83:11)
    auto x492 = x489 - x491;
    // loc("cirgen/components/bytes.cpp":83:10)
    auto x493 = x492 * x82;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":17:26)
      auto x494 = Fp(x493.asUInt32() & x80.asUInt32());
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x494);
        reg = x494;
      }
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x495 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x495 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:18)
    auto x496 = x493 - x495;
    // loc("cirgen/circuit/rv32im/body.cpp":18:17)
    auto x497 = x496 * x79;
    // loc("./cirgen/components/bits.h":57:23)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x497);
      reg = x497;
    }
    // loc("Top/Mux/3/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x498 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x498 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":22:23)
    auto x499 = x88 - x498;
    // loc("cirgen/circuit/rv32im/body.cpp":22:15)
    auto x500 = x498 * x499;
    // loc("cirgen/circuit/rv32im/body.cpp":22:3)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x500);
      reg = x500;
    }
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x501 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x501 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":23:17)
    auto x502 = x85 - x498;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    auto x503 = x501 * x502;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    if (x503 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    // loc("cirgen/circuit/rv32im/body.cpp":43:3)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x78);
      reg = x78;
    }
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x504 = x487 * x83;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x505 = x483 + x504;
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x506 = x491 * x77;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x507 = x505 + x506;
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x508 = x495 * x76;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x509 = x507 + x508;
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x510 = x498 * x75;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x511 = x509 + x510;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x512 = x511 - x81;
    host_args.at(0) = x512;
    host(ctx, "log", "Reset: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
  auto x513 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x513 != Fp::invalid());
  if (x513 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x514 = args[2][10 * steps + ((cycle - 1) & mask)];
    assert(x514 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":78:10))
    auto x515 = args[2][11 * steps + ((cycle - 1) & mask)];
    assert(x515 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x516 = x515 * x83;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x517 = x514 + x516;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":78:10))
    auto x518 = args[2][12 * steps + ((cycle - 1) & mask)];
    assert(x518 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x519 = x518 * x77;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x520 = x517 + x519;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x521 = args[2][72 * steps + ((cycle - 1) & mask)];
    assert(x521 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x522 = x521 * x76;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x523 = x520 + x522;
    // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x524 = args[2][73 * steps + ((cycle - 1) & mask)];
    assert(x524 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x525 = x524 * x75;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x526 = x523 + x525;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x527 = x526 - x81;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":54:45))
      auto x528 = args[2][93 * steps + ((cycle - 1) & mask)];
      assert(x528 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":55:24)
      auto x529 = x528 - x78;
      // loc("cirgen/circuit/rv32im/body.cpp":55:24)
      auto x530 = (x529 == 0) ? Fp(1) : Fp(0);
      if (x530 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":57:29)
        auto x531 = x527 * x79;
        host_args.at(0) = x531;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x532 = host_outs.at(0);
        auto x533 = host_outs.at(1);
        auto x534 = host_outs.at(2);
        auto x535 = host_outs.at(3);
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x536 = args[0][0 * steps + ((cycle - 0) & mask)];
        assert(x536 != Fp::invalid());
        host_args.at(0) = x536;
        host_args.at(1) = x527;
        host_args.at(2) = x532;
        host_args.at(3) = x533;
        host_args.at(4) = x534;
        host_args.at(5) = x535;
        host(ctx, "log", "%u: BODY @%x: loaded %w", host_args.data(), 6, host_outs.data(), 0);
        host_args.at(0) = x527;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x532;
        host_args.at(1) = x533;
        host_args.at(2) = x534;
        host_args.at(3) = x535;
        host(ctx, "getMajor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x537 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x538 = (x537 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x538);
            reg = x538;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x539 = x537 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x540 = (x539 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x540);
            reg = x540;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x541 = x537 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x542 = (x541 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x542);
            reg = x542;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x543 = x537 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x544 = (x543 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x544);
            reg = x544;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x545 = x537 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x546 = (x545 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x546);
            reg = x546;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x547 = x537 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x548 = (x547 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x548);
            reg = x548;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x549 = x537 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x550 = (x549 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x550);
            reg = x550;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x551 = x537 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x552 = (x551 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x552);
            reg = x552;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x553 = x537 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x554 = (x553 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x554);
            reg = x554;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x555 = x537 - x70;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x556 = (x555 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x556);
            reg = x556;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x557 = x537 - x69;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x558 = (x557 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x558);
            reg = x558;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x559 = x537 - x68;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x560 = (x559 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x560);
            reg = x560;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x561 = x537 - x67;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x562 = (x561 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x562);
            reg = x562;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x563 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x563 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x564 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x564 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x565 = x564 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x566 = x563 + x565;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x567 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x567 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x568 = x567 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x569 = x566 + x568;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x570 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x570 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x571 = x570 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x572 = x569 + x571;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x573 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x573 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x574 = x573 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x575 = x572 + x574;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x576 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x576 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x577 = x576 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x578 = x575 + x577;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x579 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x579 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x580 = x579 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x581 = x578 + x580;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x582 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x582 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x583 = x582 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x584 = x581 + x583;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x585 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x585 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x586 = x585 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x587 = x584 + x586;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x588 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x588 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x589 = x588 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x590 = x587 + x589;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x591 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x591 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x592 = x591 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x593 = x590 + x592;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x594 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x594 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x595 = x594 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x596 = x593 + x595;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x597 = x596 - x537;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x597 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":64:20)
      auto x598 = x88 - x530;
      if (x598 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":65:47)
        auto x599 = x528 - x71;
        // loc("cirgen/circuit/rv32im/body.cpp":65:47)
        auto x600 = (x599 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":65:47)
        auto x601 = x88 - x600;
        if (x601 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x602 = args[0][0 * steps + ((cycle - 0) & mask)];
          assert(x602 != Fp::invalid());
          host_args.at(0) = x602;
          host_args.at(1) = x527;
          host_args.at(2) = x528;
          host(ctx, "log", "%u: BODY @%x: major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x603 = (x528 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x603);
            reg = x603;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x604 = x528 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x605 = (x604 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x605);
            reg = x605;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x606 = x528 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x607 = (x606 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x607);
            reg = x607;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x608 = x528 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x609 = (x608 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x609);
            reg = x609;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x610 = x528 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x611 = (x610 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x611);
            reg = x611;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x612 = x528 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x613 = (x612 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x613);
            reg = x613;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x614 = x528 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x615 = (x614 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x615);
            reg = x615;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x616 = x528 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x617 = (x616 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x617);
            reg = x617;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x600);
            reg = x600;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x618 = x528 - x70;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x619 = (x618 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x619);
            reg = x619;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x620 = x528 - x69;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x621 = (x620 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x621);
            reg = x621;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x622 = x528 - x68;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x623 = (x622 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x623);
            reg = x623;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x624 = x528 - x67;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x625 = (x624 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x625);
            reg = x625;
          }
        }
        // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x626 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x626 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x627 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x627 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x628 = x627 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x629 = x626 + x628;
        // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x630 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x630 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x631 = x630 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x632 = x629 + x631;
        // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x633 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x633 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x634 = x633 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x635 = x632 + x634;
        // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x636 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x636 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x637 = x636 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x638 = x635 + x637;
        // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x639 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x639 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x640 = x639 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x641 = x638 + x640;
        // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x642 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x642 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x643 = x642 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x644 = x641 + x643;
        // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x645 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x645 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x646 = x645 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x647 = x644 + x646;
        // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x648 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x648 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x649 = x648 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x650 = x647 + x649;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x651 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x651 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x652 = x651 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x653 = x650 + x652;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x654 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x654 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x655 = x654 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x656 = x653 + x655;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x657 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x657 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x658 = x657 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x659 = x656 + x658;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x660 = x659 - x528;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x660 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg"("./cirgen/components/mux.h":37:25))
    auto x661 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x661 != Fp::invalid());
    if (x661 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x662 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x663 = x527 * x79;
      {
        host_args.at(0) = x663;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x664 = host_outs.at(0);
        auto x665 = host_outs.at(1);
        auto x666 = host_outs.at(2);
        auto x667 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x664);
          reg = x664;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x665);
          reg = x665;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x666);
          reg = x666;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x667);
          reg = x667;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x668 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x669 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x670 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x671 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x671 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x663);
        reg = x663;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x662);
        reg = x662;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x668);
        reg = x668;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x669);
        reg = x669;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x670);
        reg = x670;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x671);
        reg = x671;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x672 = Fp(x671.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x673 = x672 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x673);
          reg = x673;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x674 = Fp(x671.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x675 = x674 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x675);
          reg = x675;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x676 = Fp(x671.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x677 = x676 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x677);
          reg = x677;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x678 = Fp(x671.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x679 = x678 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x679);
          reg = x679;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x680 = Fp(x671.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x681 = x680 * x58;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x681);
          reg = x681;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x682 = Fp(x671.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x682);
          reg = x682;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x683 = Fp(x670.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x684 = x683 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x684);
          reg = x684;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x685 = Fp(x670.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x686 = x685 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x686);
          reg = x686;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x687 = Fp(x670.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x688 = x687 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x688);
          reg = x688;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x689 = Fp(x670.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x690 = x689 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x690);
          reg = x690;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x691 = Fp(x670.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x691);
          reg = x691;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x692 = Fp(x669.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x693 = x692 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x693);
          reg = x693;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x694 = Fp(x669.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x695 = x694 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x695);
          reg = x695;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x696 = Fp(x669.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x697 = x696 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x697);
          reg = x697;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x698 = Fp(x669.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x699 = x698 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x699);
          reg = x699;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x700 = Fp(x669.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x700);
          reg = x700;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x701 = Fp(x668.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x702 = x701 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x702);
          reg = x702;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x703 = Fp(x668.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x703);
          reg = x703;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x704 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x704 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x705 = x704 * x57;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x706 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x706 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x707 = x706 * x61;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x708 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x708 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x709 = x708 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x710 = x707 + x709;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x711 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x711 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x712 = x711 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x713 = x710 + x712;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x714 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x714 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x715 = x713 + x714;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x716 = x705 + x715;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x717 = x716 * x85;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x718 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x718 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x719 = x717 + x718;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x720 = x671 - x719;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x720 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x721 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x721 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x722 = x721 * x71;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x723 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x723 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x724 = x723 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x725 = x722 + x724;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x726 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x726 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x727 = x725 + x726;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x728 = x727 * x61;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x729 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x729 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x730 = x729 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x731 = x728 + x730;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x732 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x732 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x733 = x731 + x732;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x734 = x670 - x733;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x734 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x735 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x735 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x736 = x735 * x66;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x737 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x737 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x738 = x737 * x81;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x739 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x739 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x740 = x738 + x739;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x741 = x740 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x742 = x736 + x741;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x743 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x743 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x744 = x743 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x745 = x742 + x744;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x746 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x746 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x747 = x745 + x746;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x748 = x669 - x747;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x748 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x749 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x749 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x750 = x749 * x66;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x751 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x751 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x752 = x750 + x751;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x753 = x668 - x752;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x753 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x668;
        host_args.at(1) = x669;
        host_args.at(2) = x670;
        host_args.at(3) = x671;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x754 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x755 = (x754 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x755);
            reg = x755;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x756 = x754 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x757 = (x756 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x757);
            reg = x757;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x758 = x754 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x759 = (x758 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x759);
            reg = x759;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x760 = x754 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x761 = (x760 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x761);
            reg = x761;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x762 = x754 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x763 = (x762 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x763);
            reg = x763;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x764 = x754 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x765 = (x764 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x765);
            reg = x765;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x766 = x754 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x767 = (x766 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x767);
            reg = x767;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x768 = x754 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x769 = (x768 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x769);
            reg = x769;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x770 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x771 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x771 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x772 = x771 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x773 = x770 + x772;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x774 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x774 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x775 = x774 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x776 = x773 + x775;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x777 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x777 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x778 = x777 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x779 = x776 + x778;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x780 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x780 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x781 = x780 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x782 = x779 + x781;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x783 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x783 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x784 = x783 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x785 = x782 + x784;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x786 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x786 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x787 = x786 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x788 = x785 + x787;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x789 = x788 - x754;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x789 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":37:68))
        auto x790 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x790 != Fp::invalid());
        if (x790 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x791 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x791 != Fp::invalid());
        if (x791 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":39:69))
        auto x792 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x792 != Fp::invalid());
        if (x792 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x793 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x793 != Fp::invalid());
        if (x793 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x794 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x794 != Fp::invalid());
        if (x794 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":42:68))
        auto x795 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x795 != Fp::invalid());
        if (x795 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x796 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x796 != Fp::invalid());
        if (x796 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x797 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x797 != Fp::invalid());
        if (x797 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x798 = x711 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x799 = x714 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x800 = x798 + x799;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x801 = x718 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x802 = x801 + x727;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x803 = x800 + x802;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x804 = x704 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x805 = x706 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x806 = x804 + x805;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x807 = x806 + x708;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x808 = x704 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x803);
            reg = x803;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x807);
            reg = x807;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x808);
            reg = x808;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x808);
            reg = x808;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x809 = x729 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x810 = x732 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x811 = x809 + x810;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x812 = x811 + x735;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x813 = x812 + x50;
      {
        host_args.at(0) = x813;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x814 = host_outs.at(0);
        auto x815 = host_outs.at(1);
        auto x816 = host_outs.at(2);
        auto x817 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x814);
          reg = x814;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x815);
          reg = x815;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x816);
          reg = x816;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x817);
          reg = x817;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x818 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x819 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x820 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x821 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x821 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x813);
        reg = x813;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x662);
        reg = x662;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x818);
        reg = x818;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x819);
        reg = x819;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x820);
        reg = x820;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x821);
        reg = x821;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x822 = x718 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x823 = x822 + x727;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x824 = x823 + x50;
      {
        host_args.at(0) = x824;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x825 = host_outs.at(0);
        auto x826 = host_outs.at(1);
        auto x827 = host_outs.at(2);
        auto x828 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x825);
          reg = x825;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x826);
          reg = x826;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x827);
          reg = x827;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x828);
          reg = x828;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x829 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x830 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x831 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x832 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x832 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x824);
        reg = x824;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x662);
        reg = x662;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x829);
        reg = x829;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x830);
        reg = x830;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x831);
        reg = x831;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x832);
        reg = x832;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x833 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x834 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x835 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x836 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x836 != Fp::invalid());
      host_args.at(0) = x833;
      host_args.at(1) = x834;
      host_args.at(2) = x835;
      host_args.at(3) = x836;
      host_args.at(4) = x812;
      host_args.at(5) = x818;
      host_args.at(6) = x819;
      host_args.at(7) = x820;
      host_args.at(8) = x821;
      host_args.at(9) = x823;
      host_args.at(10) = x829;
      host_args.at(11) = x830;
      host_args.at(12) = x831;
      host_args.at(13) = x832;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x837 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x837 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x838 = x88 - x837;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x839 = x838 * x818;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x840 = x838 * x819;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x841 = x838 * x820;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x842 = x838 * x821;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x843 = x524 * x81;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x844 = x521 + x843;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x845 = x514 - x81;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x846 = x837 * x845;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x847 = x837 * x515;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x848 = x837 * x518;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x849 = x837 * x844;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x850 = x839 + x846;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x851 = x840 + x847;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x852 = x841 + x848;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x853 = x842 + x849;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x854 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x854 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x855 = x88 - x854;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x856 = x855 * x829;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x857 = x855 * x830;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x858 = x855 * x831;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x859 = x855 * x832;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x860 = x854 * x833;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x861 = x854 * x834;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x862 = x854 * x835;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x863 = x854 * x836;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x864 = x856 + x860;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x865 = x857 + x861;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x866 = x858 + x862;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x867 = x859 + x863;
      host_args.at(0) = x850;
      host_args.at(1) = x851;
      host_args.at(2) = x852;
      host_args.at(3) = x853;
      host_args.at(4) = x864;
      host_args.at(5) = x865;
      host_args.at(6) = x866;
      host_args.at(7) = x867;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x868 = Fp(x853.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x869 = x868 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x869);
          reg = x869;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x870 = Fp(x853.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x871 = x870 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x871);
          reg = x871;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x872 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x872 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x873 = x872 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x874 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x874 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x875 = x874 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x876 = x873 + x875;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x877 = x853 - x876;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x877 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x878 = Fp(x867.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x879 = x878 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x879);
          reg = x879;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x880 = Fp(x867.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x881 = x880 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x881);
          reg = x881;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x882 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x882 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x883 = x882 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x884 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x884 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x885 = x884 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x886 = x883 + x885;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x887 = x867 - x886;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x887 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x864);
        reg = x864;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x865);
        reg = x865;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x866);
        reg = x866;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x867);
        reg = x867;
      }
      {
        // loc("cirgen/components/u32.cpp":107:20)
        auto x888 = Fp(x850.asUInt32() & x864.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x889 = Fp(x851.asUInt32() & x865.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x890 = Fp(x852.asUInt32() & x866.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x891 = Fp(x853.asUInt32() & x867.asUInt32());
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x888);
          reg = x888;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x889);
          reg = x889;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x890);
          reg = x890;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x891);
          reg = x891;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x892 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x892 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x893 = x892 * x850;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x894 = x892 * x851;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x895 = x892 * x852;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x896 = x892 * x853;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x897 = x893 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x898 = x894 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x899 = x895 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x900 = x896 + x84;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x901 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x901 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x902 = x901 * x864;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x903 = x901 * x865;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x904 = x901 * x866;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x905 = x901 * x867;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x906 = x897 + x902;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x907 = x898 + x903;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x908 = x899 + x904;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x909 = x900 + x905;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x910 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x911 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x912 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x913 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x914 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x914 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x915 = x910 * x911;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x916 = x910 * x912;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x917 = x910 * x913;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x918 = x910 * x914;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x919 = x906 + x915;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x920 = x907 + x916;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x921 = x908 + x917;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x922 = x909 + x918;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x923 = x920 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x924 = x919 + x923;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x925 = Fp(x924.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x925);
          reg = x925;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x926 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x926 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x927 = x924 - x926;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x928 = x927 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x929 = Fp(x928.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x929);
          reg = x929;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x930 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x930 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x931 = x928 - x930;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x932 = x931 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x932);
        reg = x932;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x933 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x933 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x934 = x933 + x921;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x935 = x922 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x936 = x934 + x935;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x937 = Fp(x936.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x937);
          reg = x937;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x938 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x938 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x939 = x936 - x938;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x940 = x939 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x941 = Fp(x940.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x941);
          reg = x941;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x942 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x942 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x943 = x940 - x942;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x944 = x943 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x944);
        reg = x944;
      }
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x945 = Fp(x942.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x946 = x945 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x946);
          reg = x946;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x947 = Fp(x942.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x948 = x947 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x948);
          reg = x948;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x949 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x949 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x950 = x949 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x951 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x951 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x952 = x951 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x953 = x950 + x952;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x954 = x942 - x953;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x954 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x955 = x88 - x882;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x956 = x872 * x955;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x957 = x88 - x949;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x958 = x956 * x957;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x959 = x88 - x872;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x960 = x959 * x882;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x961 = x960 * x949;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x962 = x958 + x961;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x962);
        reg = x962;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x963 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x963 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x964 = x963 + x949;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x965 = x963 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x966 = x965 * x949;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x967 = x964 - x966;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x967);
        reg = x967;
      }
      // loc("cirgen/components/u32.cpp":131:26)
      auto x968 = x930 * x83;
      // loc("cirgen/components/u32.cpp":131:12)
      auto x969 = x926 + x968;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x970 = (x969 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x970);
          reg = x970;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x971 = inv(x969);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x971);
          reg = x971;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x972 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x972 != Fp::invalid());
      if (x972 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x969 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x973 = x88 - x972;
      if (x973 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x974 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x974 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x975 = x969 * x974;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x976 = x975 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x976 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":132:27)
      auto x977 = x942 * x83;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x978 = x938 + x977;
      // loc("cirgen/components/u32.cpp":132:47)
      auto x979 = x973 * x77;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x980 = x978 + x979;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x981 = (x980 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x981);
          reg = x981;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x982 = inv(x980);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x982);
          reg = x982;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x983 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x983 != Fp::invalid());
      if (x983 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x980 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x984 = x88 - x983;
      if (x984 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x985 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x985 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x986 = x980 * x985;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x987 = x986 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x987 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x988 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x989 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x989 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x990 = x88 - x989;
      host_args.at(0) = x926;
      host_args.at(1) = x930;
      host_args.at(2) = x938;
      host_args.at(3) = x942;
      host_args.at(4) = x983;
      host_args.at(5) = x988;
      host_args.at(6) = x990;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x991 = x743 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x992 = x746 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x993 = x991 + x992;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x994 = x993 + x749;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x995 = (x994 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x995);
          reg = x995;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x996 = inv(x994);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x996);
          reg = x996;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x997 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x997 != Fp::invalid());
      if (x997 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x994 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x998 = x88 - x997;
      if (x998 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x999 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x999 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1000 = x994 * x999;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1001 = x1000 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1001 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1002 = x527 + x81;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":37:68))
      auto x1003 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1003 != Fp::invalid());
      if (x1003 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        auto x1004 = x751 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        if (x1004 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:37");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        if (x740 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:37");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        if (x716 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:37");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1005 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1006 = Fp(x1005.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1007 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1007 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1008 = x1005 - x1007;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1009 = x1008 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1010 = Fp(x1009.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1010);
            reg = x1010;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1011 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1011 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1012 = x1009 - x1011;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1013 = x1012 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1014 = Fp(x1013.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1015 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1015 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1016 = x1013 - x1015;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1017 = x1016 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1018 = Fp(x1017.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1019 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1019 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1020 = x1017 - x1019;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1021 = x1020 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1021);
          reg = x1021;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1022 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1022 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1023 = x88 - x1022;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1024 = x1022 * x1023;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1024);
          reg = x1024;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1025 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1025 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1026 = x85 - x1022;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1027 = x1025 * x1026;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1027 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1028 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1028 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1028);
          reg = x1028;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x926;
          host_args.at(2) = x930;
          host_args.at(3) = x938;
          host_args.at(4) = x942;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":37:68)
          auto x1029 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x926);
            reg = x926;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x930);
            reg = x930;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x938);
            reg = x938;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x942);
            reg = x942;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1030 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1030 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1031 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1031 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1032 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1032 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1033 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1033 != Fp::invalid());
            host_args.at(0) = x1029;
            host_args.at(1) = x1030;
            host_args.at(2) = x1031;
            host_args.at(3) = x1032;
            host_args.at(4) = x1033;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1034 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1034 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1035 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1035 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1036 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1036 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1037 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1037 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1029);
            reg = x1029;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1034);
            reg = x1034;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1035);
            reg = x1035;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1036);
            reg = x1036;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1037);
            reg = x1037;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1038 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1038 != Fp::invalid());
      if (x1038 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1039 = x751 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1039 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x740 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1040 = x716 - x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1040 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1041 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1042 = Fp(x1041.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1042);
            reg = x1042;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1043 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1043 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1044 = x1041 - x1043;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1045 = x1044 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1046 = Fp(x1045.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1046);
            reg = x1046;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1047 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1047 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1048 = x1045 - x1047;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1049 = x1048 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1050 = Fp(x1049.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1050);
            reg = x1050;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1051 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1051 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1052 = x1049 - x1051;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1053 = x1052 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1054 = Fp(x1053.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1054);
            reg = x1054;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1055 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1055 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1056 = x1053 - x1055;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1057 = x1056 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1057);
          reg = x1057;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1058 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1058 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1059 = x88 - x1058;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1060 = x1058 * x1059;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1060);
          reg = x1060;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1061 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1061 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1062 = x85 - x1058;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1063 = x1061 * x1062;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1063 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1064 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1064 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1064);
          reg = x1064;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x926;
          host_args.at(2) = x930;
          host_args.at(3) = x938;
          host_args.at(4) = x942;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1065 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x926);
            reg = x926;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x930);
            reg = x930;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x938);
            reg = x938;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x942);
            reg = x942;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1066 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1066 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1067 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1067 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1068 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1068 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1069 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1069 != Fp::invalid());
            host_args.at(0) = x1065;
            host_args.at(1) = x1066;
            host_args.at(2) = x1067;
            host_args.at(3) = x1068;
            host_args.at(4) = x1069;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1070 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1070 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1071 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1071 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1072 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1072 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1073 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1073 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1065);
            reg = x1065;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1070);
            reg = x1070;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1071);
            reg = x1071;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1072);
            reg = x1072;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1073);
            reg = x1073;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":39:69))
      auto x1074 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1074 != Fp::invalid());
      if (x1074 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        auto x1075 = x751 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        if (x1075 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        auto x1076 = x740 - x81;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        if (x1076 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        if (x716 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1077 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1078 = Fp(x1077.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1078);
            reg = x1078;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1079 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1079 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1080 = x1077 - x1079;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1081 = x1080 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1082 = Fp(x1081.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1082);
            reg = x1082;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1083 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1083 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1084 = x1081 - x1083;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1085 = x1084 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1086 = Fp(x1085.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1086);
            reg = x1086;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1087 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1087 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1088 = x1085 - x1087;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1089 = x1088 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1090 = Fp(x1089.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1090);
            reg = x1090;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1091 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1091 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1092 = x1089 - x1091;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1093 = x1092 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1093);
          reg = x1093;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1094 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1094 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1095 = x88 - x1094;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1096 = x1094 * x1095;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1096);
          reg = x1096;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1097 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1097 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1098 = x85 - x1094;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1099 = x1097 * x1098;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1099 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1100 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1100 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1100);
          reg = x1100;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x926;
          host_args.at(2) = x930;
          host_args.at(3) = x938;
          host_args.at(4) = x942;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:69)
          auto x1101 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x926);
            reg = x926;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x930);
            reg = x930;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x938);
            reg = x938;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x942);
            reg = x942;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1102 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1102 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1103 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1103 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1104 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1104 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1105 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1105 != Fp::invalid());
            host_args.at(0) = x1101;
            host_args.at(1) = x1102;
            host_args.at(2) = x1103;
            host_args.at(3) = x1104;
            host_args.at(4) = x1105;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1106 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1106 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1107 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1107 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1108 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1108 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1109 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1109 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1101);
            reg = x1101;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1106);
            reg = x1106;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1107);
            reg = x1107;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1108);
            reg = x1108;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1109);
            reg = x1109;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1110 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1110 != Fp::invalid());
      if (x1110 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1111 = x751 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1111 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1112 = x740 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1112 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x716 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1113 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1114 = Fp(x1113.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1114);
            reg = x1114;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1115 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1115 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1116 = x1113 - x1115;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1117 = x1116 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1118 = Fp(x1117.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1118);
            reg = x1118;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1119 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1119 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1120 = x1117 - x1119;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1121 = x1120 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1122 = Fp(x1121.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1122);
            reg = x1122;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1123 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1123 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1124 = x1121 - x1123;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1125 = x1124 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1126 = Fp(x1125.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1126);
            reg = x1126;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1127 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1127 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1128 = x1125 - x1127;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1129 = x1128 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1129);
          reg = x1129;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1130 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1130 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1131 = x88 - x1130;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1132 = x1130 * x1131;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1132);
          reg = x1132;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1133 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1133 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1134 = x85 - x1130;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1135 = x1133 * x1134;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1135 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1136 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1136 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1136);
          reg = x1136;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x926;
          host_args.at(2) = x930;
          host_args.at(3) = x938;
          host_args.at(4) = x942;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1137 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x926);
            reg = x926;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x930);
            reg = x930;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x938);
            reg = x938;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x942);
            reg = x942;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1138 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1138 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1139 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1139 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1140 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1140 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1141 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1141 != Fp::invalid());
            host_args.at(0) = x1137;
            host_args.at(1) = x1138;
            host_args.at(2) = x1139;
            host_args.at(3) = x1140;
            host_args.at(4) = x1141;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1142 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1142 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1143 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1143 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1144 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1144 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1145 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1145 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1137);
            reg = x1137;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1142);
            reg = x1142;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1143);
            reg = x1143;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1144);
            reg = x1144;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1145);
            reg = x1145;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1146 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1146 != Fp::invalid());
      if (x1146 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1147 = x751 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1147 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1148 = x740 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1148 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x716 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1149 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1150 = Fp(x1149.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1150);
            reg = x1150;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1151 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1151 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1152 = x1149 - x1151;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1153 = x1152 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1154 = Fp(x1153.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1154);
            reg = x1154;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1155 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1155 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1156 = x1153 - x1155;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1157 = x1156 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1158 = Fp(x1157.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1158);
            reg = x1158;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1159 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1159 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1160 = x1157 - x1159;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1161 = x1160 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1162 = Fp(x1161.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1162);
            reg = x1162;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1163 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1163 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1164 = x1161 - x1163;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1165 = x1164 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1165);
          reg = x1165;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1166 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1166 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1167 = x88 - x1166;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1168 = x1166 * x1167;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1168);
          reg = x1168;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1169 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1169 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1170 = x85 - x1166;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1171 = x1169 * x1170;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1171 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1172 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1172 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1172);
          reg = x1172;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x926;
          host_args.at(2) = x930;
          host_args.at(3) = x938;
          host_args.at(4) = x942;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1173 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x926);
            reg = x926;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x930);
            reg = x930;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x938);
            reg = x938;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x942);
            reg = x942;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1174 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1174 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1175 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1175 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1176 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1176 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1177 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1177 != Fp::invalid());
            host_args.at(0) = x1173;
            host_args.at(1) = x1174;
            host_args.at(2) = x1175;
            host_args.at(3) = x1176;
            host_args.at(4) = x1177;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1178 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1178 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1179 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1179 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1180 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1180 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1181 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1181 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1173);
            reg = x1173;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1178);
            reg = x1178;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1179);
            reg = x1179;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1180);
            reg = x1180;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1181);
            reg = x1181;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":42:68))
      auto x1182 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1182 != Fp::invalid());
      if (x1182 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        auto x1183 = x751 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        if (x1183 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        auto x1184 = x740 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        if (x1184 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        if (x716 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1185 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1186 = Fp(x1185.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1186);
            reg = x1186;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1187 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1187 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1188 = x1185 - x1187;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1189 = x1188 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1190 = Fp(x1189.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1190);
            reg = x1190;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1191 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1191 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1192 = x1189 - x1191;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1193 = x1192 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1194 = Fp(x1193.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1194);
            reg = x1194;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1195 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1195 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1196 = x1193 - x1195;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1197 = x1196 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1198 = Fp(x1197.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1198);
            reg = x1198;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1199 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1199 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1200 = x1197 - x1199;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1201 = x1200 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1201);
          reg = x1201;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1202 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1202 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1203 = x88 - x1202;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1204 = x1202 * x1203;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1204);
          reg = x1204;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1205 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1205 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1206 = x85 - x1202;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1207 = x1205 * x1206;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1207 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1208 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1208 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1208);
          reg = x1208;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x988;
          host_args.at(2) = x87;
          host_args.at(3) = x87;
          host_args.at(4) = x87;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:68)
          auto x1209 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x988);
            reg = x988;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1210 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1210 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1211 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1211 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1212 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1212 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1213 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1213 != Fp::invalid());
            host_args.at(0) = x1209;
            host_args.at(1) = x1210;
            host_args.at(2) = x1211;
            host_args.at(3) = x1212;
            host_args.at(4) = x1213;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1214 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1214 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1215 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1215 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1216 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1216 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1217 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1217 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1209);
            reg = x1209;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1214);
            reg = x1214;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1215);
            reg = x1215;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1216);
            reg = x1216;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1217);
            reg = x1217;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1218 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1218 != Fp::invalid());
      if (x1218 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1219 = x751 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1219 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1220 = x740 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1220 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x716 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1221 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1222 = Fp(x1221.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1222);
            reg = x1222;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1223 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1223 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1224 = x1221 - x1223;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1225 = x1224 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1226 = Fp(x1225.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1226);
            reg = x1226;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1227 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1227 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1228 = x1225 - x1227;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1229 = x1228 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1230 = Fp(x1229.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1230);
            reg = x1230;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1231 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1231 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1232 = x1229 - x1231;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1233 = x1232 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1234 = Fp(x1233.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1234);
            reg = x1234;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1235 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1235 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1236 = x1233 - x1235;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1237 = x1236 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1237);
          reg = x1237;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1238 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1238 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1239 = x88 - x1238;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1240 = x1238 * x1239;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1240);
          reg = x1240;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1241 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1241 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1242 = x85 - x1238;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1243 = x1241 * x1242;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1243 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1244 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1244 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1244);
          reg = x1244;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x990;
          host_args.at(2) = x87;
          host_args.at(3) = x87;
          host_args.at(4) = x87;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1245 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x990);
            reg = x990;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1246 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1246 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1247 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1247 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1248 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1248 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1249 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1249 != Fp::invalid());
            host_args.at(0) = x1245;
            host_args.at(1) = x1246;
            host_args.at(2) = x1247;
            host_args.at(3) = x1248;
            host_args.at(4) = x1249;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1250 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1250 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1251 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1251 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1252 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1252 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1253 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1253 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1245);
            reg = x1245;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1250);
            reg = x1250;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1251);
            reg = x1251;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1252);
            reg = x1252;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1253);
            reg = x1253;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1254 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1254 != Fp::invalid());
      if (x1254 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1255 = x751 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1255 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x740 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1256 = x711 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1257 = x714 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1258 = x1256 + x1257;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1259 = x1258 + x823;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1260 = x704 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1261 = x706 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1262 = x1260 + x1261;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1263 = x1262 + x708;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1264 = x704 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1259);
          reg = x1259;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1263);
          reg = x1263;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1264);
          reg = x1264;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1264);
          reg = x1264;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1265 = x1002 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1266 = Fp(x1265.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1266);
            reg = x1266;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1267 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1267 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1268 = x1265 - x1267;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1269 = x1268 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1270 = Fp(x1269.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1270);
            reg = x1270;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1271 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1271 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1272 = x1269 - x1271;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1273 = x1272 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1274 = Fp(x1273.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1274);
            reg = x1274;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1275 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1275 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1276 = x1273 - x1275;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1277 = x1276 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1278 = Fp(x1277.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1278);
            reg = x1278;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1279 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1280 = x1277 - x1279;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1281 = x1280 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1281);
          reg = x1281;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1282 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1282 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1283 = x88 - x1282;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1284 = x1282 * x1283;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1284);
          reg = x1284;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1285 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1286 = x85 - x1282;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1287 = x1285 * x1286;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1287 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1288 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1288 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1288);
          reg = x1288;
        }
        if (x998 != 0) {
          host_args.at(0) = x994;
          host_args.at(1) = x926;
          host_args.at(2) = x930;
          host_args.at(3) = x938;
          host_args.at(4) = x942;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1289 = x994 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x926);
            reg = x926;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x930);
            reg = x930;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x938);
            reg = x938;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x942);
            reg = x942;
          }
          {
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1290 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1290 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1291 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1291 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1292 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1292 != Fp::invalid());
            // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1293 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1293 != Fp::invalid());
            host_args.at(0) = x1289;
            host_args.at(1) = x1290;
            host_args.at(2) = x1291;
            host_args.at(3) = x1292;
            host_args.at(4) = x1293;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1294 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1294 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1295 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1295 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1296 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1296 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1297 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1297 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1289);
            reg = x1289;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1294);
            reg = x1294;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1295);
            reg = x1295;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1296);
            reg = x1296;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1297);
            reg = x1297;
          }
        }
        if (x997 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/components/mux.h":37:25))
    auto x1298 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x1298 != Fp::invalid());
    if (x1298 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1299 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x1299 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1300 = x527 * x79;
      {
        host_args.at(0) = x1300;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1301 = host_outs.at(0);
        auto x1302 = host_outs.at(1);
        auto x1303 = host_outs.at(2);
        auto x1304 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1301);
          reg = x1301;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1302);
          reg = x1302;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1303);
          reg = x1303;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1304);
          reg = x1304;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1305 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x1305 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1306 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x1306 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1307 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x1307 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1308 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x1308 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1300);
        reg = x1300;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1299);
        reg = x1299;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1305);
        reg = x1305;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1306);
        reg = x1306;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1307);
        reg = x1307;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1308);
        reg = x1308;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1309 = Fp(x1308.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1310 = x1309 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1310);
          reg = x1310;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1311 = Fp(x1308.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1312 = x1311 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1312);
          reg = x1312;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1313 = Fp(x1308.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1314 = x1313 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1314);
          reg = x1314;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1315 = Fp(x1308.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1316 = x1315 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1316);
          reg = x1316;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1317 = Fp(x1308.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1318 = x1317 * x58;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1318);
          reg = x1318;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1319 = Fp(x1308.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1319);
          reg = x1319;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1320 = Fp(x1307.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1321 = x1320 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1321);
          reg = x1321;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1322 = Fp(x1307.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1323 = x1322 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1323);
          reg = x1323;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1324 = Fp(x1307.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1325 = x1324 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1325);
          reg = x1325;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1326 = Fp(x1307.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1327 = x1326 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1327);
          reg = x1327;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1328 = Fp(x1307.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1328);
          reg = x1328;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1329 = Fp(x1306.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1330 = x1329 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1330);
          reg = x1330;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1331 = Fp(x1306.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1332 = x1331 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1332);
          reg = x1332;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1333 = Fp(x1306.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1334 = x1333 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1334);
          reg = x1334;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1335 = Fp(x1306.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1336 = x1335 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1336);
          reg = x1336;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1337 = Fp(x1306.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1337);
          reg = x1337;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1338 = Fp(x1305.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1339 = x1338 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1339);
          reg = x1339;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1340 = Fp(x1305.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1340);
          reg = x1340;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1341 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x1341 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1342 = x1341 * x57;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1343 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1343 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1344 = x1343 * x61;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1345 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x1345 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1346 = x1345 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1347 = x1344 + x1346;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1348 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x1348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1349 = x1348 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1350 = x1347 + x1349;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1351 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1351 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1352 = x1350 + x1351;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1353 = x1342 + x1352;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1354 = x1353 * x85;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1355 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x1355 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1356 = x1354 + x1355;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1357 = x1308 - x1356;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1357 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1358 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x1358 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1359 = x1358 * x71;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1360 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1360 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1361 = x1360 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1362 = x1359 + x1361;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1363 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x1363 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1364 = x1362 + x1363;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1365 = x1364 * x61;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1366 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1366 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1367 = x1366 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1368 = x1365 + x1367;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1369 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1369 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1370 = x1368 + x1369;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1371 = x1307 - x1370;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1371 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1372 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x1372 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1373 = x1372 * x66;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1374 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x1374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1375 = x1374 * x81;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1376 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1376 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1377 = x1375 + x1376;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1378 = x1377 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1379 = x1373 + x1378;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1380 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1380 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1381 = x1380 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1382 = x1379 + x1381;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1383 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1384 = x1382 + x1383;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1385 = x1306 - x1384;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1385 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1386 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x1386 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1387 = x1386 * x66;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x1388 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x1388 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1389 = x1387 + x1388;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1390 = x1305 - x1389;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1390 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1305;
        host_args.at(1) = x1306;
        host_args.at(2) = x1307;
        host_args.at(3) = x1308;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1391 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1392 = (x1391 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1393 = x1391 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1394 = (x1393 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1394);
            reg = x1394;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1395 = x1391 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1396 = (x1395 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1396);
            reg = x1396;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1397 = x1391 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1398 = (x1397 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1398);
            reg = x1398;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1399 = x1391 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1400 = (x1399 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1400);
            reg = x1400;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1401 = x1391 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1402 = (x1401 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1402);
            reg = x1402;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1403 = x1391 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1404 = (x1403 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1404);
            reg = x1404;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1405 = x1391 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x1406 = (x1405 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1406);
            reg = x1406;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1407 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1407 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1408 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1408 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1409 = x1408 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1410 = x1407 + x1409;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1411 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1411 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1412 = x1411 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1413 = x1410 + x1412;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1414 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1414 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1415 = x1414 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1416 = x1413 + x1415;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1417 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1417 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1418 = x1417 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1419 = x1416 + x1418;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1420 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1420 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1421 = x1420 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1422 = x1419 + x1421;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1423 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1423 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x1424 = x1423 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x1425 = x1422 + x1424;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x1426 = x1425 - x1391;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x1426 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":45:69))
        auto x1427 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x1427 != Fp::invalid());
        if (x1427 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1428 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1429 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1430 = x1428 + x1429;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1431 = x1355 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1432 = x1431 + x1364;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1433 = x1430 + x1432;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1434 = x1341 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1435 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1436 = x1434 + x1435;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1437 = x1436 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1438 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1433);
            reg = x1433;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1437);
            reg = x1437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1438);
            reg = x1438;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1438);
            reg = x1438;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x52);
            reg = x52;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1439 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1439 != Fp::invalid());
        if (x1439 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1440 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1441 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1442 = x1440 + x1441;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1443 = x1355 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1444 = x1443 + x1364;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1445 = x1442 + x1444;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1446 = x1341 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1447 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1448 = x1446 + x1447;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1449 = x1448 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1450 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1445);
            reg = x1445;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1449);
            reg = x1449;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1450);
            reg = x1450;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1450);
            reg = x1450;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1451 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1451 != Fp::invalid());
        if (x1451 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1452 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1453 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1454 = x1452 + x1453;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1455 = x1355 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1456 = x1455 + x1364;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1457 = x1454 + x1456;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1458 = x1341 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1459 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1460 = x1458 + x1459;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1461 = x1460 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1462 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1457);
            reg = x1457;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1461);
            reg = x1461;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1462);
            reg = x1462;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1462);
            reg = x1462;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":48:68))
        auto x1463 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1463 != Fp::invalid());
        if (x1463 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1464 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1465 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1466 = x1464 + x1465;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1467 = x1355 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1468 = x1467 + x1364;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1469 = x1466 + x1468;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1470 = x1341 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1471 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1472 = x1470 + x1471;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1473 = x1472 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1474 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1469);
            reg = x1469;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1473);
            reg = x1473;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1474);
            reg = x1474;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1474);
            reg = x1474;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1475 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1475 != Fp::invalid());
        if (x1475 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1476 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1477 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1478 = x1476 + x1477;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1479 = x1355 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1480 = x1479 + x1364;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1481 = x1478 + x1480;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1482 = x1341 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1483 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1484 = x1482 + x1483;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1485 = x1484 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1486 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1481);
            reg = x1481;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1485);
            reg = x1485;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1486);
            reg = x1486;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1486);
            reg = x1486;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1487 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1487 != Fp::invalid());
        if (x1487 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1488 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1489 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1490 = x1488 + x1489;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1491 = x1380 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1492 = x1490 + x1491;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1493 = x1383 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1494 = x1492 + x1493;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1495 = x1341 * x45;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1496 = x1386 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1497 = x1495 + x1496;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1498 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1499 = x1497 + x1498;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1500 = x1499 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1501 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1494);
            reg = x1494;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1500);
            reg = x1500;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1501);
            reg = x1501;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1501);
            reg = x1501;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1502 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1502 != Fp::invalid());
        if (x1502 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1503 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1504 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1505 = x1503 + x1504;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1506 = x1380 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1507 = x1505 + x1506;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1508 = x1383 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1509 = x1507 + x1508;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1510 = x1341 * x45;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1511 = x1386 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1512 = x1510 + x1511;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1513 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1514 = x1512 + x1513;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1515 = x1514 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1516 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1509);
            reg = x1509;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1515);
            reg = x1515;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1516);
            reg = x1516;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1516);
            reg = x1516;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1517 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1517 != Fp::invalid());
        if (x1517 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1518 = x1348 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1519 = x1351 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1520 = x1518 + x1519;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1521 = x1380 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1522 = x1520 + x1521;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1523 = x1383 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1524 = x1522 + x1523;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1525 = x1341 * x45;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1526 = x1386 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1527 = x1525 + x1526;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1528 = x1343 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1529 = x1527 + x1528;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1530 = x1529 + x1345;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1531 = x1341 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1524);
            reg = x1524;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1530);
            reg = x1530;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1531);
            reg = x1531;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1531);
            reg = x1531;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1532 = x1366 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1533 = x1369 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1534 = x1532 + x1533;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1535 = x1534 + x1372;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1536 = x1535 + x50;
      {
        host_args.at(0) = x1536;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1537 = host_outs.at(0);
        auto x1538 = host_outs.at(1);
        auto x1539 = host_outs.at(2);
        auto x1540 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1537);
          reg = x1537;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1538);
          reg = x1538;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1539);
          reg = x1539;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1540);
          reg = x1540;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1541 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x1541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1542 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x1542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1543 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1544 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1544 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1536);
        reg = x1536;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1299);
        reg = x1299;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1541);
        reg = x1541;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1542);
        reg = x1542;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1543);
        reg = x1543;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1544);
        reg = x1544;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1545 = x1355 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1546 = x1545 + x1364;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1547 = x1546 + x50;
      {
        host_args.at(0) = x1547;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x1548 = host_outs.at(0);
        auto x1549 = host_outs.at(1);
        auto x1550 = host_outs.at(2);
        auto x1551 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1548);
          reg = x1548;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1549);
          reg = x1549;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1550);
          reg = x1550;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1551);
          reg = x1551;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1552 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x1552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1553 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1554 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1555 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1555 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1547);
        reg = x1547;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1299);
        reg = x1299;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1552);
        reg = x1552;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1553);
        reg = x1553;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1554);
        reg = x1554;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1555);
        reg = x1555;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1556 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1557 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1558 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1559 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1559 != Fp::invalid());
      host_args.at(0) = x1556;
      host_args.at(1) = x1557;
      host_args.at(2) = x1558;
      host_args.at(3) = x1559;
      host_args.at(4) = x1535;
      host_args.at(5) = x1541;
      host_args.at(6) = x1542;
      host_args.at(7) = x1543;
      host_args.at(8) = x1544;
      host_args.at(9) = x1546;
      host_args.at(10) = x1552;
      host_args.at(11) = x1553;
      host_args.at(12) = x1554;
      host_args.at(13) = x1555;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1560 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1560 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x1561 = x88 - x1560;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1562 = x1561 * x1541;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1563 = x1561 * x1542;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1564 = x1561 * x1543;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1565 = x1561 * x1544;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1566 = x524 * x81;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1567 = x521 + x1566;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x1568 = x514 - x81;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1569 = x1560 * x1568;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1570 = x1560 * x515;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1571 = x1560 * x518;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1572 = x1560 * x1567;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1573 = x1562 + x1569;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1574 = x1563 + x1570;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1575 = x1564 + x1571;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1576 = x1565 + x1572;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1577 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1577 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x1578 = x88 - x1577;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1579 = x1578 * x1552;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1580 = x1578 * x1553;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1581 = x1578 * x1554;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1582 = x1578 * x1555;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1583 = x1577 * x1556;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1584 = x1577 * x1557;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1585 = x1577 * x1558;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1586 = x1577 * x1559;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1587 = x1579 + x1583;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1588 = x1580 + x1584;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1589 = x1581 + x1585;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1590 = x1582 + x1586;
      host_args.at(0) = x1573;
      host_args.at(1) = x1574;
      host_args.at(2) = x1575;
      host_args.at(3) = x1576;
      host_args.at(4) = x1587;
      host_args.at(5) = x1588;
      host_args.at(6) = x1589;
      host_args.at(7) = x1590;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x1591 = Fp(x1576.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x1592 = x1591 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1592);
          reg = x1592;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x1593 = Fp(x1576.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x1594 = x1593 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1594);
          reg = x1594;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1595 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1595 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x1596 = x1595 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1597 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1597 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x1598 = x1597 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x1599 = x1596 + x1598;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x1600 = x1576 - x1599;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x1600 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x1601 = Fp(x1590.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x1602 = x1601 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1602);
          reg = x1602;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x1603 = Fp(x1590.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x1604 = x1603 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1604);
          reg = x1604;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1605 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1605 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x1606 = x1605 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x1607 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x1607 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x1608 = x1607 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x1609 = x1606 + x1608;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x1610 = x1590 - x1609;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x1610 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1587);
        reg = x1587;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1588);
        reg = x1588;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1589);
        reg = x1589;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1590);
        reg = x1590;
      }
      {
        // loc("cirgen/components/u32.cpp":107:20)
        auto x1611 = Fp(x1573.asUInt32() & x1587.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x1612 = Fp(x1574.asUInt32() & x1588.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x1613 = Fp(x1575.asUInt32() & x1589.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x1614 = Fp(x1576.asUInt32() & x1590.asUInt32());
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1611);
          reg = x1611;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1612);
          reg = x1612;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1613);
          reg = x1613;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1614);
          reg = x1614;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1615 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1615 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1616 = x1615 * x1573;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1617 = x1615 * x1574;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1618 = x1615 * x1575;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1619 = x1615 * x1576;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1620 = x1616 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1621 = x1617 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1622 = x1618 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1623 = x1619 + x84;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1624 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1624 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1625 = x1624 * x1587;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1626 = x1624 * x1588;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1627 = x1624 * x1589;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1628 = x1624 * x1590;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1629 = x1620 + x1625;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1630 = x1621 + x1626;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1631 = x1622 + x1627;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1632 = x1623 + x1628;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1633 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1634 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1635 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1636 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1637 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1637 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1638 = x1633 * x1634;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1639 = x1633 * x1635;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1640 = x1633 * x1636;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x1641 = x1633 * x1637;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1642 = x1629 + x1638;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1643 = x1630 + x1639;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1644 = x1631 + x1640;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x1645 = x1632 + x1641;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x1646 = x1643 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x1647 = x1642 + x1646;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1648 = Fp(x1647.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1648);
          reg = x1648;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1649 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1649 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1650 = x1647 - x1649;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1651 = x1650 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1652 = Fp(x1651.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1652);
          reg = x1652;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1653 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1653 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1654 = x1651 - x1653;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1655 = x1654 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1655);
        reg = x1655;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1656 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1656 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x1657 = x1656 + x1644;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x1658 = x1645 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x1659 = x1657 + x1658;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1660 = Fp(x1659.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1660);
          reg = x1660;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x1661 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1661 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1662 = x1659 - x1661;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1663 = x1662 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x1664 = Fp(x1663.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1664);
          reg = x1664;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x1665 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1665 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x1666 = x1663 - x1665;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x1667 = x1666 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1667);
        reg = x1667;
      }
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x1668 = Fp(x1665.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x1669 = x1668 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1669);
          reg = x1669;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x1670 = Fp(x1665.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x1671 = x1670 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1671);
          reg = x1671;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1672 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1672 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x1673 = x1672 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x1674 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1674 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x1675 = x1674 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x1676 = x1673 + x1675;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x1677 = x1665 - x1676;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x1677 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1678 = x88 - x1605;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1679 = x1595 * x1678;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1680 = x88 - x1672;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1681 = x1679 * x1680;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1682 = x88 - x1595;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1683 = x1682 * x1605;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1684 = x1683 * x1672;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1685 = x1681 + x1684;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1685);
        reg = x1685;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x1686 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1686 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1687 = x1686 + x1672;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1688 = x1686 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1689 = x1688 * x1672;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1690 = x1687 - x1689;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1690);
        reg = x1690;
      }
      // loc("cirgen/components/u32.cpp":131:26)
      auto x1691 = x1653 * x83;
      // loc("cirgen/components/u32.cpp":131:12)
      auto x1692 = x1649 + x1691;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1693 = (x1692 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1693);
          reg = x1693;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1694 = inv(x1692);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1694);
          reg = x1694;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1695 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1695 != Fp::invalid());
      if (x1695 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1692 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1696 = x88 - x1695;
      if (x1696 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1697 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x1697 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1698 = x1692 * x1697;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1699 = x1698 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1699 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":132:27)
      auto x1700 = x1665 * x83;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x1701 = x1661 + x1700;
      // loc("cirgen/components/u32.cpp":132:47)
      auto x1702 = x1696 * x77;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x1703 = x1701 + x1702;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1704 = (x1703 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1704);
          reg = x1704;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1705 = inv(x1703);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1705);
          reg = x1705;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1706 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x1706 != Fp::invalid());
      if (x1706 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1703 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1707 = x88 - x1706;
      if (x1707 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1708 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x1708 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1709 = x1703 * x1708;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1710 = x1709 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1710 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1711 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1712 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1712 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1713 = x88 - x1712;
      host_args.at(0) = x1649;
      host_args.at(1) = x1653;
      host_args.at(2) = x1661;
      host_args.at(3) = x1665;
      host_args.at(4) = x1706;
      host_args.at(5) = x1711;
      host_args.at(6) = x1713;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1714 = x1380 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1715 = x1383 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1716 = x1714 + x1715;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1717 = x1716 + x1386;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1718 = (x1717 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1718);
          reg = x1718;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1719 = inv(x1717);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1719);
          reg = x1719;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x1720 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1720 != Fp::invalid());
      if (x1720 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x1717 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x1721 = x88 - x1720;
      if (x1721 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1722 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x1722 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1723 = x1717 * x1722;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x1724 = x1723 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x1724 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1725 = x527 + x81;
      // loc("cirgen/components/u32.cpp":56:25)
      auto x1726 = x1557 * x83;
      // loc("cirgen/components/u32.cpp":56:13)
      auto x1727 = x1556 + x1726;
      // loc("cirgen/components/u32.cpp":56:49)
      auto x1728 = x1558 * x77;
      // loc("cirgen/components/u32.cpp":56:13)
      auto x1729 = x1727 + x1728;
      // loc("cirgen/components/u32.cpp":59:17)
      auto x1730 = x1559 * x49;
      // loc("cirgen/components/u32.cpp":59:16)
      auto x1731 = x1730 * x48;
      // loc("cirgen/components/u32.cpp":59:10)
      auto x1732 = x1729 + x1731;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x1733 = x527 + x1732;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1734 = x1706 * x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:35)
      auto x1735 = x1707 * x1725;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1736 = x1734 + x1735;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1737 = x1706 * x1725;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:34)
      auto x1738 = x1707 * x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1739 = x1737 + x1738;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1740 = x1711 * x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:36)
      auto x1741 = x88 - x1711;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:35)
      auto x1742 = x1741 * x1725;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1743 = x1740 + x1742;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":45:69))
      auto x1744 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1744 != Fp::invalid());
      if (x1744 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        auto x1745 = x1388 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        if (x1745 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        auto x1746 = x1377 - x81;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        if (x1746 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1747 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1748 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1749 = x1747 + x1748;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1750 = x1749 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1751 = x1341 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1752 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1753 = x1751 + x1752;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1754 = x1753 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1755 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1750);
          reg = x1750;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1754);
          reg = x1754;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1755);
          reg = x1755;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1755);
          reg = x1755;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x52);
          reg = x52;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1756 = x1725 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1757 = Fp(x1756.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1757);
            reg = x1757;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1758 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1758 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1759 = x1756 - x1758;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1760 = x1759 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1761 = Fp(x1760.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1761);
            reg = x1761;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1762 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1762 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1763 = x1760 - x1762;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1764 = x1763 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1765 = Fp(x1764.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1765);
            reg = x1765;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1766 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1766 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1767 = x1764 - x1766;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1768 = x1767 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1769 = Fp(x1768.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1769);
            reg = x1769;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1770 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1770 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1771 = x1768 - x1770;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1772 = x1771 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1772);
          reg = x1772;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1773 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1773 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1774 = x88 - x1773;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1775 = x1773 * x1774;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1775);
          reg = x1775;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1776 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1776 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1777 = x85 - x1773;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1778 = x1776 * x1777;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1778 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1779 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1779 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1779);
          reg = x1779;
        }
        if (x1721 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1649;
          host_args.at(2) = x1653;
          host_args.at(3) = x1661;
          host_args.at(4) = x1665;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:69)
          auto x1780 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1661);
            reg = x1661;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1781 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1781 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1782 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1782 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1783 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1783 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1784 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1784 != Fp::invalid());
            host_args.at(0) = x1780;
            host_args.at(1) = x1781;
            host_args.at(2) = x1782;
            host_args.at(3) = x1783;
            host_args.at(4) = x1784;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1785 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1785 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1786 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1786 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1787 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1787 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1788 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1788 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1780);
            reg = x1780;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1785);
            reg = x1785;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1786);
            reg = x1786;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1787);
            reg = x1787;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1788);
            reg = x1788;
          }
        }
        if (x1720 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1789 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1789 != Fp::invalid());
      if (x1789 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1790 = x1388 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1791 = x1377 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1791 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1792 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1793 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1794 = x1792 + x1793;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1795 = x1794 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1796 = x1341 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1797 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1798 = x1796 + x1797;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1799 = x1798 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1800 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1795);
          reg = x1795;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1799);
          reg = x1799;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1800);
          reg = x1800;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1800);
          reg = x1800;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1801 = x1725 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1802 = Fp(x1801.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1802);
            reg = x1802;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1803 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1803 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1804 = x1801 - x1803;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1805 = x1804 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1806 = Fp(x1805.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1806);
            reg = x1806;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1807 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1807 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1808 = x1805 - x1807;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1809 = x1808 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1810 = Fp(x1809.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1810);
            reg = x1810;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1811 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1811 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1812 = x1809 - x1811;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1813 = x1812 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1814 = Fp(x1813.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1814);
            reg = x1814;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1815 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1815 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1816 = x1813 - x1815;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1817 = x1816 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1817);
          reg = x1817;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1818 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1818 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1819 = x88 - x1818;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1820 = x1818 * x1819;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1820);
          reg = x1820;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1821 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1821 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1822 = x85 - x1818;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1823 = x1821 * x1822;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1823 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1824 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1824 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1824);
          reg = x1824;
        }
        if (x1721 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1649;
          host_args.at(2) = x1653;
          host_args.at(3) = x1661;
          host_args.at(4) = x1665;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1825 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1661);
            reg = x1661;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1826 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1826 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1827 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1827 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1828 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1828 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1829 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1829 != Fp::invalid());
            host_args.at(0) = x1825;
            host_args.at(1) = x1826;
            host_args.at(2) = x1827;
            host_args.at(3) = x1828;
            host_args.at(4) = x1829;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1830 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1830 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1831 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1831 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1832 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1832 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1833 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1833 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1825);
            reg = x1825;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1830);
            reg = x1830;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1831);
            reg = x1831;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1832);
            reg = x1832;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1833);
            reg = x1833;
          }
        }
        if (x1720 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1834 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1834 != Fp::invalid());
      if (x1834 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1835 = x1388 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1835 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1836 = x1377 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1836 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1837 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1838 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1839 = x1837 + x1838;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1840 = x1839 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1841 = x1341 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1842 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1843 = x1841 + x1842;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1844 = x1843 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1845 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1840);
          reg = x1840;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1844);
          reg = x1844;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1845);
          reg = x1845;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1845);
          reg = x1845;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1846 = x1725 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1847 = Fp(x1846.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1847);
            reg = x1847;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1848 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1848 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1849 = x1846 - x1848;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1850 = x1849 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1851 = Fp(x1850.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1851);
            reg = x1851;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1852 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1852 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1853 = x1850 - x1852;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1854 = x1853 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1855 = Fp(x1854.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1855);
            reg = x1855;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1856 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1856 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1857 = x1854 - x1856;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1858 = x1857 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1859 = Fp(x1858.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1859);
            reg = x1859;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1860 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1860 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1861 = x1858 - x1860;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1862 = x1861 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1862);
          reg = x1862;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1863 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1863 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1864 = x88 - x1863;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1865 = x1863 * x1864;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1865);
          reg = x1865;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1866 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1866 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1867 = x85 - x1863;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1868 = x1866 * x1867;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1868 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1869 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1869 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1869);
          reg = x1869;
        }
        if (x1721 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1649;
          host_args.at(2) = x1653;
          host_args.at(3) = x1661;
          host_args.at(4) = x1665;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x1870 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1661);
            reg = x1661;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1871 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1871 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1872 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1872 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1873 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1873 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1874 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1874 != Fp::invalid());
            host_args.at(0) = x1870;
            host_args.at(1) = x1871;
            host_args.at(2) = x1872;
            host_args.at(3) = x1873;
            host_args.at(4) = x1874;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1875 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1875 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1876 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1876 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1877 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1877 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1878 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1878 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1870);
            reg = x1870;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1875);
            reg = x1875;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1876);
            reg = x1876;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1877);
            reg = x1877;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1878);
            reg = x1878;
          }
        }
        if (x1720 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":48:68))
      auto x1879 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1879 != Fp::invalid());
      if (x1879 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        auto x1880 = x1388 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        if (x1880 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        auto x1881 = x1377 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        if (x1881 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1882 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1883 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1884 = x1882 + x1883;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1885 = x1884 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1886 = x1341 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1887 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1888 = x1886 + x1887;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1889 = x1888 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1890 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1885);
          reg = x1885;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1889);
          reg = x1889;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1890);
          reg = x1890;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1890);
          reg = x1890;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1891 = x1725 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1892 = Fp(x1891.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1892);
            reg = x1892;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1893 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1893 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1894 = x1891 - x1893;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1895 = x1894 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1896 = Fp(x1895.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1896);
            reg = x1896;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1897 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1897 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1898 = x1895 - x1897;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1899 = x1898 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1900 = Fp(x1899.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1900);
            reg = x1900;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1901 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1901 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1902 = x1899 - x1901;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1903 = x1902 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1904 = Fp(x1903.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1904);
            reg = x1904;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1905 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1905 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1906 = x1903 - x1905;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1907 = x1906 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1907);
          reg = x1907;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1908 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1908 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1909 = x88 - x1908;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1910 = x1908 * x1909;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1910);
          reg = x1910;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1911 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1911 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1912 = x85 - x1908;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1913 = x1911 * x1912;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1913 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1914 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1914 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1914);
          reg = x1914;
        }
        if (x1721 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1711;
          host_args.at(2) = x87;
          host_args.at(3) = x87;
          host_args.at(4) = x87;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:68)
          auto x1915 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1711);
            reg = x1711;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1916 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1916 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1917 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1917 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1918 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1918 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1919 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1919 != Fp::invalid());
            host_args.at(0) = x1915;
            host_args.at(1) = x1916;
            host_args.at(2) = x1917;
            host_args.at(3) = x1918;
            host_args.at(4) = x1919;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1920 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1920 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1921 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1921 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1922 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1922 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1923 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1923 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1915);
            reg = x1915;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1920);
            reg = x1920;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1921);
            reg = x1921;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1922);
            reg = x1922;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1923);
            reg = x1923;
          }
        }
        if (x1720 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x1924 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1924 != Fp::invalid());
      if (x1924 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1925 = x1388 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1925 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1926 = x1377 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1926 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1927 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1928 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1929 = x1927 + x1928;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1930 = x1929 + x1546;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1931 = x1341 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1932 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1933 = x1931 + x1932;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1934 = x1933 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1935 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1930);
          reg = x1930;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1934);
          reg = x1934;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1935);
          reg = x1935;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1935);
          reg = x1935;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1936 = x1725 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1937 = Fp(x1936.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1937);
            reg = x1937;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1938 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1938 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1939 = x1936 - x1938;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1940 = x1939 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1941 = Fp(x1940.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1941);
            reg = x1941;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1942 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1942 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1943 = x1940 - x1942;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1944 = x1943 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1945 = Fp(x1944.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1945);
            reg = x1945;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1946 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1946 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1947 = x1944 - x1946;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1948 = x1947 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1949 = Fp(x1948.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1949);
            reg = x1949;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1950 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1950 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1951 = x1948 - x1950;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1952 = x1951 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1952);
          reg = x1952;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1953 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1953 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1954 = x88 - x1953;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1955 = x1953 * x1954;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1955);
          reg = x1955;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x1956 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1956 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1957 = x85 - x1953;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1958 = x1956 * x1957;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1958 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1959 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1959 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1959);
          reg = x1959;
        }
        if (x1721 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1713;
          host_args.at(2) = x87;
          host_args.at(3) = x87;
          host_args.at(4) = x87;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x1960 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1713);
            reg = x1713;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1961 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x1961 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1962 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x1962 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1963 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x1963 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x1964 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x1964 != Fp::invalid());
            host_args.at(0) = x1960;
            host_args.at(1) = x1961;
            host_args.at(2) = x1962;
            host_args.at(3) = x1963;
            host_args.at(4) = x1964;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1965 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x1965 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1966 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1966 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1967 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1967 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x1968 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1968 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1960);
            reg = x1960;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1965);
            reg = x1965;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1966);
            reg = x1966;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1967);
            reg = x1967;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1968);
            reg = x1968;
          }
        }
        if (x1720 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x1969 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1969 != Fp::invalid());
      if (x1969 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1970 = x1388 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1970 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1377 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1971 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x1972 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1973 = x1971 + x1972;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1974 = x1973 + x1714;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1975 = x1974 + x1715;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x1976 = x1341 * x45;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x1977 = x1386 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x1978 = x1976 + x1977;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x1979 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x1980 = x1978 + x1979;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x1981 = x1980 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x1982 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1975);
          reg = x1975;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1981);
          reg = x1981;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1982);
          reg = x1982;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1982);
          reg = x1982;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1983 = x1736 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1984 = Fp(x1983.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1984);
            reg = x1984;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1985 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1985 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1986 = x1983 - x1985;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1987 = x1986 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1988 = Fp(x1987.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1988);
            reg = x1988;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x1989 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1989 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1990 = x1987 - x1989;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1991 = x1990 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x1992 = Fp(x1991.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1992);
            reg = x1992;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x1993 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1993 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x1994 = x1991 - x1993;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x1995 = x1994 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1996 = Fp(x1995.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1996);
            reg = x1996;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x1997 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1997 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1998 = x1995 - x1997;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1999 = x1998 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1999);
          reg = x1999;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2000 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2000 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2001 = x88 - x2000;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2002 = x2000 * x2001;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2002);
          reg = x2002;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2003 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2003 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2004 = x85 - x2000;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2005 = x2003 * x2004;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2005 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2006 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2006 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2006);
          reg = x2006;
        }
        if (x87 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1649;
          host_args.at(2) = x1653;
          host_args.at(3) = x1661;
          host_args.at(4) = x1665;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x2007 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1661);
            reg = x1661;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2008 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2008 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2009 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2009 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2010 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2010 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2011 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2011 != Fp::invalid());
            host_args.at(0) = x2007;
            host_args.at(1) = x2008;
            host_args.at(2) = x2009;
            host_args.at(3) = x2010;
            host_args.at(4) = x2011;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2012 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2012 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2013 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2013 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2014 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2014 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2015 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2015 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2007);
            reg = x2007;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2012);
            reg = x2012;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2013);
            reg = x2013;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2014);
            reg = x2014;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2015);
            reg = x2015;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2016 = x1720 + x88;
        if (x2016 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x2017 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2017 != Fp::invalid());
      if (x2017 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2018 = x1388 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2018 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2019 = x1377 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2019 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2020 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2021 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2022 = x2020 + x2021;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2023 = x2022 + x1714;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2024 = x2023 + x1715;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2025 = x1341 * x45;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2026 = x1386 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2027 = x2025 + x2026;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2028 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2029 = x2027 + x2028;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2030 = x2029 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2031 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2024);
          reg = x2024;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2030);
          reg = x2030;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2031);
          reg = x2031;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2031);
          reg = x2031;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2032 = x1739 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2033 = Fp(x2032.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2033);
            reg = x2033;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2034 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2034 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2035 = x2032 - x2034;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2036 = x2035 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2037 = Fp(x2036.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2037);
            reg = x2037;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2038 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2038 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2039 = x2036 - x2038;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2040 = x2039 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2041 = Fp(x2040.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2041);
            reg = x2041;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2042 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2042 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2043 = x2040 - x2042;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2044 = x2043 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2045 = Fp(x2044.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2045);
            reg = x2045;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2046 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2046 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2047 = x2044 - x2046;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2048 = x2047 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2048);
          reg = x2048;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2049 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2049 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2050 = x88 - x2049;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2051 = x2049 * x2050;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2051);
          reg = x2051;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2052 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2052 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2053 = x85 - x2049;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2054 = x2052 * x2053;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2054 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2055 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2055 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2055);
          reg = x2055;
        }
        if (x87 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1649;
          host_args.at(2) = x1653;
          host_args.at(3) = x1661;
          host_args.at(4) = x1665;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2056 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1661);
            reg = x1661;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2057 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2057 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2058 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2058 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2059 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2059 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2060 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2060 != Fp::invalid());
            host_args.at(0) = x2056;
            host_args.at(1) = x2057;
            host_args.at(2) = x2058;
            host_args.at(3) = x2059;
            host_args.at(4) = x2060;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2061 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2061 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2062 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2062 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2063 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2063 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2064 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2064 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2056);
            reg = x2056;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2061);
            reg = x2061;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2062);
            reg = x2062;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2063);
            reg = x2063;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2064);
            reg = x2064;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2065 = x1720 + x88;
        if (x2065 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2066 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2066 != Fp::invalid());
      if (x2066 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2067 = x1388 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2067 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2068 = x1377 - x81;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2068 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2069 = x1348 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2070 = x1351 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2071 = x2069 + x2070;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2072 = x2071 + x1714;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2073 = x2072 + x1715;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2074 = x1341 * x45;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2075 = x1386 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2076 = x2074 + x2075;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2077 = x1343 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2078 = x2076 + x2077;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2079 = x2078 + x1345;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2080 = x1341 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2073);
          reg = x2073;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2079);
          reg = x2079;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2080);
          reg = x2080;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2080);
          reg = x2080;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2081 = x1743 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2082 = Fp(x2081.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2082);
            reg = x2082;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2083 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2083 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2084 = x2081 - x2083;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2085 = x2084 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2086 = Fp(x2085.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2087 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2087 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2088 = x2085 - x2087;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2089 = x2088 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2090 = Fp(x2089.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2090);
            reg = x2090;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2091 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2091 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2092 = x2089 - x2091;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2093 = x2092 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2094 = Fp(x2093.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2094);
            reg = x2094;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2095 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2095 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2096 = x2093 - x2095;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2097 = x2096 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2097);
          reg = x2097;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2098 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2098 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2099 = x88 - x2098;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2100 = x2098 * x2099;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2100);
          reg = x2100;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2101 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2101 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2102 = x85 - x2098;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2103 = x2101 * x2102;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2103 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2104 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2104 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2104);
          reg = x2104;
        }
        if (x87 != 0) {
          host_args.at(0) = x1717;
          host_args.at(1) = x1649;
          host_args.at(2) = x1653;
          host_args.at(3) = x1661;
          host_args.at(4) = x1665;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2105 = x1717 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1649);
            reg = x1649;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1653);
            reg = x1653;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1661);
            reg = x1661;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1665);
            reg = x1665;
          }
          {
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2106 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2106 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2107 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2107 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2108 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2108 != Fp::invalid());
            // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2109 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2109 != Fp::invalid());
            host_args.at(0) = x2105;
            host_args.at(1) = x2106;
            host_args.at(2) = x2107;
            host_args.at(3) = x2108;
            host_args.at(4) = x2109;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2110 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2110 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2111 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2111 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2112 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2112 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2113 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2113 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2105);
            reg = x2105;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2110);
            reg = x2110;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2111);
            reg = x2111;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2112);
            reg = x2112;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2114 = x1720 + x88;
        if (x2114 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/components/mux.h":37:25))
    auto x2115 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x2115 != Fp::invalid());
    if (x2115 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2116 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2116 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2117 = x527 * x79;
      {
        host_args.at(0) = x2117;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2118 = host_outs.at(0);
        auto x2119 = host_outs.at(1);
        auto x2120 = host_outs.at(2);
        auto x2121 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2118);
          reg = x2118;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2119);
          reg = x2119;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2121);
          reg = x2121;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2122 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2122 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2123 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2123 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2124 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2124 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2125 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2125 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2117);
        reg = x2117;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2116);
        reg = x2116;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2122);
        reg = x2122;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2123);
        reg = x2123;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2124);
        reg = x2124;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2125);
        reg = x2125;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2126 = Fp(x2125.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2127 = x2126 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2127);
          reg = x2127;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2128 = Fp(x2125.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2129 = x2128 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2129);
          reg = x2129;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2130 = Fp(x2125.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2131 = x2130 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2131);
          reg = x2131;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2132 = Fp(x2125.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2133 = x2132 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2133);
          reg = x2133;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2134 = Fp(x2125.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2135 = x2134 * x58;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2135);
          reg = x2135;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2136 = Fp(x2125.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2136);
          reg = x2136;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2137 = Fp(x2124.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2138 = x2137 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2138);
          reg = x2138;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2139 = Fp(x2124.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2140 = x2139 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2140);
          reg = x2140;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2141 = Fp(x2124.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2142 = x2141 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2142);
          reg = x2142;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2143 = Fp(x2124.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2144 = x2143 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2144);
          reg = x2144;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2145 = Fp(x2124.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2145);
          reg = x2145;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2146 = Fp(x2123.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2147 = x2146 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2147);
          reg = x2147;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2148 = Fp(x2123.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2149 = x2148 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2149);
          reg = x2149;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2150 = Fp(x2123.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2151 = x2150 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2151);
          reg = x2151;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2152 = Fp(x2123.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2153 = x2152 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2153);
          reg = x2153;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2154 = Fp(x2123.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2154);
          reg = x2154;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2155 = Fp(x2122.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2156 = x2155 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2156);
          reg = x2156;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2157 = Fp(x2122.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2157);
          reg = x2157;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2158 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x2158 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2159 = x2158 * x57;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2160 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2160 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2161 = x2160 * x61;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2162 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x2162 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2163 = x2162 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2164 = x2161 + x2163;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2165 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x2165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2166 = x2165 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2167 = x2164 + x2166;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2168 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2168 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2169 = x2167 + x2168;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2170 = x2159 + x2169;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2171 = x2170 * x85;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2172 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x2172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2173 = x2171 + x2172;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2174 = x2125 - x2173;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2174 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2175 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x2175 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2176 = x2175 * x71;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2177 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2178 = x2177 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2179 = x2176 + x2178;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2180 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x2180 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2181 = x2179 + x2180;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2182 = x2181 * x61;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2183 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2184 = x2183 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2185 = x2182 + x2184;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2186 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2186 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2187 = x2185 + x2186;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2188 = x2124 - x2187;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2188 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2189 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x2189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2190 = x2189 * x66;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2191 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x2191 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2192 = x2191 * x81;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2193 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2193 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2194 = x2192 + x2193;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2195 = x2194 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2196 = x2190 + x2195;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2197 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2197 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2198 = x2197 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2199 = x2196 + x2198;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2200 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2200 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2201 = x2199 + x2200;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2202 = x2123 - x2201;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2202 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2203 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x2203 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2204 = x2203 * x66;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x2205 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x2205 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2206 = x2204 + x2205;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2207 = x2122 - x2206;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2207 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2122;
        host_args.at(1) = x2123;
        host_args.at(2) = x2124;
        host_args.at(3) = x2125;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2208 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2209 = (x2208 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2209);
            reg = x2209;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2210 = x2208 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2211 = (x2210 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2211);
            reg = x2211;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2212 = x2208 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2213 = (x2212 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2213);
            reg = x2213;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2214 = x2208 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2215 = (x2214 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2215);
            reg = x2215;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2216 = x2208 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2217 = (x2216 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2217);
            reg = x2217;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2218 = x2208 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2219 = (x2218 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2219);
            reg = x2219;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2220 = x2208 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2221 = (x2220 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2221);
            reg = x2221;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2222 = x2208 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2223 = (x2222 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2223);
            reg = x2223;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2224 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2224 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2225 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2225 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2226 = x2225 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2227 = x2224 + x2226;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2228 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2228 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2229 = x2228 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2230 = x2227 + x2229;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2231 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2231 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2232 = x2231 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2233 = x2230 + x2232;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2234 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2234 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2235 = x2234 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2236 = x2233 + x2235;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2237 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2237 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2238 = x2237 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2239 = x2236 + x2238;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2240 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2240 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2241 = x2240 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2242 = x2239 + x2241;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2243 = x2242 - x2208;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2243 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x2244 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x2244 != Fp::invalid());
        if (x2244 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2245 = x2165 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2246 = x2168 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2247 = x2245 + x2246;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2248 = x2197 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2249 = x2247 + x2248;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2250 = x2200 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2251 = x2249 + x2250;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2252 = x2158 * x45;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2253 = x2203 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2254 = x2252 + x2253;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2255 = x2160 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2256 = x2254 + x2255;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2257 = x2256 + x2162;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2258 = x2158 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2251);
            reg = x2251;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2257);
            reg = x2257;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2258);
            reg = x2258;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2258);
            reg = x2258;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2259 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2259 != Fp::invalid());
        if (x2259 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2260 = x2165 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2261 = x2168 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2262 = x2260 + x2261;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2263 = x2197 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2264 = x2262 + x2263;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2265 = x2200 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2266 = x2264 + x2265;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2267 = x2158 * x45;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2268 = x2203 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2269 = x2267 + x2268;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2270 = x2160 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2271 = x2269 + x2270;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2272 = x2271 + x2162;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2273 = x2158 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2266);
            reg = x2266;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2272);
            reg = x2272;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2273);
            reg = x2273;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2273);
            reg = x2273;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2274 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2274 != Fp::invalid());
        if (x2274 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2275 = x2165 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2276 = x2168 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2277 = x2275 + x2276;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2278 = x2197 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2279 = x2277 + x2278;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2280 = x2200 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2281 = x2279 + x2280;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2282 = x2158 * x45;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2283 = x2203 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2284 = x2282 + x2283;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2285 = x2160 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2286 = x2284 + x2285;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2287 = x2286 + x2162;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2288 = x2158 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2281);
            reg = x2281;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2287);
            reg = x2287;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2288);
            reg = x2288;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2288);
            reg = x2288;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x53);
            reg = x53;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2289 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2289 != Fp::invalid());
        if (x2289 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2290 = x2165 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2291 = x2168 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2292 = x2290 + x2291;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2293 = x2172 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2294 = x2293 + x2181;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2295 = x2292 + x2294;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2296 = x2295 - x2180;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2297 = x2180 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2298 = x2196 + x2297;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2299 = x2160 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2300 = x2298 + x2299;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2301 = x2300 + x2162;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2302 = x2158 * x45;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2303 = x2302 + x2184;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2304 = x2303 + x2186;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2305 = x2158 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2296);
            reg = x2296;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2301);
            reg = x2301;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2304);
            reg = x2304;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2305);
            reg = x2305;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2306 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2306 != Fp::invalid());
        if (x2306 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2307 = x2165 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2308 = x2168 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2309 = x2307 + x2308;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2310 = x2172 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2311 = x2310 + x2181;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2312 = x2309 + x2311;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2313 = x2158 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2314 = x2160 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2315 = x2313 + x2314;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2316 = x2315 + x2162;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2317 = x2158 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2312);
            reg = x2312;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2316);
            reg = x2316;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2318 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2318 != Fp::invalid());
        if (x2318 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2196);
            reg = x2196;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2187);
            reg = x2187;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2173);
            reg = x2173;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2319 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2319 != Fp::invalid());
        if (x2319 != 0) {
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2196);
            reg = x2196;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2187);
            reg = x2187;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2173);
            reg = x2173;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2320 = x2183 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2321 = x2186 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2322 = x2320 + x2321;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2323 = x2322 + x2189;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2324 = x2323 + x50;
      {
        host_args.at(0) = x2324;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2325 = host_outs.at(0);
        auto x2326 = host_outs.at(1);
        auto x2327 = host_outs.at(2);
        auto x2328 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2325);
          reg = x2325;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2326);
          reg = x2326;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2327);
          reg = x2327;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2328);
          reg = x2328;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2329 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x2329 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2330 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2330 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2331 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2331 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2332 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2332 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2324);
        reg = x2324;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2116);
        reg = x2116;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2329);
        reg = x2329;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2330);
        reg = x2330;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2331);
        reg = x2331;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2332);
        reg = x2332;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2333 = x2172 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2334 = x2333 + x2181;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2335 = x2334 + x50;
      {
        host_args.at(0) = x2335;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2336 = host_outs.at(0);
        auto x2337 = host_outs.at(1);
        auto x2338 = host_outs.at(2);
        auto x2339 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2336);
          reg = x2336;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2337);
          reg = x2337;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2338);
          reg = x2338;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2339);
          reg = x2339;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2340 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x2340 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2341 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2341 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2342 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2342 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2343 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2343 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2335);
        reg = x2335;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2116);
        reg = x2116;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2340);
        reg = x2340;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2341);
        reg = x2341;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2342);
        reg = x2342;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2343);
        reg = x2343;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2344 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2344 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2345 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2345 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2346 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2346 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2347 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2347 != Fp::invalid());
      host_args.at(0) = x2344;
      host_args.at(1) = x2345;
      host_args.at(2) = x2346;
      host_args.at(3) = x2347;
      host_args.at(4) = x2323;
      host_args.at(5) = x2329;
      host_args.at(6) = x2330;
      host_args.at(7) = x2331;
      host_args.at(8) = x2332;
      host_args.at(9) = x2334;
      host_args.at(10) = x2340;
      host_args.at(11) = x2341;
      host_args.at(12) = x2342;
      host_args.at(13) = x2343;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2348 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2348 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x2349 = x88 - x2348;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2350 = x2349 * x2329;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2351 = x2349 * x2330;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2352 = x2349 * x2331;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2353 = x2349 * x2332;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2354 = x524 * x81;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2355 = x521 + x2354;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x2356 = x514 - x81;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2357 = x2348 * x2356;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2358 = x2348 * x515;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2359 = x2348 * x518;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2360 = x2348 * x2355;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2361 = x2350 + x2357;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2362 = x2351 + x2358;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2363 = x2352 + x2359;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2364 = x2353 + x2360;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2365 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x2366 = x88 - x2365;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2367 = x2366 * x2340;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2368 = x2366 * x2341;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2369 = x2366 * x2342;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2370 = x2366 * x2343;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2371 = x2365 * x2344;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2372 = x2365 * x2345;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2373 = x2365 * x2346;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2374 = x2365 * x2347;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2375 = x2367 + x2371;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2376 = x2368 + x2372;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2377 = x2369 + x2373;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2378 = x2370 + x2374;
      host_args.at(0) = x2361;
      host_args.at(1) = x2362;
      host_args.at(2) = x2363;
      host_args.at(3) = x2364;
      host_args.at(4) = x2375;
      host_args.at(5) = x2376;
      host_args.at(6) = x2377;
      host_args.at(7) = x2378;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x2379 = Fp(x2364.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x2380 = x2379 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2380);
          reg = x2380;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x2381 = Fp(x2364.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x2382 = x2381 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2382);
          reg = x2382;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2383 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x2383 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x2384 = x2383 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x2385 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x2385 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x2386 = x2385 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x2387 = x2384 + x2386;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x2388 = x2364 - x2387;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x2388 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x2389 = Fp(x2378.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x2390 = x2389 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2390);
          reg = x2390;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x2391 = Fp(x2378.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x2392 = x2391 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2392);
          reg = x2392;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2393 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2393 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x2394 = x2393 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x2395 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2395 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x2396 = x2395 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x2397 = x2394 + x2396;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x2398 = x2378 - x2397;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x2398 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2375);
        reg = x2375;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2376);
        reg = x2376;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2377);
        reg = x2377;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2378);
        reg = x2378;
      }
      {
        // loc("cirgen/components/u32.cpp":107:20)
        auto x2399 = Fp(x2361.asUInt32() & x2375.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x2400 = Fp(x2362.asUInt32() & x2376.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x2401 = Fp(x2363.asUInt32() & x2377.asUInt32());
        // loc("cirgen/components/u32.cpp":107:20)
        auto x2402 = Fp(x2364.asUInt32() & x2378.asUInt32());
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2399);
          reg = x2399;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2400);
          reg = x2400;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2401);
          reg = x2401;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2402);
          reg = x2402;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2403 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2403 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2404 = x2403 * x2361;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2405 = x2403 * x2362;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2406 = x2403 * x2363;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2407 = x2403 * x2364;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2408 = x2404 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2409 = x2405 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2410 = x2406 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2411 = x2407 + x84;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2412 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2412 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2413 = x2412 * x2375;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2414 = x2412 * x2376;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2415 = x2412 * x2377;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2416 = x2412 * x2378;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2417 = x2408 + x2413;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2418 = x2409 + x2414;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2419 = x2410 + x2415;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2420 = x2411 + x2416;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2421 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2421 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2422 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x2422 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2423 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2423 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2424 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2424 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2425 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2425 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2426 = x2421 * x2422;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2427 = x2421 * x2423;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2428 = x2421 * x2424;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x2429 = x2421 * x2425;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2430 = x2417 + x2426;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2431 = x2418 + x2427;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2432 = x2419 + x2428;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x2433 = x2420 + x2429;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x2434 = x2431 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x2435 = x2430 + x2434;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2436 = Fp(x2435.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2436);
          reg = x2436;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x2437 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2437 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2438 = x2435 - x2437;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2439 = x2438 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2440 = Fp(x2439.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2440);
          reg = x2440;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x2441 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2441 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2442 = x2439 - x2441;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2443 = x2442 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2443);
        reg = x2443;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2444 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2444 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x2445 = x2444 + x2432;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x2446 = x2433 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x2447 = x2445 + x2446;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2448 = Fp(x2447.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2448);
          reg = x2448;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x2449 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2449 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2450 = x2447 - x2449;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2451 = x2450 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x2452 = Fp(x2451.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2452);
          reg = x2452;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x2453 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2453 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x2454 = x2451 - x2453;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x2455 = x2454 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2455);
        reg = x2455;
      }
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x2456 = Fp(x2453.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x2457 = x2456 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2457);
          reg = x2457;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x2458 = Fp(x2453.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x2459 = x2458 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2459);
          reg = x2459;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2460 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2460 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x2461 = x2460 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x2462 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2462 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x2463 = x2462 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x2464 = x2461 + x2463;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x2465 = x2453 - x2464;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x2465 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2466 = x88 - x2393;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2467 = x2383 * x2466;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2468 = x88 - x2460;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2469 = x2467 * x2468;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2470 = x88 - x2383;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2471 = x2470 * x2393;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2472 = x2471 * x2460;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2473 = x2469 + x2472;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2473);
        reg = x2473;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x2474 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2474 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2475 = x2474 + x2460;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2476 = x2474 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2477 = x2476 * x2460;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2478 = x2475 - x2477;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2478);
        reg = x2478;
      }
      // loc("cirgen/components/u32.cpp":131:26)
      auto x2479 = x2441 * x83;
      // loc("cirgen/components/u32.cpp":131:12)
      auto x2480 = x2437 + x2479;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2481 = (x2480 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2481);
          reg = x2481;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2482 = inv(x2480);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2482);
          reg = x2482;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2483 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x2483 != Fp::invalid());
      if (x2483 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2480 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2484 = x88 - x2483;
      if (x2484 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2485 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x2485 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2486 = x2480 * x2485;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2487 = x2486 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2487 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":132:27)
      auto x2488 = x2453 * x83;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x2489 = x2449 + x2488;
      // loc("cirgen/components/u32.cpp":132:47)
      auto x2490 = x2484 * x77;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x2491 = x2489 + x2490;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2492 = (x2491 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2492);
          reg = x2492;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2493 = inv(x2491);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2493);
          reg = x2493;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2494 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x2494 != Fp::invalid());
      if (x2494 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2491 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2495 = x88 - x2494;
      if (x2495 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2496 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x2496 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2497 = x2491 * x2496;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2498 = x2497 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2498 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2499 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2499 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2500 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2500 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2501 = x88 - x2500;
      host_args.at(0) = x2437;
      host_args.at(1) = x2441;
      host_args.at(2) = x2449;
      host_args.at(3) = x2453;
      host_args.at(4) = x2494;
      host_args.at(5) = x2499;
      host_args.at(6) = x2501;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2502 = x2197 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2503 = x2200 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2504 = x2502 + x2503;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2505 = x2504 + x2203;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2506 = (x2505 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2506);
          reg = x2506;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2507 = inv(x2505);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2507);
          reg = x2507;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2508 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2508 != Fp::invalid());
      if (x2508 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x2505 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x2509 = x88 - x2508;
      if (x2509 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2510 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x2510 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2511 = x2505 * x2510;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x2512 = x2511 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x2512 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x2513 = x527 + x81;
      // loc("cirgen/components/u32.cpp":56:25)
      auto x2514 = x2345 * x83;
      // loc("cirgen/components/u32.cpp":56:13)
      auto x2515 = x2344 + x2514;
      // loc("cirgen/components/u32.cpp":56:49)
      auto x2516 = x2346 * x77;
      // loc("cirgen/components/u32.cpp":56:13)
      auto x2517 = x2515 + x2516;
      // loc("cirgen/components/u32.cpp":59:17)
      auto x2518 = x2347 * x49;
      // loc("cirgen/components/u32.cpp":59:16)
      auto x2519 = x2518 * x48;
      // loc("cirgen/components/u32.cpp":59:10)
      auto x2520 = x2517 + x2519;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x2521 = x527 + x2520;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:57)
      auto x2522 = x2449 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2523 = x2480 + x2522;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:14)
      auto x2524 = x2453 * x76;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2525 = x2523 + x2524;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2526 = x2499 * x2513;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2527 = x88 - x2499;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:34)
      auto x2528 = x2527 * x2521;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2529 = x2526 + x2528;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2530 = x2501 * x2521;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:38)
      auto x2531 = x88 - x2501;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:37)
      auto x2532 = x2531 * x2513;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2533 = x2530 + x2532;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2534 = x2501 * x2513;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:36)
      auto x2535 = x2531 * x2521;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2536 = x2534 + x2535;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2537 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2537 != Fp::invalid());
      if (x2537 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2538 = x2205 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2538 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2539 = x2194 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2539 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2540 = x2165 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2541 = x2168 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2542 = x2540 + x2541;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2543 = x2542 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2544 = x2543 + x2503;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2545 = x2158 * x45;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2546 = x2203 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2547 = x2545 + x2546;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2548 = x2160 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2549 = x2547 + x2548;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2550 = x2549 + x2162;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2551 = x2158 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2544);
          reg = x2544;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2550);
          reg = x2550;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2551);
          reg = x2551;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2551);
          reg = x2551;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2552 = x2529 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2553 = Fp(x2552.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2553);
            reg = x2553;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2554 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2554 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2555 = x2552 - x2554;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2556 = x2555 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2557 = Fp(x2556.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2557);
            reg = x2557;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2558 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2558 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2559 = x2556 - x2558;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2560 = x2559 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2561 = Fp(x2560.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2561);
            reg = x2561;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2562 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2562 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2563 = x2560 - x2562;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2564 = x2563 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2565 = Fp(x2564.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2565);
            reg = x2565;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2566 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2566 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2567 = x2564 - x2566;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2568 = x2567 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2568);
          reg = x2568;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2569 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2569 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2570 = x88 - x2569;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2571 = x2569 * x2570;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2571);
          reg = x2571;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2572 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2572 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2573 = x85 - x2569;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2574 = x2572 * x2573;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2574 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2575 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2575 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2575);
          reg = x2575;
        }
        if (x87 != 0) {
          host_args.at(0) = x2505;
          host_args.at(1) = x2437;
          host_args.at(2) = x2441;
          host_args.at(3) = x2449;
          host_args.at(4) = x2453;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2576 = x2505 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2437);
            reg = x2437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2577 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2577 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2578 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2578 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2579 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2579 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2580 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2580 != Fp::invalid());
            host_args.at(0) = x2576;
            host_args.at(1) = x2577;
            host_args.at(2) = x2578;
            host_args.at(3) = x2579;
            host_args.at(4) = x2580;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2581 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2581 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2582 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2582 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2583 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2583 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2584 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2584 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2576);
            reg = x2576;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2116);
            reg = x2116;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2581);
            reg = x2581;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2582);
            reg = x2582;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2583);
            reg = x2583;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2584);
            reg = x2584;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2585 = x2508 + x88;
        if (x2585 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2586 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2586 != Fp::invalid());
      if (x2586 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2587 = x2205 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2587 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2588 = x2194 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2588 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2589 = x2165 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2590 = x2168 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2591 = x2589 + x2590;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2592 = x2591 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2593 = x2592 + x2503;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2594 = x2158 * x45;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2595 = x2203 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2596 = x2594 + x2595;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2597 = x2160 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2598 = x2596 + x2597;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2599 = x2598 + x2162;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2600 = x2158 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2593);
          reg = x2593;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2599);
          reg = x2599;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2600);
          reg = x2600;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2600);
          reg = x2600;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2601 = x2533 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2602 = Fp(x2601.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2602);
            reg = x2602;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2603 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2603 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2604 = x2601 - x2603;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2605 = x2604 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2606 = Fp(x2605.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2606);
            reg = x2606;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2607 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2607 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2608 = x2605 - x2607;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2609 = x2608 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2610 = Fp(x2609.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2610);
            reg = x2610;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2611 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2611 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2612 = x2609 - x2611;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2613 = x2612 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2614 = Fp(x2613.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2614);
            reg = x2614;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2615 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2615 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2616 = x2613 - x2615;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2617 = x2616 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2617);
          reg = x2617;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2618 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2618 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2619 = x88 - x2618;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2620 = x2618 * x2619;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2620);
          reg = x2620;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2621 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2622 = x85 - x2618;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2623 = x2621 * x2622;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2623 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2624 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2624 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2624);
          reg = x2624;
        }
        if (x87 != 0) {
          host_args.at(0) = x2505;
          host_args.at(1) = x2437;
          host_args.at(2) = x2441;
          host_args.at(3) = x2449;
          host_args.at(4) = x2453;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2625 = x2505 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2437);
            reg = x2437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2626 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2626 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2627 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2627 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2628 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2628 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2629 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2629 != Fp::invalid());
            host_args.at(0) = x2625;
            host_args.at(1) = x2626;
            host_args.at(2) = x2627;
            host_args.at(3) = x2628;
            host_args.at(4) = x2629;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2630 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2630 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2631 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2631 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2632 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2632 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2633 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2633 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2625);
            reg = x2625;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2116);
            reg = x2116;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2630);
            reg = x2630;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2631);
            reg = x2631;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2632);
            reg = x2632;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2633);
            reg = x2633;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2634 = x2508 + x88;
        if (x2634 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2635 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2635 != Fp::invalid());
      if (x2635 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2636 = x2205 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2636 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2637 = x2194 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2637 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2638 = x2165 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2639 = x2168 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2640 = x2638 + x2639;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2641 = x2640 + x2502;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2642 = x2641 + x2503;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2643 = x2158 * x45;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2644 = x2203 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2645 = x2643 + x2644;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2646 = x2160 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2647 = x2645 + x2646;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2648 = x2647 + x2162;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2649 = x2158 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2642);
          reg = x2642;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2648);
          reg = x2648;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2649);
          reg = x2649;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2649);
          reg = x2649;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x53);
          reg = x53;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2650 = x2536 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2651 = Fp(x2650.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2651);
            reg = x2651;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2652 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2652 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2653 = x2650 - x2652;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2654 = x2653 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2655 = Fp(x2654.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2655);
            reg = x2655;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2656 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2656 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2657 = x2654 - x2656;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2658 = x2657 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2659 = Fp(x2658.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2659);
            reg = x2659;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2660 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2660 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2661 = x2658 - x2660;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2662 = x2661 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2663 = Fp(x2662.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2663);
            reg = x2663;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2664 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2664 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2665 = x2662 - x2664;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2666 = x2665 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2666);
          reg = x2666;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2667 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2667 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2668 = x88 - x2667;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2669 = x2667 * x2668;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2669);
          reg = x2669;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2670 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2670 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2671 = x85 - x2667;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2672 = x2670 * x2671;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2672 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2673 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2673 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2673);
          reg = x2673;
        }
        if (x87 != 0) {
          host_args.at(0) = x2505;
          host_args.at(1) = x2437;
          host_args.at(2) = x2441;
          host_args.at(3) = x2449;
          host_args.at(4) = x2453;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2674 = x2505 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2437);
            reg = x2437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2675 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2675 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2676 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2676 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2677 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2677 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2678 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2678 != Fp::invalid());
            host_args.at(0) = x2674;
            host_args.at(1) = x2675;
            host_args.at(2) = x2676;
            host_args.at(3) = x2677;
            host_args.at(4) = x2678;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2679 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2679 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2680 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2680 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2681 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2681 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2682 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2682 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2674);
            reg = x2674;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2116);
            reg = x2116;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2679);
            reg = x2679;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2680);
            reg = x2680;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2681);
            reg = x2681;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2682);
            reg = x2682;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2683 = x2508 + x88;
        if (x2683 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2684 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2684 != Fp::invalid());
      if (x2684 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2685 = x2205 - x43;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2685 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2686 = x2165 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2687 = x2168 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2688 = x2686 + x2687;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2689 = x2688 + x2334;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2690 = x2689 - x2180;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2691 = x2180 * x71;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2692 = x2196 + x2691;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2693 = x2160 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2694 = x2692 + x2693;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2695 = x2694 + x2162;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2696 = x2158 * x45;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2697 = x2696 + x2184;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2698 = x2697 + x2186;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2699 = x2158 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2690);
          reg = x2690;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2695);
          reg = x2695;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2698);
          reg = x2698;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2699);
          reg = x2699;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2700 = x2521 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2701 = Fp(x2700.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2701);
            reg = x2701;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2702 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2702 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2703 = x2700 - x2702;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2704 = x2703 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2705 = Fp(x2704.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2705);
            reg = x2705;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2706 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2706 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2707 = x2704 - x2706;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2708 = x2707 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2709 = Fp(x2708.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2709);
            reg = x2709;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2710 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2710 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2711 = x2708 - x2710;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2712 = x2711 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2713 = Fp(x2712.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2713);
            reg = x2713;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2714 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2715 = x2712 - x2714;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2716 = x2715 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2716);
          reg = x2716;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2717 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2718 = x88 - x2717;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2719 = x2717 * x2718;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2719);
          reg = x2719;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2720 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2720 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2721 = x85 - x2717;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2722 = x2720 * x2721;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2722 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2723 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2723 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2723);
          reg = x2723;
        }
        if (x2509 != 0) {
          host_args.at(0) = x2505;
          host_args.at(1) = x514;
          host_args.at(2) = x515;
          host_args.at(3) = x518;
          host_args.at(4) = x2355;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2724 = x2505 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x514);
            reg = x514;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x515);
            reg = x515;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x518);
            reg = x518;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2355);
            reg = x2355;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2725 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2725 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2726 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2726 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2727 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2727 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2728 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2728 != Fp::invalid());
            host_args.at(0) = x2724;
            host_args.at(1) = x2725;
            host_args.at(2) = x2726;
            host_args.at(3) = x2727;
            host_args.at(4) = x2728;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2729 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2729 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2730 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2730 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2731 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2731 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2732 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2732 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2724);
            reg = x2724;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2116);
            reg = x2116;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2729);
            reg = x2729;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2730);
            reg = x2730;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2731);
            reg = x2731;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2732);
            reg = x2732;
          }
        }
        if (x2508 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2733 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2733 != Fp::invalid());
      if (x2733 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2734 = x2205 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2734 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2194 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2735 = x2165 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2736 = x2168 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2737 = x2735 + x2736;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2738 = x2737 + x2334;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2739 = x2158 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2740 = x2160 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2741 = x2739 + x2740;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2742 = x2741 + x2162;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2743 = x2158 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2738);
          reg = x2738;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2742);
          reg = x2742;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2743);
          reg = x2743;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2743);
          reg = x2743;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2744 = x2525 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2745 = Fp(x2744.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2746 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2746 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2747 = x2744 - x2746;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2748 = x2747 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2749 = Fp(x2748.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2750 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2750 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2751 = x2748 - x2750;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2752 = x2751 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2753 = Fp(x2752.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2753);
            reg = x2753;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2754 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2754 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2755 = x2752 - x2754;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2756 = x2755 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2757 = Fp(x2756.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2757);
            reg = x2757;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2758 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2758 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2759 = x2756 - x2758;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2760 = x2759 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2760);
          reg = x2760;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2761 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2761 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2762 = x88 - x2761;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2763 = x2761 * x2762;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2763);
          reg = x2763;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2764 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2765 = x85 - x2761;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2766 = x2764 * x2765;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2766 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2767 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2767 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2767);
          reg = x2767;
        }
        if (x2509 != 0) {
          host_args.at(0) = x2505;
          host_args.at(1) = x514;
          host_args.at(2) = x515;
          host_args.at(3) = x518;
          host_args.at(4) = x2355;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2768 = x2505 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x514);
            reg = x514;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x515);
            reg = x515;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x518);
            reg = x518;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2355);
            reg = x2355;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2769 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2769 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2770 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2770 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2771 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2771 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2772 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2772 != Fp::invalid());
            host_args.at(0) = x2768;
            host_args.at(1) = x2769;
            host_args.at(2) = x2770;
            host_args.at(3) = x2771;
            host_args.at(4) = x2772;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2773 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2773 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2774 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2774 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2775 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2775 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2776 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2776 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2768);
            reg = x2768;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2116);
            reg = x2116;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2773);
            reg = x2773;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2774);
            reg = x2774;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2775);
            reg = x2775;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2776);
            reg = x2776;
          }
        }
        if (x2508 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2777 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2777 != Fp::invalid());
      if (x2777 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2778 = x2205 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2778 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2196);
          reg = x2196;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2187);
          reg = x2187;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2173);
          reg = x2173;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2779 = x2513 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2780 = Fp(x2779.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2780);
            reg = x2780;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2781 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2781 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2782 = x2779 - x2781;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2783 = x2782 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2784 = Fp(x2783.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2784);
            reg = x2784;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2785 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2785 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2786 = x2783 - x2785;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2787 = x2786 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2788 = Fp(x2787.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2788);
            reg = x2788;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2789 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2789 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2790 = x2787 - x2789;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2791 = x2790 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2792 = Fp(x2791.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2792);
            reg = x2792;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2793 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2793 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2794 = x2791 - x2793;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2795 = x2794 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2795);
          reg = x2795;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2796 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2796 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2797 = x88 - x2796;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2798 = x2796 * x2797;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2798);
          reg = x2798;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2799 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2799 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2800 = x85 - x2796;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2801 = x2799 * x2800;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2801 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2802 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2802 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2802);
          reg = x2802;
        }
        if (x2509 != 0) {
          host_args.at(0) = x2505;
          host_args.at(1) = x2437;
          host_args.at(2) = x2441;
          host_args.at(3) = x2449;
          host_args.at(4) = x2453;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2803 = x2505 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2437);
            reg = x2437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2804 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2804 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2805 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2805 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2806 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2806 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2807 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2807 != Fp::invalid());
            host_args.at(0) = x2803;
            host_args.at(1) = x2804;
            host_args.at(2) = x2805;
            host_args.at(3) = x2806;
            host_args.at(4) = x2807;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2808 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2808 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2809 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2809 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2810 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2810 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2811 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2811 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2803);
            reg = x2803;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2116);
            reg = x2116;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2808);
            reg = x2808;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2809);
            reg = x2809;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2810);
            reg = x2810;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2811);
            reg = x2811;
          }
        }
        if (x2508 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2812 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2812 != Fp::invalid());
      if (x2812 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2813 = x2205 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2813 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2196);
          reg = x2196;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2187);
          reg = x2187;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2173);
          reg = x2173;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2814 = x2513 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2815 = Fp(x2814.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2815);
            reg = x2815;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2816 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2816 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2817 = x2814 - x2816;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2818 = x2817 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2819 = Fp(x2818.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2819);
            reg = x2819;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x2820 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2820 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2821 = x2818 - x2820;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2822 = x2821 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x2823 = Fp(x2822.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2823);
            reg = x2823;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x2824 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2824 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x2825 = x2822 - x2824;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x2826 = x2825 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2827 = Fp(x2826.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2827);
            reg = x2827;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2828 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2828 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2829 = x2826 - x2828;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2830 = x2829 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2830);
          reg = x2830;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2831 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2831 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2832 = x88 - x2831;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2833 = x2831 * x2832;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2833);
          reg = x2833;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2834 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2834 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2835 = x85 - x2831;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2836 = x2834 * x2835;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2836 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
        auto x2837 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2837 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2837);
          reg = x2837;
        }
        if (x2509 != 0) {
          host_args.at(0) = x2505;
          host_args.at(1) = x2437;
          host_args.at(2) = x2441;
          host_args.at(3) = x2449;
          host_args.at(4) = x2453;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2838 = x2505 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2437);
            reg = x2437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2441);
            reg = x2441;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          {
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2839 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x2839 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2840 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x2840 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2841 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x2841 != Fp::invalid());
            // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x2842 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x2842 != Fp::invalid());
            host_args.at(0) = x2838;
            host_args.at(1) = x2839;
            host_args.at(2) = x2840;
            host_args.at(3) = x2841;
            host_args.at(4) = x2842;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2843 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x2843 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2844 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2844 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2845 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2845 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x2846 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2846 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2838);
            reg = x2838;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2116);
            reg = x2116;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2843);
            reg = x2843;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2844);
            reg = x2844;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2845);
            reg = x2845;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2846);
            reg = x2846;
          }
        }
        if (x2508 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/components/mux.h":37:25))
    auto x2847 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x2847 != Fp::invalid());
    if (x2847 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2848 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2848 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x2849 = x527 * x79;
      {
        host_args.at(0) = x2849;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x2850 = host_outs.at(0);
        auto x2851 = host_outs.at(1);
        auto x2852 = host_outs.at(2);
        auto x2853 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2850);
          reg = x2850;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2851);
          reg = x2851;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2852);
          reg = x2852;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2853);
          reg = x2853;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2854 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x2854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2855 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2856 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2857 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2857 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2849);
        reg = x2849;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2848);
        reg = x2848;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2854);
        reg = x2854;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2855);
        reg = x2855;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2856);
        reg = x2856;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2857);
        reg = x2857;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2858 = Fp(x2857.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2859 = x2858 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2859);
          reg = x2859;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2860 = Fp(x2857.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2861 = x2860 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2861);
          reg = x2861;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2862 = Fp(x2857.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2863 = x2862 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2863);
          reg = x2863;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2864 = Fp(x2857.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2865 = x2864 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2865);
          reg = x2865;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2866 = Fp(x2857.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2867 = x2866 * x58;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2867);
          reg = x2867;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2868 = Fp(x2857.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2868);
          reg = x2868;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2869 = Fp(x2856.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2870 = x2869 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2870);
          reg = x2870;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2871 = Fp(x2856.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2872 = x2871 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2872);
          reg = x2872;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2873 = Fp(x2856.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2874 = x2873 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2874);
          reg = x2874;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2875 = Fp(x2856.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2876 = x2875 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2876);
          reg = x2876;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2877 = Fp(x2856.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2877);
          reg = x2877;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2878 = Fp(x2855.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2879 = x2878 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2879);
          reg = x2879;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2880 = Fp(x2855.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2881 = x2880 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2881);
          reg = x2881;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2882 = Fp(x2855.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2883 = x2882 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2883);
          reg = x2883;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2884 = Fp(x2855.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2885 = x2884 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2885);
          reg = x2885;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2886 = Fp(x2855.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2886);
          reg = x2886;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2887 = Fp(x2854.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2888 = x2887 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2888);
          reg = x2888;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2889 = Fp(x2854.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2889);
          reg = x2889;
        }
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2890 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2890 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2891 = x2890 * x57;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2892 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2892 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2893 = x2892 * x61;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2894 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2894 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2895 = x2894 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2896 = x2893 + x2895;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2897 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2897 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2898 = x2897 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2899 = x2896 + x2898;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2900 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2900 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2901 = x2899 + x2900;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2902 = x2891 + x2901;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2903 = x2902 * x85;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2904 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2904 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2905 = x2903 + x2904;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2906 = x2857 - x2905;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2906 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2907 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2907 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2908 = x2907 * x71;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2909 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2909 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2910 = x2909 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2911 = x2908 + x2910;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2912 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2912 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2913 = x2911 + x2912;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2914 = x2913 * x61;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2915 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2915 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2916 = x2915 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2917 = x2914 + x2916;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2918 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2918 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2919 = x2917 + x2918;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2920 = x2856 - x2919;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2920 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2921 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2921 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2922 = x2921 * x66;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2923 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2923 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2924 = x2923 * x81;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2925 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2925 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2926 = x2924 + x2925;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2927 = x2926 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2928 = x2922 + x2927;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2929 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2929 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2930 = x2929 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2931 = x2928 + x2930;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2932 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2932 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2933 = x2931 + x2932;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2934 = x2855 - x2933;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2934 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x2935 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2935 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2936 = x2935 * x66;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x2937 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2937 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2938 = x2936 + x2937;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2939 = x2854 - x2938;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2939 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2854;
        host_args.at(1) = x2855;
        host_args.at(2) = x2856;
        host_args.at(3) = x2857;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2940 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2941 = (x2940 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2941);
            reg = x2941;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2942 = x2940 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2943 = (x2942 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2943);
            reg = x2943;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2944 = x2940 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2945 = (x2944 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2945);
            reg = x2945;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2946 = x2940 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2947 = (x2946 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2947);
            reg = x2947;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2948 = x2940 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2949 = (x2948 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2949);
            reg = x2949;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2950 = x2940 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2951 = (x2950 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2951);
            reg = x2951;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2952 = x2940 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2953 = (x2952 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2953);
            reg = x2953;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2954 = x2940 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x2955 = (x2954 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2955);
            reg = x2955;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2956 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2956 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2957 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2957 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2958 = x2957 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2959 = x2956 + x2958;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2960 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2960 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2961 = x2960 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2962 = x2959 + x2961;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2963 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2963 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2964 = x2963 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2965 = x2962 + x2964;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2966 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x2966 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2967 = x2966 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2968 = x2965 + x2967;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2969 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x2969 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2970 = x2969 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2971 = x2968 + x2970;
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x2972 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x2972 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x2973 = x2972 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x2974 = x2971 + x2973;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x2975 = x2974 - x2940;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x2975 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x2976 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x2976 != Fp::invalid());
        if (x2976 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2977 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2978 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2979 = x2977 + x2978;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2980 = x2904 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2981 = x2980 + x2913;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2982 = x2979 + x2981;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2983 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2984 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2985 = x2983 + x2984;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2986 = x2985 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2987 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2982);
            reg = x2982;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2986);
            reg = x2986;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2987);
            reg = x2987;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2987);
            reg = x2987;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x2988 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2988 != Fp::invalid());
        if (x2988 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2989 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2990 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2991 = x2989 + x2990;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2992 = x2904 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2993 = x2992 + x2913;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2994 = x2991 + x2993;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2995 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2996 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2997 = x2995 + x2996;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2998 = x2997 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2999 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2994);
            reg = x2994;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2998);
            reg = x2998;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2999);
            reg = x2999;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2999);
            reg = x2999;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3000 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x3000 != Fp::invalid());
        if (x3000 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3001 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3002 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3003 = x3001 + x3002;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3004 = x2904 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3005 = x3004 + x2913;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3006 = x3003 + x3005;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3007 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3008 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3009 = x3007 + x3008;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3010 = x3009 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3011 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3006);
            reg = x3006;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3010);
            reg = x3010;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3012 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x3012 != Fp::invalid());
        if (x3012 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3013 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3014 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3015 = x3013 + x3014;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3016 = x2904 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3017 = x3016 + x2913;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3018 = x3015 + x3017;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3019 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3020 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3021 = x3019 + x3020;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3022 = x3021 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3023 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3018);
            reg = x3018;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3022);
            reg = x3022;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3023);
            reg = x3023;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3023);
            reg = x3023;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3024 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3024 != Fp::invalid());
        if (x3024 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3025 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3026 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3027 = x3025 + x3026;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3028 = x2904 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3029 = x3028 + x2913;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3030 = x3027 + x3029;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3031 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3032 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3033 = x3031 + x3032;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3034 = x3033 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3035 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3030);
            reg = x3030;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3034);
            reg = x3034;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3035);
            reg = x3035;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3035);
            reg = x3035;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3036 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3036 != Fp::invalid());
        if (x3036 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3037 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3038 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3039 = x3037 + x3038;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3040 = x2929 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3041 = x2932 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3042 = x3040 + x3041;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3043 = x3042 + x2935;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3044 = x3039 + x3043;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3045 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3046 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3047 = x3045 + x3046;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3048 = x3047 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3049 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3044);
            reg = x3044;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3048);
            reg = x3048;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3049);
            reg = x3049;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3049);
            reg = x3049;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3050 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3050 != Fp::invalid());
        if (x3050 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3051 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3052 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3053 = x3051 + x3052;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3054 = x2929 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3055 = x2932 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3056 = x3054 + x3055;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3057 = x3056 + x2935;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3058 = x3053 + x3057;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3059 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3060 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3061 = x3059 + x3060;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3062 = x3061 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3063 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3058);
            reg = x3058;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3062);
            reg = x3062;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3063);
            reg = x3063;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3063);
            reg = x3063;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
        auto x3064 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3064 != Fp::invalid());
        if (x3064 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3065 = x2897 * x66;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3066 = x2900 * x63;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3067 = x3065 + x3066;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3068 = x2929 * x71;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3069 = x2932 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3070 = x3068 + x3069;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3071 = x3070 + x2935;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3072 = x3067 + x3071;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3073 = x2890 * x51;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3074 = x2892 * x85;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3075 = x3073 + x3074;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3076 = x3075 + x2894;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3077 = x2890 * x84;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3072);
            reg = x3072;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3076);
            reg = x3076;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3077);
            reg = x3077;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3077);
            reg = x3077;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3078 = x2915 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3079 = x2918 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3080 = x3078 + x3079;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3081 = x3080 + x2921;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3082 = x3081 + x50;
      {
        host_args.at(0) = x3082;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3083 = host_outs.at(0);
        auto x3084 = host_outs.at(1);
        auto x3085 = host_outs.at(2);
        auto x3086 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3083);
          reg = x3083;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3084);
          reg = x3084;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3085);
          reg = x3085;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3086);
          reg = x3086;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3087 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x3087 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3088 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3089 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3089 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3090 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3090 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3082);
        reg = x3082;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2848);
        reg = x2848;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3087);
        reg = x3087;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3088);
        reg = x3088;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3089);
        reg = x3089;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3090);
        reg = x3090;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3091 = x2904 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3092 = x3091 + x2913;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3093 = x3092 + x50;
      {
        host_args.at(0) = x3093;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3094 = host_outs.at(0);
        auto x3095 = host_outs.at(1);
        auto x3096 = host_outs.at(2);
        auto x3097 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3094);
          reg = x3094;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3095);
          reg = x3095;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3096);
          reg = x3096;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3097);
          reg = x3097;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3098 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x3098 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3099 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3099 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3100 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3100 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3101 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3101 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3093);
        reg = x3093;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2848);
        reg = x2848;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3098);
        reg = x3098;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3099);
        reg = x3099;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3100);
        reg = x3100;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3101);
        reg = x3101;
      }
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3102 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3102 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3103 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3103 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3104 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3104 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3105 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3105 != Fp::invalid());
      host_args.at(0) = x3102;
      host_args.at(1) = x3103;
      host_args.at(2) = x3104;
      host_args.at(3) = x3105;
      host_args.at(4) = x3081;
      host_args.at(5) = x3087;
      host_args.at(6) = x3088;
      host_args.at(7) = x3089;
      host_args.at(8) = x3090;
      host_args.at(9) = x3092;
      host_args.at(10) = x3098;
      host_args.at(11) = x3099;
      host_args.at(12) = x3100;
      host_args.at(13) = x3101;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3106 = x2929 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3107 = x2932 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3108 = x3106 + x3107;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3109 = x3108 + x2935;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3110 = (x3109 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3110);
          reg = x3110;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3111 = inv(x3109);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3111);
          reg = x3111;
        }
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3112 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3112 != Fp::invalid());
      if (x3112 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x3109 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x3113 = x88 - x3112;
      if (x3113 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3114 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3114 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3115 = x3109 * x3114;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x3116 = x3115 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x3116 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":48:17)
        auto x3117 = x3087 + x3102;
        // loc("cirgen/circuit/rv32im/memio.cpp":49:18)
        auto x3118 = Fp(x3117.asUInt32() & x80.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3119 = (x3118 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3119);
            reg = x3119;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3120 = x3118 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3121 = (x3120 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3121);
            reg = x3121;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3122 = x3118 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3123 = (x3122 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3123);
            reg = x3123;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3124 = x3118 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3125 = (x3124 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3125);
            reg = x3125;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3126 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3126 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3127 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3127 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3128 = x3127 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3129 = x3126 + x3128;
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3130 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3130 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3131 = x3130 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3132 = x3129 + x3131;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3133 = x3132 - x3118;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3133 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("cirgen/circuit/rv32im/memio.cpp":50:20)
        auto x3134 = Fp(x3117.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:19)
        auto x3135 = x3134 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x3136 = Fp(x3135.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3136);
            reg = x3136;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3137 = x3117 - x3132;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3138 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x3138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":51:33)
        auto x3139 = x3138 * x83;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3140 = x3137 - x3139;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3140);
          reg = x3140;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:22)
        auto x3141 = x3140 * x79;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3141);
          reg = x3141;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3142 = x3088 + x3103;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3143 = x3142 + x3138;
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3144 = Fp(x3143.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3144);
          reg = x3144;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:25)
        auto x3145 = Fp(x3143.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:24)
        auto x3146 = x3145 * x82;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3146);
          reg = x3146;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3147 = x3089 + x3104;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3148 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3148 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3149 = x3147 + x3148;
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3150 = Fp(x3149.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3150);
          reg = x3150;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:25)
        auto x3151 = Fp(x3149.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:24)
        auto x3152 = x3151 * x82;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3152);
          reg = x3152;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3153 = x3090 + x3105;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3154 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3154 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3155 = x3153 + x3154;
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3156 = Fp(x3155.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3156);
          reg = x3156;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:24)
        auto x3157 = Fp(x3155.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:23)
        auto x3158 = x3157 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3158);
          reg = x3158;
        }
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x3159 = Fp(x3152.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3159);
            reg = x3159;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3160 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3160 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3161 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3161 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:16)
      auto x3162 = x3161 * x81;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3163 = x3160 - x3162;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3163 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3164 = x3087 + x3102;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3165 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3166 = x3165 * x83;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3167 = x3166 + x3160;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x3168 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3168 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x3169 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3169 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x3170 = x3169 * x85;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x3171 = x3168 + x3170;
      // loc("Top/Mux/4/Mux/3/OneHot1/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x3172 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3172 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x3173 = x3172 * x80;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x3174 = x3171 + x3173;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3175 = x3167 + x3174;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3176 = x3164 - x3175;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3176 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3177 = x3088 + x3103;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3178 = x3177 + x3165;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3179 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3180 = x3179 * x83;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3181 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3181 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3182 = x3180 + x3181;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3183 = x3178 - x3182;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3183 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3184 = x3089 + x3104;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3185 = x3184 + x3179;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3186 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3186 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3187 = x3186 * x83;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3188 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3188 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3189 = x3187 + x3188;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3190 = x3185 - x3189;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      if (x3190 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:72");
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3191 = x3090 + x3105;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3192 = x3191 + x3186;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3193 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3193 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3194 = x3193 * x83;
      // loc("Top/Mux/4/Mux/3/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3195 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3195 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:63)
      auto x3196 = x3195 * x81;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3197 = x3194 + x3196;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3198 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3198 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3199 = x3197 + x3198;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3200 = x3192 - x3199;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      if (x3200 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:74");
      // loc("cirgen/circuit/rv32im/memio.cpp":77:15)
      auto x3201 = x88 - x3195;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3202 = x3195 * x3201;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:28)
      auto x3203 = x85 - x3195;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3204 = x3202 * x3203;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      if (x3204 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:77");
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3205 = x3195 * x76;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:41)
      auto x3206 = x3198 * x39;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3207 = x3205 + x3206;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:68)
      auto x3208 = x3188 * x38;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3209 = x3207 + x3208;
      // loc("cirgen/circuit/rv32im/memio.cpp":81:14)
      auto x3210 = x3181 * x57;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3211 = x3209 + x3210;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3212 = x3211 + x3161;
      {
        host_args.at(0) = x3212;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3213 = host_outs.at(0);
        auto x3214 = host_outs.at(1);
        auto x3215 = host_outs.at(2);
        auto x3216 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3213);
          reg = x3213;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3214);
          reg = x3214;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3215);
          reg = x3215;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3216);
          reg = x3216;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3217 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x3217 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3218 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3218 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3219 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3219 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3220 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3220 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3212);
        reg = x3212;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2848);
        reg = x2848;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3217);
        reg = x3217;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3218);
        reg = x3218;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3219);
        reg = x3219;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3220);
        reg = x3220;
      }
      host_args.at(0) = x3212;
      host_args.at(1) = x3174;
      host_args.at(2) = x3217;
      host_args.at(3) = x3218;
      host_args.at(4) = x3219;
      host_args.at(5) = x3220;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":85:17)
      auto x3221 = x527 + x81;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3222 = x3221 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3223 = Fp(x3222.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3223);
          reg = x3223;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3224 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3224 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3225 = x3222 - x3224;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3226 = x3225 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3227 = Fp(x3226.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3227);
          reg = x3227;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3228 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3228 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3229 = x3226 - x3228;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3230 = x3229 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3231 = Fp(x3230.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3231);
          reg = x3231;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3232 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3232 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3233 = x3230 - x3232;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3234 = x3233 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3235 = Fp(x3234.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3235);
          reg = x3235;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3236 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3236 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3237 = x3234 - x3236;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3238 = x3237 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3238);
        reg = x3238;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3239 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3239 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3240 = x88 - x3239;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3241 = x3239 * x3240;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3241);
        reg = x3241;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x3242 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x3242 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3243 = x85 - x3239;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3244 = x3242 * x3243;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3244 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":86:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3245 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3245 != Fp::invalid());
      if (x3245 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3246 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3246 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3247 = x3246 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3247 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3248 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3248 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3249 = x3248 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3250 = x3249 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3250 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3251 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3251 != Fp::invalid());
        if (x3251 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3252 = Fp(x3217.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3252);
              reg = x3252;
            }
          }
        }
        if (x3168 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3253 = Fp(x3218.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3253);
              reg = x3253;
            }
          }
        }
        if (x3169 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3254 = Fp(x3219.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3254);
              reg = x3254;
            }
          }
        }
        if (x3172 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3255 = Fp(x3220.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3255);
              reg = x3255;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3256 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3256 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3257 = Fp(x3256.asUInt32() & x66.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3258 = x3257 * x65;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3258);
            reg = x3258;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3259 = Fp(x3256.asUInt32() & x54.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3260 = x3259 * x85;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3260);
            reg = x3260;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3261 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3261 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3262 = x88 - x3261;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3263 = x3261 * x3262;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3263 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3264 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3264 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3265 = x3261 * x66;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3266 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3266 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3267 = x3266 * x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3268 = x3265 + x3267;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3269 = x3264 - x3268;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3269 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3270 = x3261 * x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3271 = x3251 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3272 = x3168 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3273 = x3271 + x3272;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3274 = x3169 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3275 = x3273 + x3274;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3276 = x3172 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3277 = x3275 + x3276;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3277);
          reg = x3277;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3270);
          reg = x3270;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3270);
          reg = x3270;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3270);
          reg = x3270;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3278 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3278 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3279 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3280 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3280 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3281 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3281 != Fp::invalid());
        host_args.at(0) = x3270;
        host_args.at(1) = x3278;
        host_args.at(2) = x3279;
        host_args.at(3) = x3280;
        host_args.at(4) = x3281;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3113 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3282 = x3109 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3278);
            reg = x3278;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3279);
            reg = x3279;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3280);
            reg = x3280;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3281);
            reg = x3281;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3283 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3283 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3284 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3284 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3285 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3285 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3286 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3286 != Fp::invalid());
            host_args.at(0) = x3282;
            host_args.at(1) = x3283;
            host_args.at(2) = x3284;
            host_args.at(3) = x3285;
            host_args.at(4) = x3286;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3287 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3287 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3288 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3288 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3289 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3289 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3290 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3290 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3282);
            reg = x3282;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2848);
            reg = x2848;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3287);
            reg = x3287;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3288);
            reg = x3288;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3289);
            reg = x3289;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3290);
            reg = x3290;
          }
        }
        if (x3112 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3291 = x2937 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3291 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x2926 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3292 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3293 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3294 = x3292 + x3293;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3295 = x3294 + x3092;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3296 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3297 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3298 = x3296 + x3297;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3299 = x3298 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3300 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3295);
          reg = x3295;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3299);
          reg = x3299;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3300);
          reg = x3300;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3300);
          reg = x3300;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3301 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3301 != Fp::invalid());
      if (x3301 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3302 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3302 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3303 = x3302 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3303 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x88 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3304 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3304 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3305 = x3304 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3306 = x3305 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3306 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3307 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3307 != Fp::invalid());
        if (x3307 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3308 = Fp(x3218.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3308);
              reg = x3308;
            }
          }
        }
        if (x3169 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3309 = Fp(x3220.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3309);
              reg = x3309;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3310 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3310 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3311 = Fp(x3310.asUInt32() & x66.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3312 = x3311 * x65;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3312);
            reg = x3312;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3313 = Fp(x3310.asUInt32() & x54.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3314 = x3313 * x85;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3314);
            reg = x3314;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3315 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3315 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3316 = x88 - x3315;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3317 = x3315 * x3316;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3317 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3318 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3318 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3319 = x3315 * x66;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3320 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3320 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3321 = x3320 * x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3322 = x3319 + x3321;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3323 = x3318 - x3322;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3323 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3324 = x3315 * x84;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3325 = x3307 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3326 = x3169 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3327 = x3325 + x3326;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3328 = x3307 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3329 = x3169 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3330 = x3328 + x3329;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3327);
          reg = x3327;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3330);
          reg = x3330;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3324);
          reg = x3324;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3324);
          reg = x3324;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3331 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3331 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3332 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3332 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3333 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3333 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3334 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3334 != Fp::invalid());
        host_args.at(0) = x3324;
        host_args.at(1) = x3331;
        host_args.at(2) = x3332;
        host_args.at(3) = x3333;
        host_args.at(4) = x3334;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3113 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3335 = x3109 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3331);
            reg = x3331;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3332);
            reg = x3332;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3333);
            reg = x3333;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3334);
            reg = x3334;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3336 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3336 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3337 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3337 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3338 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3338 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3339 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3339 != Fp::invalid());
            host_args.at(0) = x3335;
            host_args.at(1) = x3336;
            host_args.at(2) = x3337;
            host_args.at(3) = x3338;
            host_args.at(4) = x3339;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3340 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3340 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3341 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3341 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3342 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3342 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3343 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3343 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3335);
            reg = x3335;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2848);
            reg = x2848;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3340);
            reg = x3340;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3341);
            reg = x3341;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3342);
            reg = x3342;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3343);
            reg = x3343;
          }
        }
        if (x3112 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3344 = x2937 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3344 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3345 = x2926 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3345 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3346 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3347 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3348 = x3346 + x3347;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3349 = x3348 + x3092;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3350 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3351 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3352 = x3350 + x3351;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3353 = x3352 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3354 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3349);
          reg = x3349;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3354);
          reg = x3354;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3354);
          reg = x3354;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3355 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3355 != Fp::invalid());
      if (x3355 != 0) {
        if (x88 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3356 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3356 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3357 = x3356 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3357 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3358 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3358 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3359 = x3358 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3360 = x3359 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3360 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3361 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3361 != Fp::invalid());
        if (x3361 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3362 = Fp(x3220.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3362);
              reg = x3362;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3363 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3363 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3364 = Fp(x3363.asUInt32() & x66.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3365 = x3364 * x65;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3365);
            reg = x3365;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3366 = Fp(x3363.asUInt32() & x54.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3367 = x3366 * x85;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3367);
            reg = x3367;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3368 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3368 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3369 = x88 - x3368;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3370 = x3368 * x3369;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3370 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3371 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3371 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3372 = x3368 * x66;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3373 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3373 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3374 = x3373 * x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3375 = x3372 + x3374;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3376 = x3371 - x3375;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3376 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3377 = x3361 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3378 = x3361 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3379 = x3361 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3380 = x3361 * x3220;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3377);
          reg = x3377;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3378);
          reg = x3378;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3379);
          reg = x3379;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3380);
          reg = x3380;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3381 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3381 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3382 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3382 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3383 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3383 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3384 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3384 != Fp::invalid());
        host_args.at(0) = x87;
        host_args.at(1) = x3381;
        host_args.at(2) = x3382;
        host_args.at(3) = x3383;
        host_args.at(4) = x3384;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3113 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3385 = x3109 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3381);
            reg = x3381;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3382);
            reg = x3382;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3383);
            reg = x3383;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3384);
            reg = x3384;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3386 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3386 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3387 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3387 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3388 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3388 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3389 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3389 != Fp::invalid());
            host_args.at(0) = x3385;
            host_args.at(1) = x3386;
            host_args.at(2) = x3387;
            host_args.at(3) = x3388;
            host_args.at(4) = x3389;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3390 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3390 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3391 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3391 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3392 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3392 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3393 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3393 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3385);
            reg = x3385;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2848);
            reg = x2848;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3390);
            reg = x3390;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3391);
            reg = x3391;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3392);
            reg = x3392;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3393);
            reg = x3393;
          }
        }
        if (x3112 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3394 = x2937 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3394 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3395 = x2926 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3396 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3397 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3398 = x3396 + x3397;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3399 = x3398 + x3092;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3400 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3401 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3402 = x3400 + x3401;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3403 = x3402 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3404 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3399);
          reg = x3399;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3403);
          reg = x3403;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3404);
          reg = x3404;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3404);
          reg = x3404;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3405 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3405 != Fp::invalid());
      if (x3405 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3406 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3406 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3407 = x3406 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3407 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3408 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3408 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3409 = x3408 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3410 = x3409 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3410 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3411 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3411 != Fp::invalid());
        if (x3411 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3412 = Fp(x3217.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3412);
              reg = x3412;
            }
          }
        }
        if (x3168 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3413 = Fp(x3218.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3413);
              reg = x3413;
            }
          }
        }
        if (x3169 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3414 = Fp(x3219.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3414);
              reg = x3414;
            }
          }
        }
        if (x3172 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3415 = Fp(x3220.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3415);
              reg = x3415;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3416 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3416 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3417 = Fp(x3416.asUInt32() & x66.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3418 = x3417 * x65;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3418);
            reg = x3418;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3419 = Fp(x3416.asUInt32() & x54.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3420 = x3419 * x85;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3420);
            reg = x3420;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3421 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3421 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3422 = x88 - x3421;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3423 = x3421 * x3422;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3423 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3424 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3424 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3425 = x3421 * x66;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3426 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3426 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3427 = x3426 * x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3428 = x3425 + x3427;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3429 = x3424 - x3428;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3429 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3430 = x3411 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3431 = x3168 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3432 = x3430 + x3431;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3433 = x3169 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3434 = x3432 + x3433;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3435 = x3172 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3436 = x3434 + x3435;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3436);
          reg = x3436;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3437 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3438 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3439 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3439 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3440 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3440 != Fp::invalid());
        host_args.at(0) = x87;
        host_args.at(1) = x3437;
        host_args.at(2) = x3438;
        host_args.at(3) = x3439;
        host_args.at(4) = x3440;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3113 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3441 = x3109 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3437);
            reg = x3437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3438);
            reg = x3438;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3439);
            reg = x3439;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3440);
            reg = x3440;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3442 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3442 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3443 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3443 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3444 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3444 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3445 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3445 != Fp::invalid());
            host_args.at(0) = x3441;
            host_args.at(1) = x3442;
            host_args.at(2) = x3443;
            host_args.at(3) = x3444;
            host_args.at(4) = x3445;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3446 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3446 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3447 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3447 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3448 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3448 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3449 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3449 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3441);
            reg = x3441;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2848);
            reg = x2848;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3446);
            reg = x3446;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3447);
            reg = x3447;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3448);
            reg = x3448;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3449);
            reg = x3449;
          }
        }
        if (x3112 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3450 = x2937 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3450 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3451 = x2926 - x81;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3451 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3452 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3453 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3454 = x3452 + x3453;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3455 = x3454 + x3092;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3456 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3457 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3458 = x3456 + x3457;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3459 = x3458 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3460 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3455);
          reg = x3455;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3459);
          reg = x3459;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3460);
          reg = x3460;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3460);
          reg = x3460;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3461 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3461 != Fp::invalid());
      if (x3461 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3462 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3462 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3463 = x3462 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3463 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x88 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3464 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3464 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3465 = x3464 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3466 = x3465 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3466 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3467 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3467 != Fp::invalid());
        if (x3467 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3468 = Fp(x3218.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3468);
              reg = x3468;
            }
          }
        }
        if (x3169 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":82:21)
            auto x3469 = Fp(x3220.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/bytes.cpp":82:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3469);
              reg = x3469;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
          auto x3470 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3470 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3471 = Fp(x3470.asUInt32() & x66.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3472 = x3471 * x65;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3472);
            reg = x3472;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3473 = Fp(x3470.asUInt32() & x54.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3474 = x3473 * x85;
          // loc("cirgen/components/bytes.cpp":87:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3474);
            reg = x3474;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x3475 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3475 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3476 = x88 - x3475;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3477 = x3475 * x3476;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3477 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3478 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3478 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3479 = x3475 * x66;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x3480 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3480 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3481 = x3480 * x58;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3482 = x3479 + x3481;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3483 = x3478 - x3482;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3483 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3484 = x3467 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3485 = x3169 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3486 = x3484 + x3485;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3487 = x3467 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3488 = x3169 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3489 = x3487 + x3488;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3486);
          reg = x3486;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3489);
          reg = x3489;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3490 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3491 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3492 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3492 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3493 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3493 != Fp::invalid());
        host_args.at(0) = x87;
        host_args.at(1) = x3490;
        host_args.at(2) = x3491;
        host_args.at(3) = x3492;
        host_args.at(4) = x3493;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3113 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3494 = x3109 + x50;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3490);
            reg = x3490;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3491);
            reg = x3491;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3492);
            reg = x3492;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3493);
            reg = x3493;
          }
          {
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3495 = args[2][138 * steps + ((cycle - 0) & mask)];
            assert(x3495 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3496 = args[2][139 * steps + ((cycle - 0) & mask)];
            assert(x3496 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3497 = args[2][140 * steps + ((cycle - 0) & mask)];
            assert(x3497 != Fp::invalid());
            // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x3498 = args[2][141 * steps + ((cycle - 0) & mask)];
            assert(x3498 != Fp::invalid());
            host_args.at(0) = x3494;
            host_args.at(1) = x3495;
            host_args.at(2) = x3496;
            host_args.at(3) = x3497;
            host_args.at(4) = x3498;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3499 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3499 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3500 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3500 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3501 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3501 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3502 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3502 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3494);
            reg = x3494;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2848);
            reg = x2848;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3499);
            reg = x3499;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3500);
            reg = x3500;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3501);
            reg = x3501;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3502);
            reg = x3502;
          }
        }
        if (x3112 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3503 = x2937 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3503 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3504 = x2926 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3504 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3505 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3506 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3507 = x3505 + x3506;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3508 = x3507 + x3092;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3509 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3510 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3511 = x3509 + x3510;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3512 = x3511 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3513 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3508);
          reg = x3508;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3512);
          reg = x3512;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3513);
          reg = x3513;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3513);
          reg = x3513;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3514 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3514 != Fp::invalid());
      if (x3514 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3515 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3515 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3516 = x3515 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3516 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3517 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3517 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3518 = x3517 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3519 = x3518 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3519 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3520 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3520 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3521 = x3520 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3522 = x88 - x3520;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3523 = x3522 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3524 = x3521 + x3523;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3525 = x3168 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3526 = x88 - x3168;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3527 = x3526 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3528 = x3525 + x3527;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3529 = x3169 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3530 = x88 - x3169;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3531 = x3530 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3532 = x3529 + x3531;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3533 = x3172 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3534 = x88 - x3172;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3535 = x3534 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3536 = x3533 + x3535;
        host_args.at(0) = x3524;
        host_args.at(1) = x3528;
        host_args.at(2) = x3532;
        host_args.at(3) = x3536;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3524);
          reg = x3524;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3528);
          reg = x3528;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3532);
          reg = x3532;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3536);
          reg = x3536;
        }
        {
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3537 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3537 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3538 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3538 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3539 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3539 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3540 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3540 != Fp::invalid());
          host_args.at(0) = x3212;
          host_args.at(1) = x3537;
          host_args.at(2) = x3538;
          host_args.at(3) = x3539;
          host_args.at(4) = x3540;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3541 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x3541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3542 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3543 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3543 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3544 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3544 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3212);
          reg = x3212;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2848);
          reg = x2848;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3541);
          reg = x3541;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3542);
          reg = x3542;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3543);
          reg = x3543;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3544);
          reg = x3544;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3545 = x2937 - x37;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3545 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x2926 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3546 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3547 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3548 = x3546 + x3547;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3549 = x3548 + x3109;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3550 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3551 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3552 = x3550 + x3551;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3553 = x3552 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3554 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3549);
          reg = x3549;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3553);
          reg = x3553;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3554);
          reg = x3554;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3554);
          reg = x3554;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3555 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3555 != Fp::invalid());
      if (x3555 != 0) {
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3556 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3556 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3557 = x3556 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3557 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x88 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3558 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3558 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3559 = x3558 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3560 = x3559 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3560 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3561 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3561 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3562 = x3561 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3563 = x88 - x3561;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3564 = x3563 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3565 = x3562 + x3564;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3566 = x3169 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3567 = x88 - x3169;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3568 = x3567 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3569 = x3566 + x3568;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3570 = x3561 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3571 = x3563 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3572 = x3570 + x3571;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3573 = x3169 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3574 = x3567 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3575 = x3573 + x3574;
        host_args.at(0) = x3565;
        host_args.at(1) = x3572;
        host_args.at(2) = x3569;
        host_args.at(3) = x3575;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3565);
          reg = x3565;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3572);
          reg = x3572;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3569);
          reg = x3569;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3575);
          reg = x3575;
        }
        {
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3576 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3576 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3577 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3577 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3578 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3578 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3579 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3579 != Fp::invalid());
          host_args.at(0) = x3212;
          host_args.at(1) = x3576;
          host_args.at(2) = x3577;
          host_args.at(3) = x3578;
          host_args.at(4) = x3579;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3580 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x3580 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3581 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3582 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3582 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3583 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3583 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3212);
          reg = x3212;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2848);
          reg = x2848;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3580);
          reg = x3580;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3581);
          reg = x3581;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3582);
          reg = x3582;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3583);
          reg = x3583;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3584 = x2937 - x37;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3584 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3585 = x2926 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3585 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3586 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3587 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3588 = x3586 + x3587;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3589 = x3588 + x3109;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3590 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3591 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3592 = x3590 + x3591;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3593 = x3592 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3594 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3593);
          reg = x3593;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3594);
          reg = x3594;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3594);
          reg = x3594;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
      auto x3595 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3595 != Fp::invalid());
      if (x3595 != 0) {
        if (x88 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
          auto x3596 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3596 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          auto x3597 = x3596 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          if (x3597 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        }
        if (x87 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
          auto x3598 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x3598 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          auto x3599 = x3598 + x3169;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          auto x3600 = x3599 - x88;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
          if (x3600 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/3/OneHot1/Reg"("./cirgen/circuit/rv32im/rv32im.inl":84:46))
        auto x3601 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3601 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3602 = x3601 * x3098;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3603 = x88 - x3601;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3604 = x3603 * x3217;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3605 = x3602 + x3604;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3606 = x3601 * x3099;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3607 = x3603 * x3218;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3608 = x3606 + x3607;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3609 = x3601 * x3100;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3610 = x3603 * x3219;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3611 = x3609 + x3610;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3612 = x3601 * x3101;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3613 = x3603 * x3220;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3614 = x3612 + x3613;
        host_args.at(0) = x3605;
        host_args.at(1) = x3608;
        host_args.at(2) = x3611;
        host_args.at(3) = x3614;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3605);
          reg = x3605;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3608);
          reg = x3608;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3611);
          reg = x3611;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3614);
          reg = x3614;
        }
        {
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3615 = args[2][138 * steps + ((cycle - 0) & mask)];
          assert(x3615 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3616 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3616 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3617 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3617 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3618 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3618 != Fp::invalid());
          host_args.at(0) = x3212;
          host_args.at(1) = x3615;
          host_args.at(2) = x3616;
          host_args.at(3) = x3617;
          host_args.at(4) = x3618;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3619 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x3619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3620 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3621 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3622 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3622 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3212);
          reg = x3212;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2848);
          reg = x2848;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3619);
          reg = x3619;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3620);
          reg = x3620;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3621);
          reg = x3621;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3622);
          reg = x3622;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3623 = x2937 - x37;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        if (x3623 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        auto x3624 = x2926 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":84:46)
        if (x3624 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:84");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3625 = x2897 * x66;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3626 = x2900 * x63;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3627 = x3625 + x3626;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3628 = x3627 + x3109;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3629 = x2890 * x51;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3630 = x2892 * x85;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3631 = x3629 + x3630;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3632 = x3631 + x2894;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3633 = x2890 * x84;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3628);
          reg = x3628;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3632);
          reg = x3632;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3633);
          reg = x3633;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3633);
          reg = x3633;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/components/mux.h":37:25))
    auto x3634 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x3634 != Fp::invalid());
    if (x3634 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3635 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x3635 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3636 = x527 * x79;
      {
        host_args.at(0) = x3636;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3637 = host_outs.at(0);
        auto x3638 = host_outs.at(1);
        auto x3639 = host_outs.at(2);
        auto x3640 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3637);
          reg = x3637;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3638);
          reg = x3638;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3639);
          reg = x3639;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3640);
          reg = x3640;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3641 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x3641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3642 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3643 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3644 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3644 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3636);
        reg = x3636;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3635);
        reg = x3635;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3641);
        reg = x3641;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3642);
        reg = x3642;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3643);
        reg = x3643;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3644);
        reg = x3644;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3645 = Fp(x3644.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3646 = x3645 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3646);
          reg = x3646;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3647 = Fp(x3644.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3648 = x3647 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3648);
          reg = x3648;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3649 = Fp(x3644.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3650 = x3649 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3650);
          reg = x3650;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3651 = Fp(x3644.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3652 = x3651 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3652);
          reg = x3652;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3653 = Fp(x3644.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3654 = x3653 * x58;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3654);
          reg = x3654;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3655 = Fp(x3644.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3655);
          reg = x3655;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3656 = Fp(x3643.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3657 = x3656 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3657);
          reg = x3657;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3658 = Fp(x3643.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3659 = x3658 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3659);
          reg = x3659;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3660 = Fp(x3643.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3661 = x3660 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3661);
          reg = x3661;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3662 = Fp(x3643.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3663 = x3662 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3663);
          reg = x3663;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3664 = Fp(x3643.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3664);
          reg = x3664;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3665 = Fp(x3642.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3666 = x3665 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3666);
          reg = x3666;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3667 = Fp(x3642.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3668 = x3667 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3668);
          reg = x3668;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3669 = Fp(x3642.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3670 = x3669 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3670);
          reg = x3670;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3671 = Fp(x3642.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3672 = x3671 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3672);
          reg = x3672;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3673 = Fp(x3642.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3673);
          reg = x3673;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3674 = Fp(x3641.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3675 = x3674 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3675);
          reg = x3675;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3676 = Fp(x3641.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3676);
          reg = x3676;
        }
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3677 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3677 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3678 = x3677 * x57;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3679 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3679 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3680 = x3679 * x61;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3681 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3681 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3682 = x3681 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3683 = x3680 + x3682;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3684 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3684 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3685 = x3684 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3686 = x3683 + x3685;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3687 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3687 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3688 = x3686 + x3687;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3689 = x3678 + x3688;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3690 = x3689 * x85;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3691 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3691 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3692 = x3690 + x3691;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3693 = x3644 - x3692;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3693 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3694 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3694 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3695 = x3694 * x71;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3696 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3696 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3697 = x3696 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3698 = x3695 + x3697;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3699 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x3699 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3700 = x3698 + x3699;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3701 = x3700 * x61;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3702 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3702 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3703 = x3702 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3704 = x3701 + x3703;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3705 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3705 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3706 = x3704 + x3705;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3707 = x3643 - x3706;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3707 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3708 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3708 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3709 = x3708 * x66;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3710 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3710 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3711 = x3710 * x81;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3712 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3712 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3713 = x3711 + x3712;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3714 = x3713 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3715 = x3709 + x3714;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3716 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3716 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3717 = x3716 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3718 = x3715 + x3717;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3719 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3719 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3720 = x3718 + x3719;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3721 = x3642 - x3720;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3721 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3722 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3722 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3723 = x3722 * x66;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x3724 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3724 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3725 = x3723 + x3724;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3726 = x3641 - x3725;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3726 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3641;
        host_args.at(1) = x3642;
        host_args.at(2) = x3643;
        host_args.at(3) = x3644;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3727 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3728 = (x3727 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3728);
            reg = x3728;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3729 = x3727 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3730 = (x3729 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3730);
            reg = x3730;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3731 = x3727 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3732 = (x3731 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3732);
            reg = x3732;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3733 = x3727 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3734 = (x3733 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3734);
            reg = x3734;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3735 = x3727 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3736 = (x3735 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3736);
            reg = x3736;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3737 = x3727 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x3738 = (x3737 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3738);
            reg = x3738;
          }
        }
        // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3739 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x3739 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3740 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x3740 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3741 = x3740 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3742 = x3739 + x3741;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3743 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x3743 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3744 = x3743 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3745 = x3742 + x3744;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3746 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x3746 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3747 = x3746 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3748 = x3745 + x3747;
        // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x3749 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x3749 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x3750 = x3749 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x3751 = x3748 + x3750;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x3752 = x3751 - x3727;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x3752 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      host_args.at(0) = x87;
      host_args.at(1) = x87;
      host_args.at(2) = x87;
      host_args.at(3) = x87;
      host_args.at(4) = x87;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3753 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3754 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3754 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3755 = x3753 + x3754;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3756 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3756 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3757 = x3755 + x3756;
      // loc("Top/Mux/4/Mux/4/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3758 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3759 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3759 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3760 = x3758 + x3759;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3761 = x3702 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3762 = x3705 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3763 = x3761 + x3762;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3764 = x3763 + x3708;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3765 = x3764 + x50;
      {
        host_args.at(0) = x3765;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3766 = host_outs.at(0);
        auto x3767 = host_outs.at(1);
        auto x3768 = host_outs.at(2);
        auto x3769 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3766);
          reg = x3766;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3767);
          reg = x3767;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3768);
          reg = x3768;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3769);
          reg = x3769;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3770 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x3770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3771 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3772 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3773 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3773 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3765);
        reg = x3765;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3635);
        reg = x3635;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3770);
        reg = x3770;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3771);
        reg = x3771;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3772);
        reg = x3772;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3773);
        reg = x3773;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3774 = x3691 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3775 = x3774 + x3700;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3776 = x3775 + x50;
      {
        host_args.at(0) = x3776;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x3777 = host_outs.at(0);
        auto x3778 = host_outs.at(1);
        auto x3779 = host_outs.at(2);
        auto x3780 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3777);
          reg = x3777;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3778);
          reg = x3778;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3779);
          reg = x3779;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3780);
          reg = x3780;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3781 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x3781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3782 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3783 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3784 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3784 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3776);
        reg = x3776;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3635);
        reg = x3635;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3781);
        reg = x3781;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3782);
        reg = x3782;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3783);
        reg = x3783;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3784);
        reg = x3784;
      }
      host_args.at(0) = x3764;
      host_args.at(1) = x3770;
      host_args.at(2) = x3771;
      host_args.at(3) = x3772;
      host_args.at(4) = x3773;
      host_args.at(5) = x3775;
      host_args.at(6) = x3781;
      host_args.at(7) = x3782;
      host_args.at(8) = x3783;
      host_args.at(9) = x3784;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3785 = x3684 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3786 = x3687 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3787 = x3785 + x3786;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3788 = x3787 + x3775;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3789 = x3759 * x3788;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3790 = x88 - x3759;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3791 = x3790 * x3781;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x3792 = x3789 + x3791;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3793 = Fp(x3792.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3794 = x3793 * x56;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3794);
          reg = x3794;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3795 = Fp(x3792.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3796 = x3795 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3796);
          reg = x3796;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3797 = Fp(x3792.asUInt32() & x35.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":181:21)
          auto x3798 = Fp(x3797.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3798);
            reg = x3798;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x3799 = Fp(x3797.asUInt32() & x85.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x3800 = x3799 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3800);
            reg = x3800;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x3801 = Fp(x3797.asUInt32() & x81.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x3802 = x3801 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3802);
            reg = x3802;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x3803 = Fp(x3797.asUInt32() & x71.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x3804 = x3803 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3804);
            reg = x3804;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x3805 = Fp(x3797.asUInt32() & x61.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x3806 = x3805 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3806);
            reg = x3806;
          }
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3807 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x3807 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":183:21)
          auto x3808 = x3807 * x34;
          // loc("cirgen/components/u32.cpp":183:17)
          auto x3809 = x3808 + x88;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3810 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x3810 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":183:42)
          auto x3811 = x3810 * x80;
          // loc("cirgen/components/u32.cpp":183:38)
          auto x3812 = x3811 + x88;
          // loc("cirgen/components/u32.cpp":183:16)
          auto x3813 = x3809 * x3812;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3814 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x3814 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":183:58)
          auto x3815 = x3814 + x88;
          // loc("cirgen/components/u32.cpp":183:16)
          auto x3816 = x3813 * x3815;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3817 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x3817 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":184:15)
          auto x3818 = x3817 * x85;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x3819 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x3819 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":184:15)
          auto x3820 = x3818 + x3819;
          // loc("cirgen/components/u32.cpp":186:13)
          auto x3821 = (x3820 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:9)
          auto x3822 = x3821 * x3816;
          // loc("cirgen/components/u32.cpp":186:34)
          auto x3823 = x3820 - x88;
          // loc("cirgen/components/u32.cpp":186:34)
          auto x3824 = (x3823 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:30)
          auto x3825 = x3824 * x3816;
          // loc("cirgen/components/u32.cpp":186:55)
          auto x3826 = x3820 - x85;
          // loc("cirgen/components/u32.cpp":186:55)
          auto x3827 = (x3826 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:51)
          auto x3828 = x3827 * x3816;
          // loc("cirgen/components/u32.cpp":186:76)
          auto x3829 = x3820 - x80;
          // loc("cirgen/components/u32.cpp":186:76)
          auto x3830 = (x3829 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:72)
          auto x3831 = x3830 * x3816;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3822);
            reg = x3822;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3825);
            reg = x3825;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3828);
            reg = x3828;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3831);
            reg = x3831;
          }
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3832 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x3832 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3833 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x3833 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x3834 = x3833 * x85;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x3835 = x3832 + x3834;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3836 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3836 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x3837 = x3836 * x81;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x3838 = x3835 + x3837;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3839 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3839 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x3840 = x3839 * x71;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x3841 = x3838 + x3840;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x3842 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3842 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x3843 = x3842 * x61;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x3844 = x3841 + x3843;
        // loc("cirgen/components/u32.cpp":189:6)
        auto x3845 = x3844 - x3797;
        // loc("cirgen/components/u32.cpp":189:6)
        if (x3845 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:189");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3846 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3846 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3847 = x3846 * x57;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3848 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3848 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3849 = x3848 * x63;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3850 = x3847 + x3849;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3851 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3852 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3852 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x3853 = x3852 * x85;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x3854 = x3851 + x3853;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3855 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3855 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x3856 = x3855 * x81;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x3857 = x3854 + x3856;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3858 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3858 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x3859 = x3858 * x71;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x3860 = x3857 + x3859;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3861 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3861 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x3862 = x3861 * x61;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x3863 = x3860 + x3862;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3864 = x3850 + x3863;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3865 = x3792 - x3864;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3865 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3866 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3867 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3868 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3869 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3869 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3870 = x3760 * x3866;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3871 = x3760 * x3867;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3872 = x3760 * x3868;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3873 = x3760 * x3869;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3874 = x88 - x3760;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3875 = x3874 * x3781;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3876 = x3874 * x3782;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3877 = x3874 * x3783;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x3878 = x3874 * x3784;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x3879 = x3870 + x3875;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x3880 = x3871 + x3876;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x3881 = x3872 + x3877;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x3882 = x3873 + x3878;
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x3883 = Fp(x3773.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x3884 = x3883 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3884);
          reg = x3884;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x3885 = Fp(x3773.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x3886 = x3885 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3886);
          reg = x3886;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3887 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3887 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x3888 = x3887 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x3889 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3889 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x3890 = x3889 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x3891 = x3888 + x3890;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x3892 = x3773 - x3891;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x3892 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x3893 = Fp(x3882.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x3894 = x3893 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3894);
          reg = x3894;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x3895 = Fp(x3882.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x3896 = x3895 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3896);
          reg = x3896;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3897 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3897 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x3898 = x3897 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x3899 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3899 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x3900 = x3899 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x3901 = x3898 + x3900;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x3902 = x3882 - x3901;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x3902 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/components/u32.cpp":207:13)
      auto x3903 = x3753 * x3897;
      // loc("cirgen/components/u32.cpp":207:3)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3903);
        reg = x3903;
      }
      // loc("cirgen/components/u32.cpp":208:13)
      auto x3904 = x3755 * x3887;
      // loc("cirgen/components/u32.cpp":208:3)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3904);
        reg = x3904;
      }
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3905 = x3770 * x3879;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3906 = x3771 * x3879;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3907 = x3770 * x3880;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3908 = x3906 + x3907;
      // loc("cirgen/components/u32.cpp":225:19)
      auto x3909 = x3908 * x83;
      // loc("cirgen/components/u32.cpp":225:13)
      auto x3910 = x3905 + x3909;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3911 = Fp(x3910.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3911);
          reg = x3911;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3912 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3912 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3913 = x3910 - x3912;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3914 = x3913 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3915 = Fp(x3914.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3915);
          reg = x3915;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3916 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3916 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3917 = x3914 - x3916;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3918 = x3917 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3919 = Fp(x3918.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3919);
          reg = x3919;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3920 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3920 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3921 = x3918 - x3920;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3922 = x3921 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3922);
        reg = x3922;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3923 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3923 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":213:19)
      auto x3924 = x3923 * x83;
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3925 = x3920 + x3924;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3926 = x3772 * x3879;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3927 = x3771 * x3880;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3928 = x3926 + x3927;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3929 = x3770 * x3881;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3930 = x3928 + x3929;
      // loc("cirgen/components/u32.cpp":225:13)
      auto x3931 = x3925 + x3930;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3932 = x3773 * x3879;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3933 = x3772 * x3880;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3934 = x3932 + x3933;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3935 = x3771 * x3881;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3936 = x3934 + x3935;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3937 = x3770 * x3882;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3938 = x3936 + x3937;
      // loc("cirgen/components/u32.cpp":225:19)
      auto x3939 = x3938 * x83;
      // loc("cirgen/components/u32.cpp":225:13)
      auto x3940 = x3931 + x3939;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3941 = Fp(x3940.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3941);
          reg = x3941;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3942 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3942 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3943 = x3940 - x3942;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3944 = x3943 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3945 = Fp(x3944.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3945);
          reg = x3945;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3946 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3946 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3947 = x3944 - x3946;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3948 = x3947 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3949 = Fp(x3948.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3949);
          reg = x3949;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3950 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3950 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3951 = x3948 - x3950;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3952 = x3951 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3952);
        reg = x3952;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3953 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3953 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":213:19)
      auto x3954 = x3953 * x83;
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3955 = x3950 + x3954;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3956 = x3773 * x3880;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3957 = x3772 * x3881;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3958 = x3956 + x3957;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3959 = x3771 * x3882;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3960 = x3958 + x3959;
      // loc("cirgen/components/u32.cpp":225:13)
      auto x3961 = x3955 + x3960;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3962 = x3773 * x3881;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3963 = x3772 * x3882;
      // loc("cirgen/components/u32.cpp":223:20)
      auto x3964 = x3962 + x3963;
      // loc("cirgen/components/u32.cpp":225:19)
      auto x3965 = x3964 * x83;
      // loc("cirgen/components/u32.cpp":225:13)
      auto x3966 = x3961 + x3965;
      // loc("cirgen/components/u32.cpp":228:13)
      auto x3967 = x3966 + x33;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x3968 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3968 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":228:53)
      auto x3969 = x3771 * x83;
      // loc("cirgen/components/u32.cpp":228:38)
      auto x3970 = x3770 + x3969;
      // loc("cirgen/components/u32.cpp":228:30)
      auto x3971 = x3968 * x3970;
      // loc("cirgen/components/u32.cpp":228:13)
      auto x3972 = x3967 - x3971;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x3973 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3973 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":229:37)
      auto x3974 = x3880 * x83;
      // loc("cirgen/components/u32.cpp":229:22)
      auto x3975 = x3879 + x3974;
      // loc("cirgen/components/u32.cpp":229:14)
      auto x3976 = x3973 * x3975;
      // loc("cirgen/components/u32.cpp":228:13)
      auto x3977 = x3972 - x3976;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3978 = Fp(x3977.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3978);
          reg = x3978;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3979 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x3979 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3980 = x3977 - x3979;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3981 = x3980 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3982 = Fp(x3981.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3982);
          reg = x3982;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x3983 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x3983 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3984 = x3981 - x3983;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3985 = x3984 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x3986 = Fp(x3985.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3986);
          reg = x3986;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x3987 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x3987 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x3988 = x3985 - x3987;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x3989 = x3988 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3989);
        reg = x3989;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x3990 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x3990 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":213:19)
      auto x3991 = x3990 * x83;
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3992 = x3987 + x3991;
      // loc("cirgen/components/u32.cpp":223:31)
      auto x3993 = x3773 * x3882;
      // loc("cirgen/components/u32.cpp":225:13)
      auto x3994 = x3992 + x3993;
      // loc("cirgen/components/u32.cpp":232:13)
      auto x3995 = x3994 + x32;
      // loc("cirgen/components/u32.cpp":232:53)
      auto x3996 = x3773 * x83;
      // loc("cirgen/components/u32.cpp":232:38)
      auto x3997 = x3772 + x3996;
      // loc("cirgen/components/u32.cpp":232:30)
      auto x3998 = x3968 * x3997;
      // loc("cirgen/components/u32.cpp":232:13)
      auto x3999 = x3995 - x3998;
      // loc("cirgen/components/u32.cpp":233:37)
      auto x4000 = x3882 * x83;
      // loc("cirgen/components/u32.cpp":233:22)
      auto x4001 = x3881 + x4000;
      // loc("cirgen/components/u32.cpp":233:14)
      auto x4002 = x3973 * x4001;
      // loc("cirgen/components/u32.cpp":232:13)
      auto x4003 = x3999 - x4002;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4004 = Fp(x4003.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4004);
          reg = x4004;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4005 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x4005 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4006 = x4003 - x4005;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4007 = x4006 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4008 = Fp(x4007.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4008);
          reg = x4008;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4009 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x4009 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4010 = x4007 - x4009;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4011 = x4010 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4011);
        reg = x4011;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4012 = x3716 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4013 = x3719 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4014 = x4012 + x4013;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4015 = x4014 + x3722;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4016 = (x4015 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4016);
          reg = x4016;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4017 = inv(x4015);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4017);
          reg = x4017;
        }
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4018 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x4018 != Fp::invalid());
      if (x4018 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4015 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4019 = x88 - x4018;
      if (x4019 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4020 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x4020 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4021 = x4015 * x4020;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4022 = x4021 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4022 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x4023 = x527 + x81;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4024 = x4023 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4025 = Fp(x4024.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4025);
          reg = x4025;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4026 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4026 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4027 = x4024 - x4026;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4028 = x4027 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4029 = Fp(x4028.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4029);
          reg = x4029;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4030 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4030 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4031 = x4028 - x4030;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4032 = x4031 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4033 = Fp(x4032.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4033);
          reg = x4033;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4034 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4034 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4035 = x4032 - x4034;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4036 = x4035 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4037 = Fp(x4036.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4037);
          reg = x4037;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4038 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4038 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4039 = x4036 - x4038;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4040 = x4039 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4040);
        reg = x4040;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4041 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4041 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4042 = x88 - x4041;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4043 = x4041 * x4042;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4043);
        reg = x4043;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x4044 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4044 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4045 = x85 - x4041;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4046 = x4044 * x4045;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4046 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4047 = x3757 * x4019;
      if (x4047 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4048 = x4015 + x50;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3979);
          reg = x3979;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3983);
          reg = x3983;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4005);
          reg = x4005;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4009);
          reg = x4009;
        }
        {
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4049 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4049 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4050 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4050 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4051 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4051 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4052 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4052 != Fp::invalid());
          host_args.at(0) = x4048;
          host_args.at(1) = x4049;
          host_args.at(2) = x4050;
          host_args.at(3) = x4051;
          host_args.at(4) = x4052;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4053 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4054 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4055 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4055 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4056 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4056 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4048);
          reg = x4048;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3635);
          reg = x3635;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4053);
          reg = x4053;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4054);
          reg = x4054;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4055);
          reg = x4055;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4056);
          reg = x4056;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4057 = x88 - x3757;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4058 = x4057 * x4019;
      if (x4058 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4059 = x4015 + x50;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3912);
          reg = x3912;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3916);
          reg = x3916;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3942);
          reg = x3942;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3946);
          reg = x3946;
        }
        {
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4060 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4060 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4061 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4061 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4062 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4062 != Fp::invalid());
          // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4063 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4063 != Fp::invalid());
          host_args.at(0) = x4059;
          host_args.at(1) = x4060;
          host_args.at(2) = x4061;
          host_args.at(3) = x4062;
          host_args.at(4) = x4063;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4064 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4065 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4066 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4067 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4067 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4059);
          reg = x4059;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3635);
          reg = x3635;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4064);
          reg = x4064;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4065);
          reg = x4065;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4066);
          reg = x4066;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4067);
          reg = x4067;
        }
      }
      if (x4018 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("Top/Mux/4/Mux/4/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4068 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4068 != Fp::invalid());
      if (x4068 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4069 = x3724 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4069 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3713 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4070 = x3689 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4070 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3753 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4071 = x3724 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4071 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4072 = x3713 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4072 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4073 = x3689 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4073 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3754 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4074 = x3724 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4074 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4075 = x3713 - x85;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4075 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4076 = x3689 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4076 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3756 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4077 = x3724 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4077 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4078 = x3713 - x80;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4078 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4079 = x3689 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4079 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3758 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4080 = x3724 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4080 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4081 = x3713 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4081 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3689 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3759 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4082 = x3724 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4082 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4083 = x3713 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4083 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3689 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
    auto x4084 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x4084 != Fp::invalid());
    if (x4084 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4085 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x4085 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4086 = x527 * x79;
      {
        host_args.at(0) = x4086;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x4087 = host_outs.at(0);
        auto x4088 = host_outs.at(1);
        auto x4089 = host_outs.at(2);
        auto x4090 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4087);
          reg = x4087;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4088);
          reg = x4088;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4089);
          reg = x4089;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4090);
          reg = x4090;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4091 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4091 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4092 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4092 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4093 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4093 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4094 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4094 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4086);
        reg = x4086;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4085);
        reg = x4085;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4091);
        reg = x4091;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4092);
        reg = x4092;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4093);
        reg = x4093;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4094);
        reg = x4094;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4095 = Fp(x4094.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4096 = x4095 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4096);
          reg = x4096;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4097 = Fp(x4094.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4098 = x4097 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4098);
          reg = x4098;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4099 = Fp(x4094.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4100 = x4099 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4100);
          reg = x4100;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4101 = Fp(x4094.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4102 = x4101 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4102);
          reg = x4102;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4103 = Fp(x4094.asUInt32() & x73.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4104 = x4103 * x58;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4104);
          reg = x4104;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4105 = Fp(x4094.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4105);
          reg = x4105;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4106 = Fp(x4093.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4107 = x4106 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4107);
          reg = x4107;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4108 = Fp(x4093.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4109 = x4108 * x62;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4109);
          reg = x4109;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4110 = Fp(x4093.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4111 = x4110 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4111);
          reg = x4111;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4112 = Fp(x4093.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4113 = x4112 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4113);
          reg = x4113;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4114 = Fp(x4093.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4114);
          reg = x4114;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4115 = Fp(x4092.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4116 = x4115 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4116);
          reg = x4116;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4117 = Fp(x4092.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4118 = x4117 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4118);
          reg = x4118;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4119 = Fp(x4092.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4120 = x4119 * x60;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4120);
          reg = x4120;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4121 = Fp(x4092.asUInt32() & x67.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4122 = x4121 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4122);
          reg = x4122;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4123 = Fp(x4092.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4123);
          reg = x4123;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4124 = Fp(x4091.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4125 = x4124 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4125);
          reg = x4125;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4126 = Fp(x4091.asUInt32() & x54.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4126);
          reg = x4126;
        }
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4127 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4127 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4128 = x4127 * x57;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4129 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4129 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4130 = x4129 * x61;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4131 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4131 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4132 = x4131 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4133 = x4130 + x4132;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4134 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4134 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4135 = x4134 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4136 = x4133 + x4135;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4137 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4137 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4138 = x4136 + x4137;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4139 = x4128 + x4138;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4140 = x4139 * x85;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4141 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4141 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4142 = x4140 + x4141;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4143 = x4094 - x4142;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4143 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4144 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4144 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4145 = x4144 * x71;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4146 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4146 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4147 = x4146 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4148 = x4145 + x4147;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4149 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4149 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4150 = x4148 + x4149;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4151 = x4150 * x61;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4152 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4152 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4153 = x4152 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4154 = x4151 + x4153;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4155 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4155 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4156 = x4154 + x4155;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4157 = x4093 - x4156;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4157 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4158 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4158 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4159 = x4158 * x66;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4160 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4160 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4161 = x4160 * x81;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4162 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4162 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4163 = x4161 + x4162;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4164 = x4163 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4165 = x4159 + x4164;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4166 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4166 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4167 = x4166 * x81;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4168 = x4165 + x4167;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4169 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4169 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4170 = x4168 + x4169;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4171 = x4092 - x4170;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4171 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4172 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4173 = x4172 * x66;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x4174 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4175 = x4173 + x4174;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4176 = x4091 - x4175;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4176 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4091;
        host_args.at(1) = x4092;
        host_args.at(2) = x4093;
        host_args.at(3) = x4094;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4177 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4178 = (x4177 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4178);
            reg = x4178;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4179 = x4177 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4180 = (x4179 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4180);
            reg = x4180;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4181 = x4177 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4182 = (x4181 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4182);
            reg = x4182;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4183 = x4177 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4184 = (x4183 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4184);
            reg = x4184;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4185 = x4177 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4186 = (x4185 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4186);
            reg = x4186;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4187 = x4177 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4188 = (x4187 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4188);
            reg = x4188;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4189 = x4177 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4190 = (x4189 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4190);
            reg = x4190;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4191 = x4177 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x4192 = (x4191 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4192);
            reg = x4192;
          }
        }
        // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4193 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x4193 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4194 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x4194 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4195 = x4194 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4196 = x4193 + x4195;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4197 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x4197 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4198 = x4197 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4199 = x4196 + x4198;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4200 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x4200 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4201 = x4200 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4202 = x4199 + x4201;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4203 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x4203 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4204 = x4203 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4205 = x4202 + x4204;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4206 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x4206 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4207 = x4206 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4208 = x4205 + x4207;
        // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4209 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x4209 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x4210 = x4209 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x4211 = x4208 + x4210;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x4212 = x4211 - x4177;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x4212 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg"("./cirgen/circuit/rv32im/rv32im.inl":123:49))
      auto x4213 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4213 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg2"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4214 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4214 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
      auto x4215 = x4213 + x4214;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg3"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4216 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4216 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4217 = x4214 + x4216;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg4"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4218 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4218 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/Reg5"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4219 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4219 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
      auto x4220 = x4218 + x4219;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
      auto x4221 = x4215 + x4219;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg6"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4222 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4222 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4223 = x4220 + x4222;
      // loc("Top/Mux/4/Mux/5/OneHot/Reg7"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4224 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4224 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4225 = x4222 + x4224;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4226 = x4223 + x4224;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4227 = x4221 + x4224;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4228 = x4219 + x4224;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][188 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4227);
        reg = x4227;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][189 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4228);
        reg = x4228;
      }
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4229 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4229 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4230 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4230 != Fp::invalid());
      host_args.at(0) = x4225;
      host_args.at(1) = x4226;
      host_args.at(2) = x4229;
      host_args.at(3) = x4230;
      host_args.at(4) = x4217;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4231 = x4152 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4232 = x4155 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4233 = x4231 + x4232;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4234 = x4233 + x4158;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4235 = x4234 + x50;
      {
        host_args.at(0) = x4235;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x4236 = host_outs.at(0);
        auto x4237 = host_outs.at(1);
        auto x4238 = host_outs.at(2);
        auto x4239 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4236);
          reg = x4236;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4237);
          reg = x4237;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4238);
          reg = x4238;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4239);
          reg = x4239;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4240 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4240 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4241 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4241 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4242 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4242 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4243 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4243 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4235);
        reg = x4235;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4085);
        reg = x4085;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4240);
        reg = x4240;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4241);
        reg = x4241;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4242);
        reg = x4242;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4243);
        reg = x4243;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4244 = x4141 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4245 = x4244 + x4150;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4246 = x4245 + x50;
      {
        host_args.at(0) = x4246;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x4247 = host_outs.at(0);
        auto x4248 = host_outs.at(1);
        auto x4249 = host_outs.at(2);
        auto x4250 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4247);
          reg = x4247;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4248);
          reg = x4248;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4249);
          reg = x4249;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4250);
          reg = x4250;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4251 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4251 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4252 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4252 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4253 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4253 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4254 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4254 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4246);
        reg = x4246;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4085);
        reg = x4085;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4251);
        reg = x4251;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4252);
        reg = x4252;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4253);
        reg = x4253;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4254);
        reg = x4254;
      }
      host_args.at(0) = x4234;
      host_args.at(1) = x4240;
      host_args.at(2) = x4241;
      host_args.at(3) = x4242;
      host_args.at(4) = x4243;
      host_args.at(5) = x4245;
      host_args.at(6) = x4251;
      host_args.at(7) = x4252;
      host_args.at(8) = x4253;
      host_args.at(9) = x4254;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4255 = x4134 * x66;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4256 = x4137 * x63;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4257 = x4255 + x4256;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4258 = x4257 + x4245;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4259 = x4225 * x4258;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4260 = x88 - x4225;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4261 = x4260 * x4251;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4262 = x4259 + x4261;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4263 = Fp(x4262.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4264 = x4263 * x56;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4264);
          reg = x4264;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4265 = Fp(x4262.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4266 = x4265 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4266);
          reg = x4266;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4267 = Fp(x4262.asUInt32() & x35.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":181:21)
          auto x4268 = Fp(x4267.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4268);
            reg = x4268;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x4269 = Fp(x4267.asUInt32() & x85.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x4270 = x4269 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4270);
            reg = x4270;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x4271 = Fp(x4267.asUInt32() & x81.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x4272 = x4271 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4272);
            reg = x4272;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x4273 = Fp(x4267.asUInt32() & x71.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x4274 = x4273 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4274);
            reg = x4274;
          }
          // loc("cirgen/components/u32.cpp":181:21)
          auto x4275 = Fp(x4267.asUInt32() & x61.asUInt32());
          // loc("cirgen/components/u32.cpp":181:20)
          auto x4276 = x4275 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4276);
            reg = x4276;
          }
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4277 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x4277 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":183:21)
          auto x4278 = x4277 * x34;
          // loc("cirgen/components/u32.cpp":183:17)
          auto x4279 = x4278 + x88;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4280 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x4280 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":183:42)
          auto x4281 = x4280 * x80;
          // loc("cirgen/components/u32.cpp":183:38)
          auto x4282 = x4281 + x88;
          // loc("cirgen/components/u32.cpp":183:16)
          auto x4283 = x4279 * x4282;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4284 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x4284 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":183:58)
          auto x4285 = x4284 + x88;
          // loc("cirgen/components/u32.cpp":183:16)
          auto x4286 = x4283 * x4285;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4287 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x4287 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":184:15)
          auto x4288 = x4287 * x85;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4289 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x4289 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":184:15)
          auto x4290 = x4288 + x4289;
          // loc("cirgen/components/u32.cpp":186:13)
          auto x4291 = (x4290 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:9)
          auto x4292 = x4291 * x4286;
          // loc("cirgen/components/u32.cpp":186:34)
          auto x4293 = x4290 - x88;
          // loc("cirgen/components/u32.cpp":186:34)
          auto x4294 = (x4293 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:30)
          auto x4295 = x4294 * x4286;
          // loc("cirgen/components/u32.cpp":186:55)
          auto x4296 = x4290 - x85;
          // loc("cirgen/components/u32.cpp":186:55)
          auto x4297 = (x4296 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:51)
          auto x4298 = x4297 * x4286;
          // loc("cirgen/components/u32.cpp":186:76)
          auto x4299 = x4290 - x80;
          // loc("cirgen/components/u32.cpp":186:76)
          auto x4300 = (x4299 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":186:72)
          auto x4301 = x4300 * x4286;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4292);
            reg = x4292;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4295);
            reg = x4295;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4298);
            reg = x4298;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4301);
            reg = x4301;
          }
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4302 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x4302 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4303 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x4303 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x4304 = x4303 * x85;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x4305 = x4302 + x4304;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4306 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4306 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x4307 = x4306 * x81;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x4308 = x4305 + x4307;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4309 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4309 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x4310 = x4309 * x71;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x4311 = x4308 + x4310;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4312 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4312 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":195:17)
        auto x4313 = x4312 * x61;
        // loc("cirgen/components/u32.cpp":195:11)
        auto x4314 = x4311 + x4313;
        // loc("cirgen/components/u32.cpp":189:6)
        auto x4315 = x4314 - x4267;
        // loc("cirgen/components/u32.cpp":189:6)
        if (x4315 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:189");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4316 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4316 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4317 = x4316 * x57;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4318 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4318 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4319 = x4318 * x63;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4320 = x4317 + x4319;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4321 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4321 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4322 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4322 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x4323 = x4322 * x85;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x4324 = x4321 + x4323;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4325 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4325 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x4326 = x4325 * x81;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x4327 = x4324 + x4326;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4328 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4328 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x4329 = x4328 * x71;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x4330 = x4327 + x4329;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4331 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4331 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":195:17)
      auto x4332 = x4331 * x61;
      // loc("cirgen/components/u32.cpp":195:11)
      auto x4333 = x4330 + x4332;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4334 = x4320 + x4333;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4335 = x4262 - x4334;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4335 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4336 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4336 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4337 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4337 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4338 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4338 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4339 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4339 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4340 = x4226 * x4336;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4341 = x4226 * x4337;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4342 = x4226 * x4338;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4343 = x4226 * x4339;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4344 = x88 - x4226;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4345 = x4344 * x4251;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4346 = x4344 * x4252;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4347 = x4344 * x4253;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4348 = x4344 * x4254;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4349 = x4340 + x4345;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4350 = x4341 + x4346;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4351 = x4342 + x4347;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4352 = x4343 + x4348;
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4349);
        reg = x4349;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4350);
        reg = x4350;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4351);
        reg = x4351;
      }
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4352);
        reg = x4352;
      }
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x4353 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x4353 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x4354 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x4354 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
        auto x4355 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x4355 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
        auto x4356 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x4356 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4357 = x4229 + x4230;
        host_args.at(0) = x4240;
        host_args.at(1) = x4241;
        host_args.at(2) = x4242;
        host_args.at(3) = x4243;
        host_args.at(4) = x4353;
        host_args.at(5) = x4354;
        host_args.at(6) = x4355;
        host_args.at(7) = x4356;
        host_args.at(8) = x4357;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4358 = host_outs.at(0);
        auto x4359 = host_outs.at(1);
        auto x4360 = host_outs.at(2);
        auto x4361 = host_outs.at(3);
        auto x4362 = host_outs.at(4);
        auto x4363 = host_outs.at(5);
        auto x4364 = host_outs.at(6);
        auto x4365 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4358);
          reg = x4358;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4362);
          reg = x4362;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4359);
          reg = x4359;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4363);
          reg = x4363;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4360);
          reg = x4360;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4364);
          reg = x4364;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4361);
          reg = x4361;
        }
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4365);
          reg = x4365;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4366 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4366 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4367 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4367 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4368 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4368 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4369 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4369 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4370 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4370 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4371 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4371 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4372 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x4372 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4373 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x4373 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4374 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x4374 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4375 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x4375 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4376 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x4376 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4377 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x4377 != Fp::invalid());
      host_args.at(0) = x4240;
      host_args.at(1) = x4241;
      host_args.at(2) = x4242;
      host_args.at(3) = x4243;
      host_args.at(4) = x4366;
      host_args.at(5) = x4367;
      host_args.at(6) = x4368;
      host_args.at(7) = x4369;
      host_args.at(8) = x4370;
      host_args.at(9) = x4371;
      host_args.at(10) = x4372;
      host_args.at(11) = x4373;
      host_args.at(12) = x4374;
      host_args.at(13) = x4375;
      host_args.at(14) = x4376;
      host_args.at(15) = x4377;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4378 = x4166 * x71;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4379 = x4169 * x85;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4380 = x4378 + x4379;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4381 = x4380 + x4172;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4382 = (x4381 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4382);
          reg = x4382;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4383 = inv(x4381);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4383);
          reg = x4383;
        }
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4384 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4384 != Fp::invalid());
      if (x4384 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x4381 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x4385 = x88 - x4384;
      if (x4385 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x4386 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4386 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4387 = x4381 * x4386;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x4388 = x4387 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x4388 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4389 = x4217 * x4385;
      if (x4389 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4390 = x4381 + x50;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4374);
          reg = x4374;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4375);
          reg = x4375;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4376);
          reg = x4376;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4377);
          reg = x4377;
        }
        {
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4391 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4391 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4392 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4392 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4393 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4393 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4394 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4394 != Fp::invalid());
          host_args.at(0) = x4390;
          host_args.at(1) = x4391;
          host_args.at(2) = x4392;
          host_args.at(3) = x4393;
          host_args.at(4) = x4394;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4395 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4396 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4396 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4397 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4397 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4398 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4398 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4390);
          reg = x4390;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4085);
          reg = x4085;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4395);
          reg = x4395;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4396);
          reg = x4396;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4397);
          reg = x4397;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4398);
          reg = x4398;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4399 = x88 - x4217;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4400 = x4399 * x4385;
      if (x4400 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4401 = x4381 + x50;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4370);
          reg = x4370;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4371);
          reg = x4371;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4372);
          reg = x4372;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4373);
          reg = x4373;
        }
        {
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4402 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x4402 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4403 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x4403 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4404 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x4404 != Fp::invalid());
          // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x4405 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x4405 != Fp::invalid());
          host_args.at(0) = x4401;
          host_args.at(1) = x4402;
          host_args.at(2) = x4403;
          host_args.at(3) = x4404;
          host_args.at(4) = x4405;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4406 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x4406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4407 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4407 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4408 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4408 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x4409 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4409 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4401);
          reg = x4401;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4085);
          reg = x4085;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4406);
          reg = x4406;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4407);
          reg = x4407;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4408);
          reg = x4408;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4409);
          reg = x4409;
        }
      }
      if (x4384 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4410 = x527 + x81;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4411 = x4410 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4412 = Fp(x4411.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4412);
          reg = x4412;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4413 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4413 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4414 = x4411 - x4413;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4415 = x4414 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4416 = Fp(x4415.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4416);
          reg = x4416;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4417 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4417 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4418 = x4415 - x4417;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4419 = x4418 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4420 = Fp(x4419.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4420);
          reg = x4420;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4421 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4421 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4422 = x4419 - x4421;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4423 = x4422 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4424 = Fp(x4423.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4424);
          reg = x4424;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4425 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4425 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4426 = x4423 - x4425;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4427 = x4426 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4427);
        reg = x4427;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4428 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4428 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4429 = x88 - x4428;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4430 = x4428 * x4429;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4430);
        reg = x4430;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x4431 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4431 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4432 = x85 - x4428;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4433 = x4431 * x4432;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4433 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x72);
        reg = x72;
      }
      if (x4213 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        auto x4434 = x4174 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        if (x4434 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:123");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        auto x4435 = x4163 - x81;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        if (x4435 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:123");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        auto x4436 = x4139 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":123:49)
        if (x4436 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:123");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/Reg1"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4437 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4437 != Fp::invalid());
      if (x4437 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4438 = x4174 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4438 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4439 = x4163 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4439 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4440 = x4139 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4440 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      if (x4214 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4441 = x4174 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4441 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4442 = x4163 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4442 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4443 = x4139 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4443 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4216 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4444 = x4174 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4444 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4445 = x4163 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4445 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4446 = x4139 - x88;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4446 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4218 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4447 = x4174 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4447 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4448 = x4163 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4448 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4139 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4219 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4449 = x4174 - x47;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4449 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4450 = x4163 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4450 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4451 = x4139 - x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4451 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4222 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4452 = x4174 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4452 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4453 = x4163 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4453 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4139 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4224 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4454 = x4174 - x46;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4454 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4455 = x4163 - x74;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4455 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4456 = x4139 - x63;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4456 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
    }
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
    auto x4457 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x4457 != Fp::invalid());
    if (x4457 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4458 = args[2][117 * steps + ((cycle - 1) & mask)];
      assert(x4458 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4459 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4459 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4460 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4460 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4461 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4461 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4462 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x4462 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4463 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x4463 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4464 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x4464 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4465 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x4465 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4466 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x4466 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4467 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x4467 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4468 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x4468 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg1/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4469 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x4469 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4470 = Fp(x4458.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4470);
          reg = x4470;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4471 = Fp(x4462.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4471);
          reg = x4471;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4472 = Fp(x4458.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4473 = x4472 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4473);
          reg = x4473;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4474 = Fp(x4462.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4475 = x4474 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4475);
          reg = x4475;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4476 = Fp(x4458.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4477 = x4476 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4477);
          reg = x4477;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4478 = Fp(x4462.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4479 = x4478 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4479);
          reg = x4479;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4480 = Fp(x4458.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4481 = x4480 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4481);
          reg = x4481;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4482 = Fp(x4462.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4483 = x4482 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4483);
          reg = x4483;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4484 = Fp(x4458.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4485 = x4484 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4486 = Fp(x4462.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4487 = x4486 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4487);
          reg = x4487;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4488 = Fp(x4458.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4489 = x4488 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4489);
          reg = x4489;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4490 = Fp(x4462.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4491 = x4490 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4491);
          reg = x4491;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4492 = Fp(x4458.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4493 = x4492 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4493);
          reg = x4493;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4494 = Fp(x4462.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4495 = x4494 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4495);
          reg = x4495;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4496 = Fp(x4458.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4497 = x4496 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4497);
          reg = x4497;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4498 = Fp(x4462.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4499 = x4498 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4499);
          reg = x4499;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4500 = Fp(x4459.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4500);
          reg = x4500;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4501 = Fp(x4463.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4502 = Fp(x4459.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4503 = x4502 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4503);
          reg = x4503;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4504 = Fp(x4463.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4505 = x4504 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4505);
          reg = x4505;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4506 = Fp(x4459.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4507 = x4506 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4507);
          reg = x4507;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4508 = Fp(x4463.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4509 = x4508 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4509);
          reg = x4509;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4510 = Fp(x4459.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4511 = x4510 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4511);
          reg = x4511;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4512 = Fp(x4463.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4513 = x4512 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4513);
          reg = x4513;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4514 = Fp(x4459.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4515 = x4514 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4515);
          reg = x4515;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4516 = Fp(x4463.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4517 = x4516 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4517);
          reg = x4517;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4518 = Fp(x4459.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4519 = x4518 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4519);
          reg = x4519;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4520 = Fp(x4463.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4521 = x4520 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4521);
          reg = x4521;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4522 = Fp(x4459.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4523 = x4522 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4523);
          reg = x4523;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4524 = Fp(x4463.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4525 = x4524 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4525);
          reg = x4525;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4526 = Fp(x4459.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4527 = x4526 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4527);
          reg = x4527;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4528 = Fp(x4463.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4529 = x4528 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4529);
          reg = x4529;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4530 = Fp(x4460.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4530);
          reg = x4530;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4531 = Fp(x4464.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4531);
          reg = x4531;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4532 = Fp(x4460.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4533 = x4532 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4533);
          reg = x4533;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4534 = Fp(x4464.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4535 = x4534 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4535);
          reg = x4535;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4536 = Fp(x4460.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4537 = x4536 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4537);
          reg = x4537;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4538 = Fp(x4464.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4539 = x4538 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4539);
          reg = x4539;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4540 = Fp(x4460.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4541 = x4540 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4541);
          reg = x4541;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4542 = Fp(x4464.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4543 = x4542 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4543);
          reg = x4543;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4544 = Fp(x4460.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4545 = x4544 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4545);
          reg = x4545;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4546 = Fp(x4464.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4547 = x4546 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4547);
          reg = x4547;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4548 = Fp(x4460.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4549 = x4548 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4549);
          reg = x4549;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4550 = Fp(x4464.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4551 = x4550 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4551);
          reg = x4551;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4552 = Fp(x4460.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4553 = x4552 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4553);
          reg = x4553;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4554 = Fp(x4464.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4555 = x4554 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4555);
          reg = x4555;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4556 = Fp(x4460.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4557 = x4556 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4557);
          reg = x4557;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4558 = Fp(x4464.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4559 = x4558 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4559);
          reg = x4559;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4560 = Fp(x4461.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4560);
          reg = x4560;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4561 = Fp(x4465.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4561);
          reg = x4561;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4562 = Fp(x4461.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4563 = x4562 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4563);
          reg = x4563;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4564 = Fp(x4465.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4565 = x4564 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4565);
          reg = x4565;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4566 = Fp(x4461.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4567 = x4566 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4567);
          reg = x4567;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4568 = Fp(x4465.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4569 = x4568 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4569);
          reg = x4569;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4570 = Fp(x4461.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4571 = x4570 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4571);
          reg = x4571;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4572 = Fp(x4465.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4573 = x4572 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4573);
          reg = x4573;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4574 = Fp(x4461.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4575 = x4574 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4575);
          reg = x4575;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4576 = Fp(x4465.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4577 = x4576 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4577);
          reg = x4577;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4578 = Fp(x4461.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4579 = x4578 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4579);
          reg = x4579;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4580 = Fp(x4465.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4581 = x4580 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4581);
          reg = x4581;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4582 = Fp(x4461.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4583 = x4582 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4583);
          reg = x4583;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4584 = Fp(x4465.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4585 = x4584 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4585);
          reg = x4585;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4586 = Fp(x4461.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4587 = x4586 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4587);
          reg = x4587;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4588 = Fp(x4465.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4589 = x4588 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4589);
          reg = x4589;
        }
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4590 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x4590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4591 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4591 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4592 = x4590 * x4591;
      // loc("Top/Mux/4/Mux/6/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4593 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4594 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4594 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4595 = x4593 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4596 = x4590 + x4595;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4597 = x4594 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4598 = x4591 + x4597;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4599 = x4593 * x4594;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4600 = x4599 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4601 = x4592 + x4600;
      // loc("Top/Mux/4/Mux/6/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4602 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4603 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4603 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4604 = x4602 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4605 = x4596 + x4604;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4606 = x4603 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4607 = x4598 + x4606;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4608 = x4602 * x4603;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4609 = x4608 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4610 = x4601 + x4609;
      // loc("Top/Mux/4/Mux/6/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4611 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4612 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4612 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4613 = x4611 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4614 = x4605 + x4613;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4615 = x4612 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4616 = x4607 + x4615;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4617 = x4611 * x4612;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4618 = x4617 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4619 = x4610 + x4618;
      // loc("Top/Mux/4/Mux/6/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4620 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4621 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4621 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4622 = x4620 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4623 = x4614 + x4622;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4624 = x4621 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4625 = x4616 + x4624;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4626 = x4620 * x4621;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4627 = x4626 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4628 = x4619 + x4627;
      // loc("Top/Mux/4/Mux/6/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4629 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4630 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4630 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4631 = x4629 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4632 = x4623 + x4631;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4633 = x4630 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4634 = x4625 + x4633;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4635 = x4629 * x4630;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4636 = x4635 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4637 = x4628 + x4636;
      // loc("Top/Mux/4/Mux/6/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4638 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4639 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4639 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4640 = x4638 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4641 = x4632 + x4640;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4642 = x4639 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4643 = x4634 + x4642;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4644 = x4638 * x4639;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4645 = x4644 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4646 = x4637 + x4645;
      // loc("Top/Mux/4/Mux/6/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4647 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4648 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4648 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4649 = x4647 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4650 = x4641 + x4649;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4651 = x4648 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4652 = x4643 + x4651;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4653 = x4647 * x4648;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4654 = x4653 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4655 = x4646 + x4654;
      // loc("Top/Mux/4/Mux/6/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4656 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4657 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4657 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4658 = x4656 * x4657;
      // loc("Top/Mux/4/Mux/6/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4659 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4660 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4660 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4661 = x4659 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4662 = x4656 + x4661;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4663 = x4660 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4664 = x4657 + x4663;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4665 = x4659 * x4660;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4666 = x4665 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4667 = x4658 + x4666;
      // loc("Top/Mux/4/Mux/6/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4668 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4669 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4669 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4670 = x4668 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4671 = x4662 + x4670;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4672 = x4669 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4673 = x4664 + x4672;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4674 = x4668 * x4669;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4675 = x4674 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4676 = x4667 + x4675;
      // loc("Top/Mux/4/Mux/6/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4677 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4678 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4678 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4679 = x4677 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4680 = x4671 + x4679;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4681 = x4678 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4682 = x4673 + x4681;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4683 = x4677 * x4678;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4684 = x4683 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4685 = x4676 + x4684;
      // loc("Top/Mux/4/Mux/6/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4686 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4687 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4687 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4688 = x4686 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4689 = x4680 + x4688;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4690 = x4687 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4691 = x4682 + x4690;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4692 = x4686 * x4687;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4693 = x4692 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4694 = x4685 + x4693;
      // loc("Top/Mux/4/Mux/6/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4695 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4696 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4696 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4697 = x4695 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4698 = x4689 + x4697;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4699 = x4696 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4700 = x4691 + x4699;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4701 = x4695 * x4696;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4702 = x4701 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4703 = x4694 + x4702;
      // loc("Top/Mux/4/Mux/6/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4704 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4705 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4705 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4706 = x4704 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4707 = x4698 + x4706;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4708 = x4705 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4709 = x4700 + x4708;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4710 = x4704 * x4705;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4711 = x4710 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4712 = x4703 + x4711;
      // loc("Top/Mux/4/Mux/6/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4713 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4714 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4714 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4715 = x4713 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4716 = x4707 + x4715;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4717 = x4714 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4718 = x4709 + x4717;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4719 = x4713 * x4714;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4720 = x4719 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4721 = x4712 + x4720;
      // loc("Top/Mux/4/Mux/6/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4722 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4723 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4723 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4724 = x4722 * x4723;
      // loc("Top/Mux/4/Mux/6/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4725 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4726 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4726 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4727 = x4725 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4728 = x4722 + x4727;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4729 = x4726 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4730 = x4723 + x4729;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4731 = x4725 * x4726;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4732 = x4731 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4733 = x4724 + x4732;
      // loc("Top/Mux/4/Mux/6/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4734 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4735 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4735 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4736 = x4734 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4737 = x4728 + x4736;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4738 = x4735 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4739 = x4730 + x4738;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4740 = x4734 * x4735;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4741 = x4740 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4742 = x4733 + x4741;
      // loc("Top/Mux/4/Mux/6/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4743 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4744 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4744 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4745 = x4743 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4746 = x4737 + x4745;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4747 = x4744 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4748 = x4739 + x4747;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4749 = x4743 * x4744;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4750 = x4749 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4751 = x4742 + x4750;
      // loc("Top/Mux/4/Mux/6/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4752 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4753 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4753 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4754 = x4752 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4755 = x4746 + x4754;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4756 = x4753 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4757 = x4748 + x4756;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4758 = x4752 * x4753;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4759 = x4758 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4760 = x4751 + x4759;
      // loc("Top/Mux/4/Mux/6/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4761 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4762 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4762 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4763 = x4761 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4764 = x4755 + x4763;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4765 = x4762 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4766 = x4757 + x4765;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4767 = x4761 * x4762;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4768 = x4767 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4769 = x4760 + x4768;
      // loc("Top/Mux/4/Mux/6/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4770 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4771 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4771 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4772 = x4770 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4773 = x4764 + x4772;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4774 = x4771 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4775 = x4766 + x4774;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4776 = x4770 * x4771;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4777 = x4776 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4778 = x4769 + x4777;
      // loc("Top/Mux/4/Mux/6/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4779 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4779 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4780 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4780 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4781 = x4779 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4782 = x4773 + x4781;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4783 = x4780 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4784 = x4775 + x4783;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4785 = x4779 * x4780;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4786 = x4785 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4787 = x4778 + x4786;
      // loc("Top/Mux/4/Mux/6/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4788 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4788 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4789 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4789 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4790 = x4788 * x4789;
      // loc("Top/Mux/4/Mux/6/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4791 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4792 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4792 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4793 = x4791 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4794 = x4788 + x4793;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4795 = x4792 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4796 = x4789 + x4795;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4797 = x4791 * x4792;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4798 = x4797 * x85;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4799 = x4790 + x4798;
      // loc("Top/Mux/4/Mux/6/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4800 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4801 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4801 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4802 = x4800 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4803 = x4794 + x4802;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4804 = x4801 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4805 = x4796 + x4804;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4806 = x4800 * x4801;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4807 = x4806 * x81;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4808 = x4799 + x4807;
      // loc("Top/Mux/4/Mux/6/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4809 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4810 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4810 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4811 = x4809 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4812 = x4803 + x4811;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4813 = x4810 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4814 = x4805 + x4813;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4815 = x4809 * x4810;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4816 = x4815 * x71;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4817 = x4808 + x4816;
      // loc("Top/Mux/4/Mux/6/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4818 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4819 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4819 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4820 = x4818 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4821 = x4812 + x4820;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4822 = x4819 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4823 = x4814 + x4822;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4824 = x4818 * x4819;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4825 = x4824 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4826 = x4817 + x4825;
      // loc("Top/Mux/4/Mux/6/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4827 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4828 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4828 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4829 = x4827 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4830 = x4821 + x4829;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4831 = x4828 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4832 = x4823 + x4831;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4833 = x4827 * x4828;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4834 = x4833 * x63;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4835 = x4826 + x4834;
      // loc("Top/Mux/4/Mux/6/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4836 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4837 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4837 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4838 = x4836 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4839 = x4830 + x4838;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4840 = x4837 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4841 = x4832 + x4840;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4842 = x4836 * x4837;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4843 = x4842 * x57;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4844 = x4835 + x4843;
      // loc("Top/Mux/4/Mux/6/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4845 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4846 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4846 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4847 = x4845 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4848 = x4839 + x4847;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4849 = x4846 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4850 = x4841 + x4849;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4851 = x4845 * x4846;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4852 = x4851 * x66;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4853 = x4844 + x4852;
      host_args.at(0) = x4458;
      host_args.at(1) = x4459;
      host_args.at(2) = x4460;
      host_args.at(3) = x4461;
      host_args.at(4) = x4650;
      host_args.at(5) = x4716;
      host_args.at(6) = x4782;
      host_args.at(7) = x4848;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4462;
      host_args.at(1) = x4463;
      host_args.at(2) = x4464;
      host_args.at(3) = x4465;
      host_args.at(4) = x4652;
      host_args.at(5) = x4718;
      host_args.at(6) = x4784;
      host_args.at(7) = x4850;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4466;
      host_args.at(1) = x4467;
      host_args.at(2) = x4468;
      host_args.at(3) = x4469;
      host_args.at(4) = x4655;
      host_args.at(5) = x4721;
      host_args.at(6) = x4787;
      host_args.at(7) = x4853;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4854 = x4458 - x4650;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4854 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4855 = x4459 - x4716;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4855 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4856 = x4460 - x4782;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4856 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4857 = x4461 - x4848;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4857 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4858 = x4462 - x4652;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4858 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4859 = x4463 - x4718;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4859 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4860 = x4464 - x4784;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4860 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4861 = x4465 - x4850;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4861 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4862 = x4466 - x4655;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4862 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4863 = x4467 - x4721;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4863 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4864 = x4468 - x4787;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4864 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4865 = x4469 - x4853;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4865 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4866 = x527 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4867 = Fp(x4866.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4867);
          reg = x4867;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4868 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4868 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4869 = x4866 - x4868;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4870 = x4869 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4871 = Fp(x4870.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4871);
          reg = x4871;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4872 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4872 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4873 = x4870 - x4872;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4874 = x4873 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4875 = Fp(x4874.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4875);
          reg = x4875;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4876 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4876 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4877 = x4874 - x4876;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4878 = x4877 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4879 = Fp(x4878.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4879);
          reg = x4879;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4880 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4881 = x4878 - x4880;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4882 = x4881 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4882);
        reg = x4882;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4883 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4883 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4884 = x88 - x4883;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4885 = x4883 * x4884;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4885);
        reg = x4885;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x4886 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4886 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4887 = x85 - x4883;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4888 = x4886 * x4887;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4888 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":235:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/components/mux.h":37:25))
    auto x4889 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x4889 != Fp::invalid());
    if (x4889 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4890 = args[2][117 * steps + ((cycle - 1) & mask)];
      assert(x4890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4891 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4892 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4893 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4893 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4894 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x4894 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4895 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x4895 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4896 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x4896 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4897 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x4897 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4898 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x4898 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4899 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x4899 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4900 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x4900 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4901 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x4901 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4902 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x4902 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4903 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x4903 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4904 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x4904 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4905 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x4905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x4906 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x4906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg1"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x4907 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x4907 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x4908 = Fp(x4893.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x4909 = x4908 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4909);
          reg = x4909;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x4910 = Fp(x4893.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x4911 = x4910 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4911);
          reg = x4911;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4912 = args[2][107 * steps + ((cycle - 0) & mask)];
      assert(x4912 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x4913 = x4912 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x4914 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x4914 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x4915 = x4914 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x4916 = x4913 + x4915;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x4917 = x4893 - x4916;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x4917 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      {
        // loc("cirgen/components/u32.cpp":114:18)
        auto x4918 = Fp(x4897.asUInt32() & x66.asUInt32());
        // loc("cirgen/components/u32.cpp":114:17)
        auto x4919 = x4918 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4919);
          reg = x4919;
        }
        // loc("cirgen/components/u32.cpp":115:25)
        auto x4920 = Fp(x4897.asUInt32() & x54.asUInt32());
        // loc("cirgen/components/u32.cpp":115:24)
        auto x4921 = x4920 * x85;
        // loc("cirgen/components/bytes.cpp":87:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4921);
          reg = x4921;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4922 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4922 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:19)
      auto x4923 = x4922 * x66;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x4924 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x4924 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":117:34)
      auto x4925 = x4924 * x58;
      // loc("cirgen/components/u32.cpp":117:19)
      auto x4926 = x4923 + x4925;
      // loc("cirgen/components/u32.cpp":117:6)
      auto x4927 = x4897 - x4926;
      // loc("cirgen/components/u32.cpp":117:6)
      if (x4927 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:117");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x4928 = x4906 * x4912;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4928);
        reg = x4928;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x4929 = x88 - x4907;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4930 = x4906 * x4929;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4931 = x4930 * x4922;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4931);
        reg = x4931;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x4932 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4932 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x4933 = x88 - x4932;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4934 = x4933 * x4890;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4935 = x4933 * x4891;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4936 = x4933 * x4892;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4937 = x4933 * x4893;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4938 = x4934 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4939 = x4935 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4940 = x4936 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4941 = x4937 + x84;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4942 = x4932 * x4890;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4943 = x4932 * x4891;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4944 = x4932 * x4892;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4945 = x4932 * x4893;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4946 = x4938 - x4942;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4947 = x4939 - x4943;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4948 = x4940 - x4944;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4949 = x4941 - x4945;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x4950 = x4932 * x4907;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4951 = x4946 - x4950;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x4952 = x4947 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x4953 = x4951 + x4952;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4954 = Fp(x4953.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4954);
          reg = x4954;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement2/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4955 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x4955 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4956 = x4953 - x4955;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4957 = x4956 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4958 = Fp(x4957.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4958);
          reg = x4958;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4959 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x4959 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4960 = x4957 - x4959;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4961 = x4960 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4961);
        reg = x4961;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x4962 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x4962 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x4963 = x4962 + x4948;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x4964 = x4949 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x4965 = x4963 + x4964;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4966 = Fp(x4965.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4966);
          reg = x4966;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement3/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4967 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4967 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4968 = x4965 - x4967;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4969 = x4968 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4970 = Fp(x4969.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4970);
          reg = x4970;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x4971 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4971 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4972 = x4969 - x4971;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4973 = x4972 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4973);
        reg = x4973;
      }
      host_args.at(0) = x4890;
      host_args.at(1) = x4891;
      host_args.at(2) = x4892;
      host_args.at(3) = x4893;
      host_args.at(4) = x4955;
      host_args.at(5) = x4959;
      host_args.at(6) = x4967;
      host_args.at(7) = x4971;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x4974 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4974 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x4975 = x88 - x4974;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4976 = x4975 * x4894;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4977 = x4975 * x4895;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4978 = x4975 * x4896;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4979 = x4975 * x4897;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4980 = x4976 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4981 = x4977 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4982 = x4978 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x4983 = x4979 + x84;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4984 = x4974 * x4894;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4985 = x4974 * x4895;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4986 = x4974 * x4896;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x4987 = x4974 * x4897;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4988 = x4980 - x4984;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4989 = x4981 - x4985;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4990 = x4982 - x4986;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4991 = x4983 - x4987;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x4992 = x4974 * x4907;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x4993 = x4988 - x4992;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x4994 = x4989 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x4995 = x4993 + x4994;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x4996 = Fp(x4995.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4996);
          reg = x4996;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x4997 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4997 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x4998 = x4995 - x4997;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x4999 = x4998 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5000 = Fp(x4999.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5000);
          reg = x5000;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5001 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5001 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5002 = x4999 - x5001;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5003 = x5002 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5003);
        reg = x5003;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize1/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5004 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5004 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5005 = x5004 + x4990;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x5006 = x4991 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5007 = x5005 + x5006;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5008 = Fp(x5007.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5008);
          reg = x5008;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5009 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5009 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5010 = x5007 - x5009;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5011 = x5010 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5012 = Fp(x5011.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5012);
          reg = x5012;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5013 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5013 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5014 = x5011 - x5013;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5015 = x5014 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5015);
        reg = x5015;
      }
      host_args.at(0) = x4894;
      host_args.at(1) = x4895;
      host_args.at(2) = x4896;
      host_args.at(3) = x4897;
      host_args.at(4) = x4997;
      host_args.at(5) = x5001;
      host_args.at(6) = x5009;
      host_args.at(7) = x5013;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":131:26)
      auto x5016 = x5001 * x83;
      // loc("cirgen/components/u32.cpp":131:12)
      auto x5017 = x4997 + x5016;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5018 = (x5017 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5018);
          reg = x5018;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5019 = inv(x5017);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5019);
          reg = x5019;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5020 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5020 != Fp::invalid());
      if (x5020 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5017 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5021 = x88 - x5020;
      if (x5021 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5022 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5022 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5023 = x5017 * x5022;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5024 = x5023 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5024 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/components/u32.cpp":132:27)
      auto x5025 = x5013 * x83;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x5026 = x5009 + x5025;
      // loc("cirgen/components/u32.cpp":132:47)
      auto x5027 = x5021 * x77;
      // loc("cirgen/components/u32.cpp":132:13)
      auto x5028 = x5026 + x5027;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5029 = (x5028 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5029);
          reg = x5029;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5030 = inv(x5028);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5030);
          reg = x5030;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5031 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5031 != Fp::invalid());
      if (x5031 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5028 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5032 = x88 - x5031;
      if (x5032 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5033 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x5033 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5034 = x5028 * x5033;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5035 = x5034 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5035 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5036 = x4932 + x4974;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5037 = x4932 * x85;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5038 = x5037 * x4974;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5039 = x5036 - x5038;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x5040 = x5031 * x4932;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5041 = x5039 - x5040;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5041);
        reg = x5041;
      }
      // loc("Top/Mux/4/Mux/7/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x5042 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5042 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x5043 = x88 - x5042;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5044 = x5043 * x4898;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5045 = x5043 * x4899;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5046 = x5043 * x4900;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5047 = x5043 * x4901;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5048 = x5044 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5049 = x5045 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5050 = x5046 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5051 = x5047 + x84;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5052 = x5042 * x4898;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5053 = x5042 * x4899;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5054 = x5042 * x4900;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5055 = x5042 * x4901;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5056 = x5048 - x5052;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5057 = x5049 - x5053;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5058 = x5050 - x5054;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5059 = x5051 - x5055;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5060 = x5042 * x4907;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5061 = x5056 - x5060;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x5062 = x5057 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x5063 = x5061 + x5062;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5064 = Fp(x5063.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5064);
          reg = x5064;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5065 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5065 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5066 = x5063 - x5065;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5067 = x5066 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5068 = Fp(x5067.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5068);
          reg = x5068;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5069 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5069 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5070 = x5067 - x5069;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5071 = x5070 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5071);
        reg = x5071;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize2/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5072 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5072 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5073 = x5072 + x5058;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x5074 = x5059 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5075 = x5073 + x5074;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5076 = Fp(x5075.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5076);
          reg = x5076;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5077 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5077 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5078 = x5075 - x5077;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5079 = x5078 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5080 = Fp(x5079.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5080);
          reg = x5080;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5081 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5081 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5082 = x5079 - x5081;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5083 = x5082 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5083);
        reg = x5083;
      }
      host_args.at(0) = x4898;
      host_args.at(1) = x4899;
      host_args.at(2) = x4900;
      host_args.at(3) = x4901;
      host_args.at(4) = x5065;
      host_args.at(5) = x5069;
      host_args.at(6) = x5077;
      host_args.at(7) = x5081;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5084 = x4933 * x4902;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5085 = x4933 * x4903;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5086 = x4933 * x4904;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5087 = x4933 * x4905;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5088 = x5084 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5089 = x5085 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5090 = x5086 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5091 = x5087 + x84;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5092 = x4932 * x4902;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5093 = x4932 * x4903;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5094 = x4932 * x4904;
      // loc("cirgen/components/u32.cpp":99:20)
      auto x5095 = x4932 * x4905;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5096 = x5088 - x5092;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5097 = x5089 - x5093;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5098 = x5090 - x5094;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5099 = x5091 - x5095;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5100 = x5096 - x4950;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x5101 = x5097 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x5102 = x5100 + x5101;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5103 = Fp(x5102.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5103);
          reg = x5103;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5104 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5104 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5105 = x5102 - x5104;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5106 = x5105 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5107 = Fp(x5106.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5107);
          reg = x5107;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5108 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5108 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5109 = x5106 - x5108;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5110 = x5109 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5110);
        reg = x5110;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize3/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5111 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5111 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5112 = x5111 + x5098;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x5113 = x5099 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5114 = x5112 + x5113;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5115 = Fp(x5114.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5115);
          reg = x5115;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5116 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5116 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5117 = x5114 - x5116;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5118 = x5117 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5119 = Fp(x5118.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5119);
          reg = x5119;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5120 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5120 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5121 = x5118 - x5120;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5122 = x5121 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5122);
        reg = x5122;
      }
      host_args.at(0) = x4902;
      host_args.at(1) = x4903;
      host_args.at(2) = x4904;
      host_args.at(3) = x4905;
      host_args.at(4) = x5104;
      host_args.at(5) = x5108;
      host_args.at(6) = x5116;
      host_args.at(7) = x5120;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5123 = x4997 + x83;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5124 = x5001 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5125 = x5009 + x84;
      // loc("cirgen/components/u32.cpp":83:20)
      auto x5126 = x5013 + x84;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5127 = x5123 - x88;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5128 = x5127 - x5104;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5129 = x5124 - x5108;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5130 = x5125 - x5116;
      // loc("cirgen/components/u32.cpp":91:20)
      auto x5131 = x5126 - x5120;
      // loc("cirgen/components/u32.cpp":140:29)
      auto x5132 = x5129 * x83;
      // loc("cirgen/components/u32.cpp":140:15)
      auto x5133 = x5128 + x5132;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5134 = Fp(x5133.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5134);
          reg = x5134;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5135 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5135 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5136 = x5133 - x5135;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5137 = x5136 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5138 = Fp(x5137.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5138);
          reg = x5138;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5139 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5139 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5140 = x5137 - x5139;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5141 = x5140 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5141);
        reg = x5141;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5142 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5142 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5143 = x5142 + x5130;
      // loc("cirgen/components/u32.cpp":142:41)
      auto x5144 = x5131 * x83;
      // loc("cirgen/components/u32.cpp":142:16)
      auto x5145 = x5143 + x5144;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5146 = Fp(x5145.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5146);
          reg = x5146;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5147 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5147 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5148 = x5145 - x5147;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5149 = x5148 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5150 = Fp(x5149.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5150);
          reg = x5150;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5151 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5151 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5152 = x5149 - x5151;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5153 = x5152 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5153);
        reg = x5153;
      }
      // loc("cirgen/components/u32.cpp":254:14)
      auto x5154 = x5065 * x4997;
      // loc("cirgen/components/u32.cpp":254:14)
      auto x5155 = x5154 + x5104;
      // loc("cirgen/components/u32.cpp":255:21)
      auto x5156 = x5065 * x5001;
      // loc("cirgen/components/u32.cpp":255:51)
      auto x5157 = x5069 * x4997;
      // loc("cirgen/components/u32.cpp":255:21)
      auto x5158 = x5156 + x5157;
      // loc("cirgen/components/u32.cpp":255:21)
      auto x5159 = x5158 + x5108;
      // loc("cirgen/components/u32.cpp":255:14)
      auto x5160 = x5159 * x83;
      // loc("cirgen/components/u32.cpp":254:14)
      auto x5161 = x5155 + x5160;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5162 = Fp(x5161.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5162);
          reg = x5162;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5163 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5163 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5164 = x5161 - x5163;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5165 = x5164 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5166 = Fp(x5165.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5166);
          reg = x5166;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5167 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5167 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5168 = x5165 - x5167;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5169 = x5168 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5170 = Fp(x5169.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5170);
          reg = x5170;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5171 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5171 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5172 = x5169 - x5171;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5173 = x5172 * x82;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5173);
        reg = x5173;
      }
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5174 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5174 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":258:15)
      auto x5175 = x5174 * x83;
      // loc("cirgen/components/u32.cpp":258:15)
      auto x5176 = x5175 + x5171;
      // loc("cirgen/components/u32.cpp":260:7)
      auto x5177 = x5069 * x5013;
      // loc("cirgen/components/u32.cpp":260:7)
      if (x5177 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:260");
      // loc("cirgen/components/u32.cpp":261:7)
      auto x5178 = x5077 * x5009;
      // loc("cirgen/components/u32.cpp":261:7)
      if (x5178 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:261");
      // loc("cirgen/components/u32.cpp":262:7)
      auto x5179 = x5081 * x5001;
      // loc("cirgen/components/u32.cpp":262:7)
      if (x5179 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:262");
      // loc("cirgen/components/u32.cpp":263:7)
      auto x5180 = x5077 * x5013;
      // loc("cirgen/components/u32.cpp":263:7)
      if (x5180 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:263");
      // loc("cirgen/components/u32.cpp":264:7)
      auto x5181 = x5081 * x5009;
      // loc("cirgen/components/u32.cpp":264:7)
      if (x5181 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:264");
      // loc("cirgen/components/u32.cpp":265:7)
      auto x5182 = x5081 * x5013;
      // loc("cirgen/components/u32.cpp":265:7)
      if (x5182 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:265");
      // loc("cirgen/components/u32.cpp":267:15)
      auto x5183 = x5077 * x4997;
      // loc("cirgen/components/u32.cpp":267:45)
      auto x5184 = x5069 * x5001;
      // loc("cirgen/components/u32.cpp":267:15)
      auto x5185 = x5183 + x5184;
      // loc("cirgen/components/u32.cpp":268:15)
      auto x5186 = x5065 * x5009;
      // loc("cirgen/components/u32.cpp":267:15)
      auto x5187 = x5185 + x5186;
      // loc("cirgen/components/u32.cpp":267:15)
      auto x5188 = x5187 + x5116;
      // loc("cirgen/components/u32.cpp":267:15)
      auto x5189 = x5188 + x5176;
      // loc("cirgen/components/u32.cpp":269:22)
      auto x5190 = x5081 * x4997;
      // loc("cirgen/components/u32.cpp":269:52)
      auto x5191 = x5077 * x5001;
      // loc("cirgen/components/u32.cpp":269:22)
      auto x5192 = x5190 + x5191;
      // loc("cirgen/components/u32.cpp":270:22)
      auto x5193 = x5069 * x5009;
      // loc("cirgen/components/u32.cpp":269:22)
      auto x5194 = x5192 + x5193;
      // loc("cirgen/components/u32.cpp":270:52)
      auto x5195 = x5065 * x5013;
      // loc("cirgen/components/u32.cpp":269:22)
      auto x5196 = x5194 + x5195;
      // loc("cirgen/components/u32.cpp":269:22)
      auto x5197 = x5196 + x5120;
      // loc("cirgen/components/u32.cpp":269:15)
      auto x5198 = x5197 * x83;
      // loc("cirgen/components/u32.cpp":267:15)
      auto x5199 = x5189 + x5198;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5200 = Fp(x5199.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5200);
          reg = x5200;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5201 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5201 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5202 = x5199 - x5201;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5203 = x5202 * x82;
      // loc("cirgen/components/bytes.cpp":87:3)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5203);
        reg = x5203;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("cirgen/components/bytes.cpp":78:10))
      auto x5204 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5204 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize4/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5205 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5205 != Fp::invalid());
      host_args.at(0) = x5163;
      host_args.at(1) = x5167;
      host_args.at(2) = x5201;
      host_args.at(3) = x5204;
      host_args.at(4) = x5205;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5206 = x5163 - x4955;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5206 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5207 = x5167 - x4959;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5207 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5208 = x5201 - x4967;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5208 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5209 = x5204 - x4971;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5209 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x5032 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5210 = x5205 - x88;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5210 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5211 = x527 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5212 = Fp(x5211.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5212);
          reg = x5212;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5213 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5213 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5214 = x5211 - x5213;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5215 = x5214 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5216 = Fp(x5215.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5216);
          reg = x5216;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5217 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5217 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5218 = x5215 - x5217;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5219 = x5218 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5220 = Fp(x5219.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5220);
          reg = x5220;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5221 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5221 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5222 = x5219 - x5221;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5223 = x5222 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5224 = Fp(x5223.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5224);
          reg = x5224;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5225 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5225 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5226 = x5223 - x5225;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5227 = x5226 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5227);
        reg = x5227;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5228 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5228 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5229 = x88 - x5228;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5230 = x5228 * x5229;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5230);
        reg = x5230;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x5231 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5231 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5232 = x85 - x5228;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5233 = x5231 * x5232;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5233 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x78);
        reg = x78;
      }
    }
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/components/mux.h":37:25))
    auto x5234 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x5234 != Fp::invalid());
    if (x5234 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5235 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5235 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":126:41)
      auto x5236 = x527 * x79;
      {
        host_args.at(0) = x5236;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x5237 = host_outs.at(0);
        auto x5238 = host_outs.at(1);
        auto x5239 = host_outs.at(2);
        auto x5240 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5237);
          reg = x5237;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5238);
          reg = x5238;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5239);
          reg = x5239;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5240);
          reg = x5240;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5241 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x5241 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5242 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5242 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5243 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5243 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5244 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5244 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5236);
        reg = x5236;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5235);
        reg = x5235;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5241);
        reg = x5241;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5242);
        reg = x5242;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5243);
        reg = x5243;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5244);
        reg = x5244;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":128:6)
      auto x5245 = x5241 - x31;
      // loc("cirgen/circuit/rv32im/ecall.cpp":128:6)
      if (x5245 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:128");
      // loc("cirgen/circuit/rv32im/ecall.cpp":129:7)
      if (x5242 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:129");
      // loc("cirgen/circuit/rv32im/ecall.cpp":130:7)
      if (x5243 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:130");
      // loc("cirgen/circuit/rv32im/ecall.cpp":131:7)
      if (x5244 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:131");
      {
        host_args.at(0) = x30;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x5246 = host_outs.at(0);
        auto x5247 = host_outs.at(1);
        auto x5248 = host_outs.at(2);
        auto x5249 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5246);
          reg = x5246;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5248);
          reg = x5248;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5249);
          reg = x5249;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5250 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x5250 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5251 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5251 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5252 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5252 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5253 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5253 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x30);
        reg = x30;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5235);
        reg = x5235;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5250);
        reg = x5250;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5251);
        reg = x5251;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5252);
        reg = x5252;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5253);
        reg = x5253;
      }
      {
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5254 = (x5250 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5254);
          reg = x5254;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5255 = x5250 - x88;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5256 = (x5255 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5256);
          reg = x5256;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5257 = x5250 - x85;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5258 = (x5257 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5258);
          reg = x5258;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5259 = x5250 - x80;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5260 = (x5259 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5260);
          reg = x5260;
        }
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5261 = x5250 - x81;
        // loc("./cirgen/components/onehot.h":35:26)
        auto x5262 = (x5261 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":35:9)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5262);
          reg = x5262;
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x5263 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5263 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x5264 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5264 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5265 = x5264 * x85;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5266 = x5263 + x5265;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x5267 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5267 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5268 = x5267 * x80;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5269 = x5266 + x5268;
      // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x5270 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5270 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":44:19)
      auto x5271 = x5270 * x81;
      // loc("./cirgen/components/onehot.h":44:13)
      auto x5272 = x5269 + x5271;
      // loc("./cirgen/components/onehot.h":38:8)
      auto x5273 = x5272 - x5250;
      // loc("./cirgen/components/onehot.h":38:8)
      if (x5273 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":137:46)
        auto x5274 = (x5272 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":137:46)
        auto x5275 = x88 - x5274;
        if (x5275 != 0) {
          host_args.at(0) = x5250;
          host_args.at(1) = x5251;
          host_args.at(2) = x5252;
          host_args.at(3) = x5253;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("./cirgen/components/mux.h":37:25))
      auto x5276 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x5276 != Fp::invalid());
      if (x5276 != 0) {
        {
          host_args.at(0) = x5250;
          host_args.at(1) = x5251;
          host_args.at(2) = x5252;
          host_args.at(3) = x5253;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5277 = x527 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5278 = Fp(x5277.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5278);
            reg = x5278;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5279 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5279 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5280 = x5277 - x5279;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5281 = x5280 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5282 = Fp(x5281.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5282);
            reg = x5282;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5283 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5283 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5284 = x5281 - x5283;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5285 = x5284 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5286 = Fp(x5285.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5286);
            reg = x5286;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5287 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5287 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5288 = x5285 - x5287;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5289 = x5288 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5290 = Fp(x5289.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5290);
            reg = x5290;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5291 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5292 = x5289 - x5291;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5293 = x5292 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5293);
          reg = x5293;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5294 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5295 = x88 - x5294;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5296 = x5294 * x5295;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5296);
          reg = x5296;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5297 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5298 = x85 - x5294;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5299 = x5297 * x5298;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5299 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
      }
      if (x5263 != 0) {
        {
          host_args.at(0) = x29;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5300 = host_outs.at(0);
          auto x5301 = host_outs.at(1);
          auto x5302 = host_outs.at(2);
          auto x5303 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5300);
            reg = x5300;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5301);
            reg = x5301;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5302);
            reg = x5302;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5303);
            reg = x5303;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5304 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5304 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5305 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5305 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5306 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5306 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5307 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5307 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x29);
          reg = x29;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5304);
          reg = x5304;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5305);
          reg = x5305;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5306);
          reg = x5306;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5307);
          reg = x5307;
        }
        {
          host_args.at(0) = x28;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5308 = host_outs.at(0);
          auto x5309 = host_outs.at(1);
          auto x5310 = host_outs.at(2);
          auto x5311 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5308);
            reg = x5308;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5309);
            reg = x5309;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5310);
            reg = x5310;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5311);
            reg = x5311;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5312 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5313 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5314 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5314 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5315 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5315 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5312);
          reg = x5312;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5313);
          reg = x5313;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5314);
          reg = x5314;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5315);
          reg = x5315;
        }
        {
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5316 = (x5304 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5316);
            reg = x5316;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5317 = x5304 - x88;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5318 = (x5317 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5318);
            reg = x5318;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5319 = x5304 - x85;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5320 = (x5319 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5320);
            reg = x5320;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5321 = x5304 - x80;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5322 = (x5321 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5322);
            reg = x5322;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5323 = x5304 - x81;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5324 = (x5323 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5324);
            reg = x5324;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5325 = x5304 - x74;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5326 = (x5325 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5326);
            reg = x5326;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5327 = x5304 - x73;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5328 = (x5327 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5328);
            reg = x5328;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5329 = x5304 - x72;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5330 = (x5329 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5330);
            reg = x5330;
          }
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5331 = x5304 - x71;
          // loc("./cirgen/components/onehot.h":35:26)
          auto x5332 = (x5331 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5332);
            reg = x5332;
          }
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5333 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x5333 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5334 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x5334 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5335 = x5334 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5336 = x5333 + x5335;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5337 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x5337 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5338 = x5337 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5339 = x5336 + x5338;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5340 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x5340 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5341 = x5340 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5342 = x5339 + x5341;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5343 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x5343 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5344 = x5343 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5345 = x5342 + x5344;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5346 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x5346 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5347 = x5346 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5348 = x5345 + x5347;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5349 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x5349 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5350 = x5349 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5351 = x5348 + x5350;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5352 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x5352 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5353 = x5352 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5354 = x5351 + x5353;
        // loc("./cirgen/components/onehot.h":38:8)
        auto x5355 = x5354 - x5304;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x5355 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/Reg"("cirgen/circuit/rv32im/ecall.cpp":47:24))
        auto x5356 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x5356 != Fp::invalid());
        if (x5356 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5357 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5358 = x5357 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][0] = x5358;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5359 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5360 = x5359 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][1] = x5360;
        }
        if (x5333 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5361 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5362 = x5361 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][2] = x5362;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5363 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5364 = x5363 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][3] = x5364;
        }
        if (x5334 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5365 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5366 = x5365 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][4] = x5366;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5367 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5368 = x5367 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][5] = x5368;
        }
        if (x5337 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5369 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5370 = x5369 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][6] = x5370;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5371 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5372 = x5371 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][7] = x5372;
        }
        if (x5340 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5373 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5374 = x5373 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][8] = x5374;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5375 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5376 = x5375 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][9] = x5376;
        }
        if (x5343 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5377 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5378 = x5377 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][10] = x5378;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5379 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5380 = x5379 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][11] = x5380;
        }
        if (x5346 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5381 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5382 = x5381 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][12] = x5382;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5383 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5384 = x5383 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][13] = x5384;
        }
        if (x5349 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5385 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5386 = x5385 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][14] = x5386;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5387 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5388 = x5387 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][15] = x5388;
        }
        if (x5352 != 0) {
          host_args.at(0) = x5354;
          host_args.at(1) = x5312;
          host_args.at(2) = x5313;
          host_args.at(3) = x5314;
          host_args.at(4) = x5315;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5389 = x5313 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:27)
          auto x5390 = x5389 + x5312;
          // loc("cirgen/circuit/rv32im/ecall.cpp":49:7)
          args[1][16] = x5390;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5391 = x5315 * x83;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:31)
          auto x5392 = x5391 + x5314;
          // loc("cirgen/circuit/rv32im/ecall.cpp":50:7)
          args[1][17] = x5392;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":54:17)
        auto x5393 = x527 + x81;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5394 = x5393 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5395 = Fp(x5394.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5395);
            reg = x5395;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5396 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5396 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5397 = x5394 - x5396;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5398 = x5397 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5399 = Fp(x5398.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5399);
            reg = x5399;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5400 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5400 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5401 = x5398 - x5400;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5402 = x5401 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5403 = Fp(x5402.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5403);
            reg = x5403;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5404 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5404 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5405 = x5402 - x5404;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5406 = x5405 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5407 = Fp(x5406.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5407);
            reg = x5407;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5408 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5408 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5409 = x5406 - x5408;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5410 = x5409 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5410);
          reg = x5410;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5411 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5411 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5412 = x88 - x5411;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5413 = x5411 * x5412;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5413);
          reg = x5413;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5414 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5414 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5415 = x85 - x5411;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5416 = x5414 * x5415;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5416 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":55:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
      }
      if (x5264 != 0) {
        {
          host_args.at(0) = x5250;
          host_args.at(1) = x5251;
          host_args.at(2) = x5252;
          host_args.at(3) = x5253;
          host(ctx, "log", "  Doing syscall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
          host(ctx, "syscall", "", host_args.data(), 0, host_outs.data(), 8);
          auto x5417 = host_outs.at(0);
          auto x5418 = host_outs.at(1);
          auto x5419 = host_outs.at(2);
          auto x5420 = host_outs.at(3);
          auto x5421 = host_outs.at(4);
          auto x5422 = host_outs.at(5);
          auto x5423 = host_outs.at(6);
          auto x5424 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5417);
            reg = x5417;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5418);
            reg = x5418;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5419);
            reg = x5419;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5420);
            reg = x5420;
          }
          {
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5425 = args[2][124 * steps + ((cycle - 0) & mask)];
            assert(x5425 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5426 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x5426 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5427 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x5427 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5428 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x5428 != Fp::invalid());
            host_args.at(0) = x29;
            host_args.at(1) = x5425;
            host_args.at(2) = x5426;
            host_args.at(3) = x5427;
            host_args.at(4) = x5428;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5429 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x5429 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5430 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x5430 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5431 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x5431 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5432 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x5432 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x29);
            reg = x29;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5235);
            reg = x5235;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5429);
            reg = x5429;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5430);
            reg = x5430;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5431);
            reg = x5431;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5432);
            reg = x5432;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5421);
            reg = x5421;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5422);
            reg = x5422;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5423);
            reg = x5423;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5424);
            reg = x5424;
          }
          {
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5433 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x5433 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5434 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x5434 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5435 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x5435 != Fp::invalid());
            // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x5436 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x5436 != Fp::invalid());
            host_args.at(0) = x28;
            host_args.at(1) = x5433;
            host_args.at(2) = x5434;
            host_args.at(3) = x5435;
            host_args.at(4) = x5436;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5437 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x5437 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5438 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x5438 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5439 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x5439 != Fp::invalid());
          // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x5440 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x5440 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x28);
            reg = x28;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5235);
            reg = x5235;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5437);
            reg = x5437;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5438);
            reg = x5438;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5439);
            reg = x5439;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5440);
            reg = x5440;
          }
          host_args.at(0) = x5429;
          host_args.at(1) = x5430;
          host_args.at(2) = x5431;
          host_args.at(3) = x5432;
          host(ctx, "log", "  A0 = %w", host_args.data(), 4, host_outs.data(), 0);
          host_args.at(0) = x5437;
          host_args.at(1) = x5438;
          host_args.at(2) = x5439;
          host_args.at(3) = x5440;
          host(ctx, "log", "  A1 = %w", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":114:10))
        auto x5441 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5441 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        auto x5442 = x5441 - x5235;
        // loc("cirgen/circuit/rv32im/ecall.cpp":75:6)
        if (x5442 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:75");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("cirgen/components/ram.cpp":114:10))
        auto x5443 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5443 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        auto x5444 = x5443 - x5235;
        // loc("cirgen/circuit/rv32im/ecall.cpp":76:6)
        if (x5444 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:76");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":111:10))
        auto x5445 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5445 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":77:6)
        auto x5446 = x5445 - x29;
        // loc("cirgen/circuit/rv32im/ecall.cpp":77:6)
        if (x5446 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:77");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("cirgen/components/ram.cpp":111:10))
        auto x5447 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5447 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":78:6)
        auto x5448 = x5447 - x28;
        // loc("cirgen/circuit/rv32im/ecall.cpp":78:6)
        if (x5448 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:78");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("cirgen/components/ram.cpp":117:10))
        auto x5449 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x5449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":79:6)
        auto x5450 = x5449 - x88;
        // loc("cirgen/circuit/rv32im/ecall.cpp":79:6)
        if (x5450 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:79");
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("cirgen/components/ram.cpp":117:10))
        auto x5451 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x5451 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":80:6)
        auto x5452 = x5451 - x88;
        // loc("cirgen/circuit/rv32im/ecall.cpp":80:6)
        if (x5452 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:80");
        // loc("cirgen/circuit/rv32im/ecall.cpp":82:17)
        auto x5453 = x527 + x81;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5454 = x5453 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5455 = Fp(x5454.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5455);
            reg = x5455;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5456 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5456 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5457 = x5454 - x5456;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5458 = x5457 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5459 = Fp(x5458.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5459);
            reg = x5459;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5460 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5460 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5461 = x5458 - x5460;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5462 = x5461 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5463 = Fp(x5462.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5463);
            reg = x5463;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5464 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5464 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5465 = x5462 - x5464;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5466 = x5465 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5467 = Fp(x5466.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5467);
            reg = x5467;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5468 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5468 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5469 = x5466 - x5468;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5470 = x5469 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5470);
          reg = x5470;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5471 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5471 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5472 = x88 - x5471;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5473 = x5471 * x5472;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5473);
          reg = x5473;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5474 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5474 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5475 = x85 - x5471;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5476 = x5474 * x5475;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5476 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":83:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
      }
      if (x5267 != 0) {
        {
          host_args.at(0) = x29;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5477 = host_outs.at(0);
          auto x5478 = host_outs.at(1);
          auto x5479 = host_outs.at(2);
          auto x5480 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5477);
            reg = x5477;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5478);
            reg = x5478;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5479);
            reg = x5479;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5480);
            reg = x5480;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5481 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5481 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5482 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5482 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5483 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5483 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5484 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5484 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x29);
          reg = x29;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5481);
          reg = x5481;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5482);
          reg = x5482;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5484);
          reg = x5484;
        }
        {
          host_args.at(0) = x28;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5485 = host_outs.at(0);
          auto x5486 = host_outs.at(1);
          auto x5487 = host_outs.at(2);
          auto x5488 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5485);
            reg = x5485;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5486);
            reg = x5486;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5487);
            reg = x5487;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5488);
            reg = x5488;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5489 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5489 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5490 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5491 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5492 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5492 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5489);
          reg = x5489;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5490);
          reg = x5490;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5491);
          reg = x5491;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5492);
          reg = x5492;
        }
        {
          host_args.at(0) = x27;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5493 = host_outs.at(0);
          auto x5494 = host_outs.at(1);
          auto x5495 = host_outs.at(2);
          auto x5496 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5493);
            reg = x5493;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5494);
            reg = x5494;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5495);
            reg = x5495;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5496);
            reg = x5496;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5497 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5497 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5498 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5498 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5499 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5499 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5500 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5500 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5497);
          reg = x5497;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5498);
          reg = x5498;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5499);
          reg = x5499;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5500);
          reg = x5500;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":96:17)
        auto x5501 = x527 + x81;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5502 = x5501 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5503 = Fp(x5502.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5503);
            reg = x5503;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5504 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5504 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5505 = x5502 - x5504;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5506 = x5505 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5507 = Fp(x5506.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5507);
            reg = x5507;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5508 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5508 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5509 = x5506 - x5508;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5510 = x5509 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5511 = Fp(x5510.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5511);
            reg = x5511;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5512 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5512 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5513 = x5510 - x5512;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5514 = x5513 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5515 = Fp(x5514.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5515);
            reg = x5515;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5516 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5516 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5517 = x5514 - x5516;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5518 = x5517 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5518);
          reg = x5518;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5519 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5519 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5520 = x88 - x5519;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5521 = x5519 * x5520;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5521);
          reg = x5521;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5522 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5522 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5523 = x85 - x5519;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5524 = x5522 * x5523;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5524 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":97:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      if (x5270 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":106:3)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x527);
          reg = x527;
        }
        {
          host_args.at(0) = x29;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5525 = host_outs.at(0);
          auto x5526 = host_outs.at(1);
          auto x5527 = host_outs.at(2);
          auto x5528 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5525);
            reg = x5525;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5526);
            reg = x5526;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5527);
            reg = x5527;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5528);
            reg = x5528;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5529 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5530 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5531 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5532 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5532 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x29);
          reg = x29;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5529);
          reg = x5529;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5530);
          reg = x5530;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5531);
          reg = x5531;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5532);
          reg = x5532;
        }
        {
          host_args.at(0) = x28;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5533 = host_outs.at(0);
          auto x5534 = host_outs.at(1);
          auto x5535 = host_outs.at(2);
          auto x5536 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5533);
            reg = x5533;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5534);
            reg = x5534;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5535);
            reg = x5535;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5536);
            reg = x5536;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5537 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5538 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5539 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5539 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5540 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5540 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5235);
          reg = x5235;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5537);
          reg = x5537;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5538);
          reg = x5538;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5539);
          reg = x5539;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5540);
          reg = x5540;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5541 = x5530 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5542 = x5529 + x5541;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5543 = x5531 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5544 = x5542 + x5543;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5545 = x5532 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5546 = x5544 + x5545;
        // loc("cirgen/circuit/rv32im/ecall.cpp":115:17)
        auto x5547 = x5546 - x81;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5548 = x5547 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5549 = Fp(x5548.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5549);
            reg = x5549;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5550 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5550 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5551 = x5548 - x5550;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5552 = x5551 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5553 = Fp(x5552.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5553);
            reg = x5553;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x5554 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5554 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5555 = x5552 - x5554;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5556 = x5555 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x5557 = Fp(x5556.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5557);
            reg = x5557;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x5558 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5558 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x5559 = x5556 - x5558;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x5560 = x5559 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5561 = Fp(x5560.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5561);
            reg = x5561;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5562 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5562 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5563 = x5560 - x5562;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5564 = x5563 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5564);
          reg = x5564;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5565 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5565 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5566 = x88 - x5565;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5567 = x5565 * x5566;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5567);
          reg = x5567;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5568 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5568 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5569 = x85 - x5565;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5570 = x5568 * x5569;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5570 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":116:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/components/mux.h":37:25))
    auto x5571 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x5571 != Fp::invalid());
    if (x5571 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5572 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5572 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/sha.cpp":175:69))
      auto x5573 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x5573 != Fp::invalid());
      if (x5573 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x81);
          reg = x81;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:22)
      auto x5574 = x88 - x5573;
      if (x5574 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5575 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5575 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5575);
          reg = x5575;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5576 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5576 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5577 = x5576 - x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5577);
          reg = x5577;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5578 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x5578 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5579 = (x5578 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5579);
          reg = x5579;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5580 = inv(x5578);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5580);
          reg = x5580;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5581 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x5581 != Fp::invalid());
      if (x5581 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5578 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5582 = x88 - x5581;
      if (x5582 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5583 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5583 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5584 = x5578 * x5583;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5585 = x5584 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5585 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x5581 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
      }
      if (x5582 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5586 = x2115 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5587 = x1298 + x5586;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5588 = x2847 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5589 = x5587 + x5588;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5590 = x3634 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5591 = x5589 + x5590;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5592 = x4084 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5593 = x5591 + x5592;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5594 = x4457 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5595 = x5593 + x5594;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5596 = x4889 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5597 = x5595 + x5596;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5598 = x5234 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5599 = x5597 + x5598;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5600 = x5571 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5601 = x5599 + x5600;
        // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5602 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x5602 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5603 = x5602 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5604 = x5601 + x5603;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5605 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x5605 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5606 = x5605 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5607 = x5604 + x5606;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5608 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x5608 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x5609 = x5608 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x5610 = x5607 + x5609;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5610);
          reg = x5610;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5611 = x527 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5612 = Fp(x5611.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5612);
          reg = x5612;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5613 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5613 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5614 = x5611 - x5613;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5615 = x5614 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5616 = Fp(x5615.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5616);
          reg = x5616;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x5617 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5617 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5618 = x5615 - x5617;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5619 = x5618 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x5620 = Fp(x5619.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5620);
          reg = x5620;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x5621 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5621 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x5622 = x5619 - x5621;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x5623 = x5622 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5624 = Fp(x5623.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5624);
          reg = x5624;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5625 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5625 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5626 = x5623 - x5625;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5627 = x5626 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5627);
        reg = x5627;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5628 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5628 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5629 = x88 - x5628;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5630 = x5628 * x5629;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5630);
        reg = x5630;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x5631 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5631 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5632 = x85 - x5628;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5633 = x5631 * x5632;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5633 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5634 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x5634 != Fp::invalid());
      host_args.at(0) = x70;
      host_args.at(1) = x5634;
      host_args.at(2) = x5578;
      host(ctx, "log", "IN SHA: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5573 != 0) {
        {
          host_args.at(0) = x26;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5635 = host_outs.at(0);
          auto x5636 = host_outs.at(1);
          auto x5637 = host_outs.at(2);
          auto x5638 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5635);
            reg = x5635;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5636);
            reg = x5636;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5637);
            reg = x5637;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5638);
            reg = x5638;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5639 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5640 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5641 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5642 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5642 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5572);
          reg = x5572;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5639);
          reg = x5639;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5640);
          reg = x5640;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5641);
          reg = x5641;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5642);
          reg = x5642;
        }
        {
          host_args.at(0) = x25;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5643 = host_outs.at(0);
          auto x5644 = host_outs.at(1);
          auto x5645 = host_outs.at(2);
          auto x5646 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5643);
            reg = x5643;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5644);
            reg = x5644;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5645);
            reg = x5645;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5646);
            reg = x5646;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5647 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x5647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5648 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5649 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5649 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5650 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5650 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5572);
          reg = x5572;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5647);
          reg = x5647;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5648);
          reg = x5648;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5649);
          reg = x5649;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5650);
          reg = x5650;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5651 = args[2][124 * steps + ((cycle - 1) & mask)];
        assert(x5651 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5652 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x5652 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5653 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x5653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5654 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x5654 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5655 = x5652 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5656 = x5651 + x5655;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5657 = x5653 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5658 = x5656 + x5657;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5659 = x5654 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5660 = x5658 + x5659;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5661 = x5660 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5661);
          reg = x5661;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5662 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5662 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5663 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5663 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5664 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5664 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5665 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5665 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5666 = x5663 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5667 = x5662 + x5666;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5668 = x5664 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5669 = x5667 + x5668;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5670 = x5665 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5671 = x5669 + x5670;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5672 = x5671 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5672);
          reg = x5672;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5673 = x5640 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5674 = x5639 + x5673;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5675 = x5641 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5676 = x5674 + x5675;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5677 = x5642 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5678 = x5676 + x5677;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5679 = x5678 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5679);
          reg = x5679;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5680 = x5648 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5681 = x5647 + x5680;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5682 = x5649 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5683 = x5681 + x5682;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5684 = x5650 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5685 = x5683 + x5684;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5686 = x5685 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5686);
          reg = x5686;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5687 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x5687 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5688 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5689 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5690 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5690 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5691 = x5688 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5692 = x5687 + x5691;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5693 = x5689 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5694 = x5692 + x5693;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5695 = x5690 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5696 = x5694 + x5695;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5696);
          reg = x5696;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5697 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x5697 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":203:10)
        auto x5698 = x5697 * x81;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5699 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5699 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:10)
        auto x5700 = x5699 * x81;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5701 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5701 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5702 = x5701 * x81;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5703 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5703 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5704 = x5703 * x81;
        host_args.at(0) = x5698;
        host_args.at(1) = x5700;
        host_args.at(2) = x5702;
        host_args.at(3) = x5704;
        host(ctx, "log", "  FIRST_CYCLE: stateOut = %x, stateIn = %x, data0 = %x, data1 = %x", host_args.data(), 4, host_outs.data(), 0);
      }
      if (x5574 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":209:42))
        auto x5705 = args[2][130 * steps + ((cycle - 1) & mask)];
        assert(x5705 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":209:5)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5705);
          reg = x5705;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":210:40))
        auto x5706 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5706 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":210:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5706);
          reg = x5706;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":211:36))
        auto x5707 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5707 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":211:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5707);
          reg = x5707;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":212:36))
        auto x5708 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5708 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":212:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5708);
          reg = x5708;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":213:38))
        auto x5709 = args[2][137 * steps + ((cycle - 1) & mask)];
        assert(x5709 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":213:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5709);
          reg = x5709;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5710 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5710 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":216:24)
        auto x5711 = x5710 + x5578;
        {
          host_args.at(0) = x5711;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5712 = host_outs.at(0);
          auto x5713 = host_outs.at(1);
          auto x5714 = host_outs.at(2);
          auto x5715 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5712);
            reg = x5712;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5713);
            reg = x5713;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5714);
            reg = x5714;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5715);
            reg = x5715;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5716 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5716 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5717 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5717 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5718 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5718 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5719 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5719 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5711);
          reg = x5711;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5572);
          reg = x5572;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5716);
          reg = x5716;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5717);
          reg = x5717;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5718);
          reg = x5718;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5719);
          reg = x5719;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":217:24)
        auto x5720 = x5711 + x81;
        {
          host_args.at(0) = x5720;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x5721 = host_outs.at(0);
          auto x5722 = host_outs.at(1);
          auto x5723 = host_outs.at(2);
          auto x5724 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5721);
            reg = x5721;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5722);
            reg = x5722;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5723);
            reg = x5723;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5724);
            reg = x5724;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5725 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x5725 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5726 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5726 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5727 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5727 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x5728 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5728 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5720);
          reg = x5720;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5572);
          reg = x5572;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5725);
          reg = x5725;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5726);
          reg = x5726;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5727);
          reg = x5727;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5728);
          reg = x5728;
        }
      }
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5729 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x5729 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5730 = (x5729 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5730);
          reg = x5730;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5731 = inv(x5729);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5731);
          reg = x5731;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5732 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x5732 != Fp::invalid());
      if (x5732 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x5729 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x5733 = x88 - x5732;
      if (x5733 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x5734 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5734 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5735 = x5729 * x5734;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x5736 = x5735 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x5736 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5737 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5738 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5738 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5739 = x5738 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5740 = x5737 + x5739;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5741 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5741 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5742 = x5741 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5743 = x5740 + x5742;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5744 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5744 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5745 = x5744 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5746 = x5743 + x5745;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5747 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5747 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5748 = x5747 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5749 = x5746 + x5748;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5750 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5750 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5751 = x5750 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5752 = x5749 + x5751;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5753 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5753 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5754 = x5753 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5755 = x5752 + x5754;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5756 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5756 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5757 = x5756 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5758 = x5755 + x5757;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5759 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5759 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5760 = x5759 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5761 = x5758 + x5760;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5762 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5762 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5763 = x5762 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5764 = x5761 + x5763;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5765 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5765 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5766 = x5765 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5767 = x5764 + x5766;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5768 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5768 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5769 = x5768 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5770 = x5767 + x5769;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5771 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5771 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5772 = x5771 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5773 = x5770 + x5772;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5774 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5774 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5775 = x5774 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5776 = x5773 + x5775;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5777 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5777 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5778 = x5777 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5779 = x5776 + x5778;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5780 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5780 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5781 = x5780 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5782 = x5779 + x5781;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5783 = x87 - x5782;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5784 = x5783 * x11;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5784);
        reg = x5784;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5785 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5785 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5786 = Fp(x5785.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5786);
          reg = x5786;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5787 = Fp(x5785.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5788 = x5787 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5788);
          reg = x5788;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5789 = Fp(x5785.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5790 = x5789 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5790);
          reg = x5790;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5791 = Fp(x5785.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5792 = x5791 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5792);
          reg = x5792;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5793 = Fp(x5785.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5794 = x5793 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5794);
          reg = x5794;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5795 = Fp(x5785.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5796 = x5795 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5796);
          reg = x5796;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5797 = Fp(x5785.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5798 = x5797 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5798);
          reg = x5798;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5799 = Fp(x5785.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5800 = x5799 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5800);
          reg = x5800;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5801 = Fp(x5785.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5802 = x5801 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5802);
          reg = x5802;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5803 = Fp(x5785.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5804 = x5803 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5804);
          reg = x5804;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5805 = Fp(x5785.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5806 = x5805 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5806);
          reg = x5806;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5807 = Fp(x5785.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5808 = x5807 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5808);
          reg = x5808;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5809 = Fp(x5785.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5810 = x5809 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5810);
          reg = x5810;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5811 = Fp(x5785.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5812 = x5811 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5812);
          reg = x5812;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5813 = Fp(x5785.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5814 = x5813 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5814);
          reg = x5814;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5815 = Fp(x5785.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5816 = x5815 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5816);
          reg = x5816;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5817 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5817 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5818 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5818 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5819 = x5818 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5820 = x5817 + x5819;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5821 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5821 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5822 = x5821 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5823 = x5820 + x5822;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5824 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5825 = x5824 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5826 = x5823 + x5825;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5827 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5828 = x5827 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5829 = x5826 + x5828;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5830 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5830 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5831 = x5830 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5832 = x5829 + x5831;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5833 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5833 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5834 = x5833 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5835 = x5832 + x5834;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5836 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5836 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5837 = x5836 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5838 = x5835 + x5837;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5839 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5839 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5840 = x5839 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5841 = x5838 + x5840;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5842 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5842 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5843 = x5842 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5844 = x5841 + x5843;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5845 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5845 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5846 = x5845 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5847 = x5844 + x5846;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5848 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5848 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5849 = x5848 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5850 = x5847 + x5849;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5851 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5851 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5852 = x5851 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5853 = x5850 + x5852;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5854 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5854 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5855 = x5854 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5856 = x5853 + x5855;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5857 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5857 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5858 = x5857 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5859 = x5856 + x5858;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5860 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5860 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5861 = x5860 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5862 = x5859 + x5861;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5863 = x5785 - x5862;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5864 = x5863 * x11;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5864);
        reg = x5864;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5865 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x5865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5866 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5867 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5868 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5868 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x5869 = x5866 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x5870 = x5865 + x5869;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x5871 = x5868 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x5872 = x5867 + x5871;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5873 = Fp(x5870.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5873);
          reg = x5873;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5874 = Fp(x5870.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5875 = x5874 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5875);
          reg = x5875;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5876 = Fp(x5870.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5877 = x5876 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5877);
          reg = x5877;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5878 = Fp(x5870.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5879 = x5878 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5879);
          reg = x5879;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5880 = Fp(x5870.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5881 = x5880 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5881);
          reg = x5881;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5882 = Fp(x5870.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5883 = x5882 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5883);
          reg = x5883;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5884 = Fp(x5870.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5885 = x5884 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5885);
          reg = x5885;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5886 = Fp(x5870.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5887 = x5886 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5887);
          reg = x5887;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5888 = Fp(x5870.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5889 = x5888 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5889);
          reg = x5889;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5890 = Fp(x5870.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5891 = x5890 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5891);
          reg = x5891;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5892 = Fp(x5870.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5893 = x5892 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5893);
          reg = x5893;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5894 = Fp(x5870.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5895 = x5894 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5895);
          reg = x5895;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5896 = Fp(x5870.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5897 = x5896 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5897);
          reg = x5897;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5898 = Fp(x5870.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5899 = x5898 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5899);
          reg = x5899;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5900 = Fp(x5870.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5901 = x5900 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5901);
          reg = x5901;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5902 = Fp(x5870.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5903 = x5902 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5903);
          reg = x5903;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5904 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x5904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5905 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x5905 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5906 = x5905 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5907 = x5904 + x5906;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5908 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x5908 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5909 = x5908 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5910 = x5907 + x5909;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5911 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x5911 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5912 = x5911 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5913 = x5910 + x5912;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5914 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x5914 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5915 = x5914 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5916 = x5913 + x5915;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5917 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x5917 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5918 = x5917 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5919 = x5916 + x5918;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5920 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x5920 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5921 = x5920 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5922 = x5919 + x5921;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5923 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x5923 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5924 = x5923 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5925 = x5922 + x5924;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5926 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x5926 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5927 = x5926 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5928 = x5925 + x5927;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5929 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x5929 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5930 = x5929 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5931 = x5928 + x5930;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5932 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x5932 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5933 = x5932 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5934 = x5931 + x5933;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5935 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x5935 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5936 = x5935 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5937 = x5934 + x5936;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5938 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5938 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5939 = x5938 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5940 = x5937 + x5939;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5941 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5941 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5942 = x5941 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5943 = x5940 + x5942;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5944 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5944 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5945 = x5944 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5946 = x5943 + x5945;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5947 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5947 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5948 = x5947 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5949 = x5946 + x5948;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5950 = x5870 - x5949;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5951 = x5950 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x5952 = Fp(x5951.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5952);
          reg = x5952;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5953 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5953 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x5954 = x5951 - x5953;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x5955 = x5954 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x5956 = x88 - x5955;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x5957 = x5955 * x5956;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x5957 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x5958 = x5872 + x5951;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5959 = Fp(x5958.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5959);
          reg = x5959;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5960 = Fp(x5958.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5961 = x5960 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5961);
          reg = x5961;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5962 = Fp(x5958.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5963 = x5962 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5963);
          reg = x5963;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5964 = Fp(x5958.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5965 = x5964 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5965);
          reg = x5965;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5966 = Fp(x5958.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5967 = x5966 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5967);
          reg = x5967;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5968 = Fp(x5958.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5969 = x5968 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5969);
          reg = x5969;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5970 = Fp(x5958.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5971 = x5970 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5971);
          reg = x5971;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5972 = Fp(x5958.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5973 = x5972 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5973);
          reg = x5973;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5974 = Fp(x5958.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5975 = x5974 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5975);
          reg = x5975;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5976 = Fp(x5958.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5977 = x5976 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5977);
          reg = x5977;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5978 = Fp(x5958.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5979 = x5978 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5979);
          reg = x5979;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5980 = Fp(x5958.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5981 = x5980 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5981);
          reg = x5981;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5982 = Fp(x5958.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5983 = x5982 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5983);
          reg = x5983;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5984 = Fp(x5958.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5985 = x5984 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5985);
          reg = x5985;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5986 = Fp(x5958.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5987 = x5986 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5987);
          reg = x5987;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5988 = Fp(x5958.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5989 = x5988 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5989);
          reg = x5989;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5990 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5991 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5991 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5992 = x5991 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5993 = x5990 + x5992;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5994 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5994 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5995 = x5994 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5996 = x5993 + x5995;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x5997 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5997 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5998 = x5997 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5999 = x5996 + x5998;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6000 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x6000 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6001 = x6000 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6002 = x5999 + x6001;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6003 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x6003 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6004 = x6003 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6005 = x6002 + x6004;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6006 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x6006 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6007 = x6006 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6008 = x6005 + x6007;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6009 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x6009 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6010 = x6009 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6011 = x6008 + x6010;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6012 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x6012 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6013 = x6012 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6014 = x6011 + x6013;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6015 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x6015 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6016 = x6015 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6017 = x6014 + x6016;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6018 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x6018 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6019 = x6018 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6020 = x6017 + x6019;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6021 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x6021 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6022 = x6021 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6023 = x6020 + x6022;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6024 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x6024 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6025 = x6024 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6026 = x6023 + x6025;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6027 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x6027 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6028 = x6027 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6029 = x6026 + x6028;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6030 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x6030 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6031 = x6030 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6032 = x6029 + x6031;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6033 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x6033 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6034 = x6033 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6035 = x6032 + x6034;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6036 = x5958 - x6035;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6037 = x6036 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6038 = Fp(x6037.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6038);
          reg = x6038;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6039 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6039 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6040 = x6037 - x6039;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6041 = x6040 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6042 = x88 - x6041;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6043 = x6041 * x6042;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6043 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6044 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x6044 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6045 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6045 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6046 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6046 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6047 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6047 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6048 = x6045 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6049 = x6044 + x6048;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6050 = x6047 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6051 = x6046 + x6050;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6052 = Fp(x6049.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6052);
          reg = x6052;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6053 = Fp(x6049.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6054 = x6053 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6054);
          reg = x6054;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6055 = Fp(x6049.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6056 = x6055 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6056);
          reg = x6056;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6057 = Fp(x6049.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6058 = x6057 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6058);
          reg = x6058;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6059 = Fp(x6049.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6060 = x6059 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6060);
          reg = x6060;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6061 = Fp(x6049.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6062 = x6061 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6062);
          reg = x6062;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6063 = Fp(x6049.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6064 = x6063 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6064);
          reg = x6064;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6065 = Fp(x6049.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6066 = x6065 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6066);
          reg = x6066;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6067 = Fp(x6049.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6068 = x6067 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6068);
          reg = x6068;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6069 = Fp(x6049.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6070 = x6069 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6070);
          reg = x6070;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6071 = Fp(x6049.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6072 = x6071 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6072);
          reg = x6072;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6073 = Fp(x6049.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6074 = x6073 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6074);
          reg = x6074;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6075 = Fp(x6049.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6076 = x6075 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6076);
          reg = x6076;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6077 = Fp(x6049.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6078 = x6077 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6078);
          reg = x6078;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6079 = Fp(x6049.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6080 = x6079 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6080);
          reg = x6080;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6081 = Fp(x6049.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6082 = x6081 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6082);
          reg = x6082;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6083 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x6083 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6084 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x6084 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6085 = x6084 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6086 = x6083 + x6085;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6087 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6087 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6088 = x6087 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6089 = x6086 + x6088;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6090 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6090 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6091 = x6090 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6092 = x6089 + x6091;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6093 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6093 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6094 = x6093 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6095 = x6092 + x6094;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6096 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6096 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6097 = x6096 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6098 = x6095 + x6097;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6099 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6099 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6100 = x6099 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6101 = x6098 + x6100;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6102 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6102 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6103 = x6102 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6104 = x6101 + x6103;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6105 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6105 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6106 = x6105 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6107 = x6104 + x6106;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6108 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6108 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6109 = x6108 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6110 = x6107 + x6109;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6111 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6111 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6112 = x6111 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6113 = x6110 + x6112;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6114 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6114 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6115 = x6114 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6116 = x6113 + x6115;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6117 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6117 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6118 = x6117 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6119 = x6116 + x6118;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6120 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6120 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6121 = x6120 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6122 = x6119 + x6121;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6123 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6123 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6124 = x6123 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6125 = x6122 + x6124;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6126 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6126 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6127 = x6126 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6128 = x6125 + x6127;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6129 = x6049 - x6128;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6130 = x6129 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6131 = Fp(x6130.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6131);
          reg = x6131;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6132 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x6132 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6133 = x6130 - x6132;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6134 = x6133 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6135 = x88 - x6134;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6136 = x6134 * x6135;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6136 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6137 = x6051 + x6130;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6138 = Fp(x6137.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6138);
          reg = x6138;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6139 = Fp(x6137.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6140 = x6139 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6140);
          reg = x6140;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6141 = Fp(x6137.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6142 = x6141 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6142);
          reg = x6142;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6143 = Fp(x6137.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6144 = x6143 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6144);
          reg = x6144;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6145 = Fp(x6137.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6146 = x6145 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6146);
          reg = x6146;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6147 = Fp(x6137.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6148 = x6147 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6148);
          reg = x6148;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6149 = Fp(x6137.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6150 = x6149 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6150);
          reg = x6150;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6151 = Fp(x6137.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6152 = x6151 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6152);
          reg = x6152;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6153 = Fp(x6137.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6154 = x6153 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6154);
          reg = x6154;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6155 = Fp(x6137.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6156 = x6155 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6156);
          reg = x6156;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6157 = Fp(x6137.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6158 = x6157 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6158);
          reg = x6158;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6159 = Fp(x6137.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6160 = x6159 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6160);
          reg = x6160;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6161 = Fp(x6137.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6162 = x6161 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6162);
          reg = x6162;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6163 = Fp(x6137.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6164 = x6163 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6164);
          reg = x6164;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6165 = Fp(x6137.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6166 = x6165 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6166);
          reg = x6166;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6167 = Fp(x6137.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6168 = x6167 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6168);
          reg = x6168;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6169 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6169 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6170 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6171 = x6170 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6172 = x6169 + x6171;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6173 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6173 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6174 = x6173 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6175 = x6172 + x6174;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6176 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6177 = x6176 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6178 = x6175 + x6177;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6179 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6180 = x6179 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6181 = x6178 + x6180;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6182 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6183 = x6182 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6184 = x6181 + x6183;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6185 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6186 = x6185 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6187 = x6184 + x6186;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6188 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6188 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6189 = x6188 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6190 = x6187 + x6189;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6191 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6191 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6192 = x6191 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6193 = x6190 + x6192;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6194 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6194 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6195 = x6194 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6196 = x6193 + x6195;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6197 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6197 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6198 = x6197 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6199 = x6196 + x6198;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6200 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6200 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6201 = x6200 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6202 = x6199 + x6201;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6203 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6203 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6204 = x6203 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6205 = x6202 + x6204;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6206 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6206 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6207 = x6206 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6208 = x6205 + x6207;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6209 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6209 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6210 = x6209 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6211 = x6208 + x6210;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6212 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6212 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6213 = x6212 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6214 = x6211 + x6213;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6215 = x6137 - x6214;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6216 = x6215 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6217 = Fp(x6216.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6217);
          reg = x6217;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6218 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6218 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6219 = x6216 - x6218;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6220 = x6219 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6221 = x88 - x6220;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6222 = x6220 * x6221;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6222 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/components/mux.h":37:25))
    auto x6223 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x6223 != Fp::invalid());
    if (x6223 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6224 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x6224 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg9"("cirgen/circuit/rv32im/sha.cpp":240:70))
      auto x6225 = args[2][103 * steps + ((cycle - 1) & mask)];
      assert(x6225 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/Reg11"("cirgen/circuit/rv32im/sha.cpp":241:70))
      auto x6226 = args[2][105 * steps + ((cycle - 1) & mask)];
      assert(x6226 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":242:29)
      auto x6227 = x6225 + x6226;
      if (x6227 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":244:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":246:33)
      auto x6228 = x88 - x6225;
      // loc("cirgen/circuit/rv32im/sha.cpp":246:33)
      auto x6229 = x6228 - x6226;
      if (x6229 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6230 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x6230 != Fp::invalid());
        if (x6230 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":250:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":252:20)
        auto x6231 = x88 - x6230;
        if (x6231 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x6232 = args[2][140 * steps + ((cycle - 1) & mask)];
          assert(x6232 != Fp::invalid());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6232);
            reg = x6232;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":255:42))
          auto x6233 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x6233 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":255:42)
          auto x6234 = x6233 - x88;
          // loc("cirgen/circuit/rv32im/sha.cpp":255:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6234);
            reg = x6234;
          }
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6235 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x6235 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6236 = (x6235 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6236);
          reg = x6236;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6237 = inv(x6235);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6237);
          reg = x6237;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6238 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x6238 != Fp::invalid());
      if (x6238 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x6235 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x6239 = x88 - x6238;
      if (x6239 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x6240 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x6240 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6241 = x6235 * x6240;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6242 = x6241 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x6242 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      if (x6238 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6243 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6243 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":262:17)
        auto x6244 = x88 - x6243;
        if (x6244 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":262:21)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
        if (x6243 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":263:17)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x68);
            reg = x68;
          }
        }
      }
      if (x6239 != 0) {
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6245 = x2115 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6246 = x1298 + x6245;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6247 = x2847 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6248 = x6246 + x6247;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6249 = x3634 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6250 = x6248 + x6249;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6251 = x4084 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6252 = x6250 + x6251;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6253 = x4457 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6254 = x6252 + x6253;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6255 = x4889 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6256 = x6254 + x6255;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6257 = x5234 * x71;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6258 = x6256 + x6257;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6259 = x5571 * x70;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6260 = x6258 + x6259;
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6261 = x6223 * x69;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6262 = x6260 + x6261;
        // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x6263 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x6263 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6264 = x6263 * x68;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6265 = x6262 + x6264;
        // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x6266 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x6266 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x6267 = x6266 * x67;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x6268 = x6265 + x6267;
        // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6268);
          reg = x6268;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6269 = x527 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6270 = Fp(x6269.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6270);
          reg = x6270;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x6271 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x6271 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6272 = x6269 - x6271;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6273 = x6272 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6274 = Fp(x6273.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6274);
          reg = x6274;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x6275 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x6275 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6276 = x6273 - x6275;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6277 = x6276 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x6278 = Fp(x6277.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6278);
          reg = x6278;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x6279 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6279 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x6280 = x6277 - x6279;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x6281 = x6280 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6282 = Fp(x6281.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6282);
          reg = x6282;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6283 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x6283 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6284 = x6281 - x6283;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6285 = x6284 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6285);
        reg = x6285;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6286 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6286 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6287 = x88 - x6286;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6288 = x6286 * x6287;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6288);
        reg = x6288;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x6289 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x6289 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6290 = x85 - x6286;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6291 = x6289 * x6290;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6291 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":268:40))
      auto x6292 = args[2][130 * steps + ((cycle - 1) & mask)];
      assert(x6292 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":268:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6292);
        reg = x6292;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":269:38))
      auto x6293 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x6293 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":269:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6293);
        reg = x6293;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":270:34))
      auto x6294 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x6294 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":270:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6294);
        reg = x6294;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":271:34))
      auto x6295 = args[2][133 * steps + ((cycle - 1) & mask)];
      assert(x6295 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":271:3)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6295);
        reg = x6295;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":272:36))
      auto x6296 = args[2][137 * steps + ((cycle - 1) & mask)];
      assert(x6296 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":272:3)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6296);
        reg = x6296;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6297 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x6297 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6298 = (x6297 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6298);
          reg = x6298;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6299 = inv(x6297);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6299);
          reg = x6299;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6300 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x6300 != Fp::invalid());
      if (x6300 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x6297 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x6301 = x88 - x6300;
      if (x6301 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x6302 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x6302 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6303 = x6297 * x6302;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x6304 = x6303 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x6304 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("./cirgen/components/bits.h":18:23)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x6305 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x6305 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":279:8)
      auto x6306 = x6305 * x81;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x6307 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x6307 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":280:8)
      auto x6308 = x6307 * x81;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x6309 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x6309 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":281:8)
      auto x6310 = x6309 * x81;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6311 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x6311 != Fp::invalid());
      host_args.at(0) = x69;
      host_args.at(1) = x6311;
      host_args.at(2) = x6235;
      host_args.at(3) = x6306;
      host_args.at(4) = x6308;
      host_args.at(5) = x6310;
      host(ctx, "log", "IN SHA: major = %u, minor = %u, count = %u, data0 = %x, data1 = %x, state = %x", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":284:15)
      auto x6312 = x88 - x6311;
      if (x6312 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":285:24)
        auto x6313 = x6305 + x72;
        // loc("cirgen/circuit/rv32im/sha.cpp":285:24)
        auto x6314 = x6313 - x6235;
        {
          host_args.at(0) = x6314;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x6315 = host_outs.at(0);
          auto x6316 = host_outs.at(1);
          auto x6317 = host_outs.at(2);
          auto x6318 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6315);
            reg = x6315;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6316);
            reg = x6316;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6317);
            reg = x6317;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6318);
            reg = x6318;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6319 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x6319 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6320 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x6320 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6321 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x6321 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6322 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x6322 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6314);
          reg = x6314;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6224);
          reg = x6224;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6319);
          reg = x6319;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6320);
          reg = x6320;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6321);
          reg = x6321;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6322);
          reg = x6322;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":286:24)
        auto x6323 = x10 - x6235;
        {
          host_args.at(0) = x6323;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x6324 = host_outs.at(0);
          auto x6325 = host_outs.at(1);
          auto x6326 = host_outs.at(2);
          auto x6327 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6324);
            reg = x6324;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6325);
            reg = x6325;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6326);
            reg = x6326;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6327);
            reg = x6327;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6328 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x6328 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6329 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6329 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6330 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6330 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6331 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6331 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6323);
          reg = x6323;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6224);
          reg = x6224;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6328);
          reg = x6328;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6329);
          reg = x6329;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6330);
          reg = x6330;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6331);
          reg = x6331;
        }
      }
      if (x6311 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":289:24)
        auto x6332 = x6307 + x72;
        // loc("cirgen/circuit/rv32im/sha.cpp":289:24)
        auto x6333 = x6332 - x6235;
        {
          host_args.at(0) = x6333;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x6334 = host_outs.at(0);
          auto x6335 = host_outs.at(1);
          auto x6336 = host_outs.at(2);
          auto x6337 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6334);
            reg = x6334;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6335);
            reg = x6335;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6336);
            reg = x6336;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6337);
            reg = x6337;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6338 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x6338 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6339 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x6339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6340 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x6340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6341 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x6341 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6333);
          reg = x6333;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6224);
          reg = x6224;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6338);
          reg = x6338;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6339);
          reg = x6339;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6340);
          reg = x6340;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6341);
          reg = x6341;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":290:24)
        auto x6342 = x9 - x6235;
        {
          host_args.at(0) = x6342;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x6343 = host_outs.at(0);
          auto x6344 = host_outs.at(1);
          auto x6345 = host_outs.at(2);
          auto x6346 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6343);
            reg = x6343;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6344);
            reg = x6344;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6345);
            reg = x6345;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6346);
            reg = x6346;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6347 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x6347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6348 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6349 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6349 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x6350 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6350 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6342);
          reg = x6342;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6224);
          reg = x6224;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6347);
          reg = x6347;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6348);
          reg = x6348;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6349);
          reg = x6349;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6350);
          reg = x6350;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6351 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x6351 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6352 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x6352 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6353 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6353 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6354 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6355 = x6353 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6356 = x6354 + x6355;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6357 = x6351 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6358 = x6352 + x6357;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6359 = Fp(x6356.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6359);
          reg = x6359;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6360 = Fp(x6356.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6361 = x6360 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6361);
          reg = x6361;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6362 = Fp(x6356.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6363 = x6362 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6363);
          reg = x6363;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6364 = Fp(x6356.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6365 = x6364 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6365);
          reg = x6365;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6366 = Fp(x6356.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6367 = x6366 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6367);
          reg = x6367;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6368 = Fp(x6356.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6369 = x6368 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6369);
          reg = x6369;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6370 = Fp(x6356.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6371 = x6370 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6371);
          reg = x6371;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6372 = Fp(x6356.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6373 = x6372 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6373);
          reg = x6373;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6374 = Fp(x6356.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6375 = x6374 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6375);
          reg = x6375;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6376 = Fp(x6356.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6377 = x6376 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6377);
          reg = x6377;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6378 = Fp(x6356.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6379 = x6378 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6379);
          reg = x6379;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6380 = Fp(x6356.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6381 = x6380 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6381);
          reg = x6381;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6382 = Fp(x6356.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6383 = x6382 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6383);
          reg = x6383;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6384 = Fp(x6356.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6385 = x6384 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6385);
          reg = x6385;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6386 = Fp(x6356.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6387 = x6386 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6387);
          reg = x6387;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6388 = Fp(x6356.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6389 = x6388 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6389);
          reg = x6389;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6390 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6390 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6391 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6392 = x6391 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6393 = x6390 + x6392;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6394 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6394 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6395 = x6394 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6396 = x6393 + x6395;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6397 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6397 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6398 = x6397 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6399 = x6396 + x6398;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6400 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6400 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6401 = x6400 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6402 = x6399 + x6401;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6403 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6403 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6404 = x6403 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6405 = x6402 + x6404;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6406 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6406 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6407 = x6406 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6408 = x6405 + x6407;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6409 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x6409 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6410 = x6409 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6411 = x6408 + x6410;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6412 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x6412 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6413 = x6412 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6414 = x6411 + x6413;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6415 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x6415 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6416 = x6415 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6417 = x6414 + x6416;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6418 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6419 = x6418 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6420 = x6417 + x6419;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6421 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6421 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6422 = x6421 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6423 = x6420 + x6422;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6424 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6424 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6425 = x6424 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6426 = x6423 + x6425;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6427 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6428 = x6427 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6429 = x6426 + x6428;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6430 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6431 = x6430 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6432 = x6429 + x6431;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6433 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6433 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6434 = x6433 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6435 = x6432 + x6434;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6436 = x6356 - x6435;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6437 = x6436 * x11;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6437);
        reg = x6437;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6438 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6438 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6439 = x6358 + x6438;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6440 = Fp(x6439.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6440);
          reg = x6440;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6441 = Fp(x6439.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6442 = x6441 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6442);
          reg = x6442;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6443 = Fp(x6439.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6444 = x6443 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6444);
          reg = x6444;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6445 = Fp(x6439.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6446 = x6445 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6446);
          reg = x6446;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6447 = Fp(x6439.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6448 = x6447 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6448);
          reg = x6448;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6449 = Fp(x6439.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6450 = x6449 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6450);
          reg = x6450;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6451 = Fp(x6439.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6452 = x6451 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6452);
          reg = x6452;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6453 = Fp(x6439.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6454 = x6453 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6454);
          reg = x6454;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6455 = Fp(x6439.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6456 = x6455 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6456);
          reg = x6456;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6457 = Fp(x6439.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6458 = x6457 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6458);
          reg = x6458;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6459 = Fp(x6439.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6460 = x6459 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6460);
          reg = x6460;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6461 = Fp(x6439.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6462 = x6461 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6462);
          reg = x6462;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6463 = Fp(x6439.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6464 = x6463 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6464);
          reg = x6464;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6465 = Fp(x6439.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6466 = x6465 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6466);
          reg = x6466;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6467 = Fp(x6439.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6468 = x6467 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6468);
          reg = x6468;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6469 = Fp(x6439.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6470 = x6469 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6470);
          reg = x6470;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6471 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6471 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6472 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6472 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6473 = x6472 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6474 = x6471 + x6473;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6475 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6475 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6476 = x6475 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6477 = x6474 + x6476;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6478 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6478 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6479 = x6478 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6480 = x6477 + x6479;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6481 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6481 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6482 = x6481 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6483 = x6480 + x6482;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6484 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6484 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6485 = x6484 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6486 = x6483 + x6485;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6487 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6487 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6488 = x6487 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6489 = x6486 + x6488;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6490 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6490 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6491 = x6490 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6492 = x6489 + x6491;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6493 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6493 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6494 = x6493 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6495 = x6492 + x6494;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6496 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x6496 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6497 = x6496 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6498 = x6495 + x6497;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6499 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x6499 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6500 = x6499 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6501 = x6498 + x6500;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6502 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x6502 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6503 = x6502 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6504 = x6501 + x6503;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6505 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x6505 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6506 = x6505 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6507 = x6504 + x6506;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6508 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x6508 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6509 = x6508 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6510 = x6507 + x6509;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6511 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x6511 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6512 = x6511 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6513 = x6510 + x6512;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6514 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x6514 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6515 = x6514 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6516 = x6513 + x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6517 = x6439 - x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6518 = x6517 * x11;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6518);
        reg = x6518;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6519 = args[2][148 * steps + ((cycle - 1) & mask)];
      assert(x6519 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6520 = args[2][149 * steps + ((cycle - 1) & mask)];
      assert(x6520 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6521 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x6521 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6522 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6523 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6524 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x6524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6525 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x6525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6526 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x6526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6527 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x6527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6528 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x6528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6529 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x6529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6530 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6531 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6532 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6533 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6534 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6535 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6535 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6536 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6537 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6537 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6538 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6539 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6540 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6541 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6542 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6543 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6544 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6545 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6546 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6547 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6548 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6549 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6550 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6551 = args[2][148 * steps + ((cycle - 2) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6552 = args[2][149 * steps + ((cycle - 2) & mask)];
      assert(x6552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6553 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x6553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6554 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6555 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x6555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6556 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x6556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6557 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6558 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x6558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6559 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x6559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6560 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x6560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6561 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x6561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6562 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6563 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6564 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6565 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6566 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6567 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6568 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6569 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6570 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6571 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6572 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6573 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6574 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6575 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6576 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6577 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6578 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6579 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6580 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6581 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6582 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6583 = args[2][148 * steps + ((cycle - 3) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6584 = args[2][149 * steps + ((cycle - 3) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6585 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x6585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6586 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6587 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6588 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6589 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6590 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6591 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6592 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6593 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6594 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6595 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6596 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6597 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6598 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6599 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6600 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6601 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6602 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6603 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6604 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6605 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6606 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6607 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6608 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6609 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6610 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6611 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6612 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6613 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6614 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6615 = args[2][148 * steps + ((cycle - 4) & mask)];
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6616 = args[2][149 * steps + ((cycle - 4) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6617 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6618 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6619 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6620 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6621 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6622 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6623 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6624 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6625 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6626 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6627 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6628 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6629 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6630 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6631 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6632 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6633 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6634 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6635 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6636 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6637 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6638 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6639 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6640 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6641 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6642 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6643 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6644 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6645 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6646 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6647 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6648 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6649 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6650 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6651 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6652 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6653 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6654 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6655 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6656 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6657 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6658 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6659 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6660 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6661 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6662 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6663 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6664 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6665 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6666 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6667 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6668 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6669 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6670 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6671 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6672 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6673 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6674 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6675 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6676 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6677 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6678 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6679 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6680 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6681 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6682 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6683 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6684 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6685 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6686 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6687 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6688 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6689 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6690 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6691 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6692 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6693 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6694 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6695 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6696 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6697 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6698 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6699 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6700 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6701 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6702 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6703 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6704 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6705 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6706 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6707 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6708 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6709 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6710 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6711 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6712 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6713 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6714 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6715 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6716 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6717 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6718 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6719 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6720 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6721 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6722 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6723 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6724 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6725 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6726 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6727 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6728 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6729 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6730 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6731 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6732 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6733 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6734 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6735 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6736 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6737 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6738 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6739 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6740 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6741 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6742 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6743 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6744 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6745 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6746 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6747 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6748 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6749 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6750 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6751 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6752 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6753 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6754 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6755 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6756 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6757 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6758 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6759 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6760 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6761 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6762 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6763 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6764 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6765 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6766 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6767 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6768 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6769 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6770 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6771 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6772 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6773 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6774 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6775 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x6775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6776 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6777 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x6778 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6778 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6779 = x6776 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6780 = x6775 + x6779;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6781 = x6778 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6782 = x6777 + x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6783 = x6532 + x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6784 = x6532 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6785 = x6784 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6786 = x6783 - x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6787 = x6533 + x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6788 = x6533 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6789 = x6788 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6790 = x6787 - x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6791 = x6534 + x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6792 = x6534 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6793 = x6792 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6794 = x6791 - x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6795 = x6535 + x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6796 = x6535 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6797 = x6796 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6798 = x6795 - x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6799 = x6536 + x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6800 = x6536 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6801 = x6800 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6802 = x6799 - x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6803 = x6537 + x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6804 = x6537 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6805 = x6804 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6806 = x6803 - x6805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6807 = x6538 + x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6808 = x6538 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6809 = x6808 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6810 = x6807 - x6809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6811 = x6539 + x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6812 = x6539 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6813 = x6812 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6814 = x6811 - x6813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6815 = x6540 + x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6816 = x6540 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6817 = x6816 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6818 = x6815 - x6817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6819 = x6541 + x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6820 = x6541 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6821 = x6820 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6822 = x6819 - x6821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6823 = x6542 + x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6824 = x6542 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6825 = x6824 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6826 = x6823 - x6825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6827 = x6543 + x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6828 = x6543 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6829 = x6828 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6830 = x6827 - x6829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6831 = x6544 + x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6832 = x6544 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6833 = x6832 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6834 = x6831 - x6833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6835 = x6545 + x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6836 = x6545 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6837 = x6836 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6838 = x6835 - x6837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6839 = x6546 + x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6840 = x6546 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6841 = x6840 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6842 = x6839 - x6841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6843 = x6547 + x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6844 = x6547 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6845 = x6844 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6846 = x6843 - x6845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6847 = x6548 + x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6848 = x6548 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6849 = x6848 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6850 = x6847 - x6849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6851 = x6549 + x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6852 = x6549 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6853 = x6852 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6854 = x6851 - x6853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6855 = x6550 + x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6856 = x6550 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6857 = x6856 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6858 = x6855 - x6857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6859 = x6519 + x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6860 = x6519 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6861 = x6860 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6862 = x6859 - x6861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6863 = x6520 + x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6864 = x6520 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6865 = x6864 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6866 = x6863 - x6865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6867 = x6521 + x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6868 = x6521 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6869 = x6868 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6870 = x6867 - x6869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6871 = x6522 + x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6872 = x6522 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6873 = x6872 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6874 = x6871 - x6873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6875 = x6523 + x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6876 = x6523 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6877 = x6876 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6878 = x6875 - x6877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6879 = x6524 + x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6880 = x6524 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6881 = x6880 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6882 = x6879 - x6881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6883 = x6525 + x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6884 = x6525 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6885 = x6884 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6886 = x6883 - x6885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6887 = x6526 + x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6888 = x6526 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6889 = x6888 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6890 = x6887 - x6889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6891 = x6527 + x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6892 = x6527 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6893 = x6892 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6894 = x6891 - x6893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6895 = x6528 + x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6896 = x6528 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6897 = x6896 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6898 = x6895 - x6897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6899 = x6529 + x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6900 = x6529 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6901 = x6900 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6902 = x6899 - x6901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6903 = x6530 + x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6904 = x6530 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6905 = x6904 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6906 = x6903 - x6905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6907 = x6531 + x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6908 = x6531 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6909 = x6908 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6910 = x6907 - x6909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6911 = x6521 + x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6912 = x6868 * x6786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6913 = x6911 - x6912;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6914 = x6522 + x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6915 = x6872 * x6790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6916 = x6914 - x6915;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6917 = x6523 + x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6918 = x6876 * x6794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6919 = x6917 - x6918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6920 = x6524 + x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6921 = x6880 * x6798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6922 = x6920 - x6921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6923 = x6525 + x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6924 = x6884 * x6802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6925 = x6923 - x6924;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6926 = x6526 + x6806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6927 = x6888 * x6806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6928 = x6926 - x6927;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6929 = x6527 + x6810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6930 = x6892 * x6810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6931 = x6929 - x6930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6932 = x6528 + x6814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6933 = x6896 * x6814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6934 = x6932 - x6933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6935 = x6529 + x6818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6936 = x6900 * x6818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6937 = x6935 - x6936;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6938 = x6530 + x6822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6939 = x6904 * x6822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6940 = x6938 - x6939;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6941 = x6531 + x6826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6942 = x6908 * x6826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6943 = x6941 - x6942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6944 = x6532 + x6830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6945 = x6784 * x6830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6946 = x6944 - x6945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6947 = x6533 + x6834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6948 = x6788 * x6834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6949 = x6947 - x6948;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6950 = x6534 + x6838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6951 = x6792 * x6838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6952 = x6950 - x6951;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6953 = x6535 + x6842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6954 = x6796 * x6842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6955 = x6953 - x6954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6956 = x6536 + x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6957 = x6800 * x6846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6958 = x6956 - x6957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6959 = x6537 + x6850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6960 = x6804 * x6850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6961 = x6959 - x6960;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6962 = x6538 + x6854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6963 = x6808 * x6854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6964 = x6962 - x6963;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6965 = x6539 + x6858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6966 = x6812 * x6858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6967 = x6965 - x6966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6968 = x6540 + x6862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6969 = x6816 * x6862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6970 = x6968 - x6969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6971 = x6541 + x6866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6972 = x6820 * x6866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6973 = x6971 - x6972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6542 + x6870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6975 = x6824 * x6870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6976 = x6974 - x6975;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6977 = x6543 + x6874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6978 = x6828 * x6874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6979 = x6977 - x6978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6980 = x6544 + x6878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6981 = x6832 * x6878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6982 = x6980 - x6981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6983 = x6545 + x6882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6984 = x6836 * x6882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6985 = x6983 - x6984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6546 + x6886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6987 = x6840 * x6886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6988 = x6986 - x6987;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6989 = x6547 + x6890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6990 = x6844 * x6890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6991 = x6989 - x6990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6992 = x6548 + x6894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6993 = x6848 * x6894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6994 = x6992 - x6993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6995 = x6549 + x6898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6996 = x6852 * x6898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6997 = x6995 - x6996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6998 = x6550 + x6902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6999 = x6856 * x6902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7000 = x6998 - x6999;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7001 = x6519 + x6906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7002 = x6860 * x6906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7003 = x7001 - x7002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7004 = x6520 + x6910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7005 = x6864 * x6910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7006 = x7004 - x7005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7007 = x6658 + x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7008 = x6658 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7009 = x7008 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7010 = x7007 - x7009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7011 = x6659 + x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7012 = x6659 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7013 = x7012 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7014 = x7011 - x7013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7015 = x6660 + x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7016 = x6660 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7017 = x7016 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7018 = x7015 - x7017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7019 = x6661 + x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7020 = x6661 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7021 = x7020 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7022 = x7019 - x7021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7023 = x6662 + x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7024 = x6662 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7025 = x7024 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7026 = x7023 - x7025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7027 = x6663 + x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7028 = x6663 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7029 = x7028 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7030 = x7027 - x7029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7031 = x6664 + x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7032 = x6664 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7033 = x7032 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7034 = x7031 - x7033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7035 = x6665 + x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7036 = x6665 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7037 = x7036 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7038 = x7035 - x7037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7039 = x6666 + x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7040 = x6666 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7041 = x7040 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7042 = x7039 - x7041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7043 = x6667 + x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7044 = x6667 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7045 = x7044 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7046 = x7043 - x7045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7047 = x6668 + x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7048 = x6668 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7049 = x7048 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7050 = x7047 - x7049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7051 = x6669 + x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7052 = x6669 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7053 = x7052 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7054 = x7051 - x7053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7055 = x6670 + x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7056 = x6670 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7057 = x7056 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7058 = x7055 - x7057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7059 = x6671 + x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7060 = x6671 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7061 = x7060 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7062 = x7059 - x7061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7063 = x6672 + x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7064 = x6672 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7065 = x7064 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7066 = x7063 - x7065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7067 = x6673 + x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7068 = x6673 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7069 = x7068 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7070 = x7067 - x7069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7071 = x6674 + x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7072 = x6674 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7073 = x7072 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7074 = x7071 - x7073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7075 = x6675 + x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7076 = x6675 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7077 = x7076 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7078 = x7075 - x7077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7079 = x6676 + x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7080 = x6676 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7081 = x7080 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7082 = x7079 - x7081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7083 = x6677 + x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7084 = x6677 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7085 = x7084 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7086 = x7083 - x7085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7087 = x6678 + x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7088 = x6678 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7089 = x7088 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7090 = x7087 - x7089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7091 = x6647 + x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7092 = x6647 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7093 = x7092 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7094 = x7091 - x7093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7095 = x6648 + x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7096 = x6648 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7097 = x7096 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7098 = x7095 - x7097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7099 = x6649 + x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7100 = x6649 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7101 = x7100 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7102 = x7099 - x7101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7103 = x6650 + x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7104 = x6650 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7105 = x7104 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7106 = x7103 - x7105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7107 = x6651 + x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7108 = x6651 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7109 = x7108 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7110 = x7107 - x7109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7111 = x6652 + x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7112 = x6652 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7113 = x7112 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7114 = x7111 - x7113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7115 = x6653 + x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7116 = x6653 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7117 = x7116 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7118 = x7115 - x7117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x6654 + x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7120 = x6654 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7121 = x7120 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x7119 - x7121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7123 = x6655 + x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7124 = x6655 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7125 = x7124 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7126 = x7123 - x7125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7127 = x6656 + x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7128 = x6656 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7129 = x7128 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7130 = x7127 - x7129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x6657 + x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7132 = x6657 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7133 = x7132 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x7131 - x7133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x6653 + x7010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7136 = x7116 * x7010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7137 = x7135 - x7136;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x6654 + x7014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7139 = x7120 * x7014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7140 = x7138 - x7139;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7141 = x6655 + x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7142 = x7124 * x7018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x7141 - x7142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7144 = x6656 + x7022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7145 = x7128 * x7022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x7144 - x7145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x6657 + x7026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7148 = x7132 * x7026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7149 = x7147 - x7148;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x6658 + x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7151 = x7008 * x7030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7152 = x7150 - x7151;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7153 = x6659 + x7034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7154 = x7012 * x7034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x7153 - x7154;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7156 = x6660 + x7038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7157 = x7016 * x7038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x7156 - x7157;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x6661 + x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7160 = x7020 * x7042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7161 = x7159 - x7160;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x6662 + x7046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7163 = x7024 * x7046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7164 = x7162 - x7163;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7165 = x6663 + x7050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7166 = x7028 * x7050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x7165 - x7166;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7168 = x6664 + x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7169 = x7032 * x7054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x7168 - x7169;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x6665 + x7058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7172 = x7036 * x7058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7173 = x7171 - x7172;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x6666 + x7062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7175 = x7040 * x7062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7176 = x7174 - x7175;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7177 = x6667 + x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7178 = x7044 * x7066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7179 = x7177 - x7178;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7180 = x6668 + x7070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7181 = x7048 * x7070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x7180 - x7181;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x6669 + x7074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7184 = x7052 * x7074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7185 = x7183 - x7184;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x6670 + x7078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7187 = x7056 * x7078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7188 = x7186 - x7187;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7189 = x6671 + x7082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7190 = x7060 * x7082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7191 = x7189 - x7190;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7192 = x6672 + x7086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7193 = x7064 * x7086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7194 = x7192 - x7193;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7195 = x6673 + x7090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7196 = x7068 * x7090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7197 = x7195 - x7196;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x6674 + x7094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7199 = x7072 * x7094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7200 = x7198 - x7199;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7201 = x6675 + x7098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7202 = x7076 * x7098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7203 = x7201 - x7202;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7204 = x6676 + x7102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7205 = x7080 * x7102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7206 = x7204 - x7205;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x6677 + x7106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7208 = x7084 * x7106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7209 = x7207 - x7208;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x6678 + x7110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7211 = x7088 * x7110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7212 = x7210 - x7211;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7213 = x6647 + x7114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7214 = x7092 * x7114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7215 = x7213 - x7214;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7216 = x6648 + x7118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7217 = x7096 * x7118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7218 = x7216 - x7217;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7219 = x6649 + x7122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7220 = x7100 * x7122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7221 = x7219 - x7220;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7222 = x6650 + x7126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7223 = x7104 * x7126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7224 = x7222 - x7223;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7225 = x6651 + x7130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7226 = x7108 * x7130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7227 = x7225 - x7226;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7228 = x6652 + x7134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7229 = x7112 * x7134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7230 = x7228 - x7229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7231 = x6744 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7232 = x6743 + x7231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7233 = x6745 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7234 = x7232 + x7233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7235 = x6746 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7236 = x7234 + x7235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7237 = x6747 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7238 = x7236 + x7237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7239 = x6748 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7240 = x7238 + x7239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7241 = x6749 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7242 = x7240 + x7241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7243 = x6750 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7244 = x7242 + x7243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7245 = x6751 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7246 = x7244 + x7245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7247 = x6752 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7248 = x7246 + x7247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7249 = x6753 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7250 = x7248 + x7249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7251 = x6754 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7252 = x7250 + x7251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7253 = x6755 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7254 = x7252 + x7253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7255 = x6756 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7256 = x7254 + x7255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7257 = x6757 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7258 = x7256 + x7257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7259 = x6758 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7260 = x7258 + x7259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7261 = x6760 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7262 = x6759 + x7261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7263 = x6761 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7264 = x7262 + x7263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7265 = x6762 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7266 = x7264 + x7265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7267 = x6763 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7268 = x7266 + x7267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7269 = x6764 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7270 = x7268 + x7269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7271 = x6765 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7272 = x7270 + x7271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7273 = x6766 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7274 = x7272 + x7273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7275 = x6767 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7276 = x7274 + x7275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7277 = x6768 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7278 = x7276 + x7277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7279 = x6769 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7280 = x7278 + x7279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7281 = x6770 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7282 = x7280 + x7281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7283 = x6771 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7284 = x7282 + x7283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7285 = x6772 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7286 = x7284 + x7285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7287 = x6773 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7288 = x7286 + x7287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7289 = x6774 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7290 = x7288 + x7289;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7291 = x6647 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7292 = x88 - x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7293 = x7292 * x6711;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7294 = x7291 + x7293;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7295 = x6648 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7296 = x88 - x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7297 = x7296 * x6712;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7298 = x7295 + x7297;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7299 = x6649 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7300 = x88 - x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7301 = x7300 * x6713;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7302 = x7299 + x7301;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7303 = x6650 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7304 = x88 - x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7305 = x7304 * x6714;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7306 = x7303 + x7305;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7307 = x6651 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7308 = x88 - x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7309 = x7308 * x6715;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7310 = x7307 + x7309;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7311 = x6652 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7312 = x88 - x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7313 = x7312 * x6716;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7314 = x7311 + x7313;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7315 = x6653 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7316 = x88 - x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7317 = x7316 * x6717;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7318 = x7315 + x7317;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7319 = x6654 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7320 = x88 - x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7321 = x7320 * x6718;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7322 = x7319 + x7321;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7323 = x6655 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7324 = x88 - x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7325 = x7324 * x6719;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7326 = x7323 + x7325;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7327 = x6656 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7328 = x88 - x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7329 = x7328 * x6720;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7330 = x7327 + x7329;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7331 = x6657 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7332 = x88 - x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7333 = x7332 * x6721;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7334 = x7331 + x7333;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7335 = x6658 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7336 = x88 - x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7337 = x7336 * x6722;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7338 = x7335 + x7337;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7339 = x6659 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7340 = x88 - x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7341 = x7340 * x6723;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7342 = x7339 + x7341;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7343 = x6660 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7344 = x88 - x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7345 = x7344 * x6724;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7346 = x7343 + x7345;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7347 = x6661 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7348 = x88 - x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7349 = x7348 * x6725;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7350 = x7347 + x7349;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7351 = x6662 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7352 = x88 - x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7353 = x7352 * x6726;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7354 = x7351 + x7353;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7355 = x6663 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7356 = x88 - x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7357 = x7356 * x6727;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7358 = x7355 + x7357;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7359 = x6664 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7360 = x88 - x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7361 = x7360 * x6728;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7362 = x7359 + x7361;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7363 = x6665 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7364 = x88 - x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7365 = x7364 * x6729;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7366 = x7363 + x7365;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7367 = x6666 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7368 = x88 - x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7369 = x7368 * x6730;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7370 = x7367 + x7369;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7371 = x6667 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7372 = x88 - x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7373 = x7372 * x6731;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7374 = x7371 + x7373;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7375 = x6668 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7376 = x88 - x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7377 = x7376 * x6732;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7378 = x7375 + x7377;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7379 = x6669 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7380 = x88 - x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7381 = x7380 * x6733;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7382 = x7379 + x7381;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7383 = x6670 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7384 = x88 - x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7385 = x7384 * x6734;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7386 = x7383 + x7385;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7387 = x6671 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7388 = x88 - x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7389 = x7388 * x6735;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7390 = x7387 + x7389;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7391 = x6672 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7392 = x88 - x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7393 = x7392 * x6736;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7394 = x7391 + x7393;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7395 = x6673 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7396 = x88 - x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7397 = x7396 * x6737;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7398 = x7395 + x7397;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7399 = x6674 * x6706;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7400 = x88 - x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7401 = x7400 * x6738;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7402 = x7399 + x7401;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7403 = x6675 * x6707;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7404 = x88 - x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7405 = x7404 * x6739;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7406 = x7403 + x7405;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7407 = x6676 * x6708;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7408 = x88 - x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7409 = x7408 * x6740;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7410 = x7407 + x7409;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7411 = x6677 * x6709;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7412 = x88 - x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7413 = x7412 * x6741;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7414 = x7411 + x7413;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7415 = x6678 * x6710;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7416 = x88 - x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7417 = x7416 * x6742;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7418 = x7415 + x7417;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7419 = x7298 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7420 = x7294 + x7419;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7421 = x7302 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7422 = x7420 + x7421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7423 = x7306 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7424 = x7422 + x7423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7425 = x7310 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7426 = x7424 + x7425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7427 = x7314 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7428 = x7426 + x7427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7429 = x7318 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7430 = x7428 + x7429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7431 = x7322 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7432 = x7430 + x7431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7433 = x7326 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7434 = x7432 + x7433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7435 = x7330 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7436 = x7434 + x7435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7437 = x7334 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7438 = x7436 + x7437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7439 = x7338 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7440 = x7438 + x7439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7441 = x7342 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7442 = x7440 + x7441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7443 = x7346 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7444 = x7442 + x7443;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7445 = x7350 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7446 = x7444 + x7445;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7447 = x7354 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7448 = x7446 + x7447;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7449 = x7362 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7450 = x7358 + x7449;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7451 = x7366 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7452 = x7450 + x7451;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7453 = x7370 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7454 = x7452 + x7453;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7455 = x7374 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7456 = x7454 + x7455;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7457 = x7378 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7458 = x7456 + x7457;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7459 = x7382 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7460 = x7458 + x7459;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7461 = x7386 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7462 = x7460 + x7461;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7463 = x7390 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7464 = x7462 + x7463;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7465 = x7394 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7466 = x7464 + x7465;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7467 = x7398 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7468 = x7466 + x7467;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7469 = x7402 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7470 = x7468 + x7469;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7471 = x7406 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7472 = x7470 + x7471;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7473 = x7410 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7474 = x7472 + x7473;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7475 = x7414 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7476 = x7474 + x7475;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7477 = x7418 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7478 = x7476 + x7477;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7479 = x7140 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7480 = x7137 + x7479;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7481 = x7143 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7482 = x7480 + x7481;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7483 = x7146 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7484 = x7482 + x7483;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7485 = x7149 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7486 = x7484 + x7485;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7487 = x7152 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7488 = x7486 + x7487;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7489 = x7155 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7490 = x7488 + x7489;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7491 = x7158 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7492 = x7490 + x7491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7493 = x7161 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7494 = x7492 + x7493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7495 = x7164 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7496 = x7494 + x7495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7497 = x7167 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7498 = x7496 + x7497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7499 = x7170 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7500 = x7498 + x7499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7501 = x7173 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7502 = x7500 + x7501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7503 = x7176 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7504 = x7502 + x7503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7505 = x7179 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7506 = x7504 + x7505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7507 = x7182 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7508 = x7506 + x7507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7509 = x7188 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7510 = x7185 + x7509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7511 = x7191 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7512 = x7510 + x7511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7513 = x7194 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7514 = x7512 + x7513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7515 = x7197 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7516 = x7514 + x7515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7517 = x7200 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7518 = x7516 + x7517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7519 = x7203 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7520 = x7518 + x7519;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7521 = x7206 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7522 = x7520 + x7521;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7523 = x7209 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7524 = x7522 + x7523;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7525 = x7212 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7526 = x7524 + x7525;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7527 = x7215 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7528 = x7526 + x7527;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7529 = x7218 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7530 = x7528 + x7529;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7531 = x7221 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7532 = x7530 + x7531;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7533 = x7224 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7534 = x7532 + x7533;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7535 = x7227 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7536 = x7534 + x7535;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7537 = x7230 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7538 = x7536 + x7537;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7539 = x7448 + x7508;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7540 = x7478 + x7538;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7541 = x7260 + x7539;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7542 = x7290 + x7540;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7543 = x6780 + x7541;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7544 = x6782 + x7542;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7545 = x6435 + x7543;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7546 = x6516 + x7544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7547 = x6519 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7548 = x88 - x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7549 = x7547 * x7548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7550 = x88 - x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7551 = x6519 * x7550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7552 = x7551 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7553 = x7549 + x7552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7554 = x88 - x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7555 = x7554 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7556 = x7555 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7557 = x7553 + x7556;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7558 = x7547 * x6583;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7559 = x7557 + x7558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7560 = x6520 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7561 = x88 - x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7562 = x7560 * x7561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7563 = x88 - x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7564 = x6520 * x7563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7565 = x7564 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7566 = x7562 + x7565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7567 = x88 - x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7568 = x7567 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7569 = x7568 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7570 = x7566 + x7569;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7571 = x7560 * x6584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7572 = x7570 + x7571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7573 = x6521 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7574 = x88 - x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7575 = x7573 * x7574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7576 = x88 - x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7577 = x6521 * x7576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7578 = x7577 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7579 = x7575 + x7578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7580 = x88 - x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7581 = x7580 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7582 = x7581 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7583 = x7579 + x7582;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7584 = x7573 * x6585;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7585 = x7583 + x7584;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7586 = x6522 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7587 = x88 - x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7588 = x7586 * x7587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7589 = x88 - x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7590 = x6522 * x7589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7591 = x7590 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7592 = x7588 + x7591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7593 = x88 - x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7594 = x7593 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7595 = x7594 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7596 = x7592 + x7595;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7597 = x7586 * x6586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7598 = x7596 + x7597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7599 = x6523 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7600 = x88 - x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7601 = x7599 * x7600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7602 = x88 - x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7603 = x6523 * x7602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7604 = x7603 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7605 = x7601 + x7604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7606 = x88 - x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7607 = x7606 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7608 = x7607 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7609 = x7605 + x7608;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7610 = x7599 * x6587;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7611 = x7609 + x7610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7612 = x6524 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7613 = x88 - x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7614 = x7612 * x7613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7615 = x88 - x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7616 = x6524 * x7615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7617 = x7616 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7618 = x7614 + x7617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7619 = x88 - x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7620 = x7619 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7621 = x7620 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7622 = x7618 + x7621;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7623 = x7612 * x6588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7624 = x7622 + x7623;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7625 = x6525 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7626 = x88 - x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7627 = x7625 * x7626;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7628 = x88 - x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7629 = x6525 * x7628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7630 = x7629 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7631 = x7627 + x7630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7632 = x88 - x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7633 = x7632 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7634 = x7633 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7635 = x7631 + x7634;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7636 = x7625 * x6589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7637 = x7635 + x7636;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7638 = x6526 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7639 = x88 - x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7640 = x7638 * x7639;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7641 = x88 - x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7642 = x6526 * x7641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7643 = x7642 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7644 = x7640 + x7643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7645 = x88 - x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7646 = x7645 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7647 = x7646 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7648 = x7644 + x7647;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7649 = x7638 * x6590;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7650 = x7648 + x7649;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7651 = x6527 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7652 = x88 - x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7653 = x7651 * x7652;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7654 = x88 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7655 = x6527 * x7654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7656 = x7655 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7657 = x7653 + x7656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7658 = x88 - x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7659 = x7658 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7660 = x7659 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7661 = x7657 + x7660;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7662 = x7651 * x6591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7663 = x7661 + x7662;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7664 = x6528 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7665 = x88 - x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7666 = x7664 * x7665;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7667 = x88 - x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7668 = x6528 * x7667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7669 = x7668 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7670 = x7666 + x7669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7671 = x88 - x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7672 = x7671 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7673 = x7672 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7674 = x7670 + x7673;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7675 = x7664 * x6592;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7676 = x7674 + x7675;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7677 = x6529 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7678 = x88 - x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7679 = x7677 * x7678;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7680 = x88 - x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7681 = x6529 * x7680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7682 = x7681 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7683 = x7679 + x7682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7684 = x88 - x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7685 = x7684 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7686 = x7685 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7687 = x7683 + x7686;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7688 = x7677 * x6593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7689 = x7687 + x7688;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7690 = x6530 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7691 = x88 - x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7692 = x7690 * x7691;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7693 = x88 - x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7694 = x6530 * x7693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7695 = x7694 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7696 = x7692 + x7695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7697 = x88 - x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7698 = x7697 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7699 = x7698 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7700 = x7696 + x7699;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7701 = x7690 * x6594;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7702 = x7700 + x7701;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7703 = x6531 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7704 = x88 - x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7705 = x7703 * x7704;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7706 = x88 - x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7707 = x6531 * x7706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7708 = x7707 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7709 = x7705 + x7708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7710 = x88 - x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7711 = x7710 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7712 = x7711 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7713 = x7709 + x7712;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7714 = x7703 * x6595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7715 = x7713 + x7714;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7716 = x6532 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7717 = x88 - x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7718 = x7716 * x7717;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7719 = x88 - x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7720 = x6532 * x7719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7721 = x7720 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7722 = x7718 + x7721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7723 = x88 - x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7724 = x7723 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7725 = x7724 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7726 = x7722 + x7725;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7727 = x7716 * x6596;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7728 = x7726 + x7727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7729 = x6533 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7730 = x88 - x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7731 = x7729 * x7730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7732 = x88 - x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7733 = x6533 * x7732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7734 = x7733 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7735 = x7731 + x7734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7736 = x88 - x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7737 = x7736 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7738 = x7737 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7739 = x7735 + x7738;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7740 = x7729 * x6597;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7741 = x7739 + x7740;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7742 = x6534 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7743 = x88 - x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7744 = x7742 * x7743;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7745 = x88 - x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7746 = x6534 * x7745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7747 = x7746 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7748 = x7744 + x7747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7749 = x88 - x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7750 = x7749 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7751 = x7750 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7752 = x7748 + x7751;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7753 = x7742 * x6598;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7754 = x7752 + x7753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7755 = x6535 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7756 = x88 - x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7757 = x7755 * x7756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7758 = x88 - x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7759 = x6535 * x7758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7760 = x7759 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7761 = x7757 + x7760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7762 = x88 - x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7763 = x7762 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7764 = x7763 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7765 = x7761 + x7764;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7766 = x7755 * x6599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7767 = x7765 + x7766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7768 = x6536 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7769 = x88 - x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7770 = x7768 * x7769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7771 = x88 - x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7772 = x6536 * x7771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7773 = x7772 * x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7774 = x7770 + x7773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7775 = x88 - x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7776 = x7775 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7777 = x7776 * x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7778 = x7774 + x7777;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7779 = x7768 * x6600;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7780 = x7778 + x7779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7781 = x6537 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7782 = x88 - x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7783 = x7781 * x7782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7784 = x88 - x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7785 = x6537 * x7784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7786 = x7785 * x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7787 = x7783 + x7786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7788 = x88 - x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7789 = x7788 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7790 = x7789 * x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7791 = x7787 + x7790;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7792 = x7781 * x6601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7793 = x7791 + x7792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7794 = x6538 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7795 = x88 - x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7796 = x7794 * x7795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7797 = x88 - x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7798 = x6538 * x7797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7799 = x7798 * x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7800 = x7796 + x7799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7801 = x88 - x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7802 = x7801 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7803 = x7802 * x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7804 = x7800 + x7803;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7805 = x7794 * x6602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7806 = x7804 + x7805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7807 = x6539 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7808 = x88 - x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7809 = x7807 * x7808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7810 = x88 - x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7811 = x6539 * x7810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7812 = x7811 * x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7813 = x7809 + x7812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7814 = x88 - x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7815 = x7814 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7816 = x7815 * x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7817 = x7813 + x7816;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7818 = x7807 * x6603;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7819 = x7817 + x7818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7820 = x6540 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7821 = x88 - x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7822 = x7820 * x7821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7823 = x88 - x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7824 = x6540 * x7823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7825 = x7824 * x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7826 = x7822 + x7825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7827 = x88 - x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7828 = x7827 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7829 = x7828 * x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7830 = x7826 + x7829;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7831 = x7820 * x6604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7832 = x7830 + x7831;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7833 = x6541 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7834 = x88 - x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7835 = x7833 * x7834;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7836 = x88 - x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7837 = x6541 * x7836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7838 = x7837 * x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7839 = x7835 + x7838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7840 = x88 - x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7841 = x7840 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7842 = x7841 * x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7843 = x7839 + x7842;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7844 = x7833 * x6605;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7845 = x7843 + x7844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7846 = x6542 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7847 = x88 - x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7848 = x7846 * x7847;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7849 = x88 - x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7850 = x6542 * x7849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7851 = x7850 * x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7852 = x7848 + x7851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7853 = x88 - x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7854 = x7853 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7855 = x7854 * x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7856 = x7852 + x7855;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7857 = x7846 * x6606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7858 = x7856 + x7857;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7859 = x6543 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7860 = x88 - x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7861 = x7859 * x7860;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7862 = x88 - x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7863 = x6543 * x7862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7864 = x7863 * x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7865 = x7861 + x7864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7866 = x88 - x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7867 = x7866 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7868 = x7867 * x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7869 = x7865 + x7868;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7870 = x7859 * x6607;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7871 = x7869 + x7870;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7872 = x6544 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7873 = x88 - x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7874 = x7872 * x7873;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7875 = x88 - x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7876 = x6544 * x7875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7877 = x7876 * x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7878 = x7874 + x7877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7879 = x88 - x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7880 = x7879 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7881 = x7880 * x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7882 = x7878 + x7881;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7883 = x7872 * x6608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7884 = x7882 + x7883;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7885 = x6545 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7886 = x88 - x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7887 = x7885 * x7886;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7888 = x88 - x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7889 = x6545 * x7888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7890 = x7889 * x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7891 = x7887 + x7890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7892 = x88 - x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7893 = x7892 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7894 = x7893 * x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7895 = x7891 + x7894;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7896 = x7885 * x6609;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7897 = x7895 + x7896;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7898 = x6546 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7899 = x88 - x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7900 = x7898 * x7899;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7901 = x88 - x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7902 = x6546 * x7901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7903 = x7902 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7904 = x7900 + x7903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7905 = x88 - x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7906 = x7905 * x6578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7907 = x7906 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7908 = x7904 + x7907;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7909 = x7898 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7910 = x7908 + x7909;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7911 = x6547 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7912 = x88 - x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7913 = x7911 * x7912;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7914 = x88 - x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7915 = x6547 * x7914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7916 = x7915 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7917 = x7913 + x7916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7918 = x88 - x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7919 = x7918 * x6579;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7920 = x7919 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7921 = x7917 + x7920;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7922 = x7911 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7923 = x7921 + x7922;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7924 = x6548 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7925 = x88 - x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7926 = x7924 * x7925;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7927 = x88 - x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7928 = x6548 * x7927;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7929 = x7928 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7930 = x7926 + x7929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7931 = x88 - x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7932 = x7931 * x6580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7933 = x7932 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7934 = x7930 + x7933;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7935 = x7924 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7936 = x7934 + x7935;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7937 = x6549 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7938 = x88 - x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7939 = x7937 * x7938;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7940 = x88 - x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7941 = x6549 * x7940;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7942 = x7941 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7943 = x7939 + x7942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7944 = x88 - x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7945 = x7944 * x6581;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7946 = x7945 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7947 = x7943 + x7946;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7948 = x7937 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7949 = x7947 + x7948;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7950 = x6550 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7951 = x88 - x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7952 = x7950 * x7951;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7953 = x88 - x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7954 = x6550 * x7953;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7955 = x7954 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7956 = x7952 + x7955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7957 = x88 - x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7958 = x7957 * x6582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7959 = x7958 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7960 = x7956 + x7959;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7961 = x7950 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7962 = x7960 + x7961;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7963 = x7572 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7964 = x7559 + x7963;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7965 = x7585 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7966 = x7964 + x7965;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7967 = x7598 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7968 = x7966 + x7967;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7969 = x7611 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7970 = x7968 + x7969;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7971 = x7624 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7972 = x7970 + x7971;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7973 = x7637 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7974 = x7972 + x7973;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7975 = x7650 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7976 = x7974 + x7975;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7977 = x7663 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7978 = x7976 + x7977;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7979 = x7676 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7980 = x7978 + x7979;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7981 = x7689 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7982 = x7980 + x7981;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7983 = x7702 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7984 = x7982 + x7983;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7985 = x7715 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7986 = x7984 + x7985;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7987 = x7728 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7988 = x7986 + x7987;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7989 = x7741 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7990 = x7988 + x7989;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7991 = x7754 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7992 = x7990 + x7991;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7993 = x7780 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7994 = x7767 + x7993;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7995 = x7793 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7996 = x7994 + x7995;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7997 = x7806 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7998 = x7996 + x7997;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7999 = x7819 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8000 = x7998 + x7999;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8001 = x7832 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8002 = x8000 + x8001;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8003 = x7845 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8004 = x8002 + x8003;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8005 = x7858 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8006 = x8004 + x8005;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8007 = x7871 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8008 = x8006 + x8007;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8009 = x7884 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8010 = x8008 + x8009;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8011 = x7897 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8012 = x8010 + x8011;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8013 = x7910 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8014 = x8012 + x8013;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8015 = x7923 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8016 = x8014 + x8015;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8017 = x7936 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8018 = x8016 + x8017;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8019 = x7949 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8020 = x8018 + x8019;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8021 = x7962 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8022 = x8020 + x8021;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8023 = x6916 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8024 = x6913 + x8023;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8025 = x6919 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8026 = x8024 + x8025;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8027 = x6922 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8028 = x8026 + x8027;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8029 = x6925 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8030 = x8028 + x8029;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8031 = x6928 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8032 = x8030 + x8031;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8033 = x6931 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8034 = x8032 + x8033;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8035 = x6934 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8036 = x8034 + x8035;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8037 = x6937 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8038 = x8036 + x8037;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8039 = x6940 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8040 = x8038 + x8039;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8041 = x6943 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8042 = x8040 + x8041;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8043 = x6946 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8044 = x8042 + x8043;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8045 = x6949 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8046 = x8044 + x8045;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8047 = x6952 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8048 = x8046 + x8047;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8049 = x6955 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8050 = x8048 + x8049;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8051 = x6958 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8052 = x8050 + x8051;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8053 = x6964 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8054 = x6961 + x8053;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8055 = x6967 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8056 = x8054 + x8055;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8057 = x6970 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8058 = x8056 + x8057;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8059 = x6973 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8060 = x8058 + x8059;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8061 = x6976 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8062 = x8060 + x8061;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8063 = x6979 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8064 = x8062 + x8063;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8065 = x6982 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8066 = x8064 + x8065;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8067 = x6985 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8068 = x8066 + x8067;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8069 = x6988 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8070 = x8068 + x8069;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8071 = x6991 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8072 = x8070 + x8071;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8073 = x6994 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8074 = x8072 + x8073;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8075 = x6997 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8076 = x8074 + x8075;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8077 = x7000 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8078 = x8076 + x8077;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8079 = x7003 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8080 = x8078 + x8079;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8081 = x7006 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8082 = x8080 + x8081;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8083 = x7992 + x8052;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8084 = x8022 + x8082;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8085 = x7545 + x8083;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8086 = x7546 + x8084;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8087 = x6616 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8088 = x6615 + x8087;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8089 = x6617 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8090 = x8088 + x8089;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8091 = x6618 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8092 = x8090 + x8091;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8093 = x6619 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8094 = x8092 + x8093;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8095 = x6620 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8096 = x8094 + x8095;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8097 = x6621 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8098 = x8096 + x8097;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8099 = x6622 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8100 = x8098 + x8099;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8101 = x6623 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8102 = x8100 + x8101;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8103 = x6624 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8104 = x8102 + x8103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8105 = x6625 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8106 = x8104 + x8105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8107 = x6626 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8108 = x8106 + x8107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8109 = x6627 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8110 = x8108 + x8109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8111 = x6628 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8112 = x8110 + x8111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8113 = x6629 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8114 = x8112 + x8113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8115 = x6630 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8116 = x8114 + x8115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8117 = x6632 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8118 = x6631 + x8117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8119 = x6633 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8120 = x8118 + x8119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8121 = x6634 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8122 = x8120 + x8121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8123 = x6635 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8124 = x8122 + x8123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8125 = x6636 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8126 = x8124 + x8125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8127 = x6637 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8128 = x8126 + x8127;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8129 = x6638 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8130 = x8128 + x8129;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8131 = x6639 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8132 = x8130 + x8131;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8133 = x6640 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8134 = x8132 + x8133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8135 = x6641 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8136 = x8134 + x8135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8137 = x6642 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8138 = x8136 + x8137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8139 = x6643 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8140 = x8138 + x8139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8141 = x6644 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8142 = x8140 + x8141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8143 = x6645 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8144 = x8142 + x8143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8145 = x6646 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8146 = x8144 + x8145;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8147 = x7545 + x8116;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8148 = x7546 + x8146;
      // loc("cirgen/circuit/rv32im/sha.cpp":450:5)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8085);
        reg = x8085;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":451:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8147);
        reg = x8147;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":450:5)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8086);
        reg = x8086;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":451:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8148);
        reg = x8148;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8149 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x8149 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8150 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x8150 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8151 = Fp(x8149.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8151);
          reg = x8151;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8152 = Fp(x8149.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8153 = x8152 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8153);
          reg = x8153;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8154 = Fp(x8149.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8155 = x8154 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8155);
          reg = x8155;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8156 = Fp(x8149.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8157 = x8156 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8157);
          reg = x8157;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8158 = Fp(x8149.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8159 = x8158 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8159);
          reg = x8159;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8160 = Fp(x8149.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8161 = x8160 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8161);
          reg = x8161;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8162 = Fp(x8149.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8163 = x8162 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8163);
          reg = x8163;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8164 = Fp(x8149.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8165 = x8164 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8165);
          reg = x8165;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8166 = Fp(x8149.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8167 = x8166 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8167);
          reg = x8167;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8168 = Fp(x8149.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8169 = x8168 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8169);
          reg = x8169;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8170 = Fp(x8149.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8171 = x8170 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8171);
          reg = x8171;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8172 = Fp(x8149.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8173 = x8172 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8173);
          reg = x8173;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8174 = Fp(x8149.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8175 = x8174 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8175);
          reg = x8175;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8176 = Fp(x8149.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8177 = x8176 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8177);
          reg = x8177;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8178 = Fp(x8149.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8179 = x8178 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8179);
          reg = x8179;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8180 = Fp(x8149.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8181 = x8180 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8181);
          reg = x8181;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8182 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x8182 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8183 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x8183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8184 = x8183 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8185 = x8182 + x8184;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8186 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x8186 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8187 = x8186 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8188 = x8185 + x8187;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8189 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x8189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8190 = x8189 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8191 = x8188 + x8190;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8192 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x8192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8193 = x8192 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8194 = x8191 + x8193;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8195 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8195 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8196 = x8195 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8197 = x8194 + x8196;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8198 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8198 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8199 = x8198 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8200 = x8197 + x8199;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8201 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8202 = x8201 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8203 = x8200 + x8202;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8204 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8204 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8205 = x8204 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8206 = x8203 + x8205;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8207 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x8207 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8208 = x8207 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8209 = x8206 + x8208;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8210 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x8210 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8211 = x8210 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8212 = x8209 + x8211;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8213 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8213 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8214 = x8213 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8215 = x8212 + x8214;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8216 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8216 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8217 = x8216 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8218 = x8215 + x8217;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8219 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8219 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8220 = x8219 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8221 = x8218 + x8220;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8222 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8222 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8223 = x8222 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8224 = x8221 + x8223;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8225 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8225 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8226 = x8225 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8227 = x8224 + x8226;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8228 = x8149 - x8227;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8229 = x8228 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8230 = Fp(x8229.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8230);
          reg = x8230;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8231 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8231 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8232 = x8229 - x8231;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8233 = x8232 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8234 = x88 - x8233;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8235 = x8233 * x8234;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8235 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8236 = x8150 + x8229;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8237 = Fp(x8236.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8237);
          reg = x8237;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8238 = Fp(x8236.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8239 = x8238 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8239);
          reg = x8239;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8240 = Fp(x8236.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8241 = x8240 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8241);
          reg = x8241;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8242 = Fp(x8236.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8243 = x8242 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8243);
          reg = x8243;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8244 = Fp(x8236.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8245 = x8244 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8245);
          reg = x8245;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8246 = Fp(x8236.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8247 = x8246 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8247);
          reg = x8247;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8248 = Fp(x8236.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8249 = x8248 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8249);
          reg = x8249;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8250 = Fp(x8236.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8251 = x8250 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8251);
          reg = x8251;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8252 = Fp(x8236.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8253 = x8252 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8253);
          reg = x8253;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8254 = Fp(x8236.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8255 = x8254 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8255);
          reg = x8255;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8256 = Fp(x8236.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8257 = x8256 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8257);
          reg = x8257;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8258 = Fp(x8236.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8259 = x8258 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8259);
          reg = x8259;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8260 = Fp(x8236.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8261 = x8260 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8261);
          reg = x8261;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8262 = Fp(x8236.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8263 = x8262 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8263);
          reg = x8263;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8264 = Fp(x8236.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8265 = x8264 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8265);
          reg = x8265;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8266 = Fp(x8236.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8267 = x8266 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8267);
          reg = x8267;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8268 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8268 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8269 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8269 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8270 = x8269 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8271 = x8268 + x8270;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8272 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8272 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8273 = x8272 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8274 = x8271 + x8273;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8275 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8275 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8276 = x8275 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8277 = x8274 + x8276;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8278 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8278 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8279 = x8278 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8280 = x8277 + x8279;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8281 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8281 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8282 = x8281 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8283 = x8280 + x8282;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8284 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8284 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8285 = x8284 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8286 = x8283 + x8285;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8287 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8287 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8288 = x8287 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8289 = x8286 + x8288;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8290 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8290 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8291 = x8290 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8292 = x8289 + x8291;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8293 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8293 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8294 = x8293 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8295 = x8292 + x8294;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8296 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8296 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8297 = x8296 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8298 = x8295 + x8297;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8299 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8299 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8300 = x8299 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8301 = x8298 + x8300;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8302 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8302 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8303 = x8302 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8304 = x8301 + x8303;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8305 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8305 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8306 = x8305 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8307 = x8304 + x8306;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8308 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8308 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8309 = x8308 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8310 = x8307 + x8309;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8311 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8311 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8312 = x8311 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8313 = x8310 + x8312;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8314 = x8236 - x8313;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8315 = x8314 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8316 = Fp(x8315.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8316);
          reg = x8316;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8317 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8317 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8318 = x8315 - x8317;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8319 = x8318 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8320 = x88 - x8319;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8321 = x8319 * x8320;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8321 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8322 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8322 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8323 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x8323 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8324 = Fp(x8322.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8324);
          reg = x8324;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8325 = Fp(x8322.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8326 = x8325 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8326);
          reg = x8326;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8327 = Fp(x8322.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8328 = x8327 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8328);
          reg = x8328;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8329 = Fp(x8322.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8330 = x8329 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8330);
          reg = x8330;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8331 = Fp(x8322.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8332 = x8331 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8332);
          reg = x8332;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8333 = Fp(x8322.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8334 = x8333 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8334);
          reg = x8334;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8335 = Fp(x8322.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8336 = x8335 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8336);
          reg = x8336;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8337 = Fp(x8322.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8338 = x8337 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8338);
          reg = x8338;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8339 = Fp(x8322.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8340 = x8339 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8340);
          reg = x8340;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8341 = Fp(x8322.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8342 = x8341 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8342);
          reg = x8342;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8343 = Fp(x8322.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8344 = x8343 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8344);
          reg = x8344;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8345 = Fp(x8322.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8346 = x8345 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8346);
          reg = x8346;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8347 = Fp(x8322.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8348 = x8347 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8348);
          reg = x8348;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8349 = Fp(x8322.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8350 = x8349 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8350);
          reg = x8350;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8351 = Fp(x8322.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8352 = x8351 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8352);
          reg = x8352;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8353 = Fp(x8322.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8354 = x8353 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8354);
          reg = x8354;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8355 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8355 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8356 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8356 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8357 = x8356 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8358 = x8355 + x8357;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8359 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8359 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8360 = x8359 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8361 = x8358 + x8360;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8362 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8362 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8363 = x8362 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8364 = x8361 + x8363;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8365 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8365 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8366 = x8365 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8367 = x8364 + x8366;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8368 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8368 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8369 = x8368 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8370 = x8367 + x8369;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8371 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8371 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8372 = x8371 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8373 = x8370 + x8372;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8374 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8374 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8375 = x8374 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8376 = x8373 + x8375;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8377 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8378 = x8377 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8379 = x8376 + x8378;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8380 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8380 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8381 = x8380 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8382 = x8379 + x8381;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8383 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8383 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8384 = x8383 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8385 = x8382 + x8384;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8386 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8386 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8387 = x8386 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8388 = x8385 + x8387;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8389 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8389 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8390 = x8389 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8391 = x8388 + x8390;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8392 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8392 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8393 = x8392 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8394 = x8391 + x8393;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8395 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8395 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8396 = x8395 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8397 = x8394 + x8396;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8398 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8398 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8399 = x8398 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8400 = x8397 + x8399;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8401 = x8322 - x8400;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8402 = x8401 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8403 = Fp(x8402.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8403);
          reg = x8403;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8404 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8404 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8405 = x8402 - x8404;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8406 = x8405 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8407 = x88 - x8406;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8408 = x8406 * x8407;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8408 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8409 = x8323 + x8402;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8410 = Fp(x8409.asUInt32() & x88.asUInt32());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8410);
          reg = x8410;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8411 = Fp(x8409.asUInt32() & x85.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8412 = x8411 * x58;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8412);
          reg = x8412;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8413 = Fp(x8409.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8414 = x8413 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8414);
          reg = x8414;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8415 = Fp(x8409.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8416 = x8415 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8416);
          reg = x8416;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8417 = Fp(x8409.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8418 = x8417 * x60;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8418);
          reg = x8418;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8419 = Fp(x8409.asUInt32() & x63.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8420 = x8419 * x62;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8420);
          reg = x8420;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8421 = Fp(x8409.asUInt32() & x57.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8422 = x8421 * x56;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8422);
          reg = x8422;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8423 = Fp(x8409.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8424 = x8423 * x65;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8424);
          reg = x8424;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8425 = Fp(x8409.asUInt32() & x83.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8426 = x8425 * x82;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8426);
          reg = x8426;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8427 = Fp(x8409.asUInt32() & x24.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8428 = x8427 * x23;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8428);
          reg = x8428;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8429 = Fp(x8409.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8430 = x8429 * x21;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8430);
          reg = x8430;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8431 = Fp(x8409.asUInt32() & x20.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8432 = x8431 * x19;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8432);
          reg = x8432;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8433 = Fp(x8409.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8434 = x8433 * x17;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8434);
          reg = x8434;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8435 = Fp(x8409.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8436 = x8435 * x15;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8436);
          reg = x8436;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8437 = Fp(x8409.asUInt32() & x38.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8438 = x8437 * x14;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8438);
          reg = x8438;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8439 = Fp(x8409.asUInt32() & x13.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8440 = x8439 * x12;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8440);
          reg = x8440;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8441 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8441 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8442 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8442 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8443 = x8442 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8444 = x8441 + x8443;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8445 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8445 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8446 = x8445 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8447 = x8444 + x8446;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8448 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8448 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8449 = x8448 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8450 = x8447 + x8449;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8451 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8451 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8452 = x8451 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8453 = x8450 + x8452;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8454 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8454 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8455 = x8454 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8456 = x8453 + x8455;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8457 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8457 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8458 = x8457 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8459 = x8456 + x8458;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8460 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8460 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8461 = x8460 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8462 = x8459 + x8461;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8463 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8463 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8464 = x8463 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8465 = x8462 + x8464;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8466 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8466 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8467 = x8466 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8468 = x8465 + x8467;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8469 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8469 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8470 = x8469 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8471 = x8468 + x8470;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8472 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8472 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8473 = x8472 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8474 = x8471 + x8473;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8475 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8475 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8476 = x8475 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8477 = x8474 + x8476;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8478 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8478 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8479 = x8478 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8480 = x8477 + x8479;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8481 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8481 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8482 = x8481 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8483 = x8480 + x8482;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8484 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8484 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8485 = x8484 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8486 = x8483 + x8485;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8487 = x8409 - x8486;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8488 = x8487 * x11;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8489 = Fp(x8488.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8489);
          reg = x8489;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8490 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8490 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8491 = x8488 - x8490;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8492 = x8491 * x79;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8493 = x88 - x8492;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8494 = x8492 * x8493;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8494 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/components/mux.h":37:25))
    auto x8495 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x8495 != Fp::invalid());
    if (x8495 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8496 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x8496 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8497 = args[2][135 * steps + ((cycle - 1) & mask)];
      assert(x8497 != Fp::invalid());
      if (x8497 != 0) {
        // loc("Top/Mux/4/OneHot/Reg10"("cirgen/circuit/rv32im/sha.cpp":316:72))
        auto x8498 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x8498 != Fp::invalid());
        if (x8498 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":319:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8);
            reg = x8;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":321:22)
        auto x8499 = x88 - x8498;
        if (x8499 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":323:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":326:18)
      auto x8500 = x88 - x8497;
      if (x8500 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8501 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x8501 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8501);
          reg = x8501;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("cirgen/circuit/rv32im/sha.cpp":329:40))
        auto x8502 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x8502 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":329:40)
        auto x8503 = x8502 - x88;
        // loc("cirgen/circuit/rv32im/sha.cpp":329:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8503);
          reg = x8503;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg4"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8504 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x8504 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8505 = (x8504 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8505);
          reg = x8505;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8506 = inv(x8504);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8506);
          reg = x8506;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8507 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x8507 != Fp::invalid());
      if (x8507 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x8504 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x8508 = x88 - x8507;
      if (x8508 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x8509 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x8509 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8510 = x8504 * x8509;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8511 = x8510 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x8511 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8512 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x8512 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":333:15)
      auto x8513 = x88 - x8512;
      if (x8507 != 0) {
        if (x8513 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":340:40))
          auto x8514 = args[2][137 * steps + ((cycle - 1) & mask)];
          assert(x8514 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":340:7)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8514);
            reg = x8514;
          }
        }
        if (x8512 != 0) {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":344:44))
          auto x8515 = args[2][137 * steps + ((cycle - 1) & mask)];
          assert(x8515 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":344:44)
          auto x8516 = x8515 - x88;
          // loc("cirgen/circuit/rv32im/sha.cpp":344:7)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8516);
            reg = x8516;
          }
        }
      }
      if (x8508 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("cirgen/circuit/rv32im/sha.cpp":349:38))
        auto x8517 = args[2][137 * steps + ((cycle - 1) & mask)];
        assert(x8517 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":349:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8517);
          reg = x8517;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg1"("cirgen/circuit/rv32im/sha.cpp":352:38))
      auto x8518 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x8518 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":352:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8518);
        reg = x8518;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":353:40))
      auto x8519 = args[2][130 * steps + ((cycle - 1) & mask)];
      assert(x8519 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":353:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8519);
        reg = x8519;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg5"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8520 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x8520 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8521 = (x8520 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8521);
          reg = x8521;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8522 = inv(x8520);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8522);
          reg = x8522;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8523 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x8523 != Fp::invalid());
      if (x8523 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x8520 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x8524 = x88 - x8523;
      if (x8524 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero1/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x8525 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x8525 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8526 = x8520 * x8525;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x8527 = x8526 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x8527 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8528 = x527 + x81;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8529 = Fp(x8528.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8529);
          reg = x8529;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x8530 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x8530 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8531 = x8528 - x8530;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8532 = x8531 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8533 = Fp(x8532.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8533);
          reg = x8533;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
      auto x8534 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8534 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8535 = x8532 - x8534;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8536 = x8535 * x82;
      {
        // loc("cirgen/components/bytes.cpp":82:21)
        auto x8537 = Fp(x8536.asUInt32() & x84.asUInt32());
        // loc("cirgen/components/bytes.cpp":82:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8537);
          reg = x8537;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
      auto x8538 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8538 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":83:11)
      auto x8539 = x8536 - x8538;
      // loc("cirgen/components/bytes.cpp":83:10)
      auto x8540 = x8539 * x82;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8541 = Fp(x8540.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8541);
          reg = x8541;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8542 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8543 = x8540 - x8542;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8544 = x8543 * x79;
      // loc("./cirgen/components/bits.h":57:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8544);
        reg = x8544;
      }
      // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8545 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8545 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8546 = x88 - x8545;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8547 = x8545 * x8546;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8547);
        reg = x8547;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x8548 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8548 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8549 = x85 - x8545;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8550 = x8548 * x8549;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8550 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x68;
      host_args.at(1) = x8512;
      host_args.at(2) = x8504;
      host(ctx, "log", "IN SHA: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x8513 != 0) {
        {
          host_args.at(0) = x87;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8551 = host_outs.at(0);
          auto x8552 = host_outs.at(1);
          auto x8553 = host_outs.at(2);
          auto x8554 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8551);
            reg = x8551;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8552);
            reg = x8552;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8553);
            reg = x8553;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8554);
            reg = x8554;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8555 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x8555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8556 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x8556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8557 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x8557 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8558 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x8558 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8496);
          reg = x8496;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8555);
          reg = x8555;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8556);
          reg = x8556;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8557);
          reg = x8557;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8558);
          reg = x8558;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":364:24)
        auto x8559 = x7 - x8504;
        {
          host_args.at(0) = x8559;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x8560 = host_outs.at(0);
          auto x8561 = host_outs.at(1);
          auto x8562 = host_outs.at(2);
          auto x8563 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8560);
            reg = x8560;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8561);
            reg = x8561;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8562);
            reg = x8562;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8563);
            reg = x8563;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8564 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x8564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8565 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x8565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8566 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x8566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x8567 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x8567 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8559);
          reg = x8559;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8496);
          reg = x8496;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8564);
          reg = x8564;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8565);
          reg = x8565;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8566);
          reg = x8566;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8567);
          reg = x8567;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8568 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8569 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8570 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8571 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8572 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8573 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8574 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8575 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x8575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8576 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x8576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8577 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x8577 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8578 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8578 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8579 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8579 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8580 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8580 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8581 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8581 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8582 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8582 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8583 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8583 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8584 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8585 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8585 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8586 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8586 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8587 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8587 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8588 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8588 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8589 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8589 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8590 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8590 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8591 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8591 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8592 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8592 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8593 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x8593 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8594 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x8594 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8595 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x8595 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8596 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x8596 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8597 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x8597 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8598 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x8598 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8599 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8600 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8601 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8602 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8603 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8604 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8605 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8606 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8607 = args[2][89 * steps + ((cycle - 7) & mask)];
      assert(x8607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8608 = args[2][90 * steps + ((cycle - 7) & mask)];
      assert(x8608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8609 = args[2][91 * steps + ((cycle - 7) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8610 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8610 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8611 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8611 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8612 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8613 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8614 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8615 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8616 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8616 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8617 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8617 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8618 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8619 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8619 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8620 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8620 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8621 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8622 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8622 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8623 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8623 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8624 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8625 = args[2][34 * steps + ((cycle - 7) & mask)];
      assert(x8625 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8626 = args[2][35 * steps + ((cycle - 7) & mask)];
      assert(x8626 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8627 = args[2][36 * steps + ((cycle - 7) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8628 = args[2][37 * steps + ((cycle - 7) & mask)];
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8629 = args[2][38 * steps + ((cycle - 7) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8630 = args[2][39 * steps + ((cycle - 7) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8631 = args[2][40 * steps + ((cycle - 7) & mask)];
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8632 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8633 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8634 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8635 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8636 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8637 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8638 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8639 = args[2][89 * steps + ((cycle - 15) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8640 = args[2][90 * steps + ((cycle - 15) & mask)];
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8641 = args[2][91 * steps + ((cycle - 15) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8642 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8643 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8644 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8645 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8646 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8647 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8648 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8649 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8649 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8650 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8650 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8651 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8651 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8652 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8652 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8653 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8653 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8654 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8654 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8655 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8655 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8656 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8656 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8657 = args[2][34 * steps + ((cycle - 15) & mask)];
      assert(x8657 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8658 = args[2][35 * steps + ((cycle - 15) & mask)];
      assert(x8658 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8659 = args[2][36 * steps + ((cycle - 15) & mask)];
      assert(x8659 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8660 = args[2][37 * steps + ((cycle - 15) & mask)];
      assert(x8660 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8661 = args[2][38 * steps + ((cycle - 15) & mask)];
      assert(x8661 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8662 = args[2][39 * steps + ((cycle - 15) & mask)];
      assert(x8662 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8663 = args[2][40 * steps + ((cycle - 15) & mask)];
      assert(x8663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8664 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8665 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8666 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8667 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8668 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8669 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8670 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8671 = args[2][89 * steps + ((cycle - 16) & mask)];
      assert(x8671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8672 = args[2][90 * steps + ((cycle - 16) & mask)];
      assert(x8672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8673 = args[2][91 * steps + ((cycle - 16) & mask)];
      assert(x8673 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8674 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8674 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8675 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8675 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8676 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8676 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8677 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8677 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8678 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8678 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8679 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8679 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8680 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8680 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8681 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8681 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8682 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8682 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8683 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8683 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8684 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8684 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8685 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8685 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8686 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8686 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8687 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8687 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8688 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8688 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8689 = args[2][34 * steps + ((cycle - 16) & mask)];
      assert(x8689 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8690 = args[2][35 * steps + ((cycle - 16) & mask)];
      assert(x8690 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8691 = args[2][36 * steps + ((cycle - 16) & mask)];
      assert(x8691 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8692 = args[2][37 * steps + ((cycle - 16) & mask)];
      assert(x8692 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8693 = args[2][38 * steps + ((cycle - 16) & mask)];
      assert(x8693 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8694 = args[2][39 * steps + ((cycle - 16) & mask)];
      assert(x8694 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x8695 = args[2][40 * steps + ((cycle - 16) & mask)];
      assert(x8695 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8696 = x8650 + x8635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8697 = x8650 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8698 = x8697 * x8635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8699 = x8696 - x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8700 = x8651 + x8636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8701 = x8651 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8702 = x8701 * x8636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8703 = x8700 - x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8704 = x8652 + x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8705 = x8652 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8706 = x8705 * x8637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8707 = x8704 - x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8708 = x8653 + x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8709 = x8653 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8710 = x8709 * x8638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8711 = x8708 - x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8712 = x8654 + x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8713 = x8654 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8714 = x8713 * x8639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8715 = x8712 - x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8716 = x8655 + x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8717 = x8655 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8718 = x8717 * x8640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8719 = x8716 - x8718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8720 = x8656 + x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8721 = x8656 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8722 = x8721 * x8641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8723 = x8720 - x8722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8724 = x8657 + x8642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8725 = x8657 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8726 = x8725 * x8642;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8727 = x8724 - x8726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8728 = x8658 + x8643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8729 = x8658 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8730 = x8729 * x8643;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8731 = x8728 - x8730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8732 = x8659 + x8644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8733 = x8659 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8734 = x8733 * x8644;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8735 = x8732 - x8734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8736 = x8660 + x8645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8737 = x8660 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8738 = x8737 * x8645;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8739 = x8736 - x8738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8740 = x8661 + x8646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8741 = x8661 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8742 = x8741 * x8646;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8743 = x8740 - x8742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8744 = x8662 + x8647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8745 = x8662 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8746 = x8745 * x8647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8747 = x8744 - x8746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8748 = x8663 + x8648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8749 = x8663 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8750 = x8749 * x8648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8751 = x8748 - x8750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8752 = x8632 + x8649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8753 = x8632 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8754 = x8753 * x8649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8755 = x8752 - x8754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8756 = x8633 + x8650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8757 = x8633 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8758 = x8757 * x8650;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8759 = x8756 - x8758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8760 = x8634 + x8651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8761 = x8634 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8762 = x8761 * x8651;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8763 = x8760 - x8762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8764 = x8635 + x8652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8765 = x8635 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8766 = x8765 * x8652;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8767 = x8764 - x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8768 = x8636 + x8653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8769 = x8636 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8770 = x8769 * x8653;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8771 = x8768 - x8770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8772 = x8637 + x8654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8773 = x8637 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8774 = x8773 * x8654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8775 = x8772 - x8774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8776 = x8638 + x8655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8777 = x8638 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8778 = x8777 * x8655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8779 = x8776 - x8778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8780 = x8639 + x8656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8781 = x8639 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8782 = x8781 * x8656;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8783 = x8780 - x8782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8784 = x8640 + x8657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8785 = x8640 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8786 = x8785 * x8657;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8787 = x8784 - x8786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8788 = x8641 + x8658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8789 = x8641 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8790 = x8789 * x8658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8791 = x8788 - x8790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8792 = x8642 + x8659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8793 = x8642 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8794 = x8793 * x8659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8795 = x8792 - x8794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8796 = x8643 + x8660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8797 = x8643 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8798 = x8797 * x8660;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8799 = x8796 - x8798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8800 = x8644 + x8661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8801 = x8644 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8802 = x8801 * x8661;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8803 = x8800 - x8802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8804 = x8645 + x8662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8805 = x8645 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8806 = x8805 * x8662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8807 = x8804 - x8806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8808 = x8646 + x8663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8809 = x8646 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8810 = x8809 * x8663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8811 = x8808 - x8810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8812 = x8639 + x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8813 = x8781 * x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8814 = x8812 - x8813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8815 = x8640 + x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8816 = x8785 * x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8817 = x8815 - x8816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8818 = x8641 + x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8819 = x8789 * x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8820 = x8818 - x8819;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8821 = x8642 + x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8822 = x8793 * x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8823 = x8821 - x8822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8824 = x8643 + x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8825 = x8797 * x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8826 = x8824 - x8825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8827 = x8644 + x8719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8828 = x8801 * x8719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8829 = x8827 - x8828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8830 = x8645 + x8723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8831 = x8805 * x8723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8832 = x8830 - x8831;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8833 = x8646 + x8727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8834 = x8809 * x8727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8835 = x8833 - x8834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8836 = x8647 + x8731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8837 = x8647 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8838 = x8837 * x8731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8839 = x8836 - x8838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8840 = x8648 + x8735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8841 = x8648 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8842 = x8841 * x8735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8843 = x8840 - x8842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8844 = x8649 + x8739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8845 = x8649 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8846 = x8845 * x8739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8847 = x8844 - x8846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8848 = x8650 + x8743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8849 = x8697 * x8743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8850 = x8848 - x8849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8851 = x8651 + x8747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8852 = x8701 * x8747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8853 = x8851 - x8852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8854 = x8652 + x8751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8855 = x8705 * x8751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8856 = x8854 - x8855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8857 = x8653 + x8755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8858 = x8709 * x8755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8859 = x8857 - x8858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8860 = x8654 + x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8861 = x8713 * x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8862 = x8860 - x8861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8863 = x8655 + x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8864 = x8717 * x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8865 = x8863 - x8864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8866 = x8656 + x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8867 = x8721 * x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8868 = x8866 - x8867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8869 = x8657 + x8771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8870 = x8725 * x8771;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8871 = x8869 - x8870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8872 = x8658 + x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8873 = x8729 * x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8874 = x8872 - x8873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8875 = x8659 + x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8876 = x8733 * x8779;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8877 = x8875 - x8876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8878 = x8660 + x8783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8879 = x8737 * x8783;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8880 = x8878 - x8879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8881 = x8661 + x8787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8882 = x8741 * x8787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8883 = x8881 - x8882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8884 = x8662 + x8791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8885 = x8745 * x8791;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8886 = x8884 - x8885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8887 = x8663 + x8795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8888 = x8749 * x8795;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8889 = x8887 - x8888;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8890 = x8632 + x8799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8891 = x8753 * x8799;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8892 = x8890 - x8891;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8893 = x8633 + x8803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8894 = x8757 * x8803;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8895 = x8893 - x8894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8896 = x8634 + x8807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8897 = x8761 * x8807;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8898 = x8896 - x8897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8899 = x8635 + x8811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8900 = x8765 * x8811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8901 = x8899 - x8900;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8902 = x8636 + x8647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8903 = x8769 * x8647;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8904 = x8902 - x8903;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8905 = x8637 + x8648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8906 = x8773 * x8648;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8907 = x8905 - x8906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8908 = x8638 + x8649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8909 = x8777 * x8649;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8910 = x8908 - x8909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8911 = x8587 + x8578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8912 = x8587 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8913 = x8912 * x8578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8914 = x8911 - x8913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8915 = x8588 + x8579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8916 = x8588 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8917 = x8916 * x8579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8918 = x8915 - x8917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8919 = x8589 + x8580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8920 = x8589 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8921 = x8920 * x8580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8922 = x8919 - x8921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8923 = x8590 + x8581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8924 = x8590 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8925 = x8924 * x8581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8926 = x8923 - x8925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8927 = x8591 + x8582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8928 = x8591 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8929 = x8928 * x8582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8930 = x8927 - x8929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8931 = x8592 + x8583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8932 = x8592 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8933 = x8932 * x8583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8934 = x8931 - x8933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8935 = x8593 + x8584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8936 = x8593 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8937 = x8936 * x8584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8938 = x8935 - x8937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8939 = x8594 + x8585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8940 = x8594 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8941 = x8940 * x8585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8942 = x8939 - x8941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8943 = x8595 + x8586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8944 = x8595 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8945 = x8944 * x8586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8946 = x8943 - x8945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8947 = x8596 + x8587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8948 = x8596 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8949 = x8948 * x8587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8950 = x8947 - x8949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8951 = x8597 + x8588;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8952 = x8597 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8953 = x8952 * x8588;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8954 = x8951 - x8953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8955 = x8598 + x8589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8956 = x8598 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8957 = x8956 * x8589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8958 = x8955 - x8957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8959 = x8599 + x8590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8960 = x8599 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8961 = x8960 * x8590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8962 = x8959 - x8961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8963 = x8568 + x8591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8964 = x8568 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8965 = x8964 * x8591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8966 = x8963 - x8965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8967 = x8569 + x8592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8968 = x8569 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8969 = x8968 * x8592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8970 = x8967 - x8969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8971 = x8570 + x8593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8972 = x8570 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8973 = x8972 * x8593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8974 = x8971 - x8973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8975 = x8571 + x8594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8976 = x8571 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8977 = x8976 * x8594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8978 = x8975 - x8977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8979 = x8572 + x8595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8980 = x8572 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8981 = x8980 * x8595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8982 = x8979 - x8981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8983 = x8573 + x8596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8984 = x8573 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8985 = x8984 * x8596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8986 = x8983 - x8985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8987 = x8574 + x8597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8988 = x8574 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8989 = x8988 * x8597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8990 = x8987 - x8989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8991 = x8575 + x8598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8992 = x8575 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8993 = x8992 * x8598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8994 = x8991 - x8993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8995 = x8576 + x8599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8996 = x8576 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8997 = x8996 * x8599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8998 = x8995 - x8997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8999 = x8585 + x8914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9000 = x8585 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9001 = x9000 * x8914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9002 = x8999 - x9001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9003 = x8586 + x8918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9004 = x8586 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9005 = x9004 * x8918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9006 = x9003 - x9005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9007 = x8587 + x8922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9008 = x8912 * x8922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x9007 - x9008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9010 = x8588 + x8926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9011 = x8916 * x8926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x9010 - x9011;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9013 = x8589 + x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9014 = x8920 * x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9015 = x9013 - x9014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9016 = x8590 + x8934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9017 = x8924 * x8934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9018 = x9016 - x9017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9019 = x8591 + x8938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9020 = x8928 * x8938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x9019 - x9020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9022 = x8592 + x8942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9023 = x8932 * x8942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x9022 - x9023;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9025 = x8593 + x8946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9026 = x8936 * x8946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9027 = x9025 - x9026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9028 = x8594 + x8950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9029 = x8940 * x8950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9030 = x9028 - x9029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9031 = x8595 + x8954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9032 = x8944 * x8954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9033 = x9031 - x9032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9034 = x8596 + x8958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9035 = x8948 * x8958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x9034 - x9035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9037 = x8597 + x8962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9038 = x8952 * x8962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9039 = x9037 - x9038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9040 = x8598 + x8966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9041 = x8956 * x8966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9042 = x9040 - x9041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9043 = x8599 + x8970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9044 = x8960 * x8970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9045 = x9043 - x9044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9046 = x8568 + x8974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9047 = x8964 * x8974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9048 = x9046 - x9047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9049 = x8569 + x8978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9050 = x8968 * x8978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9051 = x9049 - x9050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9052 = x8570 + x8982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9053 = x8972 * x8982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9054 = x9052 - x9053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9055 = x8571 + x8986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9056 = x8976 * x8986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9057 = x9055 - x9056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9058 = x8572 + x8990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9059 = x8980 * x8990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9060 = x9058 - x9059;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9061 = x8573 + x8994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9062 = x8984 * x8994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9063 = x9061 - x9062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9064 = x8574 + x8998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9065 = x8988 * x8998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9066 = x9064 - x9065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9067 = x8575 + x8577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9068 = x8992 * x8577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9069 = x9067 - x9068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9070 = x8576 + x8578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9071 = x8996 * x8578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9072 = x9070 - x9071;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9073 = x8577 + x8579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9074 = x8577 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9075 = x9074 * x8579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9076 = x9073 - x9075;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9077 = x8578 + x8580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9078 = x8578 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9079 = x9078 * x8580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9080 = x9077 - x9079;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9081 = x8579 + x8581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9082 = x8579 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9083 = x9082 * x8581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9084 = x9081 - x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9085 = x8580 + x8582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9086 = x8580 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9087 = x9086 * x8582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9088 = x9085 - x9087;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9089 = x8581 + x8583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9090 = x8581 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9091 = x9090 * x8583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9092 = x9089 - x9091;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9093 = x8582 + x8584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9094 = x8582 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9095 = x9094 * x8584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9096 = x9093 - x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9097 = x8583 + x8585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9098 = x8583 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9099 = x9098 * x8585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9100 = x9097 - x9099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9101 = x8584 + x8586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9102 = x8584 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9103 = x9102 * x8586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9104 = x9101 - x9103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9105 = x8665 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9106 = x8664 + x9105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9107 = x8666 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9108 = x9106 + x9107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9109 = x8667 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9110 = x9108 + x9109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9111 = x8668 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9112 = x9110 + x9111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9113 = x8669 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9114 = x9112 + x9113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9115 = x8670 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9116 = x9114 + x9115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9117 = x8671 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9118 = x9116 + x9117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9119 = x8672 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9120 = x9118 + x9119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9121 = x8673 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9122 = x9120 + x9121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9123 = x8674 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9124 = x9122 + x9123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9125 = x8675 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9126 = x9124 + x9125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9127 = x8676 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9128 = x9126 + x9127;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9129 = x8677 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9130 = x9128 + x9129;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9131 = x8678 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9132 = x9130 + x9131;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9133 = x8679 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9134 = x9132 + x9133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9135 = x8681 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9136 = x8680 + x9135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9137 = x8682 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9138 = x9136 + x9137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9139 = x8683 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9140 = x9138 + x9139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9141 = x8684 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9142 = x9140 + x9141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9143 = x8685 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9144 = x9142 + x9143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9145 = x8686 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9146 = x9144 + x9145;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9147 = x8687 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9148 = x9146 + x9147;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9149 = x8688 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9150 = x9148 + x9149;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9151 = x8689 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9152 = x9150 + x9151;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9153 = x8690 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9154 = x9152 + x9153;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9155 = x8691 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9156 = x9154 + x9155;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9157 = x8692 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9158 = x9156 + x9157;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9159 = x8693 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9160 = x9158 + x9159;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9161 = x8694 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9162 = x9160 + x9161;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9163 = x8695 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9164 = x9162 + x9163;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9165 = x8817 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9166 = x8814 + x9165;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9167 = x8820 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9168 = x9166 + x9167;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9169 = x8823 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9170 = x9168 + x9169;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9171 = x8826 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9172 = x9170 + x9171;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9173 = x8829 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9174 = x9172 + x9173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9175 = x8832 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9176 = x9174 + x9175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9177 = x8835 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9178 = x9176 + x9177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9179 = x8839 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9180 = x9178 + x9179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9181 = x8843 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9182 = x9180 + x9181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9183 = x8847 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9184 = x9182 + x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9185 = x8850 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9186 = x9184 + x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9187 = x8853 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9188 = x9186 + x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9189 = x8856 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9190 = x9188 + x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9191 = x8859 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9192 = x9190 + x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9193 = x8862 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9194 = x9192 + x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9195 = x8868 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9196 = x8865 + x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9197 = x8871 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9198 = x9196 + x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9199 = x8874 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9200 = x9198 + x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9201 = x8877 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9202 = x9200 + x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9203 = x8880 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9204 = x9202 + x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9205 = x8883 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9206 = x9204 + x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9207 = x8886 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9208 = x9206 + x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9209 = x8889 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9210 = x9208 + x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9211 = x8892 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9212 = x9210 + x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9213 = x8895 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9214 = x9212 + x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9215 = x8898 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9216 = x9214 + x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9217 = x8901 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9218 = x9216 + x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9219 = x8904 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9220 = x9218 + x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9221 = x8907 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9222 = x9220 + x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9223 = x8910 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9224 = x9222 + x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9225 = x8601 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9226 = x8600 + x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9227 = x8602 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9228 = x9226 + x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9229 = x8603 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9230 = x9228 + x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9231 = x8604 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9232 = x9230 + x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9233 = x8605 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9234 = x9232 + x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9235 = x8606 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9236 = x9234 + x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9237 = x8607 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9238 = x9236 + x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9239 = x8608 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9240 = x9238 + x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9241 = x8609 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9242 = x9240 + x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9243 = x8610 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9244 = x9242 + x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9245 = x8611 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9246 = x9244 + x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9247 = x8612 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9248 = x9246 + x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9249 = x8613 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9250 = x9248 + x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9251 = x8614 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9252 = x9250 + x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9253 = x8615 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9254 = x9252 + x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9255 = x8617 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9256 = x8616 + x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9257 = x8618 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9258 = x9256 + x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9259 = x8619 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9260 = x9258 + x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9261 = x8620 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9262 = x9260 + x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9263 = x8621 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9264 = x9262 + x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9265 = x8622 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9266 = x9264 + x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9267 = x8623 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9268 = x9266 + x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9269 = x8624 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9270 = x9268 + x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9271 = x8625 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9272 = x9270 + x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9273 = x8626 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9274 = x9272 + x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9275 = x8627 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9276 = x9274 + x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9277 = x8628 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9278 = x9276 + x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9279 = x8629 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9280 = x9278 + x9279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9281 = x8630 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9282 = x9280 + x9281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9283 = x8631 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9284 = x9282 + x9283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9285 = x9006 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9286 = x9002 + x9285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9287 = x9009 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9288 = x9286 + x9287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9289 = x9012 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9290 = x9288 + x9289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9291 = x9015 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9292 = x9290 + x9291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9293 = x9018 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9294 = x9292 + x9293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9295 = x9021 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9296 = x9294 + x9295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9297 = x9024 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9298 = x9296 + x9297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9299 = x9027 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9300 = x9298 + x9299;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9301 = x9030 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9302 = x9300 + x9301;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9303 = x9033 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9304 = x9302 + x9303;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9305 = x9036 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9306 = x9304 + x9305;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9307 = x9039 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9308 = x9306 + x9307;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9309 = x9042 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9310 = x9308 + x9309;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9311 = x9045 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9312 = x9310 + x9311;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9313 = x9048 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9314 = x9312 + x9313;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9315 = x9054 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9316 = x9051 + x9315;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9317 = x9057 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9318 = x9316 + x9317;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9319 = x9060 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9320 = x9318 + x9319;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9321 = x9063 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9322 = x9320 + x9321;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9323 = x9066 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9324 = x9322 + x9323;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9325 = x9069 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9326 = x9324 + x9325;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9327 = x9072 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9328 = x9326 + x9327;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9329 = x9076 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9330 = x9328 + x9329;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9331 = x9080 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9332 = x9330 + x9331;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9333 = x9084 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9334 = x9332 + x9333;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9335 = x9088 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9336 = x9334 + x9335;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9337 = x9092 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9338 = x9336 + x9337;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9339 = x9096 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9340 = x9338 + x9339;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9341 = x9100 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9342 = x9340 + x9341;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9343 = x9104 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9344 = x9342 + x9343;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9345 = x9254 + x9314;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9346 = x9284 + x9344;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9347 = x9194 + x9345;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9348 = x9224 + x9346;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9349 = x9134 + x9347;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9350 = x9164 + x9348;
      // loc("cirgen/circuit/rv32im/sha.cpp":419:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9349);
        reg = x9349;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":419:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9350);
        reg = x9350;
      }
      if (x8512 != 0) {
        {
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9351 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9351 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9352 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9352 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9353 = x9352 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9354 = x9351 + x9353;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9355 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9356 = x9355 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9357 = x9354 + x9356;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9358 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9358 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9359 = x9358 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9360 = x9357 + x9359;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9361 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9361 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9362 = x9361 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9363 = x9360 + x9362;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9364 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9364 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9365 = x9364 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9366 = x9363 + x9365;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9367 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9367 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9368 = x9367 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9369 = x9366 + x9368;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9370 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9370 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9371 = x9370 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9372 = x9369 + x9371;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9373 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9373 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9374 = x9373 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9375 = x9372 + x9374;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9376 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9376 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9377 = x9376 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9378 = x9375 + x9377;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9379 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9379 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9380 = x9379 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9381 = x9378 + x9380;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9382 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9382 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9383 = x9382 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9384 = x9381 + x9383;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9385 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9385 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9386 = x9385 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9387 = x9384 + x9386;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9388 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9388 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9389 = x9388 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9390 = x9387 + x9389;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9391 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9391 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9392 = x9391 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9393 = x9390 + x9392;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9394 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9394 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9395 = x9394 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9396 = x9393 + x9395;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9397 = x87 - x9396;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9398 = x9397 * x11;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9398);
          reg = x9398;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9399 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9399 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9400 = Fp(x9399.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9400);
            reg = x9400;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9401 = Fp(x9399.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9402 = x9401 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9402);
            reg = x9402;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9403 = Fp(x9399.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9404 = x9403 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9404);
            reg = x9404;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9405 = Fp(x9399.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9406 = x9405 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9406);
            reg = x9406;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9407 = Fp(x9399.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9408 = x9407 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9408);
            reg = x9408;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9409 = Fp(x9399.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9410 = x9409 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9410);
            reg = x9410;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9411 = Fp(x9399.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9412 = x9411 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9412);
            reg = x9412;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9413 = Fp(x9399.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9414 = x9413 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9414);
            reg = x9414;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9415 = Fp(x9399.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9416 = x9415 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9416);
            reg = x9416;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9417 = Fp(x9399.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9418 = x9417 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9418);
            reg = x9418;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9419 = Fp(x9399.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9420 = x9419 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9420);
            reg = x9420;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9421 = Fp(x9399.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9422 = x9421 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9422);
            reg = x9422;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9423 = Fp(x9399.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9424 = x9423 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9424);
            reg = x9424;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9425 = Fp(x9399.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9426 = x9425 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9426);
            reg = x9426;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9427 = Fp(x9399.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9428 = x9427 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9428);
            reg = x9428;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9429 = Fp(x9399.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9430 = x9429 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9430);
            reg = x9430;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9431 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9431 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9432 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9432 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9433 = x9432 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9434 = x9431 + x9433;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9435 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9435 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9436 = x9435 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9437 = x9434 + x9436;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9438 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9438 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9439 = x9438 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9440 = x9437 + x9439;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9441 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9441 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9442 = x9441 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9443 = x9440 + x9442;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9444 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9444 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9445 = x9444 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9446 = x9443 + x9445;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9447 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9447 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9448 = x9447 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9449 = x9446 + x9448;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9450 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9450 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9451 = x9450 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9452 = x9449 + x9451;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9453 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9453 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9454 = x9453 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9455 = x9452 + x9454;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9456 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9456 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9457 = x9456 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9458 = x9455 + x9457;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9459 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9459 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9460 = x9459 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9461 = x9458 + x9460;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9462 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9462 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9463 = x9462 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9464 = x9461 + x9463;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9465 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9465 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9466 = x9465 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9467 = x9464 + x9466;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9468 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9468 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9469 = x9468 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9470 = x9467 + x9469;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9471 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9471 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9472 = x9471 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9473 = x9470 + x9472;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9474 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9474 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9475 = x9474 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9476 = x9473 + x9475;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9477 = x9399 - x9476;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9478 = x9477 * x11;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9478);
          reg = x9478;
        }
      }
      if (x8513 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg10"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9479 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x9479 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg11"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9480 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x9480 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9481 = Fp(x9479.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9481);
            reg = x9481;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9482 = Fp(x9479.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9483 = x9482 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9483);
            reg = x9483;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9484 = Fp(x9479.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9485 = x9484 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9485);
            reg = x9485;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9486 = Fp(x9479.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9487 = x9486 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9487);
            reg = x9487;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9488 = Fp(x9479.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9489 = x9488 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9489);
            reg = x9489;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9490 = Fp(x9479.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9491 = x9490 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9491);
            reg = x9491;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9492 = Fp(x9479.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9493 = x9492 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9493);
            reg = x9493;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9494 = Fp(x9479.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9495 = x9494 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9495);
            reg = x9495;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9496 = Fp(x9479.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9497 = x9496 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9497);
            reg = x9497;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9498 = Fp(x9479.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9499 = x9498 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9499);
            reg = x9499;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9500 = Fp(x9479.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9501 = x9500 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9501);
            reg = x9501;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9502 = Fp(x9479.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9503 = x9502 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9503);
            reg = x9503;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9504 = Fp(x9479.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9505 = x9504 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9505);
            reg = x9505;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9506 = Fp(x9479.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9507 = x9506 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9507);
            reg = x9507;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9508 = Fp(x9479.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9509 = x9508 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9509);
            reg = x9509;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9510 = Fp(x9479.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9511 = x9510 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9511);
            reg = x9511;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9512 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9513 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9513 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9514 = x9513 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9515 = x9512 + x9514;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9516 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9516 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9517 = x9516 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9518 = x9515 + x9517;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9519 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9519 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9520 = x9519 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9521 = x9518 + x9520;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9522 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9522 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9523 = x9522 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9524 = x9521 + x9523;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9525 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9525 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9526 = x9525 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9527 = x9524 + x9526;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9528 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9528 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9529 = x9528 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9530 = x9527 + x9529;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9531 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9531 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9532 = x9531 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9533 = x9530 + x9532;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9534 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9534 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9535 = x9534 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9536 = x9533 + x9535;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9537 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9537 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9538 = x9537 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9539 = x9536 + x9538;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9540 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9540 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9541 = x9540 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9542 = x9539 + x9541;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9543 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9543 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9544 = x9543 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9545 = x9542 + x9544;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9546 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9546 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9547 = x9546 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9548 = x9545 + x9547;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9549 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9549 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9550 = x9549 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9551 = x9548 + x9550;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9552 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9552 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9553 = x9552 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9554 = x9551 + x9553;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9555 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9555 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9556 = x9555 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9557 = x9554 + x9556;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9558 = x9479 - x9557;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9559 = x9558 * x11;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9559);
          reg = x9559;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9560 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9560 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9561 = x9480 + x9560;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9562 = Fp(x9561.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9562);
            reg = x9562;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9563 = Fp(x9561.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9564 = x9563 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9564);
            reg = x9564;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9565 = Fp(x9561.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9566 = x9565 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9566);
            reg = x9566;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9567 = Fp(x9561.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9568 = x9567 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9568);
            reg = x9568;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9569 = Fp(x9561.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9570 = x9569 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9570);
            reg = x9570;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9571 = Fp(x9561.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9572 = x9571 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9572);
            reg = x9572;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9573 = Fp(x9561.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9574 = x9573 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9574);
            reg = x9574;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9575 = Fp(x9561.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9576 = x9575 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9576);
            reg = x9576;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9577 = Fp(x9561.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9578 = x9577 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9578);
            reg = x9578;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9579 = Fp(x9561.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9580 = x9579 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9580);
            reg = x9580;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9581 = Fp(x9561.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9582 = x9581 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9582);
            reg = x9582;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9583 = Fp(x9561.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9584 = x9583 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9584);
            reg = x9584;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9585 = Fp(x9561.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9586 = x9585 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9586);
            reg = x9586;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9587 = Fp(x9561.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9588 = x9587 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9588);
            reg = x9588;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9589 = Fp(x9561.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9590 = x9589 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9590);
            reg = x9590;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9591 = Fp(x9561.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9592 = x9591 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9592);
            reg = x9592;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9593 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9593 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9594 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9594 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9595 = x9594 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9596 = x9593 + x9595;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9597 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9597 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9598 = x9597 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9599 = x9596 + x9598;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9600 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9600 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9601 = x9600 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9602 = x9599 + x9601;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9603 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9603 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9604 = x9603 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9605 = x9602 + x9604;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9606 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9606 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9607 = x9606 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9608 = x9605 + x9607;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9609 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9609 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9610 = x9609 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9611 = x9608 + x9610;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9612 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9612 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9613 = x9612 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9614 = x9611 + x9613;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9615 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9615 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9616 = x9615 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9617 = x9614 + x9616;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9618 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9618 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9619 = x9618 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9620 = x9617 + x9619;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9621 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9621 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9622 = x9621 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9623 = x9620 + x9622;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9624 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9624 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9625 = x9624 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9626 = x9623 + x9625;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9627 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9627 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9628 = x9627 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9629 = x9626 + x9628;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9630 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9631 = x9630 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9632 = x9629 + x9631;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9633 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9633 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9634 = x9633 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9635 = x9632 + x9634;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9636 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9637 = x9636 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9638 = x9635 + x9637;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9639 = x9561 - x9638;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9640 = x9639 * x11;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9640);
          reg = x9640;
        }
      }
      if (x8512 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9641 = args[2][148 * steps + ((cycle - 4) & mask)];
        assert(x9641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9642 = args[2][149 * steps + ((cycle - 4) & mask)];
        assert(x9642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9643 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x9643 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9644 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x9644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9645 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x9645 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9646 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x9646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9647 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x9647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9648 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x9648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9649 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x9649 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9650 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x9650 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9651 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x9651 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9652 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9652 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9653 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9654 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9654 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9655 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9655 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9656 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9656 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9657 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9657 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9658 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9658 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9659 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9659 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9660 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9660 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9661 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9661 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9662 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9662 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9663 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9663 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9664 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9664 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9665 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9665 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9666 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9666 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9667 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9667 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9668 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9668 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9669 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9669 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9670 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9670 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9671 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9671 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9672 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9672 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9673 = x9642 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9674 = x9641 + x9673;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9675 = x9643 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9676 = x9674 + x9675;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9677 = x9644 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9678 = x9676 + x9677;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9679 = x9645 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9680 = x9678 + x9679;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9681 = x9646 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9682 = x9680 + x9681;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9683 = x9647 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9684 = x9682 + x9683;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9685 = x9648 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9686 = x9684 + x9685;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9687 = x9649 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9688 = x9686 + x9687;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9689 = x9650 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9690 = x9688 + x9689;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9691 = x9651 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9692 = x9690 + x9691;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9693 = x9652 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9694 = x9692 + x9693;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9695 = x9653 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9696 = x9694 + x9695;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9697 = x9654 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9698 = x9696 + x9697;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9699 = x9655 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9700 = x9698 + x9699;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9701 = x9656 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9702 = x9700 + x9701;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9703 = x9658 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9704 = x9657 + x9703;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9705 = x9659 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9706 = x9704 + x9705;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9707 = x9660 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9708 = x9706 + x9707;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9709 = x9661 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9710 = x9708 + x9709;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9711 = x9662 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9712 = x9710 + x9711;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9713 = x9663 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9714 = x9712 + x9713;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9715 = x9664 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9716 = x9714 + x9715;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9717 = x9665 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9718 = x9716 + x9717;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9719 = x9666 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9720 = x9718 + x9719;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9721 = x9667 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9722 = x9720 + x9721;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9723 = x9668 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9724 = x9722 + x9723;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9725 = x9669 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9726 = x9724 + x9725;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9727 = x9670 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9728 = x9726 + x9727;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9729 = x9671 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9730 = x9728 + x9729;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9731 = x9672 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9732 = x9730 + x9731;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9733 = args[2][148 * steps + ((cycle - 68) & mask)];
        assert(x9733 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9734 = args[2][149 * steps + ((cycle - 68) & mask)];
        assert(x9734 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9735 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x9735 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9736 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x9736 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9737 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x9737 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9738 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x9738 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9739 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x9739 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9740 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x9740 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9741 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x9741 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9742 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x9742 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9743 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x9743 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9744 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9744 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9745 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9745 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9746 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9746 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9747 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9747 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9748 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9748 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9749 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9749 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9750 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9750 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9751 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9751 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9752 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9752 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9753 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9753 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9754 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9754 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9755 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9755 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9756 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9756 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9757 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9757 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9758 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9758 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9759 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9759 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9760 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9760 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9761 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9761 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9762 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9762 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9763 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9763 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9764 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9764 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9765 = x9734 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9766 = x9733 + x9765;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9767 = x9735 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9768 = x9766 + x9767;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9769 = x9736 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9770 = x9768 + x9769;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9771 = x9737 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9772 = x9770 + x9771;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9773 = x9738 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9774 = x9772 + x9773;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9775 = x9739 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9776 = x9774 + x9775;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9777 = x9740 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9778 = x9776 + x9777;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9779 = x9741 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9780 = x9778 + x9779;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9781 = x9742 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9782 = x9780 + x9781;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9783 = x9743 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9784 = x9782 + x9783;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9785 = x9744 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9786 = x9784 + x9785;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9787 = x9745 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9788 = x9786 + x9787;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9789 = x9746 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9790 = x9788 + x9789;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9791 = x9747 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9792 = x9790 + x9791;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9793 = x9748 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9794 = x9792 + x9793;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9795 = x9750 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9796 = x9749 + x9795;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9797 = x9751 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9798 = x9796 + x9797;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9799 = x9752 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9800 = x9798 + x9799;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9801 = x9753 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9802 = x9800 + x9801;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9803 = x9754 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9804 = x9802 + x9803;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9805 = x9755 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9806 = x9804 + x9805;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9807 = x9756 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9808 = x9806 + x9807;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9809 = x9757 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9810 = x9808 + x9809;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9811 = x9758 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9812 = x9810 + x9811;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9813 = x9759 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9814 = x9812 + x9813;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9815 = x9760 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9816 = x9814 + x9815;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9817 = x9761 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9818 = x9816 + x9817;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9819 = x9762 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9820 = x9818 + x9819;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9821 = x9763 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9822 = x9820 + x9821;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9823 = x9764 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9824 = x9822 + x9823;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9825 = x9702 + x9794;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9826 = x9732 + x9824;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9827 = Fp(x9825.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9827);
            reg = x9827;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9828 = Fp(x9825.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9829 = x9828 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9829);
            reg = x9829;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9830 = Fp(x9825.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9831 = x9830 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9831);
            reg = x9831;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9832 = Fp(x9825.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9833 = x9832 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9833);
            reg = x9833;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9834 = Fp(x9825.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9835 = x9834 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9835);
            reg = x9835;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9836 = Fp(x9825.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9837 = x9836 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9837);
            reg = x9837;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9838 = Fp(x9825.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9839 = x9838 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9839);
            reg = x9839;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9840 = Fp(x9825.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9841 = x9840 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9841);
            reg = x9841;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9842 = Fp(x9825.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9843 = x9842 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9843);
            reg = x9843;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9844 = Fp(x9825.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9845 = x9844 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9845);
            reg = x9845;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9846 = Fp(x9825.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9847 = x9846 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9847);
            reg = x9847;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9848 = Fp(x9825.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9849 = x9848 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9849);
            reg = x9849;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9850 = Fp(x9825.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9851 = x9850 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9851);
            reg = x9851;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9852 = Fp(x9825.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9853 = x9852 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9853);
            reg = x9853;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9854 = Fp(x9825.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9855 = x9854 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9855);
            reg = x9855;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9856 = Fp(x9825.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9857 = x9856 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9857);
            reg = x9857;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9858 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x9858 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9859 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x9859 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9860 = x9859 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9861 = x9858 + x9860;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9862 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x9862 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9863 = x9862 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9864 = x9861 + x9863;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9865 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x9865 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9866 = x9865 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9867 = x9864 + x9866;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9868 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x9868 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9869 = x9868 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9870 = x9867 + x9869;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9871 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x9871 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9872 = x9871 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9873 = x9870 + x9872;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9874 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x9874 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9875 = x9874 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9876 = x9873 + x9875;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9877 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x9877 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9878 = x9877 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9879 = x9876 + x9878;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9880 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x9880 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9881 = x9880 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9882 = x9879 + x9881;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9883 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9883 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9884 = x9883 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9885 = x9882 + x9884;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9886 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9886 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9887 = x9886 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9888 = x9885 + x9887;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9889 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9889 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9890 = x9889 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9891 = x9888 + x9890;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9892 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9892 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9893 = x9892 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9894 = x9891 + x9893;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9895 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9895 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9896 = x9895 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9897 = x9894 + x9896;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9898 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9898 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9899 = x9898 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9900 = x9897 + x9899;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9901 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9901 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9902 = x9901 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9903 = x9900 + x9902;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9904 = x9825 - x9903;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9905 = x9904 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9906 = Fp(x9905.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9906);
            reg = x9906;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9907 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x9907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9908 = x9905 - x9907;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x9909 = x9908 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9910 = x88 - x9909;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9911 = x9909 * x9910;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9911 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x9912 = x9826 + x9905;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9913 = Fp(x9912.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9913);
            reg = x9913;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9914 = Fp(x9912.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9915 = x9914 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9915);
            reg = x9915;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9916 = Fp(x9912.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9917 = x9916 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9917);
            reg = x9917;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9918 = Fp(x9912.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9919 = x9918 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9919);
            reg = x9919;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9920 = Fp(x9912.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9921 = x9920 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9921);
            reg = x9921;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9922 = Fp(x9912.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9923 = x9922 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9923);
            reg = x9923;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9924 = Fp(x9912.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9925 = x9924 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9925);
            reg = x9925;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9926 = Fp(x9912.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9927 = x9926 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9927);
            reg = x9927;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9928 = Fp(x9912.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9929 = x9928 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9929);
            reg = x9929;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9930 = Fp(x9912.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9931 = x9930 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9931);
            reg = x9931;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9932 = Fp(x9912.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9933 = x9932 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9933);
            reg = x9933;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9934 = Fp(x9912.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9935 = x9934 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9935);
            reg = x9935;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9936 = Fp(x9912.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9937 = x9936 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9937);
            reg = x9937;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9938 = Fp(x9912.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9939 = x9938 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9939);
            reg = x9939;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9940 = Fp(x9912.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9941 = x9940 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9941);
            reg = x9941;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9942 = Fp(x9912.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9943 = x9942 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9943);
            reg = x9943;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9944 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9944 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9945 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9945 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9946 = x9945 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9947 = x9944 + x9946;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9948 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9948 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9949 = x9948 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9950 = x9947 + x9949;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9951 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9951 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9952 = x9951 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9953 = x9950 + x9952;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9954 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x9954 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9955 = x9954 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9956 = x9953 + x9955;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9957 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x9957 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9958 = x9957 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9959 = x9956 + x9958;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9960 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x9960 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9961 = x9960 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9962 = x9959 + x9961;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9963 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x9963 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9964 = x9963 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9965 = x9962 + x9964;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9966 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x9966 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9967 = x9966 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9968 = x9965 + x9967;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9969 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x9969 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9970 = x9969 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9971 = x9968 + x9970;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9972 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x9972 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9973 = x9972 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9974 = x9971 + x9973;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9975 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x9975 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9976 = x9975 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9977 = x9974 + x9976;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9978 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x9978 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9979 = x9978 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9980 = x9977 + x9979;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9981 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x9981 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9982 = x9981 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9983 = x9980 + x9982;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9984 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x9984 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9985 = x9984 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9986 = x9983 + x9985;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9987 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x9987 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9988 = x9987 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9989 = x9986 + x9988;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9990 = x9912 - x9989;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9991 = x9990 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x9992 = Fp(x9991.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9992);
            reg = x9992;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9993 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9993 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x9994 = x9991 - x9993;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x9995 = x9994 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x9996 = x88 - x9995;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x9997 = x9995 * x9996;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x9997 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9998 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9998 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x9999 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9999 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10000 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x10000 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10001 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x10001 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10002 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x10002 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10003 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x10003 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10004 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x10004 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10005 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x10005 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10006 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x10006 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10007 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x10007 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10008 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x10008 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10009 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x10009 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10010 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x10010 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10011 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x10011 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10012 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x10012 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10013 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x10013 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10014 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x10014 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10015 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x10015 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10016 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x10016 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10017 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x10017 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10018 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x10018 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10019 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x10019 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10020 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x10020 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10021 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x10021 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10022 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x10022 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10023 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x10023 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10024 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x10024 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10025 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x10025 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10026 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x10026 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10027 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10027 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10028 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10028 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10029 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10029 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10030 = x9999 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10031 = x9998 + x10030;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10032 = x10000 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10033 = x10031 + x10032;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10034 = x10001 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10035 = x10033 + x10034;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10036 = x10002 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10037 = x10035 + x10036;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10038 = x10003 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10039 = x10037 + x10038;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10040 = x10004 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10041 = x10039 + x10040;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10042 = x10005 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10043 = x10041 + x10042;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10044 = x10006 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10045 = x10043 + x10044;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10046 = x10007 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10047 = x10045 + x10046;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10048 = x10008 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10049 = x10047 + x10048;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10050 = x10009 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10051 = x10049 + x10050;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10052 = x10010 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10053 = x10051 + x10052;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10054 = x10011 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10055 = x10053 + x10054;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10056 = x10012 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10057 = x10055 + x10056;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10058 = x10013 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10059 = x10057 + x10058;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10060 = x10015 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10061 = x10014 + x10060;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10062 = x10016 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10063 = x10061 + x10062;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10064 = x10017 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10065 = x10063 + x10064;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10066 = x10018 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10067 = x10065 + x10066;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10068 = x10019 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10069 = x10067 + x10068;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10070 = x10020 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10071 = x10069 + x10070;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10072 = x10021 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10073 = x10071 + x10072;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10074 = x10022 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10075 = x10073 + x10074;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10076 = x10023 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10077 = x10075 + x10076;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10078 = x10024 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10079 = x10077 + x10078;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10080 = x10025 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10081 = x10079 + x10080;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10082 = x10026 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10083 = x10081 + x10082;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10084 = x10027 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10085 = x10083 + x10084;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10086 = x10028 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10087 = x10085 + x10086;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10088 = x10029 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10089 = x10087 + x10088;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10090 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x10090 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10091 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x10091 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10092 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x10092 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10093 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10093 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10094 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10094 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10095 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10095 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10096 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10096 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10097 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10097 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10098 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10098 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10099 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10099 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10100 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10100 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10101 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10101 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10102 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10102 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10103 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10103 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10104 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10104 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10105 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10105 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10106 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10106 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10107 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10107 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10108 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10108 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10109 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10109 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10110 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10110 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10111 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10111 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10112 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10112 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10113 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10113 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10114 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10114 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10115 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10115 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10116 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10116 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10117 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10117 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10118 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10118 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10119 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10119 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10120 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10120 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10121 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10121 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10122 = x10091 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10123 = x10090 + x10122;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10124 = x10092 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10125 = x10123 + x10124;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10126 = x10093 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10127 = x10125 + x10126;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10128 = x10094 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10129 = x10127 + x10128;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10130 = x10095 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10131 = x10129 + x10130;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10132 = x10096 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10133 = x10131 + x10132;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10134 = x10097 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10135 = x10133 + x10134;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10136 = x10098 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10137 = x10135 + x10136;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10138 = x10099 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10139 = x10137 + x10138;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10140 = x10100 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10141 = x10139 + x10140;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10142 = x10101 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10143 = x10141 + x10142;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10144 = x10102 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10145 = x10143 + x10144;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10146 = x10103 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10147 = x10145 + x10146;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10148 = x10104 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10149 = x10147 + x10148;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10150 = x10105 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10151 = x10149 + x10150;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10152 = x10107 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10153 = x10106 + x10152;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10154 = x10108 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10155 = x10153 + x10154;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10156 = x10109 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10157 = x10155 + x10156;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10158 = x10110 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10159 = x10157 + x10158;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10160 = x10111 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10161 = x10159 + x10160;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10162 = x10112 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10163 = x10161 + x10162;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10164 = x10113 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10165 = x10163 + x10164;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10166 = x10114 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10167 = x10165 + x10166;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10168 = x10115 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10169 = x10167 + x10168;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10170 = x10116 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10171 = x10169 + x10170;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10172 = x10117 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10173 = x10171 + x10172;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10174 = x10118 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10175 = x10173 + x10174;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10176 = x10119 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10177 = x10175 + x10176;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10178 = x10120 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10179 = x10177 + x10178;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10180 = x10121 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10181 = x10179 + x10180;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10182 = x10059 + x10151;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10183 = x10089 + x10181;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10184 = Fp(x10182.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10184);
            reg = x10184;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10185 = Fp(x10182.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10186 = x10185 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10186);
            reg = x10186;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10187 = Fp(x10182.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10188 = x10187 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10188);
            reg = x10188;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10189 = Fp(x10182.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10190 = x10189 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10190);
            reg = x10190;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10191 = Fp(x10182.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10192 = x10191 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10192);
            reg = x10192;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10193 = Fp(x10182.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10194 = x10193 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10194);
            reg = x10194;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10195 = Fp(x10182.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10196 = x10195 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10196);
            reg = x10196;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10197 = Fp(x10182.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10198 = x10197 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10198);
            reg = x10198;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10199 = Fp(x10182.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10200 = x10199 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10200);
            reg = x10200;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10201 = Fp(x10182.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10202 = x10201 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10202);
            reg = x10202;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10203 = Fp(x10182.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10204 = x10203 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10204);
            reg = x10204;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10205 = Fp(x10182.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10206 = x10205 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10206);
            reg = x10206;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10207 = Fp(x10182.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10208 = x10207 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10208);
            reg = x10208;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10209 = Fp(x10182.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10210 = x10209 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10210);
            reg = x10210;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10211 = Fp(x10182.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10212 = x10211 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10212);
            reg = x10212;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10213 = Fp(x10182.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10214 = x10213 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10214);
            reg = x10214;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10215 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x10215 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10216 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x10216 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10217 = x10216 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10218 = x10215 + x10217;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10219 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10219 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10220 = x10219 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10221 = x10218 + x10220;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10222 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10222 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10223 = x10222 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10224 = x10221 + x10223;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10225 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10225 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10226 = x10225 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10227 = x10224 + x10226;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10228 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10228 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10229 = x10228 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10230 = x10227 + x10229;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10231 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10231 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10232 = x10231 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10233 = x10230 + x10232;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10234 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10234 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10235 = x10234 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10236 = x10233 + x10235;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10237 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10238 = x10237 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10239 = x10236 + x10238;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10240 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10241 = x10240 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10242 = x10239 + x10241;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10243 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10243 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10244 = x10243 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10245 = x10242 + x10244;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10246 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10246 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10247 = x10246 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10248 = x10245 + x10247;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10249 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10249 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10250 = x10249 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10251 = x10248 + x10250;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10252 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10252 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10253 = x10252 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10254 = x10251 + x10253;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10255 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10255 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10256 = x10255 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10257 = x10254 + x10256;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10258 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10258 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10259 = x10258 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10260 = x10257 + x10259;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10261 = x10182 - x10260;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10262 = x10261 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10263 = Fp(x10262.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10263);
            reg = x10263;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10264 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x10264 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10265 = x10262 - x10264;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10266 = x10265 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10267 = x88 - x10266;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10268 = x10266 * x10267;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10268 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10269 = x10183 + x10262;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10270 = Fp(x10269.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10270);
            reg = x10270;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10271 = Fp(x10269.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10272 = x10271 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10272);
            reg = x10272;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10273 = Fp(x10269.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10274 = x10273 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10274);
            reg = x10274;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10275 = Fp(x10269.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10276 = x10275 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10276);
            reg = x10276;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10277 = Fp(x10269.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10278 = x10277 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10278);
            reg = x10278;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10279 = Fp(x10269.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10280 = x10279 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10280);
            reg = x10280;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10281 = Fp(x10269.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10282 = x10281 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10282);
            reg = x10282;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10283 = Fp(x10269.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10284 = x10283 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10284);
            reg = x10284;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10285 = Fp(x10269.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10286 = x10285 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10286);
            reg = x10286;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10287 = Fp(x10269.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10288 = x10287 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10288);
            reg = x10288;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10289 = Fp(x10269.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10290 = x10289 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10290);
            reg = x10290;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10291 = Fp(x10269.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10292 = x10291 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10292);
            reg = x10292;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10293 = Fp(x10269.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10294 = x10293 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10294);
            reg = x10294;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10295 = Fp(x10269.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10296 = x10295 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10296);
            reg = x10296;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10297 = Fp(x10269.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10298 = x10297 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10298);
            reg = x10298;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10299 = Fp(x10269.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10300 = x10299 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10300);
            reg = x10300;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10301 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10301 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10302 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10302 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10303 = x10302 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10304 = x10301 + x10303;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10305 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10305 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10306 = x10305 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10307 = x10304 + x10306;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10308 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10308 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10309 = x10308 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10310 = x10307 + x10309;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10311 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10311 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10312 = x10311 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10313 = x10310 + x10312;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10314 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10314 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10315 = x10314 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10316 = x10313 + x10315;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10317 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10317 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10318 = x10317 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10319 = x10316 + x10318;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10320 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10320 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10321 = x10320 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10322 = x10319 + x10321;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10323 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10323 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10324 = x10323 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10325 = x10322 + x10324;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10326 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10326 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10327 = x10326 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10328 = x10325 + x10327;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10329 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10329 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10330 = x10329 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10331 = x10328 + x10330;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10332 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10332 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10333 = x10332 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10334 = x10331 + x10333;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10335 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10335 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10336 = x10335 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10337 = x10334 + x10336;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10338 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10338 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10339 = x10338 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10340 = x10337 + x10339;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10341 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10341 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10342 = x10341 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10343 = x10340 + x10342;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10344 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10344 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10345 = x10344 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10346 = x10343 + x10345;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10347 = x10269 - x10346;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10348 = x10347 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10349 = Fp(x10348.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10349);
            reg = x10349;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10350 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x10350 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10351 = x10348 - x10350;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10352 = x10351 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10353 = x88 - x10352;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10354 = x10352 * x10353;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10354 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x10355 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x10355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":379:25)
        auto x10356 = x10355 + x8504;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10357 = x9883 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10358 = x9880 + x10357;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10359 = x9969 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10360 = x9966 + x10359;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10361 = x9886 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10362 = x10358 + x10361;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10363 = x9972 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10364 = x10360 + x10363;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10365 = x9889 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10366 = x10362 + x10365;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10367 = x9975 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10368 = x10364 + x10367;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10369 = x9892 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10370 = x10366 + x10369;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10371 = x9978 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10372 = x10368 + x10371;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10373 = x9895 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10374 = x10370 + x10373;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10375 = x9981 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10376 = x10372 + x10375;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10377 = x9898 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10378 = x10374 + x10377;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10379 = x9984 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10380 = x10376 + x10379;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10381 = x9901 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10382 = x10378 + x10381;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10383 = x9987 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10384 = x10380 + x10383;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9879);
          reg = x9879;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10382);
          reg = x10382;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9965);
          reg = x9965;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10384);
          reg = x10384;
        }
        {
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10385 = args[2][110 * steps + ((cycle - 0) & mask)];
          assert(x10385 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10386 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10386 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10387 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10387 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10388 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10388 != Fp::invalid());
          host_args.at(0) = x10356;
          host_args.at(1) = x10385;
          host_args.at(2) = x10386;
          host_args.at(3) = x10387;
          host_args.at(4) = x10388;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10389 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x10389 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10390 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x10390 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10391 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x10391 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10392 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x10392 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][107 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10356);
          reg = x10356;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8496);
          reg = x8496;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10389);
          reg = x10389;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10390);
          reg = x10390;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10391);
          reg = x10391;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10392);
          reg = x10392;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":380:25)
        auto x10393 = x10355 + x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":380:25)
        auto x10394 = x10393 + x8504;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10395 = x10240 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10396 = x10237 + x10395;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10397 = x10326 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10398 = x10323 + x10397;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10399 = x10243 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10400 = x10396 + x10399;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10401 = x10329 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10402 = x10398 + x10401;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10403 = x10246 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10404 = x10400 + x10403;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10405 = x10332 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10406 = x10402 + x10405;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10407 = x10249 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10408 = x10404 + x10407;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10409 = x10335 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10410 = x10406 + x10409;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10411 = x10252 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10412 = x10408 + x10411;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10413 = x10338 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10414 = x10410 + x10413;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10415 = x10255 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10416 = x10412 + x10415;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10417 = x10341 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10418 = x10414 + x10417;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10419 = x10258 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10420 = x10416 + x10419;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:37)
        auto x10421 = x10344 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":147:22)
        auto x10422 = x10418 + x10421;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10236);
          reg = x10236;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10420);
          reg = x10420;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10322);
          reg = x10322;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10422);
          reg = x10422;
        }
        {
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10423 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x10423 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10424 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10424 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10425 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10425 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x10426 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10426 != Fp::invalid());
          host_args.at(0) = x10394;
          host_args.at(1) = x10423;
          host_args.at(2) = x10424;
          host_args.at(3) = x10425;
          host_args.at(4) = x10426;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10427 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x10427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10428 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x10428 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10429 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x10429 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x10430 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x10430 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10394);
          reg = x10394;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8496);
          reg = x8496;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10427);
          reg = x10427;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10428);
          reg = x10428;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10429);
          reg = x10429;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x10430);
          reg = x10430;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10431 = args[2][148 * steps + ((cycle - 1) & mask)];
      assert(x10431 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10432 = args[2][149 * steps + ((cycle - 1) & mask)];
      assert(x10432 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10433 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x10433 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10434 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x10434 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10435 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x10435 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10436 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x10436 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10437 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x10437 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10438 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x10438 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10439 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x10439 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10440 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x10440 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10441 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x10441 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10442 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10442 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10443 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10443 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10444 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10444 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10445 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10445 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10446 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10446 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10447 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10447 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10448 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10448 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10449 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10449 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10450 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10450 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10451 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10451 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10452 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10452 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10453 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10453 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10454 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10454 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10455 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10455 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10456 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10456 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10457 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10457 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10458 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10458 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10459 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10459 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10460 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10460 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10461 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10461 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10462 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10462 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10463 = args[2][148 * steps + ((cycle - 2) & mask)];
      assert(x10463 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10464 = args[2][149 * steps + ((cycle - 2) & mask)];
      assert(x10464 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10465 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x10465 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10466 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x10466 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10467 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x10467 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10468 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x10468 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10469 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x10469 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10470 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x10470 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10471 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x10471 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10472 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x10472 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10473 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x10473 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10474 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10474 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10475 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10475 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10476 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10476 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10477 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10477 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10478 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10478 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10479 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10479 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10480 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10480 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10481 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10481 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10482 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10482 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10483 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10483 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10484 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10484 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10485 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10485 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10486 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10486 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10487 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10487 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10488 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10488 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10489 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10489 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10490 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10490 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10491 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10491 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10492 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10492 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10493 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10493 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10494 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10494 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10495 = args[2][148 * steps + ((cycle - 3) & mask)];
      assert(x10495 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10496 = args[2][149 * steps + ((cycle - 3) & mask)];
      assert(x10496 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10497 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x10497 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10498 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x10498 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10499 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x10499 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10500 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x10500 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10501 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x10501 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10502 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x10502 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10503 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x10503 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10504 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x10504 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10505 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x10505 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10506 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10506 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10507 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10507 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10508 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10508 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10509 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10510 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10510 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10511 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10511 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10512 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10512 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10513 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10513 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10514 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10514 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10515 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10515 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10516 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10517 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10517 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10518 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10518 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10519 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10519 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10520 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10520 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10521 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10521 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10522 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10523 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10524 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10525 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10526 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10527 = args[2][148 * steps + ((cycle - 4) & mask)];
      assert(x10527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10528 = args[2][149 * steps + ((cycle - 4) & mask)];
      assert(x10528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10529 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x10529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10530 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x10530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10531 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x10531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10532 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x10532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10533 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x10533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10534 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x10534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10535 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x10535 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10536 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x10536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10537 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x10537 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10538 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10539 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10540 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10541 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10542 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10543 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10544 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10545 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10546 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10547 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10548 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10549 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10550 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10551 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10552 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10553 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10554 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x10554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10555 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x10555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10556 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x10556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10557 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x10557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10558 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x10558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10559 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10560 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10561 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10562 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10563 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10564 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10565 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10566 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10567 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10568 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10569 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10570 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x10570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10571 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x10571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10572 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x10572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10573 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x10573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10574 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x10574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10575 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x10575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10576 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x10576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10577 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x10577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10578 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x10578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10579 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x10579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10580 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x10580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10581 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x10581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10582 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x10582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10583 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x10583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10584 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x10584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10585 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x10585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10586 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x10586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10587 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x10587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10588 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x10588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10589 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x10589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10590 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x10590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10591 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10592 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10593 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10594 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10595 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10596 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10597 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10598 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10599 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10600 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10601 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10602 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x10602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10603 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x10603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10604 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x10604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10605 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x10605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10606 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x10606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10607 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x10607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10608 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x10608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10609 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x10609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10610 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x10610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10611 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x10611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10612 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x10612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10613 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x10613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10614 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x10614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10615 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x10615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10616 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x10616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10617 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x10617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10618 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x10618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10619 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x10619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10620 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x10620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10621 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x10621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10622 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x10622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10623 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10624 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10625 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10626 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10627 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10628 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10629 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10630 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10631 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10632 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10633 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x10633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10634 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x10634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10635 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x10635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10636 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x10636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10637 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x10637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10638 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x10638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10639 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x10639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10640 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x10640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10641 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x10641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10642 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x10642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10643 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x10643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10644 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x10644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10645 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x10645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10646 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x10646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10647 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x10647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10648 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x10648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10649 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x10649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10650 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x10650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10651 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x10651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10652 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x10652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10653 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x10653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10654 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x10654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10655 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x10655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10656 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x10656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10657 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x10657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10658 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x10658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10659 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x10659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10660 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x10660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10661 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x10661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10662 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x10662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10663 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x10663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10664 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x10664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10665 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x10665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10666 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x10666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10667 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x10667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10668 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x10668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10669 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x10669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10670 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x10670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10671 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x10671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10672 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x10672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10673 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x10673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10674 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x10674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10675 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x10675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10676 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x10676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10677 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x10677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10678 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x10678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10679 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x10679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10680 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x10680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10681 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x10681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10682 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x10682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10683 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x10683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10684 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x10684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10685 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x10685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10686 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x10686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10687 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x10687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10688 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x10688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10689 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x10689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10690 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x10690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10691 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x10691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10692 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x10692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10693 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x10693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10694 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x10694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10695 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x10695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10696 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x10696 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10697 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x10697 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10698 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x10698 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement5/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10699 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x10699 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10700 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x10700 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement6/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10701 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x10701 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10702 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x10702 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10703 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x10703 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10704 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x10704 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement8/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10705 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x10705 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10706 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x10706 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement9/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10707 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x10707 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10708 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x10708 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement10/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10709 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x10709 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10710 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x10710 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement11/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10711 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x10711 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10712 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x10712 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement12/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10713 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x10713 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10714 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x10714 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement13/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10715 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x10715 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10716 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x10716 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement14/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10717 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x10717 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10718 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x10718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10719 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x10719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10720 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x10720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10721 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x10721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x10722 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x10722 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x10723 = x10720 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x10724 = x10719 + x10723;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x10725 = x10722 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x10726 = x10721 + x10725;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10727 = x10444 + x10453;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10728 = x10444 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10729 = x10728 * x10453;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10730 = x10727 - x10729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10731 = x10445 + x10454;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10732 = x10445 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10733 = x10732 * x10454;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10734 = x10731 - x10733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10735 = x10446 + x10455;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10736 = x10446 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10737 = x10736 * x10455;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10738 = x10735 - x10737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10739 = x10447 + x10456;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10740 = x10447 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10741 = x10740 * x10456;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10742 = x10739 - x10741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10743 = x10448 + x10457;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10744 = x10448 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10745 = x10744 * x10457;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10746 = x10743 - x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10747 = x10449 + x10458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10748 = x10449 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10749 = x10748 * x10458;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10750 = x10747 - x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10751 = x10450 + x10459;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10752 = x10450 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10753 = x10752 * x10459;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10754 = x10751 - x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10755 = x10451 + x10460;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10756 = x10451 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10757 = x10756 * x10460;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10758 = x10755 - x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10759 = x10452 + x10461;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10760 = x10452 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10761 = x10760 * x10461;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10762 = x10759 - x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10763 = x10453 + x10462;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10764 = x10453 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10765 = x10764 * x10462;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10766 = x10763 - x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10767 = x10454 + x10431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10768 = x10454 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10769 = x10768 * x10431;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10770 = x10767 - x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10771 = x10455 + x10432;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10772 = x10455 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10773 = x10772 * x10432;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10774 = x10771 - x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10775 = x10456 + x10433;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10776 = x10456 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10777 = x10776 * x10433;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10778 = x10775 - x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10779 = x10457 + x10434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10780 = x10457 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10781 = x10780 * x10434;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10782 = x10779 - x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10783 = x10458 + x10435;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10784 = x10458 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10785 = x10784 * x10435;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10786 = x10783 - x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10787 = x10459 + x10436;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10788 = x10459 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10789 = x10788 * x10436;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10790 = x10787 - x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10791 = x10460 + x10437;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10792 = x10460 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10793 = x10792 * x10437;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10794 = x10791 - x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10795 = x10461 + x10438;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10796 = x10461 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10797 = x10796 * x10438;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10798 = x10795 - x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10799 = x10462 + x10439;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10800 = x10462 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10801 = x10800 * x10439;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10802 = x10799 - x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10803 = x10431 + x10440;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10804 = x10431 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10805 = x10804 * x10440;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10806 = x10803 - x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10807 = x10432 + x10441;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10808 = x10432 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10809 = x10808 * x10441;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10810 = x10807 - x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10811 = x10433 + x10442;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10812 = x10433 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10813 = x10812 * x10442;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10814 = x10811 - x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10815 = x10434 + x10443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10816 = x10434 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10817 = x10816 * x10443;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10818 = x10815 - x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10819 = x10435 + x10444;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10820 = x10435 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10821 = x10820 * x10444;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10822 = x10819 - x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10823 = x10436 + x10445;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10824 = x10436 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10825 = x10824 * x10445;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10826 = x10823 - x10825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10827 = x10437 + x10446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10828 = x10437 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10829 = x10828 * x10446;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10830 = x10827 - x10829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10831 = x10438 + x10447;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10832 = x10438 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10833 = x10832 * x10447;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10834 = x10831 - x10833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10835 = x10439 + x10448;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10836 = x10439 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10837 = x10836 * x10448;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10838 = x10835 - x10837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10839 = x10440 + x10449;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10840 = x10440 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10841 = x10840 * x10449;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10842 = x10839 - x10841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10843 = x10441 + x10450;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10844 = x10441 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10845 = x10844 * x10450;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10846 = x10843 - x10845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10847 = x10442 + x10451;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10848 = x10442 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10849 = x10848 * x10451;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10850 = x10847 - x10849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10851 = x10443 + x10452;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10852 = x10443 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10853 = x10852 * x10452;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10854 = x10851 - x10853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10855 = x10433 + x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10856 = x10812 * x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10857 = x10855 - x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10858 = x10434 + x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10859 = x10816 * x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10860 = x10858 - x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10861 = x10435 + x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10862 = x10820 * x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10863 = x10861 - x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10864 = x10436 + x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10865 = x10824 * x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10866 = x10864 - x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10867 = x10437 + x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10868 = x10828 * x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10869 = x10867 - x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10870 = x10438 + x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10871 = x10832 * x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10872 = x10870 - x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10873 = x10439 + x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10874 = x10836 * x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10875 = x10873 - x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10876 = x10440 + x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10877 = x10840 * x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10878 = x10876 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10879 = x10441 + x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10880 = x10844 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10881 = x10879 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10882 = x10442 + x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10883 = x10848 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10884 = x10882 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10885 = x10443 + x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10886 = x10852 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10887 = x10885 - x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10888 = x10444 + x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10889 = x10728 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10890 = x10888 - x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10891 = x10445 + x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10892 = x10732 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10893 = x10891 - x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10894 = x10446 + x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10895 = x10736 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10896 = x10894 - x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10897 = x10447 + x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10898 = x10740 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10899 = x10897 - x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10900 = x10448 + x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10901 = x10744 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10902 = x10900 - x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10903 = x10449 + x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10904 = x10748 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10905 = x10903 - x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10906 = x10450 + x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10907 = x10752 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10908 = x10906 - x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10909 = x10451 + x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10910 = x10756 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10911 = x10909 - x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10912 = x10452 + x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10913 = x10760 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10914 = x10912 - x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10915 = x10453 + x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10916 = x10764 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10917 = x10915 - x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10918 = x10454 + x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10919 = x10768 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10920 = x10918 - x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10921 = x10455 + x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10922 = x10772 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10923 = x10921 - x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10924 = x10456 + x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10925 = x10776 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10926 = x10924 - x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10927 = x10457 + x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10928 = x10780 * x10826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10929 = x10927 - x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10930 = x10458 + x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10931 = x10784 * x10830;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10932 = x10930 - x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10933 = x10459 + x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10934 = x10788 * x10834;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10935 = x10933 - x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10936 = x10460 + x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10937 = x10792 * x10838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10938 = x10936 - x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10939 = x10461 + x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10940 = x10796 * x10842;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10941 = x10939 - x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10942 = x10462 + x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10943 = x10800 * x10846;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10944 = x10942 - x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10945 = x10431 + x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10946 = x10804 * x10850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10947 = x10945 - x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10948 = x10432 + x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10949 = x10808 * x10854;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10950 = x10948 - x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10951 = x10570 + x10584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10952 = x10570 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10953 = x10952 * x10584;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10954 = x10951 - x10953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10955 = x10571 + x10585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10956 = x10571 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10957 = x10956 * x10585;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10958 = x10955 - x10957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10959 = x10572 + x10586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10960 = x10572 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10961 = x10960 * x10586;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10962 = x10959 - x10961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10963 = x10573 + x10587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10964 = x10573 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10965 = x10964 * x10587;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10966 = x10963 - x10965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10967 = x10574 + x10588;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10968 = x10574 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10969 = x10968 * x10588;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10970 = x10967 - x10969;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10971 = x10575 + x10589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10972 = x10575 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10973 = x10972 * x10589;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10974 = x10971 - x10973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10975 = x10576 + x10590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10976 = x10576 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10977 = x10976 * x10590;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10978 = x10975 - x10977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10979 = x10577 + x10559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10980 = x10577 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10981 = x10980 * x10559;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10982 = x10979 - x10981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10983 = x10578 + x10560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10984 = x10578 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10985 = x10984 * x10560;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10986 = x10983 - x10985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10987 = x10579 + x10561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10988 = x10579 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10989 = x10988 * x10561;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10990 = x10987 - x10989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10991 = x10580 + x10562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10992 = x10580 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10993 = x10992 * x10562;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10994 = x10991 - x10993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10995 = x10581 + x10563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10996 = x10581 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x10997 = x10996 * x10563;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10998 = x10995 - x10997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x10999 = x10582 + x10564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11000 = x10582 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11001 = x11000 * x10564;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11002 = x10999 - x11001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11003 = x10583 + x10565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11004 = x10583 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11005 = x11004 * x10565;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11006 = x11003 - x11005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11007 = x10584 + x10566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11008 = x10584 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11009 = x11008 * x10566;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11010 = x11007 - x11009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11011 = x10585 + x10567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11012 = x10585 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11013 = x11012 * x10567;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11014 = x11011 - x11013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11015 = x10586 + x10568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11016 = x10586 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11017 = x11016 * x10568;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11018 = x11015 - x11017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11019 = x10587 + x10569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11020 = x10587 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11021 = x11020 * x10569;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11022 = x11019 - x11021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11023 = x10588 + x10570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11024 = x10588 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11025 = x11024 * x10570;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11026 = x11023 - x11025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11027 = x10589 + x10571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11028 = x10589 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11029 = x11028 * x10571;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11030 = x11027 - x11029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11031 = x10590 + x10572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11032 = x10590 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11033 = x11032 * x10572;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11034 = x11031 - x11033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11035 = x10559 + x10573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11036 = x10559 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11037 = x11036 * x10573;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11038 = x11035 - x11037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11039 = x10560 + x10574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11040 = x10560 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11041 = x11040 * x10574;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11042 = x11039 - x11041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11043 = x10561 + x10575;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11044 = x10561 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11045 = x11044 * x10575;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11046 = x11043 - x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11047 = x10562 + x10576;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11048 = x10562 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11049 = x11048 * x10576;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11050 = x11047 - x11049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11051 = x10563 + x10577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11052 = x10563 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11053 = x11052 * x10577;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11054 = x11051 - x11053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11055 = x10564 + x10578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11056 = x10564 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11057 = x11056 * x10578;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11058 = x11055 - x11057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11059 = x10565 + x10579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11060 = x10565 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11061 = x11060 * x10579;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11062 = x11059 - x11061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11063 = x10566 + x10580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11064 = x10566 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11065 = x11064 * x10580;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11066 = x11063 - x11065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11067 = x10567 + x10581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11068 = x10567 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11069 = x11068 * x10581;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11070 = x11067 - x11069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11071 = x10568 + x10582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11072 = x10568 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11073 = x11072 * x10582;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11074 = x11071 - x11073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11075 = x10569 + x10583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11076 = x10569 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11077 = x11076 * x10583;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11078 = x11075 - x11077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11079 = x10565 + x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11080 = x11060 * x10954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11081 = x11079 - x11080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11082 = x10566 + x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11083 = x11064 * x10958;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11084 = x11082 - x11083;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11085 = x10567 + x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11086 = x11068 * x10962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11087 = x11085 - x11086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11088 = x10568 + x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11089 = x11072 * x10966;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11090 = x11088 - x11089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11091 = x10569 + x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11092 = x11076 * x10970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11093 = x11091 - x11092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11094 = x10570 + x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11095 = x10952 * x10974;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11096 = x11094 - x11095;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11097 = x10571 + x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11098 = x10956 * x10978;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11099 = x11097 - x11098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11100 = x10572 + x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11101 = x10960 * x10982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11102 = x11100 - x11101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11103 = x10573 + x10986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11104 = x10964 * x10986;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11105 = x11103 - x11104;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11106 = x10574 + x10990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11107 = x10968 * x10990;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11108 = x11106 - x11107;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11109 = x10575 + x10994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11110 = x10972 * x10994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11111 = x11109 - x11110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11112 = x10576 + x10998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11113 = x10976 * x10998;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11114 = x11112 - x11113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11115 = x10577 + x11002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11116 = x10980 * x11002;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11117 = x11115 - x11116;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11118 = x10578 + x11006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11119 = x10984 * x11006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11120 = x11118 - x11119;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11121 = x10579 + x11010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11122 = x10988 * x11010;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11123 = x11121 - x11122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11124 = x10580 + x11014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11125 = x10992 * x11014;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11126 = x11124 - x11125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11127 = x10581 + x11018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11128 = x10996 * x11018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11129 = x11127 - x11128;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11130 = x10582 + x11022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11131 = x11000 * x11022;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11132 = x11130 - x11131;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11133 = x10583 + x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11134 = x11004 * x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11135 = x11133 - x11134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11136 = x10584 + x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11137 = x11008 * x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11138 = x11136 - x11137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11139 = x10585 + x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11140 = x11012 * x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11141 = x11139 - x11140;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11142 = x10586 + x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11143 = x11016 * x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11144 = x11142 - x11143;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11145 = x10587 + x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11146 = x11020 * x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11147 = x11145 - x11146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11148 = x10588 + x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11149 = x11024 * x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11150 = x11148 - x11149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11151 = x10589 + x11050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11152 = x11028 * x11050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11153 = x11151 - x11152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11154 = x10590 + x11054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11155 = x11032 * x11054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11156 = x11154 - x11155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11157 = x10559 + x11058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11158 = x11036 * x11058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11159 = x11157 - x11158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11160 = x10560 + x11062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11161 = x11040 * x11062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11162 = x11160 - x11161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11163 = x10561 + x11066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11164 = x11044 * x11066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11165 = x11163 - x11164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11166 = x10562 + x11070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11167 = x11048 * x11070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11168 = x11166 - x11167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11169 = x10563 + x11074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11170 = x11052 * x11074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11171 = x11169 - x11170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11172 = x10564 + x11078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11173 = x11056 * x11078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11174 = x11172 - x11173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11175 = x10688 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11176 = x10687 + x11175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11177 = x10689 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11178 = x11176 + x11177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11179 = x10690 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11180 = x11178 + x11179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11181 = x10691 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11182 = x11180 + x11181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11183 = x10692 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11184 = x11182 + x11183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11185 = x10693 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11186 = x11184 + x11185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11187 = x10694 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11188 = x11186 + x11187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11189 = x10695 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11190 = x11188 + x11189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11191 = x10696 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11192 = x11190 + x11191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11193 = x10697 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11194 = x11192 + x11193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11195 = x10698 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11196 = x11194 + x11195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11197 = x10699 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11198 = x11196 + x11197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11199 = x10700 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11200 = x11198 + x11199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11201 = x10701 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11202 = x11200 + x11201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11203 = x10702 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11204 = x11202 + x11203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11205 = x10704 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11206 = x10703 + x11205;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11207 = x10705 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11208 = x11206 + x11207;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11209 = x10706 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11210 = x11208 + x11209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11211 = x10707 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11212 = x11210 + x11211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11213 = x10708 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11214 = x11212 + x11213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11215 = x10709 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11216 = x11214 + x11215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11217 = x10710 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11218 = x11216 + x11217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11219 = x10711 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11220 = x11218 + x11219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11221 = x10712 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11222 = x11220 + x11221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11223 = x10713 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11224 = x11222 + x11223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11225 = x10714 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11226 = x11224 + x11225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11227 = x10715 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11228 = x11226 + x11227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11229 = x10716 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11230 = x11228 + x11229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11231 = x10717 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11232 = x11230 + x11231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11233 = x10718 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11234 = x11232 + x11233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11235 = x10656 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11236 = x10655 + x11235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11237 = x10657 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11238 = x11236 + x11237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11239 = x10658 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11240 = x11238 + x11239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11241 = x10659 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11242 = x11240 + x11241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11243 = x10660 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11244 = x11242 + x11243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11245 = x10661 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11246 = x11244 + x11245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11247 = x10662 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11248 = x11246 + x11247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11249 = x10663 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11250 = x11248 + x11249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11251 = x10664 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11252 = x11250 + x11251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11253 = x10665 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11254 = x11252 + x11253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11255 = x10666 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11256 = x11254 + x11255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11257 = x10667 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11258 = x11256 + x11257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11259 = x10668 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11260 = x11258 + x11259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11261 = x10669 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11262 = x11260 + x11261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11263 = x10670 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11264 = x11262 + x11263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11265 = x10672 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11266 = x10671 + x11265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11267 = x10673 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11268 = x11266 + x11267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11269 = x10674 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11270 = x11268 + x11269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11271 = x10675 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11272 = x11270 + x11271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11273 = x10676 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11274 = x11272 + x11273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11275 = x10677 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11276 = x11274 + x11275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11277 = x10678 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11278 = x11276 + x11277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11279 = x10679 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11280 = x11278 + x11279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11281 = x10680 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11282 = x11280 + x11281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11283 = x10681 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11284 = x11282 + x11283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11285 = x10682 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11286 = x11284 + x11285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11287 = x10683 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11288 = x11286 + x11287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11289 = x10684 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11290 = x11288 + x11289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11291 = x10685 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11292 = x11290 + x11291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11293 = x10686 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11294 = x11292 + x11293;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11295 = x10559 * x10591;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11296 = x88 - x10559;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11297 = x11296 * x10623;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11298 = x11295 + x11297;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11299 = x10560 * x10592;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11300 = x88 - x10560;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11301 = x11300 * x10624;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11302 = x11299 + x11301;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11303 = x10561 * x10593;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11304 = x88 - x10561;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11305 = x11304 * x10625;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11306 = x11303 + x11305;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11307 = x10562 * x10594;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11308 = x88 - x10562;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11309 = x11308 * x10626;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11310 = x11307 + x11309;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11311 = x10563 * x10595;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11312 = x88 - x10563;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11313 = x11312 * x10627;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11314 = x11311 + x11313;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11315 = x10564 * x10596;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11316 = x88 - x10564;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11317 = x11316 * x10628;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11318 = x11315 + x11317;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11319 = x10565 * x10597;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11320 = x88 - x10565;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11321 = x11320 * x10629;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11322 = x11319 + x11321;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11323 = x10566 * x10598;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11324 = x88 - x10566;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11325 = x11324 * x10630;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11326 = x11323 + x11325;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11327 = x10567 * x10599;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11328 = x88 - x10567;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11329 = x11328 * x10631;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11330 = x11327 + x11329;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11331 = x10568 * x10600;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11332 = x88 - x10568;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11333 = x11332 * x10632;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11334 = x11331 + x11333;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11335 = x10569 * x10601;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11336 = x88 - x10569;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11337 = x11336 * x10633;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11338 = x11335 + x11337;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11339 = x10570 * x10602;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11340 = x88 - x10570;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11341 = x11340 * x10634;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11342 = x11339 + x11341;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11343 = x10571 * x10603;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11344 = x88 - x10571;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11345 = x11344 * x10635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11346 = x11343 + x11345;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11347 = x10572 * x10604;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11348 = x88 - x10572;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11349 = x11348 * x10636;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11350 = x11347 + x11349;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11351 = x10573 * x10605;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11352 = x88 - x10573;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11353 = x11352 * x10637;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11354 = x11351 + x11353;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11355 = x10574 * x10606;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11356 = x88 - x10574;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11357 = x11356 * x10638;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11358 = x11355 + x11357;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11359 = x10575 * x10607;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11360 = x88 - x10575;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11361 = x11360 * x10639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11362 = x11359 + x11361;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11363 = x10576 * x10608;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11364 = x88 - x10576;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11365 = x11364 * x10640;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11366 = x11363 + x11365;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11367 = x10577 * x10609;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11368 = x88 - x10577;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11369 = x11368 * x10641;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11370 = x11367 + x11369;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11371 = x10578 * x10610;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11372 = x88 - x10578;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11373 = x11372 * x10642;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11374 = x11371 + x11373;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11375 = x10579 * x10611;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11376 = x88 - x10579;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11377 = x11376 * x10643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11378 = x11375 + x11377;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11379 = x10580 * x10612;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11380 = x88 - x10580;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11381 = x11380 * x10644;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11382 = x11379 + x11381;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11383 = x10581 * x10613;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11384 = x88 - x10581;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11385 = x11384 * x10645;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11386 = x11383 + x11385;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11387 = x10582 * x10614;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11388 = x88 - x10582;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11389 = x11388 * x10646;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11390 = x11387 + x11389;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11391 = x10583 * x10615;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11392 = x88 - x10583;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11393 = x11392 * x10647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11394 = x11391 + x11393;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11395 = x10584 * x10616;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11396 = x88 - x10584;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11397 = x11396 * x10648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11398 = x11395 + x11397;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11399 = x10585 * x10617;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11400 = x88 - x10585;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11401 = x11400 * x10649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11402 = x11399 + x11401;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11403 = x10586 * x10618;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11404 = x88 - x10586;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11405 = x11404 * x10650;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11406 = x11403 + x11405;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11407 = x10587 * x10619;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11408 = x88 - x10587;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11409 = x11408 * x10651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11410 = x11407 + x11409;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11411 = x10588 * x10620;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11412 = x88 - x10588;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11413 = x11412 * x10652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11414 = x11411 + x11413;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11415 = x10589 * x10621;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11416 = x88 - x10589;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11417 = x11416 * x10653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11418 = x11415 + x11417;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11419 = x10590 * x10622;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11420 = x88 - x10590;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11421 = x11420 * x10654;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11422 = x11419 + x11421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11423 = x11302 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11424 = x11298 + x11423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11425 = x11306 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11426 = x11424 + x11425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11427 = x11310 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11428 = x11426 + x11427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11429 = x11314 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11430 = x11428 + x11429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11431 = x11318 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11432 = x11430 + x11431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11433 = x11322 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11434 = x11432 + x11433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11435 = x11326 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11436 = x11434 + x11435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11437 = x11330 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11438 = x11436 + x11437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11439 = x11334 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11440 = x11438 + x11439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11441 = x11338 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11442 = x11440 + x11441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11443 = x11342 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11444 = x11442 + x11443;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11445 = x11346 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11446 = x11444 + x11445;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11447 = x11350 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11448 = x11446 + x11447;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11449 = x11354 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11450 = x11448 + x11449;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11451 = x11358 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11452 = x11450 + x11451;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11453 = x11366 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11454 = x11362 + x11453;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11455 = x11370 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11456 = x11454 + x11455;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11457 = x11374 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11458 = x11456 + x11457;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11459 = x11378 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11460 = x11458 + x11459;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11461 = x11382 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11462 = x11460 + x11461;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11463 = x11386 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11464 = x11462 + x11463;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11465 = x11390 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11466 = x11464 + x11465;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11467 = x11394 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11468 = x11466 + x11467;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11469 = x11398 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11470 = x11468 + x11469;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11471 = x11402 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11472 = x11470 + x11471;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11473 = x11406 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11474 = x11472 + x11473;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11475 = x11410 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11476 = x11474 + x11475;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11477 = x11414 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11478 = x11476 + x11477;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11479 = x11418 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11480 = x11478 + x11479;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11481 = x11422 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11482 = x11480 + x11481;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11483 = x11084 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11484 = x11081 + x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11485 = x11087 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11486 = x11484 + x11485;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11487 = x11090 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11488 = x11486 + x11487;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11489 = x11093 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11490 = x11488 + x11489;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11491 = x11096 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11492 = x11490 + x11491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11493 = x11099 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11494 = x11492 + x11493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11495 = x11102 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11496 = x11494 + x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11497 = x11105 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11498 = x11496 + x11497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11499 = x11108 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11500 = x11498 + x11499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11501 = x11111 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11502 = x11500 + x11501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11503 = x11114 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11504 = x11502 + x11503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11505 = x11117 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11506 = x11504 + x11505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11507 = x11120 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11508 = x11506 + x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11509 = x11123 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11510 = x11508 + x11509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11511 = x11126 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11512 = x11510 + x11511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11513 = x11132 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11514 = x11129 + x11513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11515 = x11135 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11516 = x11514 + x11515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11517 = x11138 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11518 = x11516 + x11517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11519 = x11141 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11520 = x11518 + x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11521 = x11144 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11522 = x11520 + x11521;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11523 = x11147 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11524 = x11522 + x11523;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11525 = x11150 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11526 = x11524 + x11525;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11527 = x11153 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11528 = x11526 + x11527;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11529 = x11156 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11530 = x11528 + x11529;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11531 = x11159 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11532 = x11530 + x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11533 = x11162 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11534 = x11532 + x11533;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11535 = x11165 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11536 = x11534 + x11535;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11537 = x11168 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11538 = x11536 + x11537;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11539 = x11171 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11540 = x11538 + x11539;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11541 = x11174 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11542 = x11540 + x11541;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11543 = x11452 + x11512;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11544 = x11482 + x11542;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11545 = x11264 + x11543;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11546 = x11294 + x11544;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11547 = x10724 + x11545;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11548 = x10726 + x11546;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11549 = x11204 + x11547;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11550 = x11234 + x11548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11551 = x10431 * x10463;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11552 = x88 - x10495;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11553 = x11551 * x11552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11554 = x88 - x10463;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11555 = x10431 * x11554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11556 = x11555 * x10495;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11557 = x11553 + x11556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11558 = x88 - x10431;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11559 = x11558 * x10463;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11560 = x11559 * x10495;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11561 = x11557 + x11560;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11562 = x11551 * x10495;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11563 = x11561 + x11562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11564 = x10432 * x10464;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11565 = x88 - x10496;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11566 = x11564 * x11565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11567 = x88 - x10464;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11568 = x10432 * x11567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11569 = x11568 * x10496;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11570 = x11566 + x11569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11571 = x88 - x10432;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11572 = x11571 * x10464;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11573 = x11572 * x10496;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11574 = x11570 + x11573;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11575 = x11564 * x10496;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11576 = x11574 + x11575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11577 = x10433 * x10465;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11578 = x88 - x10497;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11579 = x11577 * x11578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11580 = x88 - x10465;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11581 = x10433 * x11580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11582 = x11581 * x10497;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11583 = x11579 + x11582;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11584 = x88 - x10433;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11585 = x11584 * x10465;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11586 = x11585 * x10497;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11587 = x11583 + x11586;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11588 = x11577 * x10497;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11589 = x11587 + x11588;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11590 = x10434 * x10466;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11591 = x88 - x10498;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11592 = x11590 * x11591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11593 = x88 - x10466;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11594 = x10434 * x11593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11595 = x11594 * x10498;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11596 = x11592 + x11595;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11597 = x88 - x10434;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11598 = x11597 * x10466;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11599 = x11598 * x10498;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11600 = x11596 + x11599;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11601 = x11590 * x10498;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11602 = x11600 + x11601;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11603 = x10435 * x10467;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11604 = x88 - x10499;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11605 = x11603 * x11604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11606 = x88 - x10467;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11607 = x10435 * x11606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11608 = x11607 * x10499;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11609 = x11605 + x11608;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11610 = x88 - x10435;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11611 = x11610 * x10467;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11612 = x11611 * x10499;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11613 = x11609 + x11612;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11614 = x11603 * x10499;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11615 = x11613 + x11614;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11616 = x10436 * x10468;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11617 = x88 - x10500;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11618 = x11616 * x11617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11619 = x88 - x10468;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11620 = x10436 * x11619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11621 = x11620 * x10500;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11622 = x11618 + x11621;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11623 = x88 - x10436;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11624 = x11623 * x10468;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11625 = x11624 * x10500;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11626 = x11622 + x11625;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11627 = x11616 * x10500;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11628 = x11626 + x11627;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11629 = x10437 * x10469;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11630 = x88 - x10501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11631 = x11629 * x11630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11632 = x88 - x10469;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11633 = x10437 * x11632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11634 = x11633 * x10501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11635 = x11631 + x11634;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11636 = x88 - x10437;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11637 = x11636 * x10469;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11638 = x11637 * x10501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11639 = x11635 + x11638;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11640 = x11629 * x10501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11641 = x11639 + x11640;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11642 = x10438 * x10470;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11643 = x88 - x10502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11644 = x11642 * x11643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11645 = x88 - x10470;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11646 = x10438 * x11645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11647 = x11646 * x10502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11648 = x11644 + x11647;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11649 = x88 - x10438;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11650 = x11649 * x10470;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11651 = x11650 * x10502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11652 = x11648 + x11651;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11653 = x11642 * x10502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11654 = x11652 + x11653;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11655 = x10439 * x10471;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11656 = x88 - x10503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11657 = x11655 * x11656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11658 = x88 - x10471;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11659 = x10439 * x11658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11660 = x11659 * x10503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11661 = x11657 + x11660;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11662 = x88 - x10439;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11663 = x11662 * x10471;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11664 = x11663 * x10503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11665 = x11661 + x11664;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11666 = x11655 * x10503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11667 = x11665 + x11666;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11668 = x10440 * x10472;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11669 = x88 - x10504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11670 = x11668 * x11669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11671 = x88 - x10472;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11672 = x10440 * x11671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11673 = x11672 * x10504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11674 = x11670 + x11673;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11675 = x88 - x10440;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11676 = x11675 * x10472;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11677 = x11676 * x10504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11678 = x11674 + x11677;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11679 = x11668 * x10504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11680 = x11678 + x11679;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11681 = x10441 * x10473;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11682 = x88 - x10505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11683 = x11681 * x11682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11684 = x88 - x10473;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11685 = x10441 * x11684;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11686 = x11685 * x10505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11687 = x11683 + x11686;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11688 = x88 - x10441;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11689 = x11688 * x10473;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11690 = x11689 * x10505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11691 = x11687 + x11690;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11692 = x11681 * x10505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11693 = x11691 + x11692;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11694 = x10442 * x10474;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11695 = x88 - x10506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11696 = x11694 * x11695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11697 = x88 - x10474;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11698 = x10442 * x11697;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11699 = x11698 * x10506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11700 = x11696 + x11699;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11701 = x88 - x10442;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11702 = x11701 * x10474;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11703 = x11702 * x10506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11704 = x11700 + x11703;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11705 = x11694 * x10506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11706 = x11704 + x11705;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11707 = x10443 * x10475;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11708 = x88 - x10507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11709 = x11707 * x11708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11710 = x88 - x10475;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11711 = x10443 * x11710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11712 = x11711 * x10507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11713 = x11709 + x11712;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11714 = x88 - x10443;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11715 = x11714 * x10475;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11716 = x11715 * x10507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11717 = x11713 + x11716;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11718 = x11707 * x10507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11719 = x11717 + x11718;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11720 = x10444 * x10476;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11721 = x88 - x10508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11722 = x11720 * x11721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11723 = x88 - x10476;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11724 = x10444 * x11723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11725 = x11724 * x10508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11726 = x11722 + x11725;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11727 = x88 - x10444;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11728 = x11727 * x10476;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11729 = x11728 * x10508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11730 = x11726 + x11729;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11731 = x11720 * x10508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11732 = x11730 + x11731;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11733 = x10445 * x10477;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11734 = x88 - x10509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11735 = x11733 * x11734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11736 = x88 - x10477;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11737 = x10445 * x11736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11738 = x11737 * x10509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11739 = x11735 + x11738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11740 = x88 - x10445;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11741 = x11740 * x10477;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11742 = x11741 * x10509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11743 = x11739 + x11742;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11744 = x11733 * x10509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11745 = x11743 + x11744;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11746 = x10446 * x10478;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11747 = x88 - x10510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11748 = x11746 * x11747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11749 = x88 - x10478;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11750 = x10446 * x11749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11751 = x11750 * x10510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11752 = x11748 + x11751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11753 = x88 - x10446;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11754 = x11753 * x10478;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11755 = x11754 * x10510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11756 = x11752 + x11755;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11757 = x11746 * x10510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11758 = x11756 + x11757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11759 = x10447 * x10479;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11760 = x88 - x10511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11761 = x11759 * x11760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11762 = x88 - x10479;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11763 = x10447 * x11762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11764 = x11763 * x10511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11765 = x11761 + x11764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11766 = x88 - x10447;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11767 = x11766 * x10479;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11768 = x11767 * x10511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11769 = x11765 + x11768;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11770 = x11759 * x10511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11771 = x11769 + x11770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11772 = x10448 * x10480;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11773 = x88 - x10512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11774 = x11772 * x11773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11775 = x88 - x10480;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11776 = x10448 * x11775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11777 = x11776 * x10512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11778 = x11774 + x11777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11779 = x88 - x10448;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11780 = x11779 * x10480;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11781 = x11780 * x10512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11782 = x11778 + x11781;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11783 = x11772 * x10512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11784 = x11782 + x11783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11785 = x10449 * x10481;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11786 = x88 - x10513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11787 = x11785 * x11786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11788 = x88 - x10481;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11789 = x10449 * x11788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11790 = x11789 * x10513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11791 = x11787 + x11790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11792 = x88 - x10449;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11793 = x11792 * x10481;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11794 = x11793 * x10513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11795 = x11791 + x11794;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11796 = x11785 * x10513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11797 = x11795 + x11796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11798 = x10450 * x10482;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11799 = x88 - x10514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11800 = x11798 * x11799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11801 = x88 - x10482;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11802 = x10450 * x11801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11803 = x11802 * x10514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11804 = x11800 + x11803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11805 = x88 - x10450;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11806 = x11805 * x10482;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11807 = x11806 * x10514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11808 = x11804 + x11807;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11809 = x11798 * x10514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11810 = x11808 + x11809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11811 = x10451 * x10483;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11812 = x88 - x10515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11813 = x11811 * x11812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11814 = x88 - x10483;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11815 = x10451 * x11814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11816 = x11815 * x10515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11817 = x11813 + x11816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11818 = x88 - x10451;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11819 = x11818 * x10483;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11820 = x11819 * x10515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11821 = x11817 + x11820;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11822 = x11811 * x10515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11823 = x11821 + x11822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11824 = x10452 * x10484;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11825 = x88 - x10516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11826 = x11824 * x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11827 = x88 - x10484;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11828 = x10452 * x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11829 = x11828 * x10516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11830 = x11826 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11831 = x88 - x10452;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11832 = x11831 * x10484;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11833 = x11832 * x10516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11834 = x11830 + x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11835 = x11824 * x10516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11836 = x11834 + x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11837 = x10453 * x10485;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11838 = x88 - x10517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11839 = x11837 * x11838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11840 = x88 - x10485;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11841 = x10453 * x11840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11842 = x11841 * x10517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11843 = x11839 + x11842;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11844 = x88 - x10453;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11845 = x11844 * x10485;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11846 = x11845 * x10517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11847 = x11843 + x11846;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11848 = x11837 * x10517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11849 = x11847 + x11848;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11850 = x10454 * x10486;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11851 = x88 - x10518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11852 = x11850 * x11851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11853 = x88 - x10486;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11854 = x10454 * x11853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11855 = x11854 * x10518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11856 = x11852 + x11855;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11857 = x88 - x10454;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11858 = x11857 * x10486;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11859 = x11858 * x10518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11860 = x11856 + x11859;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11861 = x11850 * x10518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11862 = x11860 + x11861;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11863 = x10455 * x10487;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11864 = x88 - x10519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11865 = x11863 * x11864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11866 = x88 - x10487;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11867 = x10455 * x11866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11868 = x11867 * x10519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11869 = x11865 + x11868;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11870 = x88 - x10455;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11871 = x11870 * x10487;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11872 = x11871 * x10519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11873 = x11869 + x11872;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11874 = x11863 * x10519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11875 = x11873 + x11874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11876 = x10456 * x10488;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11877 = x88 - x10520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11878 = x11876 * x11877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11879 = x88 - x10488;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11880 = x10456 * x11879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11881 = x11880 * x10520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11882 = x11878 + x11881;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11883 = x88 - x10456;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11884 = x11883 * x10488;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11885 = x11884 * x10520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11886 = x11882 + x11885;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11887 = x11876 * x10520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11888 = x11886 + x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11889 = x10457 * x10489;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11890 = x88 - x10521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11891 = x11889 * x11890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11892 = x88 - x10489;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11893 = x10457 * x11892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11894 = x11893 * x10521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11895 = x11891 + x11894;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11896 = x88 - x10457;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11897 = x11896 * x10489;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11898 = x11897 * x10521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11899 = x11895 + x11898;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11900 = x11889 * x10521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11901 = x11899 + x11900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11902 = x10458 * x10490;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11903 = x88 - x10522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11904 = x11902 * x11903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11905 = x88 - x10490;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11906 = x10458 * x11905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11907 = x11906 * x10522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11908 = x11904 + x11907;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11909 = x88 - x10458;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11910 = x11909 * x10490;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11911 = x11910 * x10522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11912 = x11908 + x11911;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11913 = x11902 * x10522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11914 = x11912 + x11913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11915 = x10459 * x10491;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11916 = x88 - x10523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11917 = x11915 * x11916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11918 = x88 - x10491;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11919 = x10459 * x11918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11920 = x11919 * x10523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11921 = x11917 + x11920;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11922 = x88 - x10459;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11923 = x11922 * x10491;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11924 = x11923 * x10523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11925 = x11921 + x11924;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11926 = x11915 * x10523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11927 = x11925 + x11926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11928 = x10460 * x10492;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11929 = x88 - x10524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11930 = x11928 * x11929;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11931 = x88 - x10492;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11932 = x10460 * x11931;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11933 = x11932 * x10524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11934 = x11930 + x11933;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11935 = x88 - x10460;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11936 = x11935 * x10492;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11937 = x11936 * x10524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11938 = x11934 + x11937;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11939 = x11928 * x10524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11940 = x11938 + x11939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11941 = x10461 * x10493;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11942 = x88 - x10525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11943 = x11941 * x11942;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11944 = x88 - x10493;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11945 = x10461 * x11944;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11946 = x11945 * x10525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11947 = x11943 + x11946;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11948 = x88 - x10461;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11949 = x11948 * x10493;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11950 = x11949 * x10525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11951 = x11947 + x11950;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11952 = x11941 * x10525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11953 = x11951 + x11952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11954 = x10462 * x10494;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11955 = x88 - x10526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11956 = x11954 * x11955;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11957 = x88 - x10494;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11958 = x10462 * x11957;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11959 = x11958 * x10526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11960 = x11956 + x11959;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11961 = x88 - x10462;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11962 = x11961 * x10494;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11963 = x11962 * x10526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11964 = x11960 + x11963;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11965 = x11954 * x10526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11966 = x11964 + x11965;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11967 = x11576 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11968 = x11563 + x11967;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11969 = x11589 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11970 = x11968 + x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11971 = x11602 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11972 = x11970 + x11971;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11973 = x11615 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11974 = x11972 + x11973;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11975 = x11628 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11976 = x11974 + x11975;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11977 = x11641 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11978 = x11976 + x11977;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11979 = x11654 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11980 = x11978 + x11979;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11981 = x11667 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11982 = x11980 + x11981;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11983 = x11680 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11984 = x11982 + x11983;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11985 = x11693 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11986 = x11984 + x11985;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11987 = x11706 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11988 = x11986 + x11987;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11989 = x11719 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11990 = x11988 + x11989;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11991 = x11732 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11992 = x11990 + x11991;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11993 = x11745 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11994 = x11992 + x11993;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11995 = x11758 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11996 = x11994 + x11995;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11997 = x11784 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11998 = x11771 + x11997;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11999 = x11797 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12000 = x11998 + x11999;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12001 = x11810 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12002 = x12000 + x12001;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12003 = x11823 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12004 = x12002 + x12003;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12005 = x11836 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12006 = x12004 + x12005;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12007 = x11849 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12008 = x12006 + x12007;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12009 = x11862 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12010 = x12008 + x12009;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12011 = x11875 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12012 = x12010 + x12011;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12013 = x11888 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12014 = x12012 + x12013;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12015 = x11901 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12016 = x12014 + x12015;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12017 = x11914 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12018 = x12016 + x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12019 = x11927 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12020 = x12018 + x12019;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12021 = x11940 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12022 = x12020 + x12021;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12023 = x11953 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12024 = x12022 + x12023;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12025 = x11966 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12026 = x12024 + x12025;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12027 = x10860 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12028 = x10857 + x12027;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12029 = x10863 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12030 = x12028 + x12029;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12031 = x10866 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12032 = x12030 + x12031;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12033 = x10869 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12034 = x12032 + x12033;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12035 = x10872 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12036 = x12034 + x12035;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12037 = x10875 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12038 = x12036 + x12037;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12039 = x10878 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12040 = x12038 + x12039;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12041 = x10881 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12042 = x12040 + x12041;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12043 = x10884 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12044 = x12042 + x12043;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12045 = x10887 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12046 = x12044 + x12045;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12047 = x10890 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12048 = x12046 + x12047;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12049 = x10893 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12050 = x12048 + x12049;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12051 = x10896 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12052 = x12050 + x12051;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12053 = x10899 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12054 = x12052 + x12053;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12055 = x10902 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12056 = x12054 + x12055;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12057 = x10908 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12058 = x10905 + x12057;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12059 = x10911 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12060 = x12058 + x12059;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12061 = x10914 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12062 = x12060 + x12061;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12063 = x10917 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12064 = x12062 + x12063;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12065 = x10920 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12066 = x12064 + x12065;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12067 = x10923 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12068 = x12066 + x12067;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12069 = x10926 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12070 = x12068 + x12069;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12071 = x10929 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12072 = x12070 + x12071;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12073 = x10932 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12074 = x12072 + x12073;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12075 = x10935 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12076 = x12074 + x12075;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12077 = x10938 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12078 = x12076 + x12077;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12079 = x10941 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12080 = x12078 + x12079;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12081 = x10944 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12082 = x12080 + x12081;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12083 = x10947 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12084 = x12082 + x12083;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12085 = x10950 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12086 = x12084 + x12085;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12087 = x11996 + x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12088 = x12026 + x12086;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12089 = x11549 + x12087;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12090 = x11550 + x12088;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12091 = x10528 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12092 = x10527 + x12091;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12093 = x10529 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12094 = x12092 + x12093;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12095 = x10530 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12096 = x12094 + x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12097 = x10531 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12098 = x12096 + x12097;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12099 = x10532 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12100 = x12098 + x12099;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12101 = x10533 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12102 = x12100 + x12101;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12103 = x10534 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12104 = x12102 + x12103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12105 = x10535 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12106 = x12104 + x12105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12107 = x10536 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12108 = x12106 + x12107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12109 = x10537 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12110 = x12108 + x12109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12111 = x10538 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12112 = x12110 + x12111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12113 = x10539 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12114 = x12112 + x12113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12115 = x10540 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12116 = x12114 + x12115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12117 = x10541 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12118 = x12116 + x12117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12119 = x10542 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12120 = x12118 + x12119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12121 = x10544 * x85;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12122 = x10543 + x12121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12123 = x10545 * x81;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12124 = x12122 + x12123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12125 = x10546 * x71;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12126 = x12124 + x12125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12127 = x10547 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12128 = x12126 + x12127;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12129 = x10548 * x63;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12130 = x12128 + x12129;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12131 = x10549 * x57;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12132 = x12130 + x12131;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12133 = x10550 * x66;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12134 = x12132 + x12133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12135 = x10551 * x83;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12136 = x12134 + x12135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12137 = x10552 * x24;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12138 = x12136 + x12137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12139 = x10553 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12140 = x12138 + x12139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12141 = x10554 * x20;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12142 = x12140 + x12141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12143 = x10555 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12144 = x12142 + x12143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12145 = x10556 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12146 = x12144 + x12145;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12147 = x10557 * x38;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12148 = x12146 + x12147;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12149 = x10558 * x13;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12150 = x12148 + x12149;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12151 = x11549 + x12120;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12152 = x11550 + x12150;
      // loc("cirgen/circuit/rv32im/sha.cpp":450:5)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12089);
        reg = x12089;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":451:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12151);
        reg = x12151;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":450:5)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12090);
        reg = x12090;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":451:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12152);
        reg = x12152;
      }
      if (x8513 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg6"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12153 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x12153 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg7"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12154 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x12154 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12155 = Fp(x12153.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12155);
            reg = x12155;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12156 = Fp(x12153.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12157 = x12156 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12157);
            reg = x12157;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12158 = Fp(x12153.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12159 = x12158 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12159);
            reg = x12159;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12160 = Fp(x12153.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12161 = x12160 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12161);
            reg = x12161;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12162 = Fp(x12153.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12163 = x12162 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12163);
            reg = x12163;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12164 = Fp(x12153.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12165 = x12164 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12165);
            reg = x12165;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12166 = Fp(x12153.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12167 = x12166 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12167);
            reg = x12167;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12168 = Fp(x12153.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12169 = x12168 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12169);
            reg = x12169;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12170 = Fp(x12153.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12171 = x12170 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12171);
            reg = x12171;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12172 = Fp(x12153.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12173 = x12172 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12173);
            reg = x12173;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12174 = Fp(x12153.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12175 = x12174 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12175);
            reg = x12175;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12176 = Fp(x12153.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12177 = x12176 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12177);
            reg = x12177;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12178 = Fp(x12153.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12179 = x12178 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12179);
            reg = x12179;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12180 = Fp(x12153.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12181 = x12180 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12181);
            reg = x12181;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12182 = Fp(x12153.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12183 = x12182 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12183);
            reg = x12183;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12184 = Fp(x12153.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12185 = x12184 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12185);
            reg = x12185;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12186 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x12186 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12187 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x12187 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12188 = x12187 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12189 = x12186 + x12188;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12190 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x12190 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12191 = x12190 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12192 = x12189 + x12191;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12193 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x12193 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12194 = x12193 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12195 = x12192 + x12194;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit6/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12196 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x12196 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12197 = x12196 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12198 = x12195 + x12197;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit7/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12199 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12199 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12200 = x12199 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12201 = x12198 + x12200;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit8/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12202 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12202 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12203 = x12202 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12204 = x12201 + x12203;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit9/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12205 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12205 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12206 = x12205 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12207 = x12204 + x12206;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit10/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12208 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12208 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12209 = x12208 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12210 = x12207 + x12209;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit11/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12211 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x12211 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12212 = x12211 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12213 = x12210 + x12212;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12214 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x12214 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12215 = x12214 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12216 = x12213 + x12215;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit13/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12217 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12217 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12218 = x12217 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12219 = x12216 + x12218;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit14/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12220 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12220 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12221 = x12220 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12222 = x12219 + x12221;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit15/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12223 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12223 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12224 = x12223 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12225 = x12222 + x12224;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit16/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12226 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12226 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12227 = x12226 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12228 = x12225 + x12227;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit17/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12229 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12229 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12230 = x12229 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12231 = x12228 + x12230;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12232 = x12153 - x12231;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12233 = x12232 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12234 = Fp(x12233.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12234);
            reg = x12234;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12235 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12235 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12236 = x12233 - x12235;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12237 = x12236 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12238 = x88 - x12237;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12239 = x12237 * x12238;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12239 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12240 = x12154 + x12233;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12241 = Fp(x12240.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12241);
            reg = x12241;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12242 = Fp(x12240.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12243 = x12242 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12243);
            reg = x12243;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12244 = Fp(x12240.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12245 = x12244 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12245);
            reg = x12245;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12246 = Fp(x12240.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12247 = x12246 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12247);
            reg = x12247;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12248 = Fp(x12240.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12249 = x12248 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12249);
            reg = x12249;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12250 = Fp(x12240.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12251 = x12250 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12251);
            reg = x12251;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12252 = Fp(x12240.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12253 = x12252 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12253);
            reg = x12253;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12254 = Fp(x12240.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12255 = x12254 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12255);
            reg = x12255;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12256 = Fp(x12240.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12257 = x12256 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12257);
            reg = x12257;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12258 = Fp(x12240.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12259 = x12258 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12259);
            reg = x12259;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12260 = Fp(x12240.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12261 = x12260 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12261);
            reg = x12261;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12262 = Fp(x12240.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12263 = x12262 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12263);
            reg = x12263;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12264 = Fp(x12240.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12265 = x12264 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12265);
            reg = x12265;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12266 = Fp(x12240.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12267 = x12266 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12267);
            reg = x12267;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12268 = Fp(x12240.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12269 = x12268 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12269);
            reg = x12269;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12270 = Fp(x12240.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12271 = x12270 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12271);
            reg = x12271;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit18/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12272 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12272 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit19/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12273 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12273 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12274 = x12273 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12275 = x12272 + x12274;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit20/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12276 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12276 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12277 = x12276 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12278 = x12275 + x12277;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit21/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12279 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12280 = x12279 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12281 = x12278 + x12280;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit22/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12282 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12282 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12283 = x12282 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12284 = x12281 + x12283;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit23/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12285 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12286 = x12285 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12287 = x12284 + x12286;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit24/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12288 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12289 = x12288 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12290 = x12287 + x12289;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit25/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12291 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12292 = x12291 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12293 = x12290 + x12292;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit26/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12294 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12295 = x12294 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12296 = x12293 + x12295;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit27/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12297 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12298 = x12297 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12299 = x12296 + x12298;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit28/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12300 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12301 = x12300 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12302 = x12299 + x12301;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit29/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12303 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12303 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12304 = x12303 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12305 = x12302 + x12304;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit30/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12306 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12307 = x12306 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12308 = x12305 + x12307;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit31/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12309 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12309 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12310 = x12309 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12311 = x12308 + x12310;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit32/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12312 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12312 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12313 = x12312 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12314 = x12311 + x12313;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit33/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12315 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12315 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12316 = x12315 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12317 = x12314 + x12316;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12318 = x12240 - x12317;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12319 = x12318 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12320 = Fp(x12319.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12320);
            reg = x12320;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12321 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x12321 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12322 = x12319 - x12321;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12323 = x12322 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12324 = x88 - x12323;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12325 = x12323 * x12324;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12325 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg8"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12326 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x12326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg9"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12327 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x12327 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12328 = Fp(x12326.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12328);
            reg = x12328;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12329 = Fp(x12326.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12330 = x12329 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12330);
            reg = x12330;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12331 = Fp(x12326.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12332 = x12331 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12332);
            reg = x12332;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12333 = Fp(x12326.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12334 = x12333 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12334);
            reg = x12334;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12335 = Fp(x12326.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12336 = x12335 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12336);
            reg = x12336;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12337 = Fp(x12326.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12338 = x12337 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12338);
            reg = x12338;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12339 = Fp(x12326.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12340 = x12339 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12340);
            reg = x12340;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12341 = Fp(x12326.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12342 = x12341 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12342);
            reg = x12342;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12343 = Fp(x12326.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12344 = x12343 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12344);
            reg = x12344;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12345 = Fp(x12326.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12346 = x12345 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12346);
            reg = x12346;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12347 = Fp(x12326.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12348 = x12347 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12348);
            reg = x12348;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12349 = Fp(x12326.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12350 = x12349 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12350);
            reg = x12350;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12351 = Fp(x12326.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12352 = x12351 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12352);
            reg = x12352;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12353 = Fp(x12326.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12354 = x12353 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12354);
            reg = x12354;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12355 = Fp(x12326.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12356 = x12355 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12356);
            reg = x12356;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12357 = Fp(x12326.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12358 = x12357 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12358);
            reg = x12358;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit34/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12359 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12359 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit35/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12360 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12360 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12361 = x12360 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12362 = x12359 + x12361;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit36/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12363 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12363 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12364 = x12363 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12365 = x12362 + x12364;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit37/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12366 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12366 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12367 = x12366 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12368 = x12365 + x12367;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit38/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12369 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12369 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12370 = x12369 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12371 = x12368 + x12370;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit39/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12372 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12372 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12373 = x12372 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12374 = x12371 + x12373;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit40/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12375 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12375 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12376 = x12375 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12377 = x12374 + x12376;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit41/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12378 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12378 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12379 = x12378 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12380 = x12377 + x12379;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit42/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12381 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12381 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12382 = x12381 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12383 = x12380 + x12382;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit43/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12384 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12384 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12385 = x12384 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12386 = x12383 + x12385;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit44/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12387 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12387 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12388 = x12387 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12389 = x12386 + x12388;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit45/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12390 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12390 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12391 = x12390 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12392 = x12389 + x12391;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit46/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12393 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12393 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12394 = x12393 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12395 = x12392 + x12394;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit47/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12396 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12396 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12397 = x12396 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12398 = x12395 + x12397;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit48/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12399 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12399 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12400 = x12399 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12401 = x12398 + x12400;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit49/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12402 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12402 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12403 = x12402 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12404 = x12401 + x12403;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12405 = x12326 - x12404;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12406 = x12405 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12407 = Fp(x12406.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12407);
            reg = x12407;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12408 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x12408 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12409 = x12406 - x12408;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12410 = x12409 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12411 = x88 - x12410;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12412 = x12410 * x12411;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12412 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12413 = x12327 + x12406;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12414 = Fp(x12413.asUInt32() & x88.asUInt32());
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12414);
            reg = x12414;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12415 = Fp(x12413.asUInt32() & x85.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12416 = x12415 * x58;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12416);
            reg = x12416;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12417 = Fp(x12413.asUInt32() & x81.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12418 = x12417 * x79;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12418);
            reg = x12418;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12419 = Fp(x12413.asUInt32() & x71.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12420 = x12419 * x59;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12420);
            reg = x12420;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12421 = Fp(x12413.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12422 = x12421 * x60;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12422);
            reg = x12422;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12423 = Fp(x12413.asUInt32() & x63.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12424 = x12423 * x62;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12424);
            reg = x12424;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12425 = Fp(x12413.asUInt32() & x57.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12426 = x12425 * x56;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12426);
            reg = x12426;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12427 = Fp(x12413.asUInt32() & x66.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12428 = x12427 * x65;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12428);
            reg = x12428;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12429 = Fp(x12413.asUInt32() & x83.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12430 = x12429 * x82;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12430);
            reg = x12430;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12431 = Fp(x12413.asUInt32() & x24.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12432 = x12431 * x23;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12432);
            reg = x12432;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12433 = Fp(x12413.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12434 = x12433 * x21;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12434);
            reg = x12434;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12435 = Fp(x12413.asUInt32() & x20.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12436 = x12435 * x19;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12436);
            reg = x12436;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12437 = Fp(x12413.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12438 = x12437 * x17;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12438);
            reg = x12438;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12439 = Fp(x12413.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12440 = x12439 * x15;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12440);
            reg = x12440;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12441 = Fp(x12413.asUInt32() & x38.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12442 = x12441 * x14;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12442);
            reg = x12442;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12443 = Fp(x12413.asUInt32() & x13.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12444 = x12443 * x12;
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12444);
            reg = x12444;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit50/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12445 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12445 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit51/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12446 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12446 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12447 = x12446 * x85;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12448 = x12445 + x12447;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit52/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12449 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12449 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12450 = x12449 * x81;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12451 = x12448 + x12450;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit53/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12452 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12452 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12453 = x12452 * x71;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12454 = x12451 + x12453;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit54/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12455 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12455 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12456 = x12455 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12457 = x12454 + x12456;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit55/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12458 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12458 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12459 = x12458 * x63;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12460 = x12457 + x12459;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit56/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12461 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12461 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12462 = x12461 * x57;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12463 = x12460 + x12462;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit57/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12464 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12464 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12465 = x12464 * x66;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12466 = x12463 + x12465;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit58/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12467 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12467 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12468 = x12467 * x83;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12469 = x12466 + x12468;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit59/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12470 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12470 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12471 = x12470 * x24;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12472 = x12469 + x12471;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit60/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12473 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12473 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12474 = x12473 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12475 = x12472 + x12474;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit61/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12476 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12476 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12477 = x12476 * x20;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12478 = x12475 + x12477;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit62/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12479 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12479 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12480 = x12479 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12481 = x12478 + x12480;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit63/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12482 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12482 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12483 = x12482 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12484 = x12481 + x12483;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit64/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12485 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12485 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12486 = x12485 * x38;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12487 = x12484 + x12486;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit65/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12488 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12488 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12489 = x12488 * x13;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12490 = x12487 + x12489;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12491 = x12413 - x12490;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12492 = x12491 * x11;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12493 = Fp(x12492.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12493);
            reg = x12493;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12494 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x12494 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12495 = x12492 - x12494;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12496 = x12495 * x79;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12497 = x88 - x12496;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12498 = x12496 * x12497;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12498 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12499 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x12499 != Fp::invalid());
      if (x12499 != 0) {
        if (x8523 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":392:38))
          auto x12500 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x12500 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":392:7)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12500);
            reg = x12500;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":393:38))
          auto x12501 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12501 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":393:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12501);
            reg = x12501;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":394:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
        }
        if (x8524 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":398:43))
          auto x12502 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x12502 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":398:43)
          auto x12503 = x12502 + x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":398:7)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12503);
            reg = x12503;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":399:43))
          auto x12504 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12504 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":399:43)
          auto x12505 = x12504 + x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":399:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12505);
            reg = x12505;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":400:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":403:27)
      auto x12506 = x88 - x12499;
      if (x12506 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg2"("cirgen/circuit/rv32im/sha.cpp":404:36))
        auto x12507 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x12507 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":404:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12507);
          reg = x12507;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg3"("cirgen/circuit/rv32im/sha.cpp":405:36))
        auto x12508 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12508 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":405:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12508);
          reg = x12508;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":406:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/components/mux.h":37:25))
    auto x12509 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x12509 != Fp::invalid());
    if (x12509 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12510 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x12510 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":251:41)
      auto x12511 = x527 * x79;
      {
        host_args.at(0) = x12511;
        host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
        auto x12512 = host_outs.at(0);
        auto x12513 = host_outs.at(1);
        auto x12514 = host_outs.at(2);
        auto x12515 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12512);
          reg = x12512;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12513);
          reg = x12513;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12514);
          reg = x12514;
        }
        // loc("cirgen/components/u32.cpp":76:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12515);
          reg = x12515;
        }
      }
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12516 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x12516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12517 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x12517 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12518 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x12518 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12519 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x12519 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":104:3)
      {
        auto& reg = args[2][107 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12511);
        reg = x12511;
      }
      // loc("cirgen/components/ram.cpp":105:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12510);
        reg = x12510;
      }
      // loc("cirgen/components/ram.cpp":106:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12516);
        reg = x12516;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12517);
        reg = x12517;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12518);
        reg = x12518;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12519);
        reg = x12519;
      }
      // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/ffpu.cpp":253:69))
      auto x12520 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x12520 != Fp::invalid());
      if (x12520 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12521 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x12521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12522 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x12522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12523 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12524 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12524 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x12525 = x12522 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12526 = x12521 + x12525;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12527 = x12523 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12528 = x12526 + x12527;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12529 = x12524 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12530 = x12528 + x12529;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":259:27)
        auto x12531 = x12530 * x79;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":259:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12531);
          reg = x12531;
        }
        {
          host_args.at(0) = x26;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12532 = host_outs.at(0);
          auto x12533 = host_outs.at(1);
          auto x12534 = host_outs.at(2);
          auto x12535 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12532);
            reg = x12532;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12533);
            reg = x12533;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12534);
            reg = x12534;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12535);
            reg = x12535;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12536 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x12536 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12537 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12538 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12539 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12539 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12536);
          reg = x12536;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12537);
          reg = x12537;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12538);
          reg = x12538;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12539);
          reg = x12539;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x12540 = x12537 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12541 = x12536 + x12540;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12542 = x12538 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12543 = x12541 + x12542;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12544 = x12539 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12545 = x12543 + x12544;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":262:5)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12545);
          reg = x12545;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("Top/Mux/4/Mux/8/Mux/4/Reg"("cirgen/circuit/rv32im/ffpu.cpp":266:50))
        auto x12546 = args[2][180 * steps + ((cycle - 1) & mask)];
        assert(x12546 != Fp::invalid());
        host_args.at(0) = x12546;
        host(ctx, "log", "origPc: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":268:24)
        auto x12547 = x12546 + x81;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":268:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12547);
          reg = x12547;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12548 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12548 != Fp::invalid());
        host_args.at(0) = x12530;
        host_args.at(1) = x12548;
        host_args.at(2) = x12546;
        host(ctx, "log", "FFPU INIT, baseAddr = %u, haltPos = %u, origPc = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":276:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":277:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        {
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/onehot.h":35:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x12549 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12549 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x12550 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12550 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12551 = x12550 * x85;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12552 = x12549 + x12551;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x12553 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12553 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12554 = x12553 * x80;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12555 = x12552 + x12554;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x12556 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12556 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12557 = x12556 * x81;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12558 = x12555 + x12557;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x12559 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12559 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12560 = x12559 * x74;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12561 = x12558 + x12560;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x12562 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12562 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12563 = x12562 * x73;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12564 = x12561 + x12563;
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x12565 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12565 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":44:19)
        auto x12566 = x12565 * x72;
        // loc("./cirgen/components/onehot.h":44:13)
        auto x12567 = x12564 + x12566;
        // loc("./cirgen/components/onehot.h":38:8)
        if (x12567 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":282:22)
      auto x12568 = x88 - x12520;
      if (x12568 != 0) {
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":284:58))
        auto x12569 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x12569 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":284:5)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12569);
          reg = x12569;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/ffpu.cpp":285:40))
        auto x12570 = args[2][168 * steps + ((cycle - 1) & mask)];
        assert(x12570 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":285:5)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12570);
          reg = x12570;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":286:52))
        auto x12571 = args[2][173 * steps + ((cycle - 1) & mask)];
        assert(x12571 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":286:5)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12571);
          reg = x12571;
        }
        // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12572 = args[2][178 * steps + ((cycle - 1) & mask)];
        assert(x12572 != Fp::invalid());
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12572);
          reg = x12572;
        }
        // loc("Top/Mux/4/Mux/12/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":289:60))
        auto x12573 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x12573 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":289:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12573);
          reg = x12573;
        }
      }
      {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":304:20)
        auto x12574 = Fp(x12516.asUInt32() & x80.asUInt32());
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12574);
          reg = x12574;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":305:23)
        auto x12575 = Fp(x12516.asUInt32() & x81.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":305:22)
        auto x12576 = x12575 * x79;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12576);
          reg = x12576;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":306:25)
        auto x12577 = Fp(x12516.asUInt32() & x71.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":306:24)
        auto x12578 = x12577 * x59;
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12578);
          reg = x12578;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":307:21)
        auto x12579 = Fp(x12516.asUInt32() & x45.asUInt32());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":307:20)
        auto x12580 = x12579 * x60;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x12581 = Fp(x12580.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12581);
            reg = x12581;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12582 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x12582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/12/Bit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12583 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x12583 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:18)
      auto x12584 = x12583 * x81;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12585 = x12582 + x12584;
      // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x12586 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x12586 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:43)
      auto x12587 = x12586 * x71;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12588 = x12585 + x12587;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement7/Reg1"("cirgen/components/bytes.cpp":78:10))
      auto x12589 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x12589 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:70)
      auto x12590 = x12589 * x61;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12591 = x12588 + x12590;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      auto x12592 = x12591 - x12516;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":309:6)
      if (x12592 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:309");
      // loc("cirgen/circuit/rv32im/ffpu.cpp":323:17)
      auto x12593 = x12519 * x83;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":323:17)
      auto x12594 = x12593 + x12518;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12595 = x12517 * x57;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:34)
      auto x12596 = x12589 * x81;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12597 = x12595 + x12596;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:57)
      auto x12598 = x12586 * x85;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12599 = x12597 + x12598;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":325:7)
      auto x12600 = x12599 + x12583;
      {
        if (x12568 != 0) {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":343:31)
          auto x12601 = x12582 - x88;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":343:31)
          auto x12602 = (x12601 == 0) ? Fp(1) : Fp(0);
          if (x12602 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][160 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x88);
                reg = x88;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12603 = args[2][161 * steps + ((cycle - 0) & mask)];
            assert(x12603 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12604 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12604 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12605 = x12604 * x85;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12606 = x12603 + x12605;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12607 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12607 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12608 = x12607 * x80;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12609 = x12606 + x12608;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12610 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12610 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12611 = x12610 * x81;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12612 = x12609 + x12611;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12613 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12613 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12614 = x12613 * x74;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12615 = x12612 + x12614;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12616 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12616 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12617 = x12616 * x73;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12618 = x12615 + x12617;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12619 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12619 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12620 = x12619 * x72;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12621 = x12618 + x12620;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12622 = x12621 - x88;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12622 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":344:31)
          auto x12623 = x12582 - x85;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":344:31)
          auto x12624 = (x12623 == 0) ? Fp(1) : Fp(0);
          if (x12624 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][160 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x88);
                reg = x88;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12625 = args[2][161 * steps + ((cycle - 0) & mask)];
            assert(x12625 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12626 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12626 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12627 = x12626 * x85;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12628 = x12625 + x12627;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12629 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12629 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12630 = x12629 * x80;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12631 = x12628 + x12630;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12632 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12632 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12633 = x12632 * x81;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12634 = x12631 + x12633;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12635 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12635 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12636 = x12635 * x74;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12637 = x12634 + x12636;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12638 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12638 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12639 = x12638 * x73;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12640 = x12637 + x12639;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12641 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12641 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12642 = x12641 * x72;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12643 = x12640 + x12642;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12644 = x12643 - x85;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12644 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":345:31)
          auto x12645 = x12582 - x80;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":345:31)
          auto x12646 = (x12645 == 0) ? Fp(1) : Fp(0);
          if (x12646 != 0) {
            {
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][160 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][161 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][162 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][163 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x88);
                reg = x88;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][164 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][165 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][166 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
              // loc("./cirgen/components/onehot.h":35:9)
              {
                auto& reg = args[2][167 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x87);
                reg = x87;
              }
            }
            // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12647 = args[2][161 * steps + ((cycle - 0) & mask)];
            assert(x12647 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12648 = args[2][162 * steps + ((cycle - 0) & mask)];
            assert(x12648 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12649 = x12648 * x85;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12650 = x12647 + x12649;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12651 = args[2][163 * steps + ((cycle - 0) & mask)];
            assert(x12651 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12652 = x12651 * x80;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12653 = x12650 + x12652;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12654 = args[2][164 * steps + ((cycle - 0) & mask)];
            assert(x12654 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12655 = x12654 * x81;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12656 = x12653 + x12655;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12657 = args[2][165 * steps + ((cycle - 0) & mask)];
            assert(x12657 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12658 = x12657 * x74;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12659 = x12656 + x12658;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12660 = args[2][166 * steps + ((cycle - 0) & mask)];
            assert(x12660 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12661 = x12660 * x73;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12662 = x12659 + x12661;
            // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
            auto x12663 = args[2][167 * steps + ((cycle - 0) & mask)];
            assert(x12663 != Fp::invalid());
            // loc("./cirgen/components/onehot.h":44:19)
            auto x12664 = x12663 * x72;
            // loc("./cirgen/components/onehot.h":44:13)
            auto x12665 = x12662 + x12664;
            // loc("./cirgen/components/onehot.h":38:8)
            auto x12666 = x12665 - x80;
            // loc("./cirgen/components/onehot.h":38:8)
            if (x12666 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":346:24)
          auto x12667 = (x12582 == 0) ? Fp(1) : Fp(0);
          if (x12667 != 0) {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":347:29)
            auto x12668 = x88 - x12586;
            if (x12668 != 0) {
              if (x12583 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x88);
                    reg = x88;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12669 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x12669 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12670 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x12670 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12671 = x12670 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12672 = x12669 + x12671;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12673 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x12673 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12674 = x12673 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12675 = x12672 + x12674;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12676 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x12676 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12677 = x12676 * x81;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12678 = x12675 + x12677;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12679 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x12679 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12680 = x12679 * x74;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12681 = x12678 + x12680;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12682 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x12682 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12683 = x12682 * x73;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12684 = x12681 + x12683;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12685 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x12685 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12686 = x12685 * x72;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12687 = x12684 + x12686;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x12688 = x12687 - x81;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x12688 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":349:29)
              auto x12689 = x88 - x12583;
              if (x12689 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x88);
                    reg = x88;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12690 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x12690 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12691 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x12691 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12692 = x12691 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12693 = x12690 + x12692;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12694 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x12694 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12695 = x12694 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12696 = x12693 + x12695;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12697 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x12697 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12698 = x12697 * x81;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12699 = x12696 + x12698;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12700 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x12700 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12701 = x12700 * x74;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12702 = x12699 + x12701;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12703 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x12703 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12704 = x12703 * x73;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12705 = x12702 + x12704;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12706 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x12706 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12707 = x12706 * x72;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12708 = x12705 + x12707;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x12709 = x12708 - x74;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x12709 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
            }
            if (x12586 != 0) {
              // loc("cirgen/circuit/rv32im/ffpu.cpp":352:30)
              auto x12710 = (x12517 == 0) ? Fp(1) : Fp(0);
              if (x12710 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x88);
                    reg = x88;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12711 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x12711 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12712 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x12712 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12713 = x12712 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12714 = x12711 + x12713;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12715 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x12715 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12716 = x12715 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12717 = x12714 + x12716;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12718 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x12718 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12719 = x12718 * x81;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12720 = x12717 + x12719;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12721 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x12721 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12722 = x12721 * x74;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12723 = x12720 + x12722;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12724 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x12724 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12725 = x12724 * x73;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12726 = x12723 + x12725;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12727 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x12727 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12728 = x12727 * x72;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12729 = x12726 + x12728;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x12730 = x12729 - x73;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x12730 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
              // loc("cirgen/circuit/rv32im/ffpu.cpp":353:34)
              auto x12731 = x12517 - x88;
              // loc("cirgen/circuit/rv32im/ffpu.cpp":353:34)
              auto x12732 = (x12731 == 0) ? Fp(1) : Fp(0);
              if (x12732 != 0) {
                {
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][160 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][161 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][162 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][163 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][164 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][165 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][166 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x87);
                    reg = x87;
                  }
                  // loc("./cirgen/components/onehot.h":35:9)
                  {
                    auto& reg = args[2][167 * steps + cycle];
                    assert(reg == Fp::invalid() || reg == x88);
                    reg = x88;
                  }
                }
                // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12733 = args[2][161 * steps + ((cycle - 0) & mask)];
                assert(x12733 != Fp::invalid());
                // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12734 = args[2][162 * steps + ((cycle - 0) & mask)];
                assert(x12734 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12735 = x12734 * x85;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12736 = x12733 + x12735;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12737 = args[2][163 * steps + ((cycle - 0) & mask)];
                assert(x12737 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12738 = x12737 * x80;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12739 = x12736 + x12738;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12740 = args[2][164 * steps + ((cycle - 0) & mask)];
                assert(x12740 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12741 = x12740 * x81;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12742 = x12739 + x12741;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12743 = args[2][165 * steps + ((cycle - 0) & mask)];
                assert(x12743 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12744 = x12743 * x74;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12745 = x12742 + x12744;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12746 = args[2][166 * steps + ((cycle - 0) & mask)];
                assert(x12746 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12747 = x12746 * x73;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12748 = x12745 + x12747;
                // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
                auto x12749 = args[2][167 * steps + ((cycle - 0) & mask)];
                assert(x12749 != Fp::invalid());
                // loc("./cirgen/components/onehot.h":44:19)
                auto x12750 = x12749 * x72;
                // loc("./cirgen/components/onehot.h":44:13)
                auto x12751 = x12748 + x12750;
                // loc("./cirgen/components/onehot.h":38:8)
                auto x12752 = x12751 - x72;
                // loc("./cirgen/components/onehot.h":38:8)
                if (x12752 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:38");
              }
            }
          }
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg"("cirgen/circuit/rv32im/ffpu.cpp":364:21))
        auto x12753 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12753 != Fp::invalid());
        if (x12753 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded INIT from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":365:26))
        auto x12754 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12754 != Fp::invalid());
        if (x12754 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded BINOP_ADD from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":366:26))
        auto x12755 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12755 != Fp::invalid());
        if (x12755 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded BINOP_SUB from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":367:26))
        auto x12756 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12756 != Fp::invalid());
        if (x12756 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded BINOP_MUL from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":368:20))
        auto x12757 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12757 != Fp::invalid());
        if (x12757 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded SET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":369:20))
        auto x12758 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12758 != Fp::invalid());
        if (x12758 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded GET from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":370:30))
        auto x12759 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12759 != Fp::invalid());
        if (x12759 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded UNOP_IDENTITY from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":371:25))
        auto x12760 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12760 != Fp::invalid());
        if (x12760 != 0) {
          host_args.at(0) = x12516;
          host_args.at(1) = x12517;
          host_args.at(2) = x12518;
          host_args.at(3) = x12519;
          host_args.at(4) = x527;
          host(ctx, "log", "FFPU Decoded UNOP_INV from %w, pc = %u", host_args.data(), 5, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":376:32))
      auto x12761 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x12761 != Fp::invalid());
      if (x12761 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        auto x12762 = x12582 - x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":377:8)
        if (x12762 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:377");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12763 = x12594 + x6;
        {
          host_args.at(0) = x12763;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12764 = host_outs.at(0);
          auto x12765 = host_outs.at(1);
          auto x12766 = host_outs.at(2);
          auto x12767 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12764);
            reg = x12764;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12765);
            reg = x12765;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12766);
            reg = x12766;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12767);
            reg = x12767;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12768 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x12768 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12769 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12769 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12770 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12771 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12771 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12763);
          reg = x12763;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12768);
          reg = x12768;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12769);
          reg = x12769;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12770);
          reg = x12770;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12771);
          reg = x12771;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12772 = x12600 + x6;
        {
          host_args.at(0) = x12772;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12773 = host_outs.at(0);
          auto x12774 = host_outs.at(1);
          auto x12775 = host_outs.at(2);
          auto x12776 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12773);
            reg = x12773;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12774);
            reg = x12774;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12775);
            reg = x12775;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12776);
            reg = x12776;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12777 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x12777 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12778 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x12778 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12779 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x12779 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12780 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x12780 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12772);
          reg = x12772;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12777);
          reg = x12777;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12778);
          reg = x12778;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12779);
          reg = x12779;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12780);
          reg = x12780;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x12781 = x12768 + x12777;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x12782 = x12769 + x12778;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x12783 = x12770 + x12779;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":60:85)
        auto x12784 = x12771 + x12780;
        host_args.at(0) = x12594;
        host_args.at(1) = x12768;
        host_args.at(2) = x12769;
        host_args.at(3) = x12770;
        host_args.at(4) = x12771;
        host_args.at(5) = x12600;
        host_args.at(6) = x12777;
        host_args.at(7) = x12778;
        host_args.at(8) = x12779;
        host_args.at(9) = x12780;
        host_args.at(10) = x12781;
        host_args.at(11) = x12782;
        host_args.at(12) = x12783;
        host_args.at(13) = x12784;
        host(ctx, "log", "FFPU: Add %%%u (%w) + %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x12785 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12785 != Fp::invalid());
        host_args.at(0) = x12785;
        host_args.at(1) = x12781;
        host_args.at(2) = x12782;
        host_args.at(3) = x12783;
        host_args.at(4) = x12784;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12786 = x12785 + x6;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12781);
          reg = x12781;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12782);
          reg = x12782;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12783);
          reg = x12783;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12784);
          reg = x12784;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12787 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x12787 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12788 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x12788 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12789 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x12789 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12790 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x12790 != Fp::invalid());
          host_args.at(0) = x12786;
          host_args.at(1) = x12787;
          host_args.at(2) = x12788;
          host_args.at(3) = x12789;
          host_args.at(4) = x12790;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12791 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x12791 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12792 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x12792 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12793 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x12793 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12794 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x12794 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12786);
          reg = x12786;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12791);
          reg = x12791;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12792);
          reg = x12792;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12793);
          reg = x12793;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12794);
          reg = x12794;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x12795 = x12785 + x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12795);
          reg = x12795;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg2"("cirgen/circuit/rv32im/ffpu.cpp":380:32))
      auto x12796 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x12796 != Fp::invalid());
      if (x12796 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        auto x12797 = x12582 - x85;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":381:8)
        if (x12797 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:381");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12798 = x12594 + x6;
        {
          host_args.at(0) = x12798;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12799 = host_outs.at(0);
          auto x12800 = host_outs.at(1);
          auto x12801 = host_outs.at(2);
          auto x12802 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12799);
            reg = x12799;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12800);
            reg = x12800;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12801);
            reg = x12801;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12802);
            reg = x12802;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12803 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x12803 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12804 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12804 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12805 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12805 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12806 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12806 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12798);
          reg = x12798;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12803);
          reg = x12803;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12804);
          reg = x12804;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12805);
          reg = x12805;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12806);
          reg = x12806;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12807 = x12600 + x6;
        {
          host_args.at(0) = x12807;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12808 = host_outs.at(0);
          auto x12809 = host_outs.at(1);
          auto x12810 = host_outs.at(2);
          auto x12811 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12808);
            reg = x12808;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12809);
            reg = x12809;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12810);
            reg = x12810;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12811);
            reg = x12811;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12812 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x12812 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12813 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x12813 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12814 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x12814 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12815 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x12815 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12807);
          reg = x12807;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12812);
          reg = x12812;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12813);
          reg = x12813;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12814);
          reg = x12814;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12815);
          reg = x12815;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x12816 = x12803 - x12812;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x12817 = x12804 - x12813;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x12818 = x12805 - x12814;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":65:85)
        auto x12819 = x12806 - x12815;
        host_args.at(0) = x12594;
        host_args.at(1) = x12803;
        host_args.at(2) = x12804;
        host_args.at(3) = x12805;
        host_args.at(4) = x12806;
        host_args.at(5) = x12600;
        host_args.at(6) = x12812;
        host_args.at(7) = x12813;
        host_args.at(8) = x12814;
        host_args.at(9) = x12815;
        host_args.at(10) = x12816;
        host_args.at(11) = x12817;
        host_args.at(12) = x12818;
        host_args.at(13) = x12819;
        host(ctx, "log", "FFPU: Sub %%%u (%w) - %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x12820 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12820 != Fp::invalid());
        host_args.at(0) = x12820;
        host_args.at(1) = x12816;
        host_args.at(2) = x12817;
        host_args.at(3) = x12818;
        host_args.at(4) = x12819;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12821 = x12820 + x6;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12816);
          reg = x12816;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12817);
          reg = x12817;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12818);
          reg = x12818;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12819);
          reg = x12819;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12822 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x12822 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12823 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x12823 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12824 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x12824 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12825 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x12825 != Fp::invalid());
          host_args.at(0) = x12821;
          host_args.at(1) = x12822;
          host_args.at(2) = x12823;
          host_args.at(3) = x12824;
          host_args.at(4) = x12825;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12826 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x12826 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12827 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x12827 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12828 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x12828 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12829 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x12829 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12821);
          reg = x12821;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12826);
          reg = x12826;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12827);
          reg = x12827;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12828);
          reg = x12828;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12829);
          reg = x12829;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x12830 = x12820 + x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12830);
          reg = x12830;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":384:32))
      auto x12831 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x12831 != Fp::invalid());
      if (x12831 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":385:8)
        auto x12832 = x12582 - x80;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":385:8)
        if (x12832 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:385");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12833 = x12594 + x6;
        {
          host_args.at(0) = x12833;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12834 = host_outs.at(0);
          auto x12835 = host_outs.at(1);
          auto x12836 = host_outs.at(2);
          auto x12837 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12834);
            reg = x12834;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12835);
            reg = x12835;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12836);
            reg = x12836;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12837);
            reg = x12837;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12838 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x12838 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12839 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12839 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12840 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12840 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12841 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12841 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12833);
          reg = x12833;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12838);
          reg = x12838;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12839);
          reg = x12839;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12840);
          reg = x12840;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12841);
          reg = x12841;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12842 = x12600 + x6;
        {
          host_args.at(0) = x12842;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12843 = host_outs.at(0);
          auto x12844 = host_outs.at(1);
          auto x12845 = host_outs.at(2);
          auto x12846 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12843);
            reg = x12843;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12844);
            reg = x12844;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12845);
            reg = x12845;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12846);
            reg = x12846;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12847 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x12847 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12848 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x12848 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12849 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x12849 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12850 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x12850 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12842);
          reg = x12842;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12847);
          reg = x12847;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12848);
          reg = x12848;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12849);
          reg = x12849;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12850);
          reg = x12850;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12851 = x12838 * x12847;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12852 = x12839 * x12850;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12853 = x12840 * x12849;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12854 = x12852 + x12853;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12855 = x12841 * x12848;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12856 = x12854 + x12855;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12857 = x12856 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12858 = x12851 + x12857;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12859 = x12838 * x12848;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12860 = x12839 * x12847;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12861 = x12859 + x12860;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12862 = x12840 * x12850;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12863 = x12841 * x12849;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12864 = x12862 + x12863;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12865 = x12864 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12866 = x12861 + x12865;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12867 = x12838 * x12849;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12868 = x12839 * x12848;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12869 = x12867 + x12868;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12870 = x12840 * x12847;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12871 = x12869 + x12870;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12872 = x12841 * x12850;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12873 = x12872 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12874 = x12871 + x12873;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12875 = x12838 * x12850;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12876 = x12839 * x12849;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12877 = x12875 + x12876;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12878 = x12840 * x12848;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12879 = x12877 + x12878;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12880 = x12841 * x12847;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":70:85)
        auto x12881 = x12879 + x12880;
        host_args.at(0) = x12594;
        host_args.at(1) = x12838;
        host_args.at(2) = x12839;
        host_args.at(3) = x12840;
        host_args.at(4) = x12841;
        host_args.at(5) = x12600;
        host_args.at(6) = x12847;
        host_args.at(7) = x12848;
        host_args.at(8) = x12849;
        host_args.at(9) = x12850;
        host_args.at(10) = x12858;
        host_args.at(11) = x12866;
        host_args.at(12) = x12874;
        host_args.at(13) = x12881;
        host(ctx, "log", "FFPU: Mul %%%u (%w) * %%%u (%w) -> %w", host_args.data(), 14, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x12882 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12882 != Fp::invalid());
        host_args.at(0) = x12882;
        host_args.at(1) = x12858;
        host_args.at(2) = x12866;
        host_args.at(3) = x12874;
        host_args.at(4) = x12881;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x12883 = x12882 + x6;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12858);
          reg = x12858;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12866);
          reg = x12866;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12874);
          reg = x12874;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12881);
          reg = x12881;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12884 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x12884 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12885 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x12885 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12886 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x12886 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12887 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x12887 != Fp::invalid());
          host_args.at(0) = x12883;
          host_args.at(1) = x12884;
          host_args.at(2) = x12885;
          host_args.at(3) = x12886;
          host_args.at(4) = x12887;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12888 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x12888 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12889 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x12889 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12890 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x12890 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12891 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x12891 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12883);
          reg = x12883;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12888);
          reg = x12888;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12889);
          reg = x12889;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12890);
          reg = x12890;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12891);
          reg = x12891;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x12892 = x12882 + x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12892);
          reg = x12892;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":388:26))
      auto x12893 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x12893 != Fp::invalid());
      if (x12893 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":389:8)
        if (x12582 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:389");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":390:8)
        auto x12894 = x12583 - x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":390:8)
        if (x12894 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:390");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":391:8)
        if (x12586 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:391");
        // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":165:46))
        auto x12895 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12895 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":165:46)
        auto x12896 = x12895 + x12517;
        {
          host_args.at(0) = x12896;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x12897 = host_outs.at(0);
          auto x12898 = host_outs.at(1);
          auto x12899 = host_outs.at(2);
          auto x12900 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12897);
            reg = x12897;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12898);
            reg = x12898;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12899);
            reg = x12899;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12900);
            reg = x12900;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12901 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x12901 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12902 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x12902 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12903 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x12903 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12904 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x12904 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12896);
          reg = x12896;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12901);
          reg = x12901;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12902);
          reg = x12902;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12903);
          reg = x12903;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12904);
          reg = x12904;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x12905 = x12902 * x83;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12906 = x12901 + x12905;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12907 = x12903 * x77;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12908 = x12906 + x12907;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12909 = x12904 * x76;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12910 = x12908 + x12909;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":165:18)
        auto x12911 = x12910 * x79;
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x12912 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12912 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":167:27)
        auto x12913 = x88 - x12912;
        if (x12913 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12914 = args[2][131 * steps + ((cycle - 1) & mask)];
          assert(x12914 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12915 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x12915 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12916 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12916 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12917 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12917 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":183:38)
            auto x12918 = x12594 * x81;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":183:27)
            auto x12919 = x12911 + x12918;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x12920 = x12914 * x1;
            // loc("cirgen/components/u32.cpp":41:12)
            auto x12921 = Fp(x12920.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/u32.cpp":42:12)
            auto x12922 = Fp(x12920.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":43:12)
            auto x12923 = Fp(x12920.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":44:12)
            auto x12924 = x12920 - x12921;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x12925 = x12924 - x12922;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x12926 = x12925 - x12923;
            // loc("cirgen/components/u32.cpp":48:21)
            auto x12927 = x12922 * x82;
            // loc("cirgen/components/u32.cpp":49:21)
            auto x12928 = x12923 * x11;
            // loc("cirgen/components/u32.cpp":50:21)
            auto x12929 = x12926 * x2;
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12921);
              reg = x12921;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12927);
              reg = x12927;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12928);
              reg = x12928;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12929);
              reg = x12929;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12930 = args[2][117 * steps + ((cycle - 0) & mask)];
              assert(x12930 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12931 = args[2][118 * steps + ((cycle - 0) & mask)];
              assert(x12931 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12932 = args[2][119 * steps + ((cycle - 0) & mask)];
              assert(x12932 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12933 = args[2][120 * steps + ((cycle - 0) & mask)];
              assert(x12933 != Fp::invalid());
              host_args.at(0) = x12919;
              host_args.at(1) = x12930;
              host_args.at(2) = x12931;
              host_args.at(3) = x12932;
              host_args.at(4) = x12933;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12934 = args[2][117 * steps + ((cycle - 0) & mask)];
            assert(x12934 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12935 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x12935 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12936 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x12936 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12937 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x12937 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":104:3)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12919);
              reg = x12919;
            }
            // loc("cirgen/components/ram.cpp":105:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12510);
              reg = x12510;
            }
            // loc("cirgen/components/ram.cpp":106:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x88);
              reg = x88;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12934);
              reg = x12934;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12935);
              reg = x12935;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12936);
              reg = x12936;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12937);
              reg = x12937;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":184:27)
            auto x12938 = x12919 + x88;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x12939 = x12915 * x1;
            // loc("cirgen/components/u32.cpp":41:12)
            auto x12940 = Fp(x12939.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/u32.cpp":42:12)
            auto x12941 = Fp(x12939.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":43:12)
            auto x12942 = Fp(x12939.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":44:12)
            auto x12943 = x12939 - x12940;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x12944 = x12943 - x12941;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x12945 = x12944 - x12942;
            // loc("cirgen/components/u32.cpp":48:21)
            auto x12946 = x12941 * x82;
            // loc("cirgen/components/u32.cpp":49:21)
            auto x12947 = x12942 * x11;
            // loc("cirgen/components/u32.cpp":50:21)
            auto x12948 = x12945 * x2;
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12940);
              reg = x12940;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12946);
              reg = x12946;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12947);
              reg = x12947;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12948);
              reg = x12948;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12949 = args[2][124 * steps + ((cycle - 0) & mask)];
              assert(x12949 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12950 = args[2][125 * steps + ((cycle - 0) & mask)];
              assert(x12950 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12951 = args[2][126 * steps + ((cycle - 0) & mask)];
              assert(x12951 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
              auto x12952 = args[2][127 * steps + ((cycle - 0) & mask)];
              assert(x12952 != Fp::invalid());
              host_args.at(0) = x12938;
              host_args.at(1) = x12949;
              host_args.at(2) = x12950;
              host_args.at(3) = x12951;
              host_args.at(4) = x12952;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12953 = args[2][124 * steps + ((cycle - 0) & mask)];
            assert(x12953 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12954 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x12954 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12955 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x12955 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x12956 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x12956 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":104:3)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12938);
              reg = x12938;
            }
            // loc("cirgen/components/ram.cpp":105:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12510);
              reg = x12510;
            }
            // loc("cirgen/components/ram.cpp":106:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x88);
              reg = x88;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12953);
              reg = x12953;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12954);
              reg = x12954;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12955);
              reg = x12955;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12956);
              reg = x12956;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":114:10))
          auto x12957 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x12957 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          auto x12958 = x12957 - x12510;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":186:8)
          if (x12958 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:186");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":111:10))
          auto x12959 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x12959 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:32)
          auto x12960 = x12594 * x81;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:21)
          auto x12961 = x12911 + x12960;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          auto x12962 = x12959 - x12961;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":187:8)
          if (x12962 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:187");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12963 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x12963 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12964 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x12964 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12965 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x12965 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12966 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x12966 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x12967 = x12964 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x12968 = x12963 + x12967;
          // loc("./cirgen/components/u32.h":26:12)
          auto x12969 = x12965 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x12970 = x12968 + x12969;
          // loc("./cirgen/components/u32.h":27:12)
          auto x12971 = x12966 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x12972 = x12970 + x12971;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x12973 = x12914 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          auto x12974 = x12972 - x12973;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":188:8)
          if (x12974 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:188");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":114:10))
          auto x12975 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x12975 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":190:8)
          auto x12976 = x12975 - x12510;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":190:8)
          if (x12976 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:190");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":111:10))
          auto x12977 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x12977 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:21)
          auto x12978 = x12961 + x88;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:8)
          auto x12979 = x12977 - x12978;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":191:8)
          if (x12979 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:191");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12980 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x12980 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12981 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x12981 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12982 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x12982 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12983 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x12983 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x12984 = x12981 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x12985 = x12980 + x12984;
          // loc("./cirgen/components/u32.h":26:12)
          auto x12986 = x12982 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x12987 = x12985 + x12986;
          // loc("./cirgen/components/u32.h":27:12)
          auto x12988 = x12983 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x12989 = x12987 + x12988;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x12990 = x12915 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          auto x12991 = x12989 - x12990;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":192:8)
          if (x12991 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:192");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":196:10)
          auto x12992 = x12911 * x81;
          host_args.at(0) = x12517;
          host_args.at(1) = x12992;
          host_args.at(2) = x12594;
          host_args.at(3) = x12914;
          host_args.at(4) = x12915;
          host_args.at(5) = x12916;
          host_args.at(6) = x12917;
          host_args.at(7) = x12914;
          host_args.at(8) = x12915;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (%u, %u, ...)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x12993 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x12993 != Fp::invalid());
          host_args.at(0) = x12993;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12993);
            reg = x12993;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
        }
        if (x12912 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12994 = args[2][131 * steps + ((cycle - 2) & mask)];
          assert(x12994 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12995 = args[2][132 * steps + ((cycle - 2) & mask)];
          assert(x12995 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12996 = args[2][133 * steps + ((cycle - 2) & mask)];
          assert(x12996 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x12997 = args[2][134 * steps + ((cycle - 2) & mask)];
          assert(x12997 != Fp::invalid());
          {
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:38)
            auto x12998 = x12594 * x81;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:27)
            auto x12999 = x12911 + x12998;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":221:27)
            auto x13000 = x12999 + x85;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13001 = x12996 * x1;
            // loc("cirgen/components/u32.cpp":41:12)
            auto x13002 = Fp(x13001.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/u32.cpp":42:12)
            auto x13003 = Fp(x13001.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":43:12)
            auto x13004 = Fp(x13001.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":44:12)
            auto x13005 = x13001 - x13002;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x13006 = x13005 - x13003;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x13007 = x13006 - x13004;
            // loc("cirgen/components/u32.cpp":48:21)
            auto x13008 = x13003 * x82;
            // loc("cirgen/components/u32.cpp":49:21)
            auto x13009 = x13004 * x11;
            // loc("cirgen/components/u32.cpp":50:21)
            auto x13010 = x13007 * x2;
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13002);
              reg = x13002;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13008);
              reg = x13008;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13009);
              reg = x13009;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13010);
              reg = x13010;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13011 = args[2][117 * steps + ((cycle - 0) & mask)];
              assert(x13011 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13012 = args[2][118 * steps + ((cycle - 0) & mask)];
              assert(x13012 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13013 = args[2][119 * steps + ((cycle - 0) & mask)];
              assert(x13013 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13014 = args[2][120 * steps + ((cycle - 0) & mask)];
              assert(x13014 != Fp::invalid());
              host_args.at(0) = x13000;
              host_args.at(1) = x13011;
              host_args.at(2) = x13012;
              host_args.at(3) = x13013;
              host_args.at(4) = x13014;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13015 = args[2][117 * steps + ((cycle - 0) & mask)];
            assert(x13015 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13016 = args[2][118 * steps + ((cycle - 0) & mask)];
            assert(x13016 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13017 = args[2][119 * steps + ((cycle - 0) & mask)];
            assert(x13017 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13018 = args[2][120 * steps + ((cycle - 0) & mask)];
            assert(x13018 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":104:3)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13000);
              reg = x13000;
            }
            // loc("cirgen/components/ram.cpp":105:3)
            {
              auto& reg = args[2][115 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12510);
              reg = x12510;
            }
            // loc("cirgen/components/ram.cpp":106:3)
            {
              auto& reg = args[2][116 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x88);
              reg = x88;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13015);
              reg = x13015;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13016);
              reg = x13016;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13017);
              reg = x13017;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13018);
              reg = x13018;
            }
            // loc("cirgen/circuit/rv32im/ffpu.cpp":222:27)
            auto x13019 = x12999 + x80;
            // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
            auto x13020 = x12997 * x1;
            // loc("cirgen/components/u32.cpp":41:12)
            auto x13021 = Fp(x13020.asUInt32() & x84.asUInt32());
            // loc("cirgen/components/u32.cpp":42:12)
            auto x13022 = Fp(x13020.asUInt32() & x4.asUInt32());
            // loc("cirgen/components/u32.cpp":43:12)
            auto x13023 = Fp(x13020.asUInt32() & x3.asUInt32());
            // loc("cirgen/components/u32.cpp":44:12)
            auto x13024 = x13020 - x13021;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x13025 = x13024 - x13022;
            // loc("cirgen/components/u32.cpp":44:12)
            auto x13026 = x13025 - x13023;
            // loc("cirgen/components/u32.cpp":48:21)
            auto x13027 = x13022 * x82;
            // loc("cirgen/components/u32.cpp":49:21)
            auto x13028 = x13023 * x11;
            // loc("cirgen/components/u32.cpp":50:21)
            auto x13029 = x13026 * x2;
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13021);
              reg = x13021;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13027);
              reg = x13027;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13028);
              reg = x13028;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13029);
              reg = x13029;
            }
            {
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13030 = args[2][124 * steps + ((cycle - 0) & mask)];
              assert(x13030 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13031 = args[2][125 * steps + ((cycle - 0) & mask)];
              assert(x13031 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13032 = args[2][126 * steps + ((cycle - 0) & mask)];
              assert(x13032 != Fp::invalid());
              // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
              auto x13033 = args[2][127 * steps + ((cycle - 0) & mask)];
              assert(x13033 != Fp::invalid());
              host_args.at(0) = x13019;
              host_args.at(1) = x13030;
              host_args.at(2) = x13031;
              host_args.at(3) = x13032;
              host_args.at(4) = x13033;
              host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
            }
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13034 = args[2][124 * steps + ((cycle - 0) & mask)];
            assert(x13034 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13035 = args[2][125 * steps + ((cycle - 0) & mask)];
            assert(x13035 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13036 = args[2][126 * steps + ((cycle - 0) & mask)];
            assert(x13036 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13037 = args[2][127 * steps + ((cycle - 0) & mask)];
            assert(x13037 != Fp::invalid());
            // loc("cirgen/components/ram.cpp":104:3)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13019);
              reg = x13019;
            }
            // loc("cirgen/components/ram.cpp":105:3)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12510);
              reg = x12510;
            }
            // loc("cirgen/components/ram.cpp":106:3)
            {
              auto& reg = args[2][123 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x88);
              reg = x88;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13034);
              reg = x13034;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13035);
              reg = x13035;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13036);
              reg = x13036;
            }
            // loc("cirgen/components/u32.cpp":28:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13037);
              reg = x13037;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("cirgen/components/ram.cpp":114:10))
          auto x13038 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x13038 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          auto x13039 = x13038 - x12510;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":224:8)
          if (x13039 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:224");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("cirgen/components/ram.cpp":111:10))
          auto x13040 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x13040 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:32)
          auto x13041 = x12594 * x81;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:21)
          auto x13042 = x12911 + x13041;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:21)
          auto x13043 = x13042 + x85;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          auto x13044 = x13040 - x13043;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":225:8)
          if (x13044 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:225");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13045 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13045 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13046 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13046 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13047 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13047 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13048 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13048 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13049 = x13046 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13050 = x13045 + x13049;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13051 = x13047 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13052 = x13050 + x13051;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13053 = x13048 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13054 = x13052 + x13053;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13055 = x12996 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          auto x13056 = x13054 - x13055;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":226:8)
          if (x13056 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:226");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("cirgen/components/ram.cpp":114:10))
          auto x13057 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13057 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":228:8)
          auto x13058 = x13057 - x12510;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":228:8)
          if (x13058 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:228");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("cirgen/components/ram.cpp":111:10))
          auto x13059 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13059 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:21)
          auto x13060 = x13042 + x80;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:8)
          auto x13061 = x13059 - x13060;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":229:8)
          if (x13061 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:229");
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13062 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x13062 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13063 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13063 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13064 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13064 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13065 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13065 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13066 = x13063 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13067 = x13062 + x13066;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13068 = x13064 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13069 = x13067 + x13068;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13070 = x13065 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13071 = x13069 + x13070;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":41:10)
          auto x13072 = x12997 * x1;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          auto x13073 = x13071 - x13072;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":230:8)
          if (x13073 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:230");
          // loc("cirgen/circuit/rv32im/ffpu.cpp":234:10)
          auto x13074 = x12911 * x81;
          host_args.at(0) = x12517;
          host_args.at(1) = x13074;
          host_args.at(2) = x12594;
          host_args.at(3) = x12994;
          host_args.at(4) = x12995;
          host_args.at(5) = x12996;
          host_args.at(6) = x12997;
          host_args.at(7) = x12996;
          host_args.at(8) = x12997;
          host(ctx, "log", "FFPU: Set to arg[%u] (%x) [%u] <- %w (... %u, %u)", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13075 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x13075 != Fp::invalid());
          host_args.at(0) = x13075;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13075);
            reg = x13075;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg5"("cirgen/circuit/rv32im/ffpu.cpp":394:26))
      auto x13076 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x13076 != Fp::invalid());
      if (x13076 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":395:8)
        if (x12582 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:395");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":396:8)
        if (x12583 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:396");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":397:8)
        if (x12586 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:397");
        // loc("Top/Mux/4/Mux/12/Bit2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13077 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13077 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":115:27)
        auto x13078 = x88 - x13077;
        if (x13078 != 0) {
          // loc("Top/Mux/4/Mux/12/Reg4"("cirgen/circuit/rv32im/ffpu.cpp":118:48))
          auto x13079 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x13079 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/ffpu.cpp":118:48)
          auto x13080 = x13079 + x12517;
          {
            host_args.at(0) = x13080;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x13081 = host_outs.at(0);
            auto x13082 = host_outs.at(1);
            auto x13083 = host_outs.at(2);
            auto x13084 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][131 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13081);
              reg = x13081;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][132 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13082);
              reg = x13082;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13083);
              reg = x13083;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][134 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13084);
              reg = x13084;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13085 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x13085 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13086 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13086 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13087 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13087 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13088 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13088 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13080);
            reg = x13080;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12510);
            reg = x12510;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13085);
            reg = x13085;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13086);
            reg = x13086;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13087);
            reg = x13087;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13088);
            reg = x13088;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13089 = x13086 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13090 = x13085 + x13089;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13091 = x13087 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13092 = x13090 + x13091;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13093 = x13088 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13094 = x13092 + x13093;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":118:20)
          auto x13095 = x13094 * x79;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":120:64)
          auto x13096 = x12594 * x81;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":120:53)
          auto x13097 = x13095 + x13096;
          {
            host_args.at(0) = x13097;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x13098 = host_outs.at(0);
            auto x13099 = host_outs.at(1);
            auto x13100 = host_outs.at(2);
            auto x13101 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13098);
              reg = x13098;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13099);
              reg = x13099;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13100);
              reg = x13100;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13101);
              reg = x13101;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13102 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13102 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13103 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13103 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13104 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13104 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13105 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13105 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13097);
            reg = x13097;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12510);
            reg = x12510;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13102);
            reg = x13102;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13103);
            reg = x13103;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13104);
            reg = x13104;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13105);
            reg = x13105;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13106 = x13103 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13107 = x13102 + x13106;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13108 = x13104 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13109 = x13107 + x13108;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13110 = x13105 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13111 = x13109 + x13110;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13112 = x13111 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":121:53)
          auto x13113 = x13097 + x88;
          {
            host_args.at(0) = x13113;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x13114 = host_outs.at(0);
            auto x13115 = host_outs.at(1);
            auto x13116 = host_outs.at(2);
            auto x13117 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13114);
              reg = x13114;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13115);
              reg = x13115;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13116);
              reg = x13116;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13117);
              reg = x13117;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13118 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x13118 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13119 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13119 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13120 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13120 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13121 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13121 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13113);
            reg = x13113;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12510);
            reg = x12510;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13118);
            reg = x13118;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13119);
            reg = x13119;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13120);
            reg = x13120;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13121);
            reg = x13121;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13122 = x13119 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13123 = x13118 + x13122;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13124 = x13120 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13125 = x13123 + x13124;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13126 = x13121 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13127 = x13125 + x13126;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13128 = x13127 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":125:10)
          auto x13129 = x13095 * x81;
          host_args.at(0) = x12517;
          host_args.at(1) = x13129;
          host_args.at(2) = x12594;
          host_args.at(3) = x13112;
          host_args.at(4) = x13128;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, ..", host_args.data(), 5, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":32:28))
          auto x13130 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x13130 != Fp::invalid());
          host_args.at(0) = x13130;
          host(ctx, "log", "FFPU: %%%u = ...", host_args.data(), 1, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":33:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13130);
            reg = x13130;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
        }
        if (x13077 != 0) {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13131 = args[2][131 * steps + ((cycle - 1) & mask)];
          assert(x13131 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13132 = args[2][132 * steps + ((cycle - 1) & mask)];
          assert(x13132 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13133 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x13133 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13134 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x13134 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13135 = x13132 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13136 = x13131 + x13135;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13137 = x13133 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13138 = x13136 + x13137;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13139 = x13134 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13140 = x13138 + x13139;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":138:59)
          auto x13141 = x13140 * x79;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13142 = args[2][117 * steps + ((cycle - 1) & mask)];
          assert(x13142 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13143 = args[2][118 * steps + ((cycle - 1) & mask)];
          assert(x13143 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13144 = args[2][119 * steps + ((cycle - 1) & mask)];
          assert(x13144 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13145 = args[2][120 * steps + ((cycle - 1) & mask)];
          assert(x13145 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13146 = x13143 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13147 = x13142 + x13146;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13148 = x13144 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13149 = x13147 + x13148;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13150 = x13145 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13151 = x13149 + x13150;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13152 = x13151 * x0;
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13153 = args[2][124 * steps + ((cycle - 1) & mask)];
          assert(x13153 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13154 = args[2][125 * steps + ((cycle - 1) & mask)];
          assert(x13154 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13155 = args[2][126 * steps + ((cycle - 1) & mask)];
          assert(x13155 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13156 = args[2][127 * steps + ((cycle - 1) & mask)];
          assert(x13156 != Fp::invalid());
          // loc("./cirgen/components/u32.h":25:12)
          auto x13157 = x13154 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13158 = x13153 + x13157;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13159 = x13155 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13160 = x13158 + x13159;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13161 = x13156 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13162 = x13160 + x13161;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13163 = x13162 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:64)
          auto x13164 = x12594 * x81;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:53)
          auto x13165 = x13141 + x13164;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":142:53)
          auto x13166 = x13165 + x85;
          {
            host_args.at(0) = x13166;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x13167 = host_outs.at(0);
            auto x13168 = host_outs.at(1);
            auto x13169 = host_outs.at(2);
            auto x13170 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][117 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13167);
              reg = x13167;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13168);
              reg = x13168;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13169);
              reg = x13169;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13170);
              reg = x13170;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13171 = args[2][117 * steps + ((cycle - 0) & mask)];
          assert(x13171 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13172 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13172 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13173 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13173 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13174 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13174 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13166);
            reg = x13166;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12510);
            reg = x12510;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13171);
            reg = x13171;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13172);
            reg = x13172;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13173);
            reg = x13173;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13174);
            reg = x13174;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13175 = x13172 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13176 = x13171 + x13175;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13177 = x13173 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13178 = x13176 + x13177;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13179 = x13174 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13180 = x13178 + x13179;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13181 = x13180 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":143:53)
          auto x13182 = x13165 + x80;
          {
            host_args.at(0) = x13182;
            host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
            auto x13183 = host_outs.at(0);
            auto x13184 = host_outs.at(1);
            auto x13185 = host_outs.at(2);
            auto x13186 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][124 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13183);
              reg = x13183;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13184);
              reg = x13184;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13185);
              reg = x13185;
            }
            // loc("cirgen/components/u32.cpp":76:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x13186);
              reg = x13186;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13187 = args[2][124 * steps + ((cycle - 0) & mask)];
          assert(x13187 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13188 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13188 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13189 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13189 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13190 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13190 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13182);
            reg = x13182;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12510);
            reg = x12510;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13187);
            reg = x13187;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13188);
            reg = x13188;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13189);
            reg = x13189;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13190);
            reg = x13190;
          }
          // loc("./cirgen/components/u32.h":25:12)
          auto x13191 = x13188 * x83;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13192 = x13187 + x13191;
          // loc("./cirgen/components/u32.h":26:12)
          auto x13193 = x13189 * x77;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13194 = x13192 + x13193;
          // loc("./cirgen/components/u32.h":27:12)
          auto x13195 = x13190 * x76;
          // loc("./cirgen/components/u32.h":24:12)
          auto x13196 = x13194 + x13195;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":45:10)
          auto x13197 = x13196 * x0;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":148:10)
          auto x13198 = x13141 * x81;
          host_args.at(0) = x12517;
          host_args.at(1) = x13198;
          host_args.at(2) = x12594;
          host_args.at(3) = x13152;
          host_args.at(4) = x13163;
          host_args.at(5) = x13181;
          host_args.at(6) = x13197;
          host(ctx, "log", "FFPU: Get from arg[%u] (%x) [%u] -> %u, %u, %u, %u", host_args.data(), 7, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
          auto x13199 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x13199 != Fp::invalid());
          host_args.at(0) = x13199;
          host_args.at(1) = x13152;
          host_args.at(2) = x13163;
          host_args.at(3) = x13181;
          host_args.at(4) = x13197;
          host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
          auto x13200 = x13199 + x6;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13152);
            reg = x13152;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13163);
            reg = x13163;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13181);
            reg = x13181;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13197);
            reg = x13197;
          }
          {
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13201 = args[2][131 * steps + ((cycle - 0) & mask)];
            assert(x13201 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13202 = args[2][132 * steps + ((cycle - 0) & mask)];
            assert(x13202 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13203 = args[2][133 * steps + ((cycle - 0) & mask)];
            assert(x13203 != Fp::invalid());
            // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
            auto x13204 = args[2][134 * steps + ((cycle - 0) & mask)];
            assert(x13204 != Fp::invalid());
            host_args.at(0) = x13200;
            host_args.at(1) = x13201;
            host_args.at(2) = x13202;
            host_args.at(3) = x13203;
            host_args.at(4) = x13204;
            host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13205 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x13205 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13206 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13206 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13207 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13207 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13208 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13208 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":104:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13200);
            reg = x13200;
          }
          // loc("cirgen/components/ram.cpp":105:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12510);
            reg = x12510;
          }
          // loc("cirgen/components/ram.cpp":106:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x88);
            reg = x88;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13205);
            reg = x13205;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13206);
            reg = x13206;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13207);
            reg = x13207;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13208);
            reg = x13208;
          }
          // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
          auto x13209 = x13199 + x88;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13209);
            reg = x13209;
          }
          // loc("./cirgen/components/bits.h":18:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg6"("cirgen/circuit/rv32im/ffpu.cpp":400:36))
      auto x13210 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x13210 != Fp::invalid());
      if (x13210 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":401:8)
        if (x12582 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:401");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":402:8)
        if (x12583 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:402");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":403:8)
        auto x13211 = x12586 - x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":403:8)
        if (x13211 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:403");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":404:8)
        if (x12517 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:404");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13212 = x12594 + x6;
        {
          host_args.at(0) = x13212;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x13213 = host_outs.at(0);
          auto x13214 = host_outs.at(1);
          auto x13215 = host_outs.at(2);
          auto x13216 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13213);
            reg = x13213;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13214);
            reg = x13214;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13215);
            reg = x13215;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13216);
            reg = x13216;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13217 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13217 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13218 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13218 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13219 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13219 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13220 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13220 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13212);
          reg = x13212;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13217);
          reg = x13217;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13218);
          reg = x13218;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13219);
          reg = x13219;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13220);
          reg = x13220;
        }
        host_args.at(0) = x12594;
        host_args.at(1) = x13217;
        host_args.at(2) = x13218;
        host_args.at(3) = x13219;
        host_args.at(4) = x13220;
        host(ctx, "log", "FFPU: Identity %%%u (%w)", host_args.data(), 5, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13221 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13221 != Fp::invalid());
        host_args.at(0) = x13221;
        host_args.at(1) = x13217;
        host_args.at(2) = x13218;
        host_args.at(3) = x13219;
        host_args.at(4) = x13220;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13222 = x13221 + x6;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13217);
          reg = x13217;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13218);
          reg = x13218;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13219);
          reg = x13219;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13220);
          reg = x13220;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13223 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x13223 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13224 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13224 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13225 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13225 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13226 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13226 != Fp::invalid());
          host_args.at(0) = x13222;
          host_args.at(1) = x13223;
          host_args.at(2) = x13224;
          host_args.at(3) = x13225;
          host_args.at(4) = x13226;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13227 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13227 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13228 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13228 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13229 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13229 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13230 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13230 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13222);
          reg = x13222;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13227);
          reg = x13227;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13228);
          reg = x13228;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13229);
          reg = x13229;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13230);
          reg = x13230;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13231 = x13221 + x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13231);
          reg = x13231;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("Top/Mux/4/Mux/12/OneHot/Reg7"("cirgen/circuit/rv32im/ffpu.cpp":407:31))
      auto x13232 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x13232 != Fp::invalid());
      if (x13232 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":408:8)
        if (x12582 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:408");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":409:8)
        if (x12583 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:409");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        auto x13233 = x12586 - x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":410:8)
        if (x13233 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:410");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":411:8)
        auto x13234 = x12517 - x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":411:8)
        if (x13234 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:411");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13235 = x12594 + x6;
        {
          host_args.at(0) = x13235;
          host(ctx, "ramRead", "", host_args.data(), 1, host_outs.data(), 4);
          auto x13236 = host_outs.at(0);
          auto x13237 = host_outs.at(1);
          auto x13238 = host_outs.at(2);
          auto x13239 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13236);
            reg = x13236;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13237);
            reg = x13237;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13238);
            reg = x13238;
          }
          // loc("cirgen/components/u32.cpp":76:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13239);
            reg = x13239;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13240 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13240 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13241 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13241 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13242 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13242 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13243 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13243 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13235);
          reg = x13235;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13240);
          reg = x13240;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13241);
          reg = x13241;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13242);
          reg = x13242;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13243);
          reg = x13243;
        }
        {
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13244 = x13240 * x13240;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13245 = x13243 + x13243;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13246 = x13241 * x13245;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13247 = x13242 * x13242;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13248 = x13246 - x13247;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13249 = x13248 * x68;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13250 = x13244 + x13249;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13251 = x13242 + x13242;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13252 = x13240 * x13251;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13253 = x13241 * x13241;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13254 = x13252 - x13253;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13255 = x13243 * x13243;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13256 = x13255 * x68;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13257 = x13254 + x13256;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13258 = x13250 * x13250;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13259 = x13257 * x68;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13260 = x13259 * x13257;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13261 = x13258 + x13260;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13262 = inv(x13261);
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13263 = x13250 * x13262;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13264 = x13257 * x13262;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13265 = x13240 * x13263;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13266 = x13242 * x68;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13267 = x13266 * x13264;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13268 = x13265 + x13267;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13269 = -x13241;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13270 = x13269 * x13263;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13271 = x13243 * x68;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13272 = x13271 * x13264;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13273 = x13270 - x13272;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13274 = -x13240;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13275 = x13274 * x13264;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13276 = x13242 * x13263;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13277 = x13275 + x13276;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13278 = x13241 * x13264;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13279 = x13243 * x13263;
          // loc("cirgen/circuit/rv32im/ffpu.cpp":86:24)
          auto x13280 = x13278 - x13279;
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13268);
            reg = x13268;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13273);
            reg = x13273;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13277);
            reg = x13277;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13280);
            reg = x13280;
          }
        }
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13281 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x13281 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13282 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x13282 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13283 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x13283 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13284 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x13284 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13285 = x13281 * x13240;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13286 = x13282 * x13243;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13287 = x13283 * x13242;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13288 = x13286 + x13287;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13289 = x13284 * x13241;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13290 = x13288 + x13289;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13291 = x13290 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13292 = x13285 + x13291;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13293 = x13281 * x13241;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13294 = x13282 * x13240;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13295 = x13293 + x13294;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13296 = x13283 * x13243;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13297 = x13284 * x13242;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13298 = x13296 + x13297;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13299 = x13298 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13300 = x13295 + x13299;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13301 = x13281 * x13242;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13302 = x13282 * x13241;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13303 = x13301 + x13302;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13304 = x13283 * x13240;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13305 = x13303 + x13304;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13306 = x13284 * x13243;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13307 = x13306 * x5;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13308 = x13305 + x13307;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13309 = x13281 * x13243;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13310 = x13282 * x13242;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13311 = x13309 + x13310;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13312 = x13283 * x13241;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13313 = x13311 + x13312;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13314 = x13284 * x13240;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:21)
        auto x13315 = x13313 + x13314;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13316 = x88 - x13292;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13316 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13317 = x87 - x13300;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13317 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13318 = x87 - x13308;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13318 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        auto x13319 = x87 - x13315;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":90:6)
        if (x13319 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ffpu.cpp:90");
        host_args.at(0) = x12594;
        host_args.at(1) = x13240;
        host_args.at(2) = x13241;
        host_args.at(3) = x13242;
        host_args.at(4) = x13243;
        host_args.at(5) = x13281;
        host_args.at(6) = x13282;
        host_args.at(7) = x13283;
        host_args.at(8) = x13284;
        host(ctx, "log", "FFPU: Inv %%%u (%w) -> %w", host_args.data(), 9, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/Reg1"("cirgen/circuit/rv32im/ffpu.cpp":17:20))
        auto x13320 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13320 != Fp::invalid());
        host_args.at(0) = x13320;
        host_args.at(1) = x13281;
        host_args.at(2) = x13282;
        host_args.at(3) = x13283;
        host_args.at(4) = x13284;
        host(ctx, "log", "FFPU: %%%u = FpExt(%u, %u, %u, %u)", host_args.data(), 5, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ffpu.cpp":37:10)
        auto x13321 = x13320 + x6;
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13281);
          reg = x13281;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13282);
          reg = x13282;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13283);
          reg = x13283;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13284);
          reg = x13284;
        }
        {
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13322 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x13322 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13323 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13323 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13324 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13324 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
          auto x13325 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13325 != Fp::invalid());
          host_args.at(0) = x13321;
          host_args.at(1) = x13322;
          host_args.at(2) = x13323;
          host_args.at(3) = x13324;
          host_args.at(4) = x13325;
          host(ctx, "ramWrite", "", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13326 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13326 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13327 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13327 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13328 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13328 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13329 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13329 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":104:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13321);
          reg = x13321;
        }
        // loc("cirgen/components/ram.cpp":105:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12510);
          reg = x12510;
        }
        // loc("cirgen/components/ram.cpp":106:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13326);
          reg = x13326;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13327);
          reg = x13327;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13328);
          reg = x13328;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13329);
          reg = x13329;
        }
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:28)
        auto x13330 = x13320 + x88;
        // loc("cirgen/circuit/rv32im/ffpu.cpp":28:3)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13330);
          reg = x13330;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
      auto x13331 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x13331 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ffpu.cpp":416:57)
      auto x13332 = x527 + x81;
      // loc("cirgen/circuit/rv32im/ffpu.cpp":416:20)
      auto x13333 = x13331 - x13332;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x13334 = (x13333 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13334);
          reg = x13334;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x13335 = inv(x13333);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13335);
          reg = x13335;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13336 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x13336 != Fp::invalid());
      if (x13336 != 0) {
        // loc("cirgen/components/iszero.cpp":14:23)
        if (x13333 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:14");
      }
      // loc("cirgen/components/iszero.cpp":15:19)
      auto x13337 = x88 - x13336;
      if (x13337 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x13338 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x13338 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13339 = x13333 * x13338;
        // loc("cirgen/components/iszero.cpp":15:26)
        auto x13340 = x13339 - x88;
        // loc("cirgen/components/iszero.cpp":15:26)
        if (x13340 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:15");
      }
      // loc("Top/Mux/4/Mux/12/Bit3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13341 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13341 != Fp::invalid());
      if (x13341 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":419:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13342 = Fp(x13332.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13342);
            reg = x13342;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13343 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13343 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13344 = x13332 - x13343;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13345 = x13344 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13346 = Fp(x13345.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13346);
            reg = x13346;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13347 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13347 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13348 = x13345 - x13347;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13349 = x13348 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13350 = Fp(x13349.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13350);
            reg = x13350;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13351 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13351 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13352 = x13349 - x13351;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13353 = x13352 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13354 = Fp(x13353.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13354);
            reg = x13354;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13355 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13355 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13356 = x13353 - x13355;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13357 = x13356 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13357);
          reg = x13357;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13358 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13358 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13359 = x88 - x13358;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13360 = x13358 * x13359;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13360);
          reg = x13360;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x13361 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13361 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13362 = x85 - x13358;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13363 = x13361 * x13362;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13363 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
      // loc("cirgen/circuit/rv32im/ffpu.cpp":425:25)
      auto x13364 = x88 - x13341;
      if (x13364 != 0) {
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13337);
          reg = x13337;
        }
        // loc("./cirgen/components/bits.h":18:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13336);
          reg = x13336;
        }
      }
      // loc("Top/Mux/4/Mux/12/Bit5/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13365 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x13365 != Fp::invalid());
      if (x13365 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":431:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13366 = x13332 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13367 = Fp(x13366.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13367);
            reg = x13367;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13368 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13368 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13369 = x13366 - x13368;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13370 = x13369 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13371 = Fp(x13370.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13371);
            reg = x13371;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13372 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13372 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13373 = x13370 - x13372;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13374 = x13373 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13375 = Fp(x13374.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13375);
            reg = x13375;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13376 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13376 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13377 = x13374 - x13376;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13378 = x13377 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13379 = Fp(x13378.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13379);
            reg = x13379;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13380 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13380 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13381 = x13378 - x13380;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13382 = x13381 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13382);
          reg = x13382;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13383 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13383 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13384 = x88 - x13383;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13385 = x13383 * x13384;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13385);
          reg = x13385;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x13386 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13386 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13387 = x85 - x13383;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13388 = x13386 * x13387;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13388 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
      // loc("Top/Mux/4/Mux/12/Bit4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13389 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13389 != Fp::invalid());
      if (x13389 != 0) {
        // loc("cirgen/circuit/rv32im/ffpu.cpp":436:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x78);
          reg = x78;
        }
        // loc("Top/Mux/4/Mux/12/Reg3"("cirgen/circuit/rv32im/ffpu.cpp":437:29))
        auto x13390 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13390 != Fp::invalid());
        host_args.at(0) = x13390;
        host(ctx, "log", "Returning to %x", host_args.data(), 1, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13391 = x13390 + x81;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13392 = Fp(x13391.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13392);
            reg = x13392;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13393 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13393 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13394 = x13391 - x13393;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13395 = x13394 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13396 = Fp(x13395.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13396);
            reg = x13396;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg1"("cirgen/components/bytes.cpp":83:16))
        auto x13397 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13397 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13398 = x13395 - x13397;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13399 = x13398 * x82;
        {
          // loc("cirgen/components/bytes.cpp":82:21)
          auto x13400 = Fp(x13399.asUInt32() & x84.asUInt32());
          // loc("cirgen/components/bytes.cpp":82:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13400);
            reg = x13400;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement1/Reg"("cirgen/components/bytes.cpp":83:16))
        auto x13401 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13401 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":83:11)
        auto x13402 = x13399 - x13401;
        // loc("cirgen/components/bytes.cpp":83:10)
        auto x13403 = x13402 * x82;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13404 = Fp(x13403.asUInt32() & x80.asUInt32());
          // loc("./cirgen/components/bits.h":57:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13404);
            reg = x13404;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13405 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13405 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13406 = x13403 - x13405;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13407 = x13406 * x79;
        // loc("./cirgen/components/bits.h":57:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13407);
          reg = x13407;
        }
        // loc("Top/Mux/4/PCReg/Twit1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13408 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13408 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13409 = x88 - x13408;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13410 = x13408 * x13409;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13410);
          reg = x13410;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
        auto x13411 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13411 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13412 = x85 - x13408;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13413 = x13411 * x13412;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13413 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      }
    }
  }
  // loc("Top/Code/OneHot/Reg5"("./cirgen/components/mux.h":37:25))
  auto x13414 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x13414 != Fp::invalid());
  if (x13414 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x13415 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13415 != Fp::invalid());
    host_args.at(0) = x13415;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13416 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x13416 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13417 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x13417 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13418 = x13417 * x85;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13419 = x13416 + x13418;
    // loc("Top/Mux/4/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13420 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x13420 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13421 = x13420 * x80;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13422 = x13419 + x13421;
    // loc("Top/Mux/4/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13423 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x13423 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13424 = x13423 * x81;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13425 = x13422 + x13424;
    // loc("Top/Mux/4/OneHot/Reg5"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13426 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x13426 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13427 = x13426 * x74;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13428 = x13425 + x13427;
    // loc("Top/Mux/4/OneHot/Reg6"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13429 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x13429 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13430 = x13429 * x73;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13431 = x13428 + x13430;
    // loc("Top/Mux/4/OneHot/Reg7"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13432 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x13432 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13433 = x13432 * x72;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13434 = x13431 + x13433;
    // loc("Top/Mux/4/OneHot/Reg8"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13435 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x13435 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13436 = x13435 * x71;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13437 = x13434 + x13436;
    // loc("Top/Mux/4/OneHot/Reg9"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13438 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x13438 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13439 = x13438 * x70;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13440 = x13437 + x13439;
    // loc("Top/Mux/4/OneHot/Reg10"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13441 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x13441 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13442 = x13441 * x69;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13443 = x13440 + x13442;
    // loc("Top/Mux/4/OneHot/Reg11"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13444 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x13444 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13445 = x13444 * x68;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13446 = x13443 + x13445;
    // loc("Top/Mux/4/OneHot/Reg12"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13447 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x13447 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13448 = x13447 * x67;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13449 = x13446 + x13448;
    // loc("cirgen/circuit/rv32im/top.cpp":46:38)
    auto x13450 = x13449 - x71;
    // loc("cirgen/circuit/rv32im/top.cpp":46:38)
    if (x13450 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:46");
    // loc("Top/Mux/4/Mux/8/OneHot/Reg1"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13451 = args[2][176 * steps + ((cycle - 1) & mask)];
    assert(x13451 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/Reg2"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13452 = args[2][177 * steps + ((cycle - 1) & mask)];
    assert(x13452 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13453 = x13452 * x85;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13454 = x13451 + x13453;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg3"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13455 = args[2][178 * steps + ((cycle - 1) & mask)];
    assert(x13455 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13456 = x13455 * x80;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13457 = x13454 + x13456;
    // loc("Top/Mux/4/Mux/8/OneHot/Reg4"("./cirgen/compiler/edsl/edsl.h":110:61))
    auto x13458 = args[2][179 * steps + ((cycle - 1) & mask)];
    assert(x13458 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":44:19)
    auto x13459 = x13458 * x81;
    // loc("./cirgen/components/onehot.h":44:13)
    auto x13460 = x13457 + x13459;
    // loc("cirgen/circuit/rv32im/top.cpp":48:39)
    if (x13460 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:48");
  }
  // loc("Top/Code/OneHot/Reg6"("./cirgen/components/mux.h":37:25))
  auto x13461 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x13461 != Fp::invalid());
  if (x13461 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":85:27))
    auto x13462 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13462 != Fp::invalid());
    host_args.at(0) = x13462;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":69:27))
  auto x13463 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x13463 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":69:16)
  auto x13464 = x13463 + x89;
  // loc("cirgen/circuit/rv32im/top.cpp":69:16)
  auto x13465 = x13464 + x414;
  // loc("cirgen/circuit/rv32im/top.cpp":69:16)
  auto x13466 = x13465 + x479;
  // loc("cirgen/circuit/rv32im/top.cpp":69:16)
  auto x13467 = x13466 + x513;
  // loc("cirgen/circuit/rv32im/top.cpp":69:16)
  auto x13468 = x13467 + x13414;
  // loc("cirgen/circuit/rv32im/top.cpp":69:16)
  auto x13469 = x13468 + x13461;
  if (x513 != 0) {
    // loc("Top/Mux/4/OneHot/Reg8"("cirgen/circuit/rv32im/top.cpp":77:19))
    auto x13470 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13470 != Fp::invalid());
    if (x13470 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/Reg"("cirgen/circuit/rv32im/top.cpp":80:20))
      auto x13471 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13471 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":81:7)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13471);
        reg = x13471;
      }
    }
    // loc("cirgen/circuit/rv32im/top.cpp":83:19)
    auto x13472 = x88 - x13470;
    if (x13472 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":83:23)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":85:23)
  auto x13473 = x13469 - x513;
  if (x13473 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":85:27)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x87);
      reg = x87;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":110:61))
  auto x13474 = args[2][9 * steps + ((cycle - 0) & mask)];
  assert(x13474 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":86:10)
  auto x13475 = x88 - x13474;
  if (x414 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
  }
  if (x479 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("./cirgen/components/bits.h":28:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
  }
  if (x513 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13476 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13476 != Fp::invalid());
    if (x13476 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13477 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13477 != Fp::invalid());
    if (x13477 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13478 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13478 != Fp::invalid());
    if (x13478 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13479 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13479 != Fp::invalid());
    if (x13479 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13480 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13480 != Fp::invalid());
    if (x13480 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("cirgen/components/u32.cpp":22:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13481 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13481 != Fp::invalid());
    if (x13481 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13482 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x13482 != Fp::invalid());
    if (x13482 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13483 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x13483 != Fp::invalid());
    if (x13483 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13484 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13484 != Fp::invalid());
    if (x13484 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13485 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13485 != Fp::invalid());
      if (x13485 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13486 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13486 != Fp::invalid());
      if (x13486 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13487 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13487 != Fp::invalid());
      if (x13487 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13488 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13488 != Fp::invalid());
      if (x13488 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13489 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13489 != Fp::invalid());
      if (x13489 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("cirgen/components/u32.cpp":22:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
          // loc("./cirgen/components/bits.h":28:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x87);
            reg = x87;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13490 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13490 != Fp::invalid());
    if (x13490 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13491 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13491 != Fp::invalid());
    if (x13491 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13492 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13492 != Fp::invalid());
    if (x13492 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13493 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13493 != Fp::invalid());
    if (x13493 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("./cirgen/components/bits.h":28:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
      }
    }
  }
  if (x13414 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
    }
  }
  if (x414 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13494 = args[2][55 * steps + ((cycle - 0) & mask)];
      assert(x13494 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13495 = args[2][56 * steps + ((cycle - 0) & mask)];
      assert(x13495 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13496 = args[2][57 * steps + ((cycle - 0) & mask)];
      assert(x13496 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13497 = args[2][58 * steps + ((cycle - 0) & mask)];
      assert(x13497 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13498 = args[2][59 * steps + ((cycle - 0) & mask)];
      assert(x13498 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13499 = args[2][60 * steps + ((cycle - 0) & mask)];
      assert(x13499 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13500 = args[2][61 * steps + ((cycle - 0) & mask)];
      assert(x13500 != Fp::invalid());
      host_args.at(0) = x13494;
      host_args.at(1) = x13495;
      host_args.at(2) = x13496;
      host_args.at(3) = x13497;
      host_args.at(4) = x13498;
      host_args.at(5) = x13499;
      host_args.at(6) = x13500;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13501 = args[2][62 * steps + ((cycle - 0) & mask)];
      assert(x13501 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13502 = args[2][63 * steps + ((cycle - 0) & mask)];
      assert(x13502 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13503 = args[2][64 * steps + ((cycle - 0) & mask)];
      assert(x13503 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13504 = args[2][65 * steps + ((cycle - 0) & mask)];
      assert(x13504 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13505 = args[2][66 * steps + ((cycle - 0) & mask)];
      assert(x13505 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13506 = args[2][67 * steps + ((cycle - 0) & mask)];
      assert(x13506 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13507 = args[2][68 * steps + ((cycle - 0) & mask)];
      assert(x13507 != Fp::invalid());
      host_args.at(0) = x13501;
      host_args.at(1) = x13502;
      host_args.at(2) = x13503;
      host_args.at(3) = x13504;
      host_args.at(4) = x13505;
      host_args.at(5) = x13506;
      host_args.at(6) = x13507;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13508 = args[2][69 * steps + ((cycle - 0) & mask)];
      assert(x13508 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13509 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x13509 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13510 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x13510 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13511 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x13511 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13512 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x13512 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13513 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x13513 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
      auto x13514 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x13514 != Fp::invalid());
      host_args.at(0) = x13508;
      host_args.at(1) = x13509;
      host_args.at(2) = x13510;
      host_args.at(3) = x13511;
      host_args.at(4) = x13512;
      host_args.at(5) = x13513;
      host_args.at(6) = x13514;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x513 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13515 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13515 != Fp::invalid());
    if (x13515 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13516 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13516 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13517 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13517 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13518 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13518 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13519 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13520 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13521 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13522 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13522 != Fp::invalid());
        host_args.at(0) = x13516;
        host_args.at(1) = x13517;
        host_args.at(2) = x13518;
        host_args.at(3) = x13519;
        host_args.at(4) = x13520;
        host_args.at(5) = x13521;
        host_args.at(6) = x13522;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13523 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13524 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13524 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13525 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13525 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13526 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13526 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13527 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13527 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13528 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13528 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13529 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13529 != Fp::invalid());
        host_args.at(0) = x13523;
        host_args.at(1) = x13524;
        host_args.at(2) = x13525;
        host_args.at(3) = x13526;
        host_args.at(4) = x13527;
        host_args.at(5) = x13528;
        host_args.at(6) = x13529;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13530 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13531 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13532 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13532 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13533 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13533 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13534 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13534 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13535 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13535 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13536 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13536 != Fp::invalid());
        host_args.at(0) = x13530;
        host_args.at(1) = x13531;
        host_args.at(2) = x13532;
        host_args.at(3) = x13533;
        host_args.at(4) = x13534;
        host_args.at(5) = x13535;
        host_args.at(6) = x13536;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13537 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13538 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13539 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13539 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13540 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13541 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13542 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13543 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13543 != Fp::invalid());
        host_args.at(0) = x13537;
        host_args.at(1) = x13538;
        host_args.at(2) = x13539;
        host_args.at(3) = x13540;
        host_args.at(4) = x13541;
        host_args.at(5) = x13542;
        host_args.at(6) = x13543;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13544 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13544 != Fp::invalid());
    if (x13544 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13545 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13545 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13546 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13546 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13547 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13547 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13548 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13548 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13549 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13549 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13550 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13550 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13551 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13551 != Fp::invalid());
        host_args.at(0) = x13545;
        host_args.at(1) = x13546;
        host_args.at(2) = x13547;
        host_args.at(3) = x13548;
        host_args.at(4) = x13549;
        host_args.at(5) = x13550;
        host_args.at(6) = x13551;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13552 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13552 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13553 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13553 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13554 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13554 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13555 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13556 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13557 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13557 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13558 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13558 != Fp::invalid());
        host_args.at(0) = x13552;
        host_args.at(1) = x13553;
        host_args.at(2) = x13554;
        host_args.at(3) = x13555;
        host_args.at(4) = x13556;
        host_args.at(5) = x13557;
        host_args.at(6) = x13558;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13559 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13559 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13560 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13560 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13561 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13561 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13562 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13562 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13563 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13563 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13564 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13565 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13565 != Fp::invalid());
        host_args.at(0) = x13559;
        host_args.at(1) = x13560;
        host_args.at(2) = x13561;
        host_args.at(3) = x13562;
        host_args.at(4) = x13563;
        host_args.at(5) = x13564;
        host_args.at(6) = x13565;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13566 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13567 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13567 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13568 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13568 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13569 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13569 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13570 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13570 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13571 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13571 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13572 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13572 != Fp::invalid());
        host_args.at(0) = x13566;
        host_args.at(1) = x13567;
        host_args.at(2) = x13568;
        host_args.at(3) = x13569;
        host_args.at(4) = x13570;
        host_args.at(5) = x13571;
        host_args.at(6) = x13572;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13573 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13573 != Fp::invalid());
    if (x13573 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13574 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13574 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13575 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13575 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13576 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13576 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13577 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13578 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13579 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13580 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13580 != Fp::invalid());
        host_args.at(0) = x13574;
        host_args.at(1) = x13575;
        host_args.at(2) = x13576;
        host_args.at(3) = x13577;
        host_args.at(4) = x13578;
        host_args.at(5) = x13579;
        host_args.at(6) = x13580;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13581 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13582 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13582 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13583 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13583 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13584 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13584 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13585 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13585 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13586 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13586 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13587 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13587 != Fp::invalid());
        host_args.at(0) = x13581;
        host_args.at(1) = x13582;
        host_args.at(2) = x13583;
        host_args.at(3) = x13584;
        host_args.at(4) = x13585;
        host_args.at(5) = x13586;
        host_args.at(6) = x13587;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13588 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13588 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13589 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13590 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13591 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13591 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13592 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13592 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13593 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13593 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13594 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13594 != Fp::invalid());
        host_args.at(0) = x13588;
        host_args.at(1) = x13589;
        host_args.at(2) = x13590;
        host_args.at(3) = x13591;
        host_args.at(4) = x13592;
        host_args.at(5) = x13593;
        host_args.at(6) = x13594;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13595 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13595 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13596 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13597 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13598 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13599 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13599 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13600 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13600 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13601 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13601 != Fp::invalid());
        host_args.at(0) = x13595;
        host_args.at(1) = x13596;
        host_args.at(2) = x13597;
        host_args.at(3) = x13598;
        host_args.at(4) = x13599;
        host_args.at(5) = x13600;
        host_args.at(6) = x13601;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13602 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13602 != Fp::invalid());
    if (x13602 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13603 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13604 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13605 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13606 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13607 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13607 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13608 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13608 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13609 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13609 != Fp::invalid());
        host_args.at(0) = x13603;
        host_args.at(1) = x13604;
        host_args.at(2) = x13605;
        host_args.at(3) = x13606;
        host_args.at(4) = x13607;
        host_args.at(5) = x13608;
        host_args.at(6) = x13609;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13610 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13610 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13611 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13611 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13612 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13612 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13613 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13613 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13614 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13614 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13615 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13615 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13616 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13616 != Fp::invalid());
        host_args.at(0) = x13610;
        host_args.at(1) = x13611;
        host_args.at(2) = x13612;
        host_args.at(3) = x13613;
        host_args.at(4) = x13614;
        host_args.at(5) = x13615;
        host_args.at(6) = x13616;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13617 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13618 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13619 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13620 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13621 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13622 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13623 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13623 != Fp::invalid());
        host_args.at(0) = x13617;
        host_args.at(1) = x13618;
        host_args.at(2) = x13619;
        host_args.at(3) = x13620;
        host_args.at(4) = x13621;
        host_args.at(5) = x13622;
        host_args.at(6) = x13623;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13624 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13625 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13626 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13627 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13628 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13628 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13629 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13629 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13630 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13630 != Fp::invalid());
        host_args.at(0) = x13624;
        host_args.at(1) = x13625;
        host_args.at(2) = x13626;
        host_args.at(3) = x13627;
        host_args.at(4) = x13628;
        host_args.at(5) = x13629;
        host_args.at(6) = x13630;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13631 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13632 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13633 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13634 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13635 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13635 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13636 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13636 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13637 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13637 != Fp::invalid());
        host_args.at(0) = x13631;
        host_args.at(1) = x13632;
        host_args.at(2) = x13633;
        host_args.at(3) = x13634;
        host_args.at(4) = x13635;
        host_args.at(5) = x13636;
        host_args.at(6) = x13637;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13638 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13638 != Fp::invalid());
    if (x13638 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13639 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13640 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13641 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13642 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13642 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13643 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13643 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13644 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13645 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13645 != Fp::invalid());
        host_args.at(0) = x13639;
        host_args.at(1) = x13640;
        host_args.at(2) = x13641;
        host_args.at(3) = x13642;
        host_args.at(4) = x13643;
        host_args.at(5) = x13644;
        host_args.at(6) = x13645;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13646 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13647 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13648 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13649 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13649 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13650 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13650 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13651 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13651 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13652 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13652 != Fp::invalid());
        host_args.at(0) = x13646;
        host_args.at(1) = x13647;
        host_args.at(2) = x13648;
        host_args.at(3) = x13649;
        host_args.at(4) = x13650;
        host_args.at(5) = x13651;
        host_args.at(6) = x13652;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13653 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13654 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13654 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13655 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13655 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13656 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13656 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13657 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13657 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13658 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13658 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13659 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13659 != Fp::invalid());
        host_args.at(0) = x13653;
        host_args.at(1) = x13654;
        host_args.at(2) = x13655;
        host_args.at(3) = x13656;
        host_args.at(4) = x13657;
        host_args.at(5) = x13658;
        host_args.at(6) = x13659;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13660 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13660 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13661 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13661 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13662 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13662 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13663 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13663 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13664 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13664 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13665 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13665 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13666 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13666 != Fp::invalid());
        host_args.at(0) = x13660;
        host_args.at(1) = x13661;
        host_args.at(2) = x13662;
        host_args.at(3) = x13663;
        host_args.at(4) = x13664;
        host_args.at(5) = x13665;
        host_args.at(6) = x13666;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13667 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13667 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13668 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13668 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13669 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13669 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13670 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13670 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13671 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13671 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13672 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13672 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13673 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13673 != Fp::invalid());
        host_args.at(0) = x13667;
        host_args.at(1) = x13668;
        host_args.at(2) = x13669;
        host_args.at(3) = x13670;
        host_args.at(4) = x13671;
        host_args.at(5) = x13672;
        host_args.at(6) = x13673;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13674 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13674 != Fp::invalid());
    if (x13674 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13675 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13675 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13676 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13676 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13677 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13677 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13678 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13678 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13679 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13679 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13680 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13680 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13681 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13681 != Fp::invalid());
        host_args.at(0) = x13675;
        host_args.at(1) = x13676;
        host_args.at(2) = x13677;
        host_args.at(3) = x13678;
        host_args.at(4) = x13679;
        host_args.at(5) = x13680;
        host_args.at(6) = x13681;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13682 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13682 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13683 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13683 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13684 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13684 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13685 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13685 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13686 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13686 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13687 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13687 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13688 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13688 != Fp::invalid());
        host_args.at(0) = x13682;
        host_args.at(1) = x13683;
        host_args.at(2) = x13684;
        host_args.at(3) = x13685;
        host_args.at(4) = x13686;
        host_args.at(5) = x13687;
        host_args.at(6) = x13688;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13689 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13690 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13690 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13691 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13691 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13692 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13692 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13693 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13693 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13694 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13694 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13695 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13695 != Fp::invalid());
        host_args.at(0) = x13689;
        host_args.at(1) = x13690;
        host_args.at(2) = x13691;
        host_args.at(3) = x13692;
        host_args.at(4) = x13693;
        host_args.at(5) = x13694;
        host_args.at(6) = x13695;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13696 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13697 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13698 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13698 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13699 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13699 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13700 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13700 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13701 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13701 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13702 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13702 != Fp::invalid());
        host_args.at(0) = x13696;
        host_args.at(1) = x13697;
        host_args.at(2) = x13698;
        host_args.at(3) = x13699;
        host_args.at(4) = x13700;
        host_args.at(5) = x13701;
        host_args.at(6) = x13702;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13703 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13703 != Fp::invalid());
    if (x13703 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13704 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13704 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13705 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13705 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13706 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13706 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13707 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13707 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13708 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13708 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13709 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13709 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13710 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13710 != Fp::invalid());
        host_args.at(0) = x13704;
        host_args.at(1) = x13705;
        host_args.at(2) = x13706;
        host_args.at(3) = x13707;
        host_args.at(4) = x13708;
        host_args.at(5) = x13709;
        host_args.at(6) = x13710;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13711 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13711 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13712 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13713 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13713 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13714 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13715 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13715 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13716 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13716 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13717 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13717 != Fp::invalid());
        host_args.at(0) = x13711;
        host_args.at(1) = x13712;
        host_args.at(2) = x13713;
        host_args.at(3) = x13714;
        host_args.at(4) = x13715;
        host_args.at(5) = x13716;
        host_args.at(6) = x13717;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13718 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13718 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13719 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13719 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13720 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13720 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13721 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13721 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13722 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13722 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13723 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13723 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13724 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13724 != Fp::invalid());
        host_args.at(0) = x13718;
        host_args.at(1) = x13719;
        host_args.at(2) = x13720;
        host_args.at(3) = x13721;
        host_args.at(4) = x13722;
        host_args.at(5) = x13723;
        host_args.at(6) = x13724;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13725 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13725 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13726 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13726 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13727 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13727 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13728 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13728 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13729 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13729 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13730 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13730 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13731 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13731 != Fp::invalid());
        host_args.at(0) = x13725;
        host_args.at(1) = x13726;
        host_args.at(2) = x13727;
        host_args.at(3) = x13728;
        host_args.at(4) = x13729;
        host_args.at(5) = x13730;
        host_args.at(6) = x13731;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13732 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13732 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13733 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13733 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13734 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13734 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13735 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13735 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13736 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13736 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13737 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13737 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement4/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13738 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13738 != Fp::invalid());
        host_args.at(0) = x13732;
        host_args.at(1) = x13733;
        host_args.at(2) = x13734;
        host_args.at(3) = x13735;
        host_args.at(4) = x13736;
        host_args.at(5) = x13737;
        host_args.at(6) = x13738;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13739 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13739 != Fp::invalid());
    if (x13739 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13740 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13740 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13741 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13741 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13742 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13742 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13743 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13743 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13744 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13744 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13745 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13745 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13746 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13746 != Fp::invalid());
        host_args.at(0) = x13740;
        host_args.at(1) = x13741;
        host_args.at(2) = x13742;
        host_args.at(3) = x13743;
        host_args.at(4) = x13744;
        host_args.at(5) = x13745;
        host_args.at(6) = x13746;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13747 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13747 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13748 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13748 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13749 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13749 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13750 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13750 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13751 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13751 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13752 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13752 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13753 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13753 != Fp::invalid());
        host_args.at(0) = x13747;
        host_args.at(1) = x13748;
        host_args.at(2) = x13749;
        host_args.at(3) = x13750;
        host_args.at(4) = x13751;
        host_args.at(5) = x13752;
        host_args.at(6) = x13753;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13754 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13754 != Fp::invalid());
    if (x13754 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13755 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13755 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13756 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13756 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13757 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13757 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13758 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13758 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13759 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13759 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13760 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13760 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13761 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13761 != Fp::invalid());
        host_args.at(0) = x13755;
        host_args.at(1) = x13756;
        host_args.at(2) = x13757;
        host_args.at(3) = x13758;
        host_args.at(4) = x13759;
        host_args.at(5) = x13760;
        host_args.at(6) = x13761;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13762 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13762 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13763 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13763 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13764 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13764 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13765 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13765 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13766 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13766 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13767 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13767 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13768 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13768 != Fp::invalid());
        host_args.at(0) = x13762;
        host_args.at(1) = x13763;
        host_args.at(2) = x13764;
        host_args.at(3) = x13765;
        host_args.at(4) = x13766;
        host_args.at(5) = x13767;
        host_args.at(6) = x13768;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13769 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13769 != Fp::invalid());
    if (x13769 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13770 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13770 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13771 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13771 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13772 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13772 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13773 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13773 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13774 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13774 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13775 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13775 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13776 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13776 != Fp::invalid());
        host_args.at(0) = x13770;
        host_args.at(1) = x13771;
        host_args.at(2) = x13772;
        host_args.at(3) = x13773;
        host_args.at(4) = x13774;
        host_args.at(5) = x13775;
        host_args.at(6) = x13776;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13777 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13777 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13778 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13778 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13779 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13779 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13780 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13780 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13781 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13781 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13782 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13782 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13783 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13783 != Fp::invalid());
        host_args.at(0) = x13777;
        host_args.at(1) = x13778;
        host_args.at(2) = x13779;
        host_args.at(3) = x13780;
        host_args.at(4) = x13781;
        host_args.at(5) = x13782;
        host_args.at(6) = x13783;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13784 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13784 != Fp::invalid());
    if (x13784 != 0) {
      {
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13785 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x13785 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13786 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13786 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13787 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13787 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13788 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13788 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13789 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13789 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13790 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13790 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13791 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13791 != Fp::invalid());
        host_args.at(0) = x13785;
        host_args.at(1) = x13786;
        host_args.at(2) = x13787;
        host_args.at(3) = x13788;
        host_args.at(4) = x13789;
        host_args.at(5) = x13790;
        host_args.at(6) = x13791;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13792 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13792 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13793 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13793 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13794 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13794 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13795 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13795 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13796 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13796 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13797 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13797 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement1/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13798 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13798 != Fp::invalid());
        host_args.at(0) = x13792;
        host_args.at(1) = x13793;
        host_args.at(2) = x13794;
        host_args.at(3) = x13795;
        host_args.at(4) = x13796;
        host_args.at(5) = x13797;
        host_args.at(6) = x13798;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13799 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13799 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13800 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13800 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13801 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13801 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13802 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13802 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13803 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13803 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13804 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13804 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement2/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13805 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13805 != Fp::invalid());
        host_args.at(0) = x13799;
        host_args.at(1) = x13800;
        host_args.at(2) = x13801;
        host_args.at(3) = x13802;
        host_args.at(4) = x13803;
        host_args.at(5) = x13804;
        host_args.at(6) = x13805;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13806 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13806 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13807 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13807 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13808 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13808 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13809 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13809 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg1"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13810 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13810 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg2"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13811 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13811 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement3/U32Reg/Reg3"("./cirgen/compiler/edsl/component.h":85:27))
        auto x13812 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13812 != Fp::invalid());
        host_args.at(0) = x13806;
        host_args.at(1) = x13807;
        host_args.at(2) = x13808;
        host_args.at(3) = x13809;
        host_args.at(4) = x13810;
        host_args.at(5) = x13811;
        host_args.at(6) = x13812;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x13475;
}

} // namespace risc0::circuit::rv32im
// clang-format on
