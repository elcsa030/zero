// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 32> host_args;
  std::array<Fp, 32> host_outs;
  // loc("cirgen/circuit/rv32im/page_fault.cpp":143:20)
  Fp x0(56361024);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
  Fp x1(54525952);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":134:18)
  Fp x2(63);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":123:68)
  Fp x3(218806);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":109:32)
  Fp x4(218805);
  // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
  Fp x5(56361023);
  // loc("cirgen/circuit/rv32im/sha.cpp":342:18)
  Fp x6(47);
  // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
  Fp x7(56360975);
  // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
  Fp x8(56360967);
  // loc("cirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x9(2013235201);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x10(2013204481);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x11(32768);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x12(2013143041);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x13(2013020161);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x14(8192);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x15(2012774401);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x16(4096);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x17(2012282881);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x18(2048);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x19(2011299841);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x20(2009333761);
  // loc("cirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x21(512);
  // loc("cirgen/circuit/rv32im/page_fault.cpp":54:24)
  Fp x22(1024);
  // loc("cirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x23(50331661);
  // loc("cirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x24(50331660);
  // loc("cirgen/circuit/rv32im/ecall.cpp":115:25)
  Fp x25(50331662);
  // loc("cirgen/circuit/rv32im/ecall.cpp":38:45)
  Fp x26(50331659);
  // loc("cirgen/circuit/rv32im/ecall.cpp":36:43)
  Fp x27(50331658);
  // loc("cirgen/circuit/rv32im/ecall.cpp":135:49)
  Fp x28(50331653);
  // loc("cirgen/circuit/rv32im/ecall.cpp":130:21)
  Fp x29(115);
  // loc("cirgen/components/u32.cpp":238:19)
  Fp x30(131070);
  // loc("cirgen/components/u32.cpp":234:19)
  Fp x31(131072);
  // loc("cirgen/components/u32.cpp":189:21)
  Fp x32(15);
  // loc("cirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x33(31);
  // loc("cirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x34(192);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x35(35);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:79)
  Fp x36(16384);
  // loc("cirgen/circuit/rv32im/memio.cpp":80:56)
  Fp x37(4194304);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x38(23);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x39(55);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x40(103);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x41(111);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x42(99);
  // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x43(240);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x44(19);
  // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x45(51);
  // loc("cirgen/components/u32.cpp":65:36)
  Fp x46(1996488705);
  // loc("cirgen/components/u32.cpp":65:28)
  Fp x47(465814468);
  // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x48(50331648);
  // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x49(248);
  // loc("cirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x50(2013265919);
  // loc("cirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x51(2013265920);
  // loc("cirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x52(127);
  // loc("cirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x53(48);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x54(1981808641);
  // loc("cirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x55(64);
  // loc("cirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x56(1006632961);
  // loc("cirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x57(1761607681);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x58(1887436801);
  // loc("cirgen/circuit/rv32im/decode.cpp":13:32)
  Fp x59(16);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x60(1950351361);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x61(32);
  // loc("cirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x62(96);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x63(1997537281);
  // loc("cirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x64(128);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x65(13);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x66(12);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x67(11);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x68(10);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x69(9);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x70(8);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x71(7);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x72(6);
  // loc("./cirgen/components/onehot.h":37:32)
  Fp x73(5);
  // loc("cirgen/circuit/rv32im/body.cpp":31:21)
  Fp x74(67108864);
  // loc("cirgen/circuit/rv32im/body.cpp":18:43)
  Fp x75(1509949441);
  // loc("cirgen/circuit/rv32im/body.cpp":17:32)
  Fp x76(3);
  // loc("cirgen/circuit/rv32im/body.cpp":14:29)
  Fp x77(4);
  // loc("./cirgen/components/u32.h":27:12)
  Fp x78(16777216);
  // loc("./cirgen/components/u32.h":26:12)
  Fp x79(65536);
  // loc("cirgen/circuit/rv32im/body.cpp":56:18)
  Fp x80(14);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x81(56014263);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x82(56014262);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x83(56014261);
  // loc("cirgen/circuit/rv32im/body.cpp":53:18)
  Fp x84(56014260);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x85(56014259);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x86(56014258);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x87(56014257);
  // loc("cirgen/circuit/rv32im/body.cpp":47:42)
  Fp x88(56014256);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x89(2005401601);
  // loc("cirgen/components/bytes.cpp":90:30)
  Fp x90(256);
  // loc("cirgen/components/bytes.cpp":89:26)
  Fp x91(255);
  // loc("cirgen/components/bytes.cpp":37:25)
  Fp x92(2);
  // loc("cirgen/components/bytes.cpp":34:29)
  Fp x93(254);
  // loc("cirgen/components/bytes.cpp":21:13)
  Fp x94(0);
  // loc("cirgen/circuit/rv32im/top.cpp":18:17)
  Fp x95(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
  auto x96 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x96 != Fp::invalid());
  if (x96 != 0) {
    // loc("Top/Code/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/top.cpp":18:69))
    auto x97 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x97 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":18:17)
    auto x98 = x95 - x97;
    // loc("Top/Code/Mux/1/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x99 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x99 != Fp::invalid());
    if (x98 != 0) {
      // loc("cirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
    // loc("cirgen/components/bytes.cpp":110:17)
    auto x100 = x95 - x98;
    if (x100 != 0) {
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x101 = args[2][50 * steps + ((cycle - 1) & mask)];
      assert(x101 != Fp::invalid());
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x102 = args[2][51 * steps + ((cycle - 1) & mask)];
      assert(x102 != Fp::invalid());
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x103 = x102 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x104 = (x103 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x105 = x95 - x104;
        if (x105 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x101);
            reg = x101;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x106 = x102 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x106);
            reg = x106;
          }
        }
        if (x104 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x107 = x101 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x107);
            reg = x107;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x108 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x108 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x109 = x108 - x101;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x110 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x110 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x111 = x110 - x102;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x112 = x109 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x113 = x109 * x112;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x113 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x114 = x111 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x115 = x109 * x114;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x115 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x116 = x111 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x117 = x112 * x116;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x117 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x118 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x118 != Fp::invalid());
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x119 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x119 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x120 = x119 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x121 = (x120 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x122 = x95 - x121;
      if (x122 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x118);
          reg = x118;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x123 = x119 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x123);
          reg = x123;
        }
      }
      if (x121 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x124 = x118 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x124);
          reg = x124;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x125 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x125 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x126 = x125 - x118;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x127 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x127 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x128 = x127 - x119;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x129 = x126 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x130 = x126 * x129;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x130 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x131 = x128 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x132 = x126 * x131;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x132 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x133 = x128 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x134 = x129 * x133;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x134 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x135 = x127 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x136 = (x135 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x137 = x95 - x136;
      if (x137 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x125);
          reg = x125;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x138 = x127 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x138);
          reg = x138;
        }
      }
      if (x136 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x139 = x125 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x139);
          reg = x139;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x140 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x140 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x141 = x140 - x125;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x142 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x142 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x143 = x142 - x127;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x144 = x141 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x145 = x141 * x144;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x145 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x146 = x143 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x147 = x141 * x146;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x147 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x148 = x143 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x149 = x144 * x148;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x149 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x150 = x142 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x151 = (x150 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x152 = x95 - x151;
      if (x152 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x140);
          reg = x140;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x153 = x142 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x153);
          reg = x153;
        }
      }
      if (x151 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x154 = x140 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x154);
          reg = x154;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x155 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x155 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x156 = x155 - x140;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x157 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x157 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x158 = x157 - x142;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x159 = x156 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x160 = x156 * x159;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x160 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x161 = x158 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x162 = x156 * x161;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x162 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x163 = x158 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x164 = x159 * x163;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x164 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x165 = x157 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x166 = (x165 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x167 = x95 - x166;
      if (x167 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x155);
          reg = x155;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x168 = x157 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x168);
          reg = x168;
        }
      }
      if (x166 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x169 = x155 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x169);
          reg = x169;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x170 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x170 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x171 = x170 - x155;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x172 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x172 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x173 = x172 - x157;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x174 = x171 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x175 = x171 * x174;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x175 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x176 = x173 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x177 = x171 * x176;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x177 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x178 = x173 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x179 = x174 * x178;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x179 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x180 = x172 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x181 = (x180 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x182 = x95 - x181;
      if (x182 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x170);
          reg = x170;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x183 = x172 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x183);
          reg = x183;
        }
      }
      if (x181 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x184 = x170 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x184);
          reg = x184;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x185 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x185 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x186 = x185 - x170;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x187 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x187 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x188 = x187 - x172;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x189 = x186 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x190 = x186 * x189;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x190 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x191 = x188 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x192 = x186 * x191;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x192 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x193 = x188 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x194 = x189 * x193;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x194 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x195 = x187 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x196 = (x195 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x197 = x95 - x196;
      if (x197 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x185);
          reg = x185;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x198 = x187 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x198);
          reg = x198;
        }
      }
      if (x196 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x199 = x185 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x199);
          reg = x199;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x200 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x200 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x201 = x200 - x185;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x202 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x202 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x203 = x202 - x187;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x204 = x201 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x205 = x201 * x204;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x205 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x206 = x203 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x207 = x201 * x206;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x207 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x208 = x203 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x209 = x204 * x208;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x209 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    {
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x210 = x202 - x93;
      // loc("cirgen/components/bytes.cpp":34:20)
      auto x211 = (x210 == 0) ? Fp(1) : Fp(0);
      // loc("cirgen/components/bytes.cpp":35:16)
      auto x212 = x95 - x211;
      if (x212 != 0) {
        // loc("cirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x200);
          reg = x200;
        }
        // loc("cirgen/components/bytes.cpp":37:16)
        auto x213 = x202 + x92;
        // loc("cirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x213);
          reg = x213;
        }
      }
      if (x211 != 0) {
        // loc("cirgen/components/bytes.cpp":40:17)
        auto x214 = x200 + x95;
        // loc("cirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x214);
          reg = x214;
        }
        // loc("cirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x215 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x215 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":44:18)
    auto x216 = x215 - x200;
    // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x217 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x217 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":45:17)
    auto x218 = x217 - x202;
    // loc("cirgen/components/bytes.cpp":48:19)
    auto x219 = x216 - x95;
    // loc("cirgen/components/bytes.cpp":48:7)
    auto x220 = x216 * x219;
    // loc("cirgen/components/bytes.cpp":48:7)
    if (x220 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
    // loc("cirgen/components/bytes.cpp":51:19)
    auto x221 = x218 + x93;
    // loc("cirgen/components/bytes.cpp":51:7)
    auto x222 = x216 * x221;
    // loc("cirgen/components/bytes.cpp":51:7)
    if (x222 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
    // loc("cirgen/components/bytes.cpp":54:25)
    auto x223 = x218 - x92;
    // loc("cirgen/components/bytes.cpp":54:7)
    auto x224 = x219 * x223;
    // loc("cirgen/components/bytes.cpp":54:7)
    if (x224 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    if (x99 != 0) {
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][45 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][46 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][47 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][48 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][49 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":119:7)
      {
        auto& reg = args[2][50 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/bytes.cpp":120:7)
      {
        auto& reg = args[2][51 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
    // loc("cirgen/components/bytes.cpp":123:16)
    auto x225 = x95 - x99;
    if (x225 != 0) {
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x226 = x217 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x227 = (x226 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x228 = x95 - x227;
        if (x228 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x215);
            reg = x215;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x229 = x217 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x229);
            reg = x229;
          }
        }
        if (x227 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x230 = x215 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x230);
            reg = x230;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x231 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x231 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x232 = x231 - x215;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x233 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x233 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x234 = x233 - x217;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x235 = x232 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x236 = x232 * x235;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x236 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x237 = x234 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x238 = x232 * x237;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x238 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x239 = x234 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x240 = x235 * x239;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x240 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x241 = x233 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x242 = (x241 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x243 = x95 - x242;
        if (x243 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x231);
            reg = x231;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x244 = x233 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x244);
            reg = x244;
          }
        }
        if (x242 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x245 = x231 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x245);
            reg = x245;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x246 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x246 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x247 = x246 - x231;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x248 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x248 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x249 = x248 - x233;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x250 = x247 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x251 = x247 * x250;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x251 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x252 = x249 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x253 = x247 * x252;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x253 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x254 = x249 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x255 = x250 * x254;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x255 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x256 = x248 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x257 = (x256 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x258 = x95 - x257;
        if (x258 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x246);
            reg = x246;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x259 = x248 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x259);
            reg = x259;
          }
        }
        if (x257 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x260 = x246 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x260);
            reg = x260;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x261 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x261 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x262 = x261 - x246;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x263 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x263 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x264 = x263 - x248;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x265 = x262 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x266 = x262 * x265;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x266 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x267 = x264 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x268 = x262 * x267;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x268 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x269 = x264 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x270 = x265 * x269;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x270 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x271 = x263 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x272 = (x271 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x273 = x95 - x272;
        if (x273 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x261);
            reg = x261;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x274 = x263 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x274);
            reg = x274;
          }
        }
        if (x272 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x275 = x261 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x275);
            reg = x275;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x276 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x276 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x277 = x276 - x261;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x278 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x278 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x279 = x278 - x263;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x280 = x277 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x281 = x277 * x280;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x281 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x282 = x279 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x283 = x277 * x282;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x283 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x284 = x279 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x285 = x280 * x284;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x285 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x286 = x278 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x287 = (x286 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x288 = x95 - x287;
        if (x288 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x276);
            reg = x276;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x289 = x278 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x289);
            reg = x289;
          }
        }
        if (x287 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x290 = x276 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x290);
            reg = x290;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x291 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x291 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x292 = x291 - x276;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x293 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x293 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x294 = x293 - x278;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x295 = x292 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x296 = x292 * x295;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x296 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x297 = x294 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x298 = x292 * x297;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x298 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x299 = x294 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x300 = x295 * x299;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x300 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x301 = x293 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x302 = (x301 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x303 = x95 - x302;
        if (x303 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x291);
            reg = x291;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x304 = x293 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x304);
            reg = x304;
          }
        }
        if (x302 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x305 = x291 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x305);
            reg = x305;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x306 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x306 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x307 = x306 - x291;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x308 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x308 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x309 = x308 - x293;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x310 = x307 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x311 = x307 * x310;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x311 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x312 = x309 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x313 = x307 * x312;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x313 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x314 = x309 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x315 = x310 * x314;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x315 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x316 = x308 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x317 = (x316 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x318 = x95 - x317;
        if (x318 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x306);
            reg = x306;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x319 = x308 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x319);
            reg = x319;
          }
        }
        if (x317 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x320 = x306 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x320);
            reg = x320;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x321 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x321 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x322 = x321 - x306;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x323 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x323 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x324 = x323 - x308;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x325 = x322 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x326 = x322 * x325;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x326 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x327 = x324 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x328 = x322 * x327;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x328 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x329 = x324 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x330 = x325 * x329;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x330 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x331 = x323 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x332 = (x331 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x333 = x95 - x332;
        if (x333 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x321);
            reg = x321;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x334 = x323 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x334);
            reg = x334;
          }
        }
        if (x332 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x335 = x321 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x335);
            reg = x335;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x336 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x336 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x337 = x336 - x321;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x338 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x338 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x339 = x338 - x323;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x340 = x337 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x341 = x337 * x340;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x341 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x342 = x339 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x343 = x337 * x342;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x343 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x344 = x339 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x345 = x340 * x344;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x345 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x346 = x338 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x347 = (x346 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x348 = x95 - x347;
        if (x348 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x336);
            reg = x336;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x349 = x338 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x349);
            reg = x349;
          }
        }
        if (x347 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x350 = x336 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x350);
            reg = x350;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x351 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x351 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x352 = x351 - x336;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x353 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x353 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x354 = x353 - x338;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x355 = x352 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x356 = x352 * x355;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x356 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x357 = x354 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x358 = x352 * x357;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x358 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x359 = x354 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x360 = x355 * x359;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x360 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x361 = x353 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x362 = (x361 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x363 = x95 - x362;
        if (x363 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x351);
            reg = x351;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x364 = x353 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x364);
            reg = x364;
          }
        }
        if (x362 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x365 = x351 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x365);
            reg = x365;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][45 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x366 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x366 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x367 = x366 - x351;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x368 = args[2][45 * steps + ((cycle - 0) & mask)];
      assert(x368 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x369 = x368 - x353;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x370 = x367 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x371 = x367 * x370;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x371 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x372 = x369 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x373 = x367 * x372;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x373 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x374 = x369 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x375 = x370 * x374;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x375 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x376 = x368 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x377 = (x376 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x378 = x95 - x377;
        if (x378 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x366);
            reg = x366;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x379 = x368 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x379);
            reg = x379;
          }
        }
        if (x377 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x380 = x366 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][46 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x380);
            reg = x380;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][47 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x381 = args[2][46 * steps + ((cycle - 0) & mask)];
      assert(x381 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x382 = x381 - x366;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x383 = args[2][47 * steps + ((cycle - 0) & mask)];
      assert(x383 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x384 = x383 - x368;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x385 = x382 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x386 = x382 * x385;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x386 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x387 = x384 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x388 = x382 * x387;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x388 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x389 = x384 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x390 = x385 * x389;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x390 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x391 = x383 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x392 = (x391 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x393 = x95 - x392;
        if (x393 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x381);
            reg = x381;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x394 = x383 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x394);
            reg = x394;
          }
        }
        if (x392 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x395 = x381 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][48 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x395);
            reg = x395;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][49 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x396 = args[2][48 * steps + ((cycle - 0) & mask)];
      assert(x396 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x397 = x396 - x381;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x398 = args[2][49 * steps + ((cycle - 0) & mask)];
      assert(x398 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x399 = x398 - x383;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x400 = x397 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x401 = x397 * x400;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x401 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x402 = x399 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x403 = x397 * x402;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x403 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x404 = x399 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x405 = x400 * x404;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x405 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
      {
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x406 = x398 - x93;
        // loc("cirgen/components/bytes.cpp":34:20)
        auto x407 = (x406 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/components/bytes.cpp":35:16)
        auto x408 = x95 - x407;
        if (x408 != 0) {
          // loc("cirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x396);
            reg = x396;
          }
          // loc("cirgen/components/bytes.cpp":37:16)
          auto x409 = x398 + x92;
          // loc("cirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x409);
            reg = x409;
          }
        }
        if (x407 != 0) {
          // loc("cirgen/components/bytes.cpp":40:17)
          auto x410 = x396 + x95;
          // loc("cirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][50 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x410);
            reg = x410;
          }
          // loc("cirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][51 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x411 = args[2][50 * steps + ((cycle - 0) & mask)];
      assert(x411 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":44:18)
      auto x412 = x411 - x396;
      // loc("Top/Mux/1/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x413 = args[2][51 * steps + ((cycle - 0) & mask)];
      assert(x413 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":45:17)
      auto x414 = x413 - x398;
      // loc("cirgen/components/bytes.cpp":48:19)
      auto x415 = x412 - x95;
      // loc("cirgen/components/bytes.cpp":48:7)
      auto x416 = x412 * x415;
      // loc("cirgen/components/bytes.cpp":48:7)
      if (x416 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:48");
      // loc("cirgen/components/bytes.cpp":51:19)
      auto x417 = x414 + x93;
      // loc("cirgen/components/bytes.cpp":51:7)
      auto x418 = x412 * x417;
      // loc("cirgen/components/bytes.cpp":51:7)
      if (x418 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:51");
      // loc("cirgen/components/bytes.cpp":54:25)
      auto x419 = x414 - x92;
      // loc("cirgen/components/bytes.cpp":54:7)
      auto x420 = x415 * x419;
      // loc("cirgen/components/bytes.cpp":54:7)
      if (x420 != 0) throw std::runtime_error("eqz failed at: cirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":39:25))
  auto x421 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x421 != Fp::invalid());
  if (x421 != 0) {
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x422 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x422 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x423 = Fp(x422.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x423);
        reg = x423;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x424 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x424 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x425 = x422 - x424;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x426 = x425 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][23 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x426);
      reg = x426;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x427 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x427 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x428 = Fp(x427.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x428);
        reg = x428;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x429 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x429 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x430 = x427 - x429;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x431 = x430 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][25 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x431);
      reg = x431;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x432 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x432 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x433 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x434 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x435 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x424);
      reg = x424;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x429);
      reg = x429;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    {
      host_args.at(0) = x435;
      host_args.at(1) = x424;
      host_args.at(2) = x432;
      host_args.at(3) = x429;
      host_args.at(4) = x433;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x436 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x437 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x438 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x439 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][108 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][109 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][110 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][111 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][112 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][113 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x440 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x441 = Fp(x440.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x441);
        reg = x441;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x442 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x442 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x443 = x440 - x442;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x444 = x443 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][27 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x444);
      reg = x444;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x445 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x445 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x446 = Fp(x445.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x446);
        reg = x446;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x447 = args[2][28 * steps + ((cycle - 0) & mask)];
    assert(x447 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x448 = x445 - x447;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x449 = x448 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][29 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x449);
      reg = x449;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x450 = args[2][27 * steps + ((cycle - 0) & mask)];
    assert(x450 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x451 = args[2][29 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":37:44)
    auto x452 = x435 + x95;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x442);
      reg = x442;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x450);
      reg = x450;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x447);
      reg = x447;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    {
      host_args.at(0) = x452;
      host_args.at(1) = x442;
      host_args.at(2) = x450;
      host_args.at(3) = x447;
      host_args.at(4) = x451;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x453 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x453 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x454 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x455 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x456 = args[2][121 * steps + ((cycle - 0) & mask)];
    assert(x456 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x452);
      reg = x452;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x457 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x458 = Fp(x457.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x458);
        reg = x458;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x459 = args[2][30 * steps + ((cycle - 0) & mask)];
    assert(x459 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x460 = x457 - x459;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x461 = x460 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][31 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x461);
      reg = x461;
    }
    // loc("Top/Code/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x462 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x462 != Fp::invalid());
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x463 = Fp(x462.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x463);
        reg = x463;
      }
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x464 = args[2][32 * steps + ((cycle - 0) & mask)];
    assert(x464 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x465 = x462 - x464;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x466 = x465 * x89;
    // loc("cirgen/components/bytes.cpp":94:3)
    {
      auto& reg = args[2][33 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x466);
      reg = x466;
    }
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x467 = args[2][31 * steps + ((cycle - 0) & mask)];
    assert(x467 != Fp::invalid());
    // loc("Top/Mux/2/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x468 = args[2][33 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/top.cpp":37:44)
    auto x469 = x435 + x92;
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x459);
      reg = x459;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x464);
      reg = x464;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    {
      host_args.at(0) = x469;
      host_args.at(1) = x459;
      host_args.at(2) = x467;
      host_args.at(3) = x464;
      host_args.at(4) = x468;
      host_args.at(5) = x94;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x470 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x470 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x471 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x472 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x472 != Fp::invalid());
    // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x473 = args[2][128 * steps + ((cycle - 0) & mask)];
    assert(x473 != Fp::invalid());
    // loc("cirgen/components/ram.cpp":130:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    // loc("cirgen/components/ram.cpp":131:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    // loc("cirgen/components/ram.cpp":132:3)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x472);
      reg = x472;
    }
    // loc("cirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
  auto x474 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x474 != Fp::invalid());
  if (x474 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x475 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x475 != Fp::invalid());
    // loc("Top/Code/Mux/3/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x476 = args[0][8 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    if (x476 != 0) {
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x477 = args[1][4];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x478 = args[1][5];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x479 = args[1][6];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x480 = args[1][7];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x477);
        reg = x477;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x478);
        reg = x478;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x479);
        reg = x479;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x480);
        reg = x480;
      }
      {
        host_args.at(0) = x88;
        host_args.at(1) = x477;
        host_args.at(2) = x478;
        host_args.at(3) = x479;
        host_args.at(4) = x480;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x481 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x481 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x482 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x482 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x483 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x483 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x484 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x484 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x88);
        reg = x88;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x481);
        reg = x481;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x482);
        reg = x482;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x483);
        reg = x483;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x484);
        reg = x484;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x485 = args[1][8];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x486 = args[1][9];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x487 = args[1][10];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x488 = args[1][11];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x485);
        reg = x485;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x486);
        reg = x486;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x487);
        reg = x487;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x488);
        reg = x488;
      }
      {
        host_args.at(0) = x87;
        host_args.at(1) = x485;
        host_args.at(2) = x486;
        host_args.at(3) = x487;
        host_args.at(4) = x488;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x489 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x489 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x490 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x490 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x491 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x491 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x492 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x492 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x87);
        reg = x87;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x489);
        reg = x489;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x490);
        reg = x490;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x491);
        reg = x491;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x492);
        reg = x492;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x493 = args[1][12];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x494 = args[1][13];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x495 = args[1][14];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x496 = args[1][15];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x493);
        reg = x493;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x494);
        reg = x494;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x495);
        reg = x495;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x496);
        reg = x496;
      }
      {
        host_args.at(0) = x86;
        host_args.at(1) = x493;
        host_args.at(2) = x494;
        host_args.at(3) = x495;
        host_args.at(4) = x496;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x497 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x497 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x498 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x498 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x499 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x499 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x500 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x500 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x86);
        reg = x86;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x497);
        reg = x497;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x498);
        reg = x498;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x499);
        reg = x499;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x500);
        reg = x500;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x501 = args[1][16];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x502 = args[1][17];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x503 = args[1][18];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x504 = args[1][19];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x501);
        reg = x501;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x502);
        reg = x502;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x503);
        reg = x503;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x504);
        reg = x504;
      }
      {
        host_args.at(0) = x85;
        host_args.at(1) = x501;
        host_args.at(2) = x502;
        host_args.at(3) = x503;
        host_args.at(4) = x504;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x505 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x505 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x506 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x506 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x507 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x507 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x508 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x508 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x85);
        reg = x85;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x505);
        reg = x505;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x506);
        reg = x506;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x507);
        reg = x507;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x508);
        reg = x508;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":50:15)
    auto x509 = x95 - x476;
    if (x509 != 0) {
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x510 = args[1][20];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x511 = args[1][21];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x512 = args[1][22];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x513 = args[1][23];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x510);
        reg = x510;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x511);
        reg = x511;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x512);
        reg = x512;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x513);
        reg = x513;
      }
      {
        host_args.at(0) = x84;
        host_args.at(1) = x510;
        host_args.at(2) = x511;
        host_args.at(3) = x512;
        host_args.at(4) = x513;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x514 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x514 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x515 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x515 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x516 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x516 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x517 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x517 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x84);
        reg = x84;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x514);
        reg = x514;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x515);
        reg = x515;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x516);
        reg = x516;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x517);
        reg = x517;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x518 = args[1][24];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x519 = args[1][25];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x520 = args[1][26];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x521 = args[1][27];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x518);
        reg = x518;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x519);
        reg = x519;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x520);
        reg = x520;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x521);
        reg = x521;
      }
      {
        host_args.at(0) = x83;
        host_args.at(1) = x518;
        host_args.at(2) = x519;
        host_args.at(3) = x520;
        host_args.at(4) = x521;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x522 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x522 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x523 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x523 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x524 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x524 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x525 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x525 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x83);
        reg = x83;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x522);
        reg = x522;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x523);
        reg = x523;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x524);
        reg = x524;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x525);
        reg = x525;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x526 = args[1][28];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x527 = args[1][29];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x528 = args[1][30];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x529 = args[1][31];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x526);
        reg = x526;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x527);
        reg = x527;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x528);
        reg = x528;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x529);
        reg = x529;
      }
      {
        host_args.at(0) = x82;
        host_args.at(1) = x526;
        host_args.at(2) = x527;
        host_args.at(3) = x528;
        host_args.at(4) = x529;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x530 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x530 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x531 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x531 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x532 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x532 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x533 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x533 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x82);
        reg = x82;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x530);
        reg = x530;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x531);
        reg = x531;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x532);
        reg = x532;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x533);
        reg = x533;
      }
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x534 = args[1][32];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x535 = args[1][33];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x536 = args[1][34];
      // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x537 = args[1][35];
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x534);
        reg = x534;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x535);
        reg = x535;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x536);
        reg = x536;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x537);
        reg = x537;
      }
      {
        host_args.at(0) = x81;
        host_args.at(1) = x534;
        host_args.at(2) = x535;
        host_args.at(3) = x536;
        host_args.at(4) = x537;
        host_args.at(5) = x94;
        host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
      }
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x538 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x538 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x539 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x539 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x540 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x540 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x541 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x541 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x81);
        reg = x81;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x475);
        reg = x475;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x538);
        reg = x538;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x539);
        reg = x539;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x540);
        reg = x540;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x541);
        reg = x541;
      }
    }
    // loc("cirgen/circuit/rv32im/body.cpp":56:3)
    {
      auto& reg = args[2][93 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x80);
      reg = x80;
    }
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x542 = args[1][0];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x543 = args[1][1];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x544 = args[1][2];
    // loc("Top/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x545 = args[1][3];
    // loc("./cirgen/components/u32.h":25:12)
    auto x546 = x543 * x90;
    // loc("./cirgen/components/u32.h":24:12)
    auto x547 = x542 + x546;
    // loc("./cirgen/components/u32.h":26:12)
    auto x548 = x544 * x79;
    // loc("./cirgen/components/u32.h":24:12)
    auto x549 = x547 + x548;
    // loc("./cirgen/components/u32.h":27:12)
    auto x550 = x545 * x78;
    // loc("./cirgen/components/u32.h":24:12)
    auto x551 = x549 + x550;
    // loc("cirgen/circuit/rv32im/body.cpp":14:23)
    auto x552 = x551 + x77;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x553 = Fp(x552.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x553);
        reg = x553;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x554 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x554 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x555 = x552 - x554;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x556 = x555 * x89;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x557 = Fp(x556.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x557);
        reg = x557;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x558 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x558 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x559 = x556 - x558;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x560 = x559 * x89;
    {
      // loc("cirgen/components/bytes.cpp":89:21)
      auto x561 = Fp(x560.asUInt32() & x91.asUInt32());
      // loc("cirgen/components/bytes.cpp":89:12)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x561);
        reg = x561;
      }
    }
    // loc("Top/Mux/3/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
    auto x562 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x562 != Fp::invalid());
    // loc("cirgen/components/bytes.cpp":90:11)
    auto x563 = x560 - x562;
    // loc("cirgen/components/bytes.cpp":90:10)
    auto x564 = x563 * x89;
    {
      // loc("cirgen/circuit/rv32im/body.cpp":17:26)
      auto x565 = Fp(x564.asUInt32() & x76.asUInt32());
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x565);
        reg = x565;
      }
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x566 = args[2][72 * steps + ((cycle - 0) & mask)];
    assert(x566 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":18:18)
    auto x567 = x564 - x566;
    // loc("cirgen/circuit/rv32im/body.cpp":18:17)
    auto x568 = x567 * x75;
    // loc("./cirgen/components/bits.h":61:23)
    {
      auto& reg = args[2][73 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x568);
      reg = x568;
    }
    // loc("Top/Mux/3/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x569 = args[2][73 * steps + ((cycle - 0) & mask)];
    assert(x569 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":22:23)
    auto x570 = x95 - x569;
    // loc("cirgen/circuit/rv32im/body.cpp":22:15)
    auto x571 = x569 * x570;
    // loc("cirgen/circuit/rv32im/body.cpp":22:3)
    {
      auto& reg = args[2][92 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x571);
      reg = x571;
    }
    // loc("Top/Mux/3/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x572 = args[2][92 * steps + ((cycle - 0) & mask)];
    assert(x572 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":23:17)
    auto x573 = x92 - x569;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    auto x574 = x572 * x573;
    // loc("cirgen/circuit/rv32im/body.cpp":23:7)
    if (x574 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x575 = x558 * x90;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x576 = x554 + x575;
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x577 = x562 * x79;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x578 = x576 + x577;
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x579 = x566 * x78;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x580 = x578 + x579;
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x581 = x569 * x74;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x582 = x580 + x581;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x583 = x582 - x77;
    host_args.at(0) = x475;
    host_args.at(1) = x583;
    host(ctx, "log", "%u: Reset: PC = 0x%x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
  auto x584 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x584 != Fp::invalid());
  if (x584 != 0) {
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x585 = args[2][10 * steps + ((cycle - 1) & mask)];
    assert(x585 != Fp::invalid());
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x586 = args[2][11 * steps + ((cycle - 1) & mask)];
    assert(x586 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":28:10)
    auto x587 = x586 * x90;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x588 = x585 + x587;
    // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
    auto x589 = args[2][12 * steps + ((cycle - 1) & mask)];
    assert(x589 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":29:10)
    auto x590 = x589 * x79;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x591 = x588 + x590;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x592 = args[2][72 * steps + ((cycle - 1) & mask)];
    assert(x592 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":30:10)
    auto x593 = x592 * x78;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x594 = x591 + x593;
    // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x595 = args[2][73 * steps + ((cycle - 1) & mask)];
    assert(x595 != Fp::invalid());
    // loc("cirgen/circuit/rv32im/body.cpp":31:10)
    auto x596 = x595 * x74;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x597 = x594 + x596;
    // loc("cirgen/circuit/rv32im/body.cpp":27:10)
    auto x598 = x597 - x77;
    {
      // loc("Top/Mux/4/Reg"("cirgen/circuit/rv32im/body.cpp":68:45))
      auto x599 = args[2][93 * steps + ((cycle - 1) & mask)];
      assert(x599 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":69:24)
      auto x600 = x599 - x80;
      // loc("cirgen/circuit/rv32im/body.cpp":69:24)
      auto x601 = (x600 == 0) ? Fp(1) : Fp(0);
      if (x601 != 0) {
        // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x602 = args[0][0 * steps + ((cycle - 0) & mask)];
        assert(x602 != Fp::invalid());
        host_args.at(0) = x602;
        host_args.at(1) = x598;
        host(ctx, "log", "%u: BODY pc: 0x%x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x598;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x598;
        host(ctx, "getMajor", "", host_args.data(), 1, host_outs.data(), 1);
        auto x603 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x604 = (x603 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x604);
            reg = x604;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x605 = x603 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x606 = (x605 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x606);
            reg = x606;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x607 = x603 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x608 = (x607 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x608);
            reg = x608;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x609 = x603 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x610 = (x609 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x610);
            reg = x610;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x611 = x603 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x612 = (x611 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x612);
            reg = x612;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x613 = x603 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x614 = (x613 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x614);
            reg = x614;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x615 = x603 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x616 = (x615 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x616);
            reg = x616;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x617 = x603 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x618 = (x617 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x618);
            reg = x618;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x619 = x603 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x620 = (x619 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x620);
            reg = x620;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x621 = x603 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x622 = (x621 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x622);
            reg = x622;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x623 = x603 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x624 = (x623 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x624);
            reg = x624;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x625 = x603 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x626 = (x625 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x626);
            reg = x626;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x627 = x603 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x628 = (x627 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x628);
            reg = x628;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x629 = x603 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x630 = (x629 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x630);
            reg = x630;
          }
        }
        // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x631 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x631 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x632 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x632 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x633 = x632 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x634 = x631 + x633;
        // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x635 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x635 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x636 = x635 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x637 = x634 + x636;
        // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x638 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x638 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x639 = x638 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x640 = x637 + x639;
        // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x641 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x641 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x642 = x641 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x643 = x640 + x642;
        // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x644 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x644 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x645 = x644 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x646 = x643 + x645;
        // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x647 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x647 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x648 = x647 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x649 = x646 + x648;
        // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x650 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x650 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x651 = x650 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x652 = x649 + x651;
        // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x653 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x653 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x654 = x653 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x655 = x652 + x654;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x656 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x656 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x657 = x656 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x658 = x655 + x657;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x659 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x659 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x660 = x659 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x661 = x658 + x660;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x662 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x662 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x663 = x662 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x664 = x661 + x663;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x665 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x665 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x666 = x665 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x667 = x664 + x666;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x668 = x667 - x603;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x668 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":76:20)
      auto x669 = x95 - x601;
      if (x669 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x670 = x599 - x70;
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x671 = (x670 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/body.cpp":77:48)
        auto x672 = x95 - x671;
        if (x672 != 0) {
          // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x673 = args[0][0 * steps + ((cycle - 0) & mask)];
          assert(x673 != Fp::invalid());
          host_args.at(0) = x673;
          host_args.at(1) = x598;
          host_args.at(2) = x599;
          host(ctx, "log", "%u: BODY pc: 0x%x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x674 = (x599 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][94 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x674);
            reg = x674;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x675 = x599 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x676 = (x675 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][95 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x676);
            reg = x676;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x677 = x599 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x678 = (x677 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][96 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x678);
            reg = x678;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x679 = x599 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x680 = (x679 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][97 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x680);
            reg = x680;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x681 = x599 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x682 = (x681 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][98 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x682);
            reg = x682;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x683 = x599 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x684 = (x683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x684);
            reg = x684;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x685 = x599 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x686 = (x685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x686);
            reg = x686;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x687 = x599 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x688 = (x687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x688);
            reg = x688;
          }
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x671);
            reg = x671;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x689 = x599 - x69;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x690 = (x689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x691 = x599 - x68;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x692 = (x691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x692);
            reg = x692;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x693 = x599 - x67;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x694 = (x693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x694);
            reg = x694;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x695 = x599 - x66;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x696 = (x695 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x696);
            reg = x696;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x697 = x599 - x65;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x698 = (x697 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x698);
            reg = x698;
          }
        }
        // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x699 = args[2][95 * steps + ((cycle - 0) & mask)];
        assert(x699 != Fp::invalid());
        // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x700 = args[2][96 * steps + ((cycle - 0) & mask)];
        assert(x700 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x701 = x700 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x702 = x699 + x701;
        // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x703 = args[2][97 * steps + ((cycle - 0) & mask)];
        assert(x703 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x704 = x703 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x705 = x702 + x704;
        // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x706 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x706 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x707 = x706 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x708 = x705 + x707;
        // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x709 = args[2][99 * steps + ((cycle - 0) & mask)];
        assert(x709 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x710 = x709 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x711 = x708 + x710;
        // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x712 = args[2][100 * steps + ((cycle - 0) & mask)];
        assert(x712 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x713 = x712 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x714 = x711 + x713;
        // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x715 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x715 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x716 = x715 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x717 = x714 + x716;
        // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x718 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x718 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x719 = x718 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x720 = x717 + x719;
        // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x721 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x721 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x722 = x721 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x723 = x720 + x722;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x724 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x724 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x725 = x724 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x726 = x723 + x725;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x727 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x727 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x728 = x727 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x729 = x726 + x728;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x730 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x730 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x731 = x730 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x732 = x729 + x731;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x733 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x733 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x734 = x733 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x735 = x732 + x734;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x736 = x735 - x599;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x736 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
    auto x737 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x737 != Fp::invalid());
    if (x737 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x738 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x738 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x739 = x598 * x75;
      {
        host_args.at(0) = x739;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x740 = host_outs.at(0);
        auto x741 = host_outs.at(1);
        auto x742 = host_outs.at(2);
        auto x743 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x740);
          reg = x740;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x741);
          reg = x741;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x742);
          reg = x742;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x743);
          reg = x743;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x744 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x745 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x746 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x747 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x747 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x739);
        reg = x739;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x738);
        reg = x738;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x744);
        reg = x744;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x745);
        reg = x745;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x746);
        reg = x746;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x747);
        reg = x747;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x748 = Fp(x747.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x749 = x748 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x749);
          reg = x749;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x750 = Fp(x747.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x751 = x750 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x751);
          reg = x751;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x752 = Fp(x747.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x753 = x752 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x753);
          reg = x753;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x754 = Fp(x747.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x755 = x754 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x755);
          reg = x755;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x756 = Fp(x747.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x757 = x756 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x757);
          reg = x757;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x758 = Fp(x747.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x758);
          reg = x758;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x759 = Fp(x746.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x760 = x759 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x760);
          reg = x760;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x761 = Fp(x746.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x762 = x761 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x762);
          reg = x762;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x763 = Fp(x746.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x764 = x763 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x764);
          reg = x764;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x765 = Fp(x746.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x766 = x765 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x766);
          reg = x766;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x767 = Fp(x746.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x767);
          reg = x767;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x768 = Fp(x745.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x769 = x768 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x769);
          reg = x769;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x770 = Fp(x745.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x771 = x770 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x771);
          reg = x771;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x772 = Fp(x745.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x773 = x772 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x773);
          reg = x773;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x774 = Fp(x745.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x775 = x774 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x775);
          reg = x775;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x776 = Fp(x745.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x776);
          reg = x776;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x777 = Fp(x744.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x778 = x777 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x778);
          reg = x778;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x779 = Fp(x744.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x779);
          reg = x779;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x780 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x780 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x781 = x780 * x55;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x782 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x782 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x783 = x782 * x59;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x784 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x784 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x785 = x784 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x786 = x783 + x785;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x787 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x787 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x788 = x787 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x789 = x786 + x788;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x790 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x790 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x791 = x789 + x790;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x792 = x781 + x791;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x793 = x792 * x92;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x794 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x794 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x795 = x793 + x794;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x796 = x747 - x795;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x796 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x797 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x797 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x798 = x797 * x70;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x799 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x799 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x800 = x799 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x801 = x798 + x800;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x802 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x802 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x803 = x801 + x802;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x804 = x803 * x59;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x805 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x805 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x806 = x805 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x807 = x804 + x806;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x808 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x808 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x809 = x807 + x808;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x810 = x746 - x809;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x810 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x811 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x811 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x812 = x811 * x64;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x813 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x813 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x814 = x813 * x77;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x815 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x815 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x816 = x814 + x815;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x817 = x816 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x818 = x812 + x817;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x819 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x819 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x820 = x819 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x821 = x818 + x820;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x822 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x822 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x823 = x821 + x822;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x824 = x745 - x823;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x824 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x825 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x825 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x826 = x825 * x64;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x827 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x828 = x826 + x827;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x829 = x744 - x828;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x744;
        host_args.at(1) = x745;
        host_args.at(2) = x746;
        host_args.at(3) = x747;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x830 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x831 = (x830 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x831);
            reg = x831;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x832 = x830 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x833 = (x832 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x833);
            reg = x833;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x834 = x830 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x835 = (x834 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x835);
            reg = x835;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x836 = x830 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x837 = (x836 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x837);
            reg = x837;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x838 = x830 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x839 = (x838 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x839);
            reg = x839;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x840 = x830 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x841 = (x840 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x841);
            reg = x841;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x842 = x830 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x843 = (x842 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x843);
            reg = x843;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x844 = x830 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x845 = (x844 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x845);
            reg = x845;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x846 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x846 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x847 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x847 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x848 = x847 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x849 = x846 + x848;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x850 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x850 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x851 = x850 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x852 = x849 + x851;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x853 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x853 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x854 = x853 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x855 = x852 + x854;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x856 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x856 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x857 = x856 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x858 = x855 + x857;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x859 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x859 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x860 = x859 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x861 = x858 + x860;
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x862 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x862 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x863 = x862 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x864 = x861 + x863;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x865 = x864 - x830;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x865 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x866 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x866 != Fp::invalid());
        if (x866 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x867 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x867 != Fp::invalid());
        if (x867 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x868 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x868 != Fp::invalid());
        if (x868 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x869 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x869 != Fp::invalid());
        if (x869 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x870 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x870 != Fp::invalid());
        if (x870 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x871 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x871 != Fp::invalid());
        if (x871 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x872 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x872 != Fp::invalid());
        if (x872 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x873 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x873 != Fp::invalid());
        if (x873 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x874 = x787 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x875 = x790 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x876 = x874 + x875;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x877 = x794 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x878 = x877 + x803;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x879 = x876 + x878;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x880 = x780 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x881 = x782 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x882 = x880 + x881;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x883 = x882 + x784;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x884 = x780 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x879);
            reg = x879;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x883);
            reg = x883;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x884);
            reg = x884;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x884);
            reg = x884;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x885 = x805 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x886 = x808 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x887 = x885 + x886;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x888 = x887 + x811;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x889 = x888 + x48;
      {
        host_args.at(0) = x889;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x890 = host_outs.at(0);
        auto x891 = host_outs.at(1);
        auto x892 = host_outs.at(2);
        auto x893 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x890);
          reg = x890;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x891);
          reg = x891;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x892);
          reg = x892;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x893);
          reg = x893;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x894 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x895 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x896 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x897 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x897 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x889);
        reg = x889;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x738);
        reg = x738;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x894);
        reg = x894;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x895);
        reg = x895;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x896);
        reg = x896;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x897);
        reg = x897;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x898 = x794 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x899 = x898 + x803;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x900 = x899 + x48;
      {
        host_args.at(0) = x900;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x901 = host_outs.at(0);
        auto x902 = host_outs.at(1);
        auto x903 = host_outs.at(2);
        auto x904 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x901);
          reg = x901;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x902);
          reg = x902;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x903);
          reg = x903;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x904);
          reg = x904;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x905 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x906 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x907 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x908 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x908 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x900);
        reg = x900;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x738);
        reg = x738;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x905);
        reg = x905;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x906);
        reg = x906;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x907);
        reg = x907;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x908);
        reg = x908;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x909 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x910 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x911 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x912 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x912 != Fp::invalid());
      host_args.at(0) = x909;
      host_args.at(1) = x910;
      host_args.at(2) = x911;
      host_args.at(3) = x912;
      host_args.at(4) = x888;
      host_args.at(5) = x894;
      host_args.at(6) = x895;
      host_args.at(7) = x896;
      host_args.at(8) = x897;
      host_args.at(9) = x899;
      host_args.at(10) = x905;
      host_args.at(11) = x906;
      host_args.at(12) = x907;
      host_args.at(13) = x908;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x913 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x913 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x914 = x95 - x913;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x915 = x914 * x894;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x916 = x914 * x895;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x917 = x914 * x896;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x918 = x914 * x897;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x919 = x595 * x77;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x920 = x592 + x919;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x921 = x585 - x77;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x922 = x913 * x921;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x923 = x913 * x586;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x924 = x913 * x589;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x925 = x913 * x920;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x926 = x915 + x922;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x927 = x916 + x923;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x928 = x917 + x924;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x929 = x918 + x925;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x930 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x930 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x931 = x95 - x930;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x932 = x931 * x905;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x933 = x931 * x906;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x934 = x931 * x907;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x935 = x931 * x908;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x936 = x930 * x909;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x937 = x930 * x910;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x938 = x930 * x911;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x939 = x930 * x912;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x940 = x932 + x936;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x941 = x933 + x937;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x942 = x934 + x938;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x943 = x935 + x939;
      host_args.at(0) = x926;
      host_args.at(1) = x927;
      host_args.at(2) = x928;
      host_args.at(3) = x929;
      host_args.at(4) = x940;
      host_args.at(5) = x941;
      host_args.at(6) = x942;
      host_args.at(7) = x943;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x944 = Fp(x929.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x945 = x944 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x945);
          reg = x945;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x946 = Fp(x929.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x947 = x946 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x947);
          reg = x947;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x948 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x948 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x949 = x948 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x950 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x950 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x951 = x950 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x952 = x949 + x951;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x953 = x929 - x952;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x953 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x954 = Fp(x943.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x955 = x954 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x955);
          reg = x955;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x956 = Fp(x943.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x957 = x956 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x957);
          reg = x957;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x958 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x958 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x959 = x958 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x960 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x960 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x961 = x960 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x962 = x959 + x961;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x963 = x943 - x962;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x963 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x940);
        reg = x940;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x941);
        reg = x941;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x942);
        reg = x942;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x943);
        reg = x943;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x964 = Fp(x926.asUInt32() & x940.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x965 = Fp(x927.asUInt32() & x941.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x966 = Fp(x928.asUInt32() & x942.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x967 = Fp(x929.asUInt32() & x943.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x964);
          reg = x964;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x965);
          reg = x965;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x966);
          reg = x966;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x967);
          reg = x967;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x968 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x968 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x969 = x968 * x926;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x970 = x968 * x927;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x971 = x968 * x928;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x972 = x968 * x929;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x973 = x969 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x974 = x970 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x975 = x971 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x976 = x972 + x91;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x977 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x977 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x978 = x977 * x940;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x979 = x977 * x941;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x980 = x977 * x942;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x981 = x977 * x943;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x982 = x973 + x978;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x983 = x974 + x979;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x984 = x975 + x980;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x985 = x976 + x981;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x986 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x987 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x988 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x989 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x990 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x990 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x991 = x986 * x987;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x992 = x986 * x988;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x993 = x986 * x989;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x994 = x986 * x990;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x995 = x982 + x991;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x996 = x983 + x992;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x997 = x984 + x993;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x998 = x985 + x994;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x999 = x996 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1000 = x995 + x999;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1001 = Fp(x1000.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1001);
          reg = x1001;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1002 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1002 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1003 = x1000 - x1002;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1004 = x1003 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1005 = Fp(x1004.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1005);
          reg = x1005;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1006 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1006 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1007 = x1004 - x1006;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1008 = x1007 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1008);
        reg = x1008;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1009 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1009 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1010 = x1009 + x997;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1011 = x998 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1012 = x1010 + x1011;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1013 = Fp(x1012.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1013);
          reg = x1013;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1014 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1014 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1015 = x1012 - x1014;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1016 = x1015 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1017 = Fp(x1016.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1017);
          reg = x1017;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1018 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1018 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1019 = x1016 - x1018;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1020 = x1019 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1020);
        reg = x1020;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1021 = Fp(x1018.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1022 = x1021 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1022);
          reg = x1022;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1023 = Fp(x1018.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1024 = x1023 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1024);
          reg = x1024;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1025 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1025 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1026 = x1025 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1027 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1027 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1028 = x1027 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1029 = x1026 + x1028;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1030 = x1018 - x1029;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1030 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1031 = x95 - x958;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1032 = x948 * x1031;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1033 = x95 - x1025;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1034 = x1032 * x1033;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1035 = x95 - x948;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1036 = x1035 * x958;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1037 = x1036 * x1025;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1038 = x1034 + x1037;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1038);
        reg = x1038;
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1039 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1039 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1040 = x1039 + x1025;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1041 = x1039 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1042 = x1041 * x1025;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1043 = x1040 - x1042;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1043);
        reg = x1043;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1044 = x1006 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1045 = x1002 + x1044;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1046 = (x1045 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1046);
          reg = x1046;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1047 = inv(x1045);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1047);
          reg = x1047;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1048 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1048 != Fp::invalid());
      if (x1048 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1045 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1049 = x95 - x1048;
      if (x1049 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1050 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1050 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1051 = x1045 * x1050;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1052 = x1051 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1052 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1053 = x1018 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1054 = x1014 + x1053;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1055 = x1049 * x79;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1056 = x1054 + x1055;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1057 = (x1056 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1057);
          reg = x1057;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1058 = inv(x1056);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1058);
          reg = x1058;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1059 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1059 != Fp::invalid());
      if (x1059 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1056 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1060 = x95 - x1059;
      if (x1060 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1061 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1061 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1062 = x1056 * x1061;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1063 = x1062 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1063 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1064 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1064 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1065 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1065 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1066 = x95 - x1065;
      host_args.at(0) = x1002;
      host_args.at(1) = x1006;
      host_args.at(2) = x1014;
      host_args.at(3) = x1018;
      host_args.at(4) = x1059;
      host_args.at(5) = x1064;
      host_args.at(6) = x1066;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1067 = x819 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1068 = x822 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1069 = x1067 + x1068;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1070 = x1069 + x825;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1071 = (x1070 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1071);
          reg = x1071;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1072 = inv(x1070);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1072);
          reg = x1072;
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1073 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1073 != Fp::invalid());
      if (x1073 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1070 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1074 = x95 - x1073;
      if (x1074 != 0) {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1075 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1075 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1076 = x1070 * x1075;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1077 = x1076 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1077 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1078 = x598 + x77;
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1079 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1079 != Fp::invalid());
      if (x1079 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1080 = x827 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1080 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x816 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x792 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:38");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1081 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1082 = Fp(x1081.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1082);
            reg = x1082;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1083 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1083 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1084 = x1081 - x1083;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1085 = x1084 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1086 = Fp(x1085.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1086);
            reg = x1086;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1087 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1087 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1088 = x1085 - x1087;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1089 = x1088 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1090 = Fp(x1089.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1090);
            reg = x1090;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1091 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1091 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1092 = x1089 - x1091;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1093 = x1092 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1094 = Fp(x1093.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1094);
            reg = x1094;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1095 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1095 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1096 = x1093 - x1095;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1097 = x1096 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1097);
          reg = x1097;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1098 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1098 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1099 = x95 - x1098;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1100 = x1098 * x1099;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1100);
          reg = x1100;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1101 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1101 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1102 = x92 - x1098;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1103 = x1101 * x1102;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1103 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1104 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1104 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1104);
          reg = x1104;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1002;
          host_args.at(2) = x1006;
          host_args.at(3) = x1014;
          host_args.at(4) = x1018;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1105 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1002);
            reg = x1002;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          {
            host_args.at(0) = x1105;
            host_args.at(1) = x1002;
            host_args.at(2) = x1006;
            host_args.at(3) = x1014;
            host_args.at(4) = x1018;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1106 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1106 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1107 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1107 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1108 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1108 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1109 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1109 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1105);
            reg = x1105;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1106);
            reg = x1106;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1107);
            reg = x1107;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1108);
            reg = x1108;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1109);
            reg = x1109;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1110 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1110 != Fp::invalid());
      if (x1110 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1111 = x827 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1111 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x816 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1112 = x792 - x61;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1112 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:39");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1113 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1114 = Fp(x1113.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1114);
            reg = x1114;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1115 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1115 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1116 = x1113 - x1115;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1117 = x1116 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1118 = Fp(x1117.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1118);
            reg = x1118;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1119 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1119 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1120 = x1117 - x1119;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1121 = x1120 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1122 = Fp(x1121.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1122);
            reg = x1122;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1123 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1123 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1124 = x1121 - x1123;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1125 = x1124 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1126 = Fp(x1125.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1126);
            reg = x1126;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1127 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1127 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1128 = x1125 - x1127;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1129 = x1128 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1129);
          reg = x1129;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1130 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1130 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1131 = x95 - x1130;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1132 = x1130 * x1131;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1132);
          reg = x1132;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1133 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1133 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1134 = x92 - x1130;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1135 = x1133 * x1134;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1135 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1136 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1136 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1136);
          reg = x1136;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1002;
          host_args.at(2) = x1006;
          host_args.at(3) = x1014;
          host_args.at(4) = x1018;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1137 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1002);
            reg = x1002;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          {
            host_args.at(0) = x1137;
            host_args.at(1) = x1002;
            host_args.at(2) = x1006;
            host_args.at(3) = x1014;
            host_args.at(4) = x1018;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1138 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1138 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1139 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1139 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1140 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1140 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1141 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1141 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1137);
            reg = x1137;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1138);
            reg = x1138;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1139);
            reg = x1139;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1140);
            reg = x1140;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1141);
            reg = x1141;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1142 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1142 != Fp::invalid());
      if (x1142 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1143 = x827 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1143 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1144 = x816 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1144 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x792 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:40");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1145 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1146 = Fp(x1145.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1146);
            reg = x1146;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1147 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1147 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1148 = x1145 - x1147;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1149 = x1148 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1150 = Fp(x1149.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1150);
            reg = x1150;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1151 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1151 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1152 = x1149 - x1151;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1153 = x1152 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1154 = Fp(x1153.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1154);
            reg = x1154;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1155 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1155 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1156 = x1153 - x1155;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1157 = x1156 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1158 = Fp(x1157.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1158);
            reg = x1158;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1159 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1159 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1160 = x1157 - x1159;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1161 = x1160 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1161);
          reg = x1161;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1162 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1162 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1163 = x95 - x1162;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1164 = x1162 * x1163;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1164);
          reg = x1164;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1165 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1165 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1166 = x92 - x1162;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1167 = x1165 * x1166;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1167 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1168 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1168 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1168);
          reg = x1168;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1002;
          host_args.at(2) = x1006;
          host_args.at(3) = x1014;
          host_args.at(4) = x1018;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1169 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1002);
            reg = x1002;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          {
            host_args.at(0) = x1169;
            host_args.at(1) = x1002;
            host_args.at(2) = x1006;
            host_args.at(3) = x1014;
            host_args.at(4) = x1018;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1170 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1170 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1171 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1171 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1172 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1172 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1173 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1173 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1169);
            reg = x1169;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1170);
            reg = x1170;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1171);
            reg = x1171;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1172);
            reg = x1172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1173);
            reg = x1173;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1174 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1174 != Fp::invalid());
      if (x1174 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1175 = x827 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1175 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1176 = x816 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1176 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x792 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:41");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1177 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1178 = Fp(x1177.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1178);
            reg = x1178;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1179 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1179 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1180 = x1177 - x1179;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1181 = x1180 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1182 = Fp(x1181.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1182);
            reg = x1182;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1183 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1183 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1184 = x1181 - x1183;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1185 = x1184 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1186 = Fp(x1185.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1186);
            reg = x1186;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1187 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1187 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1188 = x1185 - x1187;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1189 = x1188 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1190 = Fp(x1189.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1190);
            reg = x1190;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1191 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1191 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1192 = x1189 - x1191;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1193 = x1192 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1193);
          reg = x1193;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1194 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1194 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1195 = x95 - x1194;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1196 = x1194 * x1195;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1196);
          reg = x1196;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1197 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1197 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1198 = x92 - x1194;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1199 = x1197 * x1198;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1199 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1200 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1200 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1200);
          reg = x1200;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1002;
          host_args.at(2) = x1006;
          host_args.at(3) = x1014;
          host_args.at(4) = x1018;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1201 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1002);
            reg = x1002;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          {
            host_args.at(0) = x1201;
            host_args.at(1) = x1002;
            host_args.at(2) = x1006;
            host_args.at(3) = x1014;
            host_args.at(4) = x1018;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1202 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1202 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1203 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1203 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1204 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1204 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1205 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1205 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1201);
            reg = x1201;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1202);
            reg = x1202;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1203);
            reg = x1203;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1204);
            reg = x1204;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1205);
            reg = x1205;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1206 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1206 != Fp::invalid());
      if (x1206 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1207 = x827 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1207 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1208 = x816 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1208 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x792 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:42");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1209 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1210 = Fp(x1209.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1210);
            reg = x1210;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1211 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1211 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1212 = x1209 - x1211;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1213 = x1212 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1214 = Fp(x1213.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1214);
            reg = x1214;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1215 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1215 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1216 = x1213 - x1215;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1217 = x1216 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1218 = Fp(x1217.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1218);
            reg = x1218;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1219 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1219 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1220 = x1217 - x1219;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1221 = x1220 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1222 = Fp(x1221.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1222);
            reg = x1222;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1223 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1223 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1224 = x1221 - x1223;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1225 = x1224 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1225);
          reg = x1225;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1226 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1226 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1227 = x95 - x1226;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1228 = x1226 * x1227;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1228);
          reg = x1228;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1229 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1229 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1230 = x92 - x1226;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1231 = x1229 * x1230;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1231 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1232 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1232 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1232);
          reg = x1232;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1002;
          host_args.at(2) = x1006;
          host_args.at(3) = x1014;
          host_args.at(4) = x1018;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1233 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1002);
            reg = x1002;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          {
            host_args.at(0) = x1233;
            host_args.at(1) = x1002;
            host_args.at(2) = x1006;
            host_args.at(3) = x1014;
            host_args.at(4) = x1018;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1234 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1234 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1235 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1235 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1236 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1236 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1237 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1237 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1233);
            reg = x1233;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1234);
            reg = x1234;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1235);
            reg = x1235;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1236);
            reg = x1236;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1237);
            reg = x1237;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1238 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1238 != Fp::invalid());
      if (x1238 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1239 = x827 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1239 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1240 = x816 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1240 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x792 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:43");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1241 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1242 = Fp(x1241.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1242);
            reg = x1242;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1243 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1243 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1244 = x1241 - x1243;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1245 = x1244 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1246 = Fp(x1245.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1246);
            reg = x1246;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1247 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1247 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1248 = x1245 - x1247;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1249 = x1248 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1250 = Fp(x1249.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1250);
            reg = x1250;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1251 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1251 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1252 = x1249 - x1251;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1253 = x1252 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1254 = Fp(x1253.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1254);
            reg = x1254;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1255 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1255 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1256 = x1253 - x1255;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1257 = x1256 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1257);
          reg = x1257;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1258 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1258 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1259 = x95 - x1258;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1260 = x1258 * x1259;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1260);
          reg = x1260;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1261 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1261 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1262 = x92 - x1258;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1263 = x1261 * x1262;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1263 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1264 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1264 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1264);
          reg = x1264;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1064;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1265 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1064);
            reg = x1064;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x1265;
            host_args.at(1) = x1064;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1266 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1266 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1267 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1267 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1268 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1268 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1269 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1269 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1265);
            reg = x1265;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1266);
            reg = x1266;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1267);
            reg = x1267;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1268);
            reg = x1268;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1269);
            reg = x1269;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1270 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1270 != Fp::invalid());
      if (x1270 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1271 = x827 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1271 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1272 = x816 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1272 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x792 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:44");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1273 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1274 = Fp(x1273.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1274);
            reg = x1274;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1275 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1275 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1276 = x1273 - x1275;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1277 = x1276 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1278 = Fp(x1277.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1278);
            reg = x1278;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1279 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1279 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1280 = x1277 - x1279;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1281 = x1280 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1282 = Fp(x1281.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1282);
            reg = x1282;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1283 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1283 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1284 = x1281 - x1283;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1285 = x1284 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1286 = Fp(x1285.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1286);
            reg = x1286;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1287 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1287 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1288 = x1285 - x1287;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1289 = x1288 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1289);
          reg = x1289;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1290 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1290 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1291 = x95 - x1290;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1292 = x1290 * x1291;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1292);
          reg = x1292;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1293 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1293 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1294 = x92 - x1290;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1295 = x1293 * x1294;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1295 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1296 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1296 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1296);
          reg = x1296;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1066;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1297 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1066);
            reg = x1066;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x1297;
            host_args.at(1) = x1066;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1298 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1298 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1299 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1299 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1300 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1300 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1301 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1301 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1297);
            reg = x1297;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1298);
            reg = x1298;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1299);
            reg = x1299;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1300);
            reg = x1300;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1301);
            reg = x1301;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/0/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1302 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1302 != Fp::invalid());
      if (x1302 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1303 = x827 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1303 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x816 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:45");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1304 = x787 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1305 = x790 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1306 = x1304 + x1305;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1307 = x1306 + x899;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1308 = x780 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1309 = x782 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1310 = x1308 + x1309;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1311 = x1310 + x784;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1312 = x780 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1307);
          reg = x1307;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1311);
          reg = x1311;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1312);
          reg = x1312;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1312);
          reg = x1312;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1313 = x1078 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1314 = Fp(x1313.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1314);
            reg = x1314;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1315 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1315 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1316 = x1313 - x1315;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1317 = x1316 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1318 = Fp(x1317.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1318);
            reg = x1318;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1319 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1319 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1320 = x1317 - x1319;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1321 = x1320 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1322 = Fp(x1321.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1322);
            reg = x1322;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1323 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1323 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1324 = x1321 - x1323;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1325 = x1324 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1326 = Fp(x1325.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1326);
            reg = x1326;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1327 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1327 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1328 = x1325 - x1327;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1329 = x1328 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1329);
          reg = x1329;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1330 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1330 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1331 = x95 - x1330;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1332 = x1330 * x1331;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1332);
          reg = x1332;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1333 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1333 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1334 = x92 - x1330;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1335 = x1333 * x1334;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1335 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/0/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1336 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1336 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1336);
          reg = x1336;
        }
        if (x1074 != 0) {
          host_args.at(0) = x1070;
          host_args.at(1) = x1002;
          host_args.at(2) = x1006;
          host_args.at(3) = x1014;
          host_args.at(4) = x1018;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1337 = x1070 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1002);
            reg = x1002;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1006);
            reg = x1006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1014);
            reg = x1014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1018);
            reg = x1018;
          }
          {
            host_args.at(0) = x1337;
            host_args.at(1) = x1002;
            host_args.at(2) = x1006;
            host_args.at(3) = x1014;
            host_args.at(4) = x1018;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1338 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1338 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1339 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1339 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1340 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1340 != Fp::invalid());
          // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1341 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1341 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1337);
            reg = x1337;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x738);
            reg = x738;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1338);
            reg = x1338;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1339);
            reg = x1339;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1340);
            reg = x1340;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1341);
            reg = x1341;
          }
        }
        if (x1073 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/components/mux.h":39:25))
    auto x1342 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x1342 != Fp::invalid());
    if (x1342 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1343 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x1343 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1344 = x598 * x75;
      {
        host_args.at(0) = x1344;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1345 = host_outs.at(0);
        auto x1346 = host_outs.at(1);
        auto x1347 = host_outs.at(2);
        auto x1348 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1345);
          reg = x1345;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1346);
          reg = x1346;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1347);
          reg = x1347;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1348);
          reg = x1348;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1349 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x1349 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1350 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x1350 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1351 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x1351 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1352 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x1352 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1344);
        reg = x1344;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1343);
        reg = x1343;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1349);
        reg = x1349;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1350);
        reg = x1350;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1351);
        reg = x1351;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1352);
        reg = x1352;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1353 = Fp(x1352.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1354 = x1353 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1354);
          reg = x1354;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1355 = Fp(x1352.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1356 = x1355 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1356);
          reg = x1356;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1357 = Fp(x1352.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1358 = x1357 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1358);
          reg = x1358;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1359 = Fp(x1352.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1360 = x1359 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1360);
          reg = x1360;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1361 = Fp(x1352.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1362 = x1361 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1362);
          reg = x1362;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1363 = Fp(x1352.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1363);
          reg = x1363;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1364 = Fp(x1351.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1365 = x1364 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1365);
          reg = x1365;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1366 = Fp(x1351.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1367 = x1366 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1367);
          reg = x1367;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1368 = Fp(x1351.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1369 = x1368 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1369);
          reg = x1369;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1370 = Fp(x1351.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1371 = x1370 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1371);
          reg = x1371;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1372 = Fp(x1351.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1372);
          reg = x1372;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1373 = Fp(x1350.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1374 = x1373 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1374);
          reg = x1374;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1375 = Fp(x1350.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1376 = x1375 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1376);
          reg = x1376;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1377 = Fp(x1350.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1378 = x1377 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1378);
          reg = x1378;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1379 = Fp(x1350.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1380 = x1379 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1380);
          reg = x1380;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1381 = Fp(x1350.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1381);
          reg = x1381;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1382 = Fp(x1349.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1383 = x1382 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1383);
          reg = x1383;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1384 = Fp(x1349.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1384);
          reg = x1384;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1385 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x1385 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1386 = x1385 * x55;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1387 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1387 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1388 = x1387 * x59;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1389 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x1389 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1390 = x1389 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1391 = x1388 + x1390;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1392 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x1392 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1393 = x1392 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1394 = x1391 + x1393;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1395 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1395 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1396 = x1394 + x1395;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1397 = x1386 + x1396;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1398 = x1397 * x92;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1399 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x1399 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1400 = x1398 + x1399;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1401 = x1352 - x1400;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1401 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1402 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x1402 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1403 = x1402 * x70;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1404 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1404 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1405 = x1404 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1406 = x1403 + x1405;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1407 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x1407 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1408 = x1406 + x1407;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1409 = x1408 * x59;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1410 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1410 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1411 = x1410 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1412 = x1409 + x1411;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1413 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1413 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1414 = x1412 + x1413;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1415 = x1351 - x1414;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1415 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1416 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x1416 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1417 = x1416 * x64;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1418 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x1418 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1419 = x1418 * x77;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1420 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1420 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1421 = x1419 + x1420;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1422 = x1421 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1423 = x1417 + x1422;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1424 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x1424 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1425 = x1424 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1426 = x1423 + x1425;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1427 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1427 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1428 = x1426 + x1427;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1429 = x1350 - x1428;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1429 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1430 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x1430 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1431 = x1430 * x64;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1432 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x1432 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1433 = x1431 + x1432;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1434 = x1349 - x1433;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1434 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1349;
        host_args.at(1) = x1350;
        host_args.at(2) = x1351;
        host_args.at(3) = x1352;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1435 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1436 = (x1435 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1436);
            reg = x1436;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1437 = x1435 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1438 = (x1437 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1438);
            reg = x1438;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1439 = x1435 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1440 = (x1439 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1440);
            reg = x1440;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1441 = x1435 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1442 = (x1441 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1442);
            reg = x1442;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1443 = x1435 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1444 = (x1443 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1444);
            reg = x1444;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1445 = x1435 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1446 = (x1445 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1446);
            reg = x1446;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1447 = x1435 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1448 = (x1447 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1448);
            reg = x1448;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1449 = x1435 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x1450 = (x1449 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1450);
            reg = x1450;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1451 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1451 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1452 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1452 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1453 = x1452 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1454 = x1451 + x1453;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1455 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1455 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1456 = x1455 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1457 = x1454 + x1456;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1458 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1458 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1459 = x1458 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1460 = x1457 + x1459;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1461 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1461 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1462 = x1461 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1463 = x1460 + x1462;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1464 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1464 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1465 = x1464 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1466 = x1463 + x1465;
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1467 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1467 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x1468 = x1467 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x1469 = x1466 + x1468;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x1470 = x1469 - x1435;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x1470 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1471 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x1471 != Fp::invalid());
        if (x1471 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1472 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1473 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1474 = x1472 + x1473;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1475 = x1399 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1476 = x1475 + x1408;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1477 = x1474 + x1476;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1478 = x1385 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1479 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1480 = x1478 + x1479;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1481 = x1480 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1482 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1477);
            reg = x1477;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1481);
            reg = x1481;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1482);
            reg = x1482;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1482);
            reg = x1482;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1483 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x1483 != Fp::invalid());
        if (x1483 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1484 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1485 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1486 = x1484 + x1485;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1487 = x1399 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1488 = x1487 + x1408;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1489 = x1486 + x1488;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1490 = x1385 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1491 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1492 = x1490 + x1491;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1493 = x1492 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1494 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1489);
            reg = x1489;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1493);
            reg = x1493;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1494);
            reg = x1494;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1494);
            reg = x1494;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1495 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x1495 != Fp::invalid());
        if (x1495 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1496 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1497 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1498 = x1496 + x1497;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1499 = x1399 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1500 = x1499 + x1408;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1501 = x1498 + x1500;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1502 = x1385 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1503 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1504 = x1502 + x1503;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1505 = x1504 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1506 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1501);
            reg = x1501;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1505);
            reg = x1505;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1506);
            reg = x1506;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1506);
            reg = x1506;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x72);
            reg = x72;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1507 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x1507 != Fp::invalid());
        if (x1507 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1508 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1509 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1510 = x1508 + x1509;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1511 = x1399 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1512 = x1511 + x1408;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1513 = x1510 + x1512;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1514 = x1385 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1515 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1516 = x1514 + x1515;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1517 = x1516 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1518 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1513);
            reg = x1513;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1517);
            reg = x1517;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1518);
            reg = x1518;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1518);
            reg = x1518;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1519 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x1519 != Fp::invalid());
        if (x1519 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1520 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1521 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1522 = x1520 + x1521;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1523 = x1399 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1524 = x1523 + x1408;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1525 = x1522 + x1524;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1526 = x1385 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1527 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1528 = x1526 + x1527;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1529 = x1528 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1530 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1525);
            reg = x1525;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1529);
            reg = x1529;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1530);
            reg = x1530;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1530);
            reg = x1530;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1531 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x1531 != Fp::invalid());
        if (x1531 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1532 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1533 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1534 = x1532 + x1533;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1535 = x1424 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1536 = x1534 + x1535;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1537 = x1427 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1538 = x1536 + x1537;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1539 = x1385 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1540 = x1430 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1541 = x1539 + x1540;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1542 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1543 = x1541 + x1542;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1544 = x1543 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1545 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1538);
            reg = x1538;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1544);
            reg = x1544;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1545);
            reg = x1545;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1545);
            reg = x1545;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1546 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x1546 != Fp::invalid());
        if (x1546 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1547 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1548 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1549 = x1547 + x1548;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1550 = x1424 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1551 = x1549 + x1550;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1552 = x1427 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1553 = x1551 + x1552;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1554 = x1385 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1555 = x1430 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1556 = x1554 + x1555;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1557 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1558 = x1556 + x1557;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1559 = x1558 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1560 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1553);
            reg = x1553;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1559);
            reg = x1559;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1560);
            reg = x1560;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1560);
            reg = x1560;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1561 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x1561 != Fp::invalid());
        if (x1561 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1562 = x1392 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1563 = x1395 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1564 = x1562 + x1563;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1565 = x1424 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1566 = x1564 + x1565;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1567 = x1427 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1568 = x1566 + x1567;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1569 = x1385 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1570 = x1430 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1571 = x1569 + x1570;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1572 = x1387 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1573 = x1571 + x1572;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1574 = x1573 + x1389;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1575 = x1385 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1568);
            reg = x1568;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1574);
            reg = x1574;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1575);
            reg = x1575;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1575);
            reg = x1575;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1576 = x1410 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1577 = x1413 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1578 = x1576 + x1577;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1579 = x1578 + x1416;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1580 = x1579 + x48;
      {
        host_args.at(0) = x1580;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1581 = host_outs.at(0);
        auto x1582 = host_outs.at(1);
        auto x1583 = host_outs.at(2);
        auto x1584 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1581);
          reg = x1581;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1582);
          reg = x1582;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1583);
          reg = x1583;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1584);
          reg = x1584;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1585 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x1585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1586 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1587 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1588 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1588 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1580);
        reg = x1580;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1343);
        reg = x1343;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1585);
        reg = x1585;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1586);
        reg = x1586;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1587);
        reg = x1587;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1588);
        reg = x1588;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1589 = x1399 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1590 = x1589 + x1408;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1591 = x1590 + x48;
      {
        host_args.at(0) = x1591;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1592 = host_outs.at(0);
        auto x1593 = host_outs.at(1);
        auto x1594 = host_outs.at(2);
        auto x1595 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1592);
          reg = x1592;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1593);
          reg = x1593;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1594);
          reg = x1594;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1595);
          reg = x1595;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1596 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x1596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1597 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1598 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1599 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1599 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1591);
        reg = x1591;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1343);
        reg = x1343;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1596);
        reg = x1596;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1597);
        reg = x1597;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1598);
        reg = x1598;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1599);
        reg = x1599;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1600 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1601 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1602 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1603 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1603 != Fp::invalid());
      host_args.at(0) = x1600;
      host_args.at(1) = x1601;
      host_args.at(2) = x1602;
      host_args.at(3) = x1603;
      host_args.at(4) = x1579;
      host_args.at(5) = x1585;
      host_args.at(6) = x1586;
      host_args.at(7) = x1587;
      host_args.at(8) = x1588;
      host_args.at(9) = x1590;
      host_args.at(10) = x1596;
      host_args.at(11) = x1597;
      host_args.at(12) = x1598;
      host_args.at(13) = x1599;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1604 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1604 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x1605 = x95 - x1604;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1606 = x1605 * x1585;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1607 = x1605 * x1586;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1608 = x1605 * x1587;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1609 = x1605 * x1588;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x1610 = x595 * x77;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x1611 = x592 + x1610;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x1612 = x585 - x77;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1613 = x1604 * x1612;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1614 = x1604 * x586;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1615 = x1604 * x589;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1616 = x1604 * x1611;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1617 = x1606 + x1613;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1618 = x1607 + x1614;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1619 = x1608 + x1615;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1620 = x1609 + x1616;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1621 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1621 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x1622 = x95 - x1621;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1623 = x1622 * x1596;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1624 = x1622 * x1597;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1625 = x1622 * x1598;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1626 = x1622 * x1599;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1627 = x1621 * x1600;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1628 = x1621 * x1601;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1629 = x1621 * x1602;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1630 = x1621 * x1603;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1631 = x1623 + x1627;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1632 = x1624 + x1628;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1633 = x1625 + x1629;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1634 = x1626 + x1630;
      host_args.at(0) = x1617;
      host_args.at(1) = x1618;
      host_args.at(2) = x1619;
      host_args.at(3) = x1620;
      host_args.at(4) = x1631;
      host_args.at(5) = x1632;
      host_args.at(6) = x1633;
      host_args.at(7) = x1634;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1635 = Fp(x1620.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1636 = x1635 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1636);
          reg = x1636;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1637 = Fp(x1620.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1638 = x1637 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1638);
          reg = x1638;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1639 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1639 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1640 = x1639 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1641 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x1641 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1642 = x1641 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1643 = x1640 + x1642;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1644 = x1620 - x1643;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1644 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1645 = Fp(x1634.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1646 = x1645 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1646);
          reg = x1646;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1647 = Fp(x1634.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1648 = x1647 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1648);
          reg = x1648;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1649 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1649 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1650 = x1649 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1651 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x1651 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1652 = x1651 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1653 = x1650 + x1652;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1654 = x1634 - x1653;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1654 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1631);
        reg = x1631;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1632);
        reg = x1632;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1633);
        reg = x1633;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1634);
        reg = x1634;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1655 = Fp(x1617.asUInt32() & x1631.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1656 = Fp(x1618.asUInt32() & x1632.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1657 = Fp(x1619.asUInt32() & x1633.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x1658 = Fp(x1620.asUInt32() & x1634.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1655);
          reg = x1655;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1656);
          reg = x1656;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1657);
          reg = x1657;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1658);
          reg = x1658;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1659 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1659 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1660 = x1659 * x1617;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1661 = x1659 * x1618;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1662 = x1659 * x1619;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1663 = x1659 * x1620;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1664 = x1660 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1665 = x1661 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1666 = x1662 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1667 = x1663 + x91;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1668 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1668 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1669 = x1668 * x1631;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1670 = x1668 * x1632;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1671 = x1668 * x1633;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1672 = x1668 * x1634;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1673 = x1664 + x1669;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1674 = x1665 + x1670;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1675 = x1666 + x1671;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1676 = x1667 + x1672;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1677 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1678 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1679 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1680 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1681 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x1681 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1682 = x1677 * x1678;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1683 = x1677 * x1679;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1684 = x1677 * x1680;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x1685 = x1677 * x1681;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1686 = x1673 + x1682;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1687 = x1674 + x1683;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1688 = x1675 + x1684;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x1689 = x1676 + x1685;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x1690 = x1687 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x1691 = x1686 + x1690;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1692 = Fp(x1691.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1692);
          reg = x1692;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1693 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x1693 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1694 = x1691 - x1693;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1695 = x1694 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1696 = Fp(x1695.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1696);
          reg = x1696;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1697 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x1697 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1698 = x1695 - x1697;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1699 = x1698 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1699);
        reg = x1699;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1700 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x1700 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1701 = x1700 + x1688;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x1702 = x1689 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x1703 = x1701 + x1702;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1704 = Fp(x1703.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1704);
          reg = x1704;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1705 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x1705 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1706 = x1703 - x1705;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1707 = x1706 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x1708 = Fp(x1707.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1708);
          reg = x1708;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x1709 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x1709 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x1710 = x1707 - x1709;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x1711 = x1710 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1711);
        reg = x1711;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x1712 = Fp(x1709.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x1713 = x1712 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1713);
          reg = x1713;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x1714 = Fp(x1709.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x1715 = x1714 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1715);
          reg = x1715;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1716 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1716 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1717 = x1716 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x1718 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x1718 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x1719 = x1718 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x1720 = x1717 + x1719;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x1721 = x1709 - x1720;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x1721 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1722 = x95 - x1649;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1723 = x1639 * x1722;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1724 = x95 - x1716;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1725 = x1723 * x1724;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1726 = x95 - x1639;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1727 = x1726 * x1649;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1728 = x1727 * x1716;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1729 = x1725 + x1728;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1729);
        reg = x1729;
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x1730 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1730 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1731 = x1730 + x1716;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1732 = x1730 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1733 = x1732 * x1716;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1734 = x1731 - x1733;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1734);
        reg = x1734;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x1735 = x1697 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x1736 = x1693 + x1735;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1737 = (x1736 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1737);
          reg = x1737;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1738 = inv(x1736);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1738);
          reg = x1738;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1739 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x1739 != Fp::invalid());
      if (x1739 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1736 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1740 = x95 - x1739;
      if (x1740 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1741 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x1741 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1742 = x1736 * x1741;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1743 = x1742 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1743 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x1744 = x1709 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1745 = x1705 + x1744;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x1746 = x1740 * x79;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x1747 = x1745 + x1746;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1748 = (x1747 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1748);
          reg = x1748;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1749 = inv(x1747);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1749);
          reg = x1749;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1750 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x1750 != Fp::invalid());
      if (x1750 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1747 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1751 = x95 - x1750;
      if (x1751 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1752 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x1752 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1753 = x1747 * x1752;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1754 = x1753 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1754 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1755 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x1755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/1/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1756 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x1756 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1757 = x95 - x1756;
      host_args.at(0) = x1693;
      host_args.at(1) = x1697;
      host_args.at(2) = x1705;
      host_args.at(3) = x1709;
      host_args.at(4) = x1750;
      host_args.at(5) = x1755;
      host_args.at(6) = x1757;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1758 = x1424 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1759 = x1427 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1760 = x1758 + x1759;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1761 = x1760 + x1430;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x1762 = (x1761 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1762);
          reg = x1762;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x1763 = inv(x1761);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1763);
          reg = x1763;
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x1764 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1764 != Fp::invalid());
      if (x1764 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x1761 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x1765 = x95 - x1764;
      if (x1765 != 0) {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1766 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x1766 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1767 = x1761 * x1766;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x1768 = x1767 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x1768 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x1769 = x598 + x77;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x1770 = x1601 * x90;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1771 = x1600 + x1770;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x1772 = x1602 * x79;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x1773 = x1771 + x1772;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x1774 = x1603 * x47;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x1775 = x1774 * x46;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x1776 = x1773 + x1775;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x1777 = x598 + x1776;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1778 = x1750 * x1777;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:35)
      auto x1779 = x1751 * x1769;
      // loc("cirgen/circuit/rv32im/compute.cpp":168:13)
      auto x1780 = x1778 + x1779;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1781 = x1750 * x1769;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:34)
      auto x1782 = x1751 * x1777;
      // loc("cirgen/circuit/rv32im/compute.cpp":169:13)
      auto x1783 = x1781 + x1782;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1784 = x1755 * x1777;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:36)
      auto x1785 = x95 - x1755;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:35)
      auto x1786 = x1785 * x1769;
      // loc("cirgen/circuit/rv32im/compute.cpp":170:13)
      auto x1787 = x1784 + x1786;
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x1788 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1788 != Fp::invalid());
      if (x1788 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1789 = x1432 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1789 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x1790 = x1421 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x1790 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:46");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1791 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1792 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1793 = x1791 + x1792;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1794 = x1793 + x1590;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1795 = x1385 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1796 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1797 = x1795 + x1796;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1798 = x1797 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1799 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1794);
          reg = x1794;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1798);
          reg = x1798;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1799);
          reg = x1799;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1799);
          reg = x1799;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1800 = x1769 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1801 = Fp(x1800.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1801);
            reg = x1801;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1802 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1802 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1803 = x1800 - x1802;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1804 = x1803 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1805 = Fp(x1804.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1805);
            reg = x1805;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1806 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1806 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1807 = x1804 - x1806;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1808 = x1807 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1809 = Fp(x1808.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1809);
            reg = x1809;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1810 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1810 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1811 = x1808 - x1810;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1812 = x1811 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1813 = Fp(x1812.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1813);
            reg = x1813;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1814 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1814 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1815 = x1812 - x1814;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1816 = x1815 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1816);
          reg = x1816;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1817 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1817 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1818 = x95 - x1817;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1819 = x1817 * x1818;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1819);
          reg = x1819;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1820 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1820 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1821 = x92 - x1817;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1822 = x1820 * x1821;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1822 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1823 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1823 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1823);
          reg = x1823;
        }
        if (x1765 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1693;
          host_args.at(2) = x1697;
          host_args.at(3) = x1705;
          host_args.at(4) = x1709;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x1824 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1693);
            reg = x1693;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1705);
            reg = x1705;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          {
            host_args.at(0) = x1824;
            host_args.at(1) = x1693;
            host_args.at(2) = x1697;
            host_args.at(3) = x1705;
            host_args.at(4) = x1709;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1825 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1825 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1826 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1826 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1827 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1827 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1828 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1828 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1824);
            reg = x1824;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1825);
            reg = x1825;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1826);
            reg = x1826;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1827);
            reg = x1827;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1828);
            reg = x1828;
          }
        }
        if (x1764 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x1829 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1829 != Fp::invalid());
      if (x1829 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1830 = x1432 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1830 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x1831 = x1421 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x1831 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:47");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1832 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1833 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1834 = x1832 + x1833;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1835 = x1834 + x1590;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1836 = x1385 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1837 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1838 = x1836 + x1837;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1839 = x1838 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1840 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1835);
          reg = x1835;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1839);
          reg = x1839;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1840);
          reg = x1840;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1840);
          reg = x1840;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1841 = x1769 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1842 = Fp(x1841.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1842);
            reg = x1842;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1843 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1843 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1844 = x1841 - x1843;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1845 = x1844 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1846 = Fp(x1845.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1846);
            reg = x1846;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1847 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1847 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1848 = x1845 - x1847;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1849 = x1848 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1850 = Fp(x1849.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1850);
            reg = x1850;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1851 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1851 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1852 = x1849 - x1851;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1853 = x1852 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1854 = Fp(x1853.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1854);
            reg = x1854;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1855 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1855 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1856 = x1853 - x1855;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1857 = x1856 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1857);
          reg = x1857;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1858 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1858 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1859 = x95 - x1858;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1860 = x1858 * x1859;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1860);
          reg = x1860;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1861 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1861 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1862 = x92 - x1858;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1863 = x1861 * x1862;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1863 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1864 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1864 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1864);
          reg = x1864;
        }
        if (x1765 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1693;
          host_args.at(2) = x1697;
          host_args.at(3) = x1705;
          host_args.at(4) = x1709;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x1865 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1693);
            reg = x1693;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1705);
            reg = x1705;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          {
            host_args.at(0) = x1865;
            host_args.at(1) = x1693;
            host_args.at(2) = x1697;
            host_args.at(3) = x1705;
            host_args.at(4) = x1709;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1866 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1866 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1867 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1867 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1868 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1868 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1869 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1869 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1865);
            reg = x1865;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1866);
            reg = x1866;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1867);
            reg = x1867;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1868);
            reg = x1868;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1869);
            reg = x1869;
          }
        }
        if (x1764 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x1870 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1870 != Fp::invalid());
      if (x1870 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1871 = x1432 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1871 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x1872 = x1421 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x1872 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:48");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1873 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1874 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1875 = x1873 + x1874;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1876 = x1875 + x1590;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1877 = x1385 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1878 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1879 = x1877 + x1878;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1880 = x1879 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1881 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1876);
          reg = x1876;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1880);
          reg = x1880;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1881);
          reg = x1881;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1881);
          reg = x1881;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x72);
          reg = x72;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1882 = x1769 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1883 = Fp(x1882.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1883);
            reg = x1883;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1884 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1884 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1885 = x1882 - x1884;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1886 = x1885 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1887 = Fp(x1886.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1887);
            reg = x1887;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1888 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1888 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1889 = x1886 - x1888;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1890 = x1889 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1891 = Fp(x1890.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1891);
            reg = x1891;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1892 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1892 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1893 = x1890 - x1892;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1894 = x1893 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1895 = Fp(x1894.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1895);
            reg = x1895;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1896 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1896 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1897 = x1894 - x1896;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1898 = x1897 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1898);
          reg = x1898;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1899 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1899 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1900 = x95 - x1899;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1901 = x1899 * x1900;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1901);
          reg = x1901;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1902 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1902 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1903 = x92 - x1899;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1904 = x1902 * x1903;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1904 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1905 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1905 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1905);
          reg = x1905;
        }
        if (x1765 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1693;
          host_args.at(2) = x1697;
          host_args.at(3) = x1705;
          host_args.at(4) = x1709;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x1906 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1693);
            reg = x1693;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1705);
            reg = x1705;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          {
            host_args.at(0) = x1906;
            host_args.at(1) = x1693;
            host_args.at(2) = x1697;
            host_args.at(3) = x1705;
            host_args.at(4) = x1709;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1907 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1907 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1908 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1908 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1909 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1909 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1910 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1910 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1906);
            reg = x1906;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1907);
            reg = x1907;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1908);
            reg = x1908;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1909);
            reg = x1909;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1910);
            reg = x1910;
          }
        }
        if (x1764 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x1911 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1911 != Fp::invalid());
      if (x1911 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1912 = x1432 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1912 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x1913 = x1421 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x1913 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:49");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1914 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1915 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1916 = x1914 + x1915;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1917 = x1916 + x1590;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1918 = x1385 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1919 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1920 = x1918 + x1919;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1921 = x1920 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1922 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1917);
          reg = x1917;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1921);
          reg = x1921;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1922);
          reg = x1922;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1922);
          reg = x1922;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1923 = x1769 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1924 = Fp(x1923.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1924);
            reg = x1924;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1925 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1925 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1926 = x1923 - x1925;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1927 = x1926 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1928 = Fp(x1927.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1928);
            reg = x1928;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1929 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1929 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1930 = x1927 - x1929;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1931 = x1930 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1932 = Fp(x1931.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1932);
            reg = x1932;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1933 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1933 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1934 = x1931 - x1933;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1935 = x1934 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1936 = Fp(x1935.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1936);
            reg = x1936;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1937 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1937 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1938 = x1935 - x1937;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1939 = x1938 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1939);
          reg = x1939;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1940 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1940 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1941 = x95 - x1940;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1942 = x1940 * x1941;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1942);
          reg = x1942;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1943 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1943 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1944 = x92 - x1940;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1945 = x1943 * x1944;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1945 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1946 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1946 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1946);
          reg = x1946;
        }
        if (x1765 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1755;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x1947 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1755);
            reg = x1755;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x1947;
            host_args.at(1) = x1755;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1948 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1948 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1949 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1949 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1950 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1950 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1951 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1951 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1947);
            reg = x1947;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1948);
            reg = x1948;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1949);
            reg = x1949;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1950);
            reg = x1950;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1951);
            reg = x1951;
          }
        }
        if (x1764 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x1952 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1952 != Fp::invalid());
      if (x1952 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1953 = x1432 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1953 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x1954 = x1421 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x1954 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:50");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1955 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1956 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1957 = x1955 + x1956;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1958 = x1957 + x1590;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1959 = x1385 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1960 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1961 = x1959 + x1960;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1962 = x1961 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1963 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1958);
          reg = x1958;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1962);
          reg = x1962;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1963);
          reg = x1963;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1963);
          reg = x1963;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x1964 = x1769 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1965 = Fp(x1964.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1965);
            reg = x1965;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1966 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x1966 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1967 = x1964 - x1966;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1968 = x1967 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1969 = Fp(x1968.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1969);
            reg = x1969;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1970 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x1970 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1971 = x1968 - x1970;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1972 = x1971 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x1973 = Fp(x1972.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1973);
            reg = x1973;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x1974 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x1974 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x1975 = x1972 - x1974;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x1976 = x1975 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x1977 = Fp(x1976.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1977);
            reg = x1977;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1978 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x1978 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x1979 = x1976 - x1978;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x1980 = x1979 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1980);
          reg = x1980;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1981 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x1981 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x1982 = x95 - x1981;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x1983 = x1981 * x1982;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1983);
          reg = x1983;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x1984 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x1984 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x1985 = x92 - x1981;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x1986 = x1984 * x1985;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x1986 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x1987 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1987 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1987);
          reg = x1987;
        }
        if (x1765 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1757;
          host_args.at(2) = x94;
          host_args.at(3) = x94;
          host_args.at(4) = x94;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x1988 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1757);
            reg = x1757;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          {
            host_args.at(0) = x1988;
            host_args.at(1) = x1757;
            host_args.at(2) = x94;
            host_args.at(3) = x94;
            host_args.at(4) = x94;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1989 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x1989 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1990 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x1990 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1991 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x1991 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x1992 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x1992 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1988);
            reg = x1988;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1989);
            reg = x1989;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1991);
            reg = x1991;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1992);
            reg = x1992;
          }
        }
        if (x1764 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x1993 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1993 != Fp::invalid());
      if (x1993 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x1994 = x1432 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1994 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1421 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:51");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1995 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x1996 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1997 = x1995 + x1996;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1998 = x1997 + x1758;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x1999 = x1998 + x1759;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2000 = x1385 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2001 = x1430 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2002 = x2000 + x2001;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2003 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2004 = x2002 + x2003;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2005 = x2004 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2006 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1999);
          reg = x1999;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2005);
          reg = x2005;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2006);
          reg = x2006;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2006);
          reg = x2006;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2007 = x1780 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2008 = Fp(x2007.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2008);
            reg = x2008;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2009 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2009 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2010 = x2007 - x2009;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2011 = x2010 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2012 = Fp(x2011.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2012);
            reg = x2012;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2013 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2013 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2014 = x2011 - x2013;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2015 = x2014 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2016 = Fp(x2015.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2016);
            reg = x2016;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2017 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2017 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2018 = x2015 - x2017;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2019 = x2018 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2020 = Fp(x2019.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2020);
            reg = x2020;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2021 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2021 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2022 = x2019 - x2021;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2023 = x2022 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2023);
          reg = x2023;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2024 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2024 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2025 = x95 - x2024;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2026 = x2024 * x2025;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2026);
          reg = x2026;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2027 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2027 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2028 = x92 - x2024;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2029 = x2027 * x2028;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2029 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2030 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2030 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2030);
          reg = x2030;
        }
        if (x94 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1693;
          host_args.at(2) = x1697;
          host_args.at(3) = x1705;
          host_args.at(4) = x1709;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2031 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1693);
            reg = x1693;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1705);
            reg = x1705;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          {
            host_args.at(0) = x2031;
            host_args.at(1) = x1693;
            host_args.at(2) = x1697;
            host_args.at(3) = x1705;
            host_args.at(4) = x1709;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2032 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2032 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2033 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2033 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2034 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2034 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2035 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2035 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2031);
            reg = x2031;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2032);
            reg = x2032;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2033);
            reg = x2033;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2034);
            reg = x2034;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2035);
            reg = x2035;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2036 = x1764 + x95;
        if (x2036 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2037 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2037 != Fp::invalid());
      if (x2037 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2038 = x1432 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2038 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2039 = x1421 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2039 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:52");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2040 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2041 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2042 = x2040 + x2041;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2043 = x2042 + x1758;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2044 = x2043 + x1759;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2045 = x1385 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2046 = x1430 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2047 = x2045 + x2046;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2048 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2049 = x2047 + x2048;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2050 = x2049 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2051 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2044);
          reg = x2044;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2050);
          reg = x2050;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2051);
          reg = x2051;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2051);
          reg = x2051;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2052 = x1783 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2053 = Fp(x2052.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2053);
            reg = x2053;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2054 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2054 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2055 = x2052 - x2054;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2056 = x2055 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2057 = Fp(x2056.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2057);
            reg = x2057;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2058 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2058 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2059 = x2056 - x2058;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2060 = x2059 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2061 = Fp(x2060.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2061);
            reg = x2061;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2062 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2062 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2063 = x2060 - x2062;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2064 = x2063 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2065 = Fp(x2064.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2065);
            reg = x2065;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2066 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2066 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2067 = x2064 - x2066;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2068 = x2067 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2068);
          reg = x2068;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2069 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2069 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2070 = x95 - x2069;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2071 = x2069 * x2070;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2071);
          reg = x2071;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2072 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2072 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2073 = x92 - x2069;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2074 = x2072 * x2073;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2074 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2075 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2075 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2075);
          reg = x2075;
        }
        if (x94 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1693;
          host_args.at(2) = x1697;
          host_args.at(3) = x1705;
          host_args.at(4) = x1709;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2076 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1693);
            reg = x1693;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1705);
            reg = x1705;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          {
            host_args.at(0) = x2076;
            host_args.at(1) = x1693;
            host_args.at(2) = x1697;
            host_args.at(3) = x1705;
            host_args.at(4) = x1709;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2077 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2077 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2078 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2078 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2079 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2079 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2080 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2080 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2076);
            reg = x2076;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2077);
            reg = x2077;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2078);
            reg = x2078;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2079);
            reg = x2079;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2080);
            reg = x2080;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2081 = x1764 + x95;
        if (x2081 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/1/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2082 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2082 != Fp::invalid());
      if (x2082 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2083 = x1432 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2083 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2084 = x1421 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2084 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:53");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2085 = x1392 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2086 = x1395 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2087 = x2085 + x2086;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2088 = x2087 + x1758;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2089 = x2088 + x1759;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2090 = x1385 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2091 = x1430 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2092 = x2090 + x2091;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2093 = x1387 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2094 = x2092 + x2093;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2095 = x2094 + x1389;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2096 = x1385 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2089);
          reg = x2089;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2095);
          reg = x2095;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2096);
          reg = x2096;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2096);
          reg = x2096;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2097 = x1787 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2098 = Fp(x2097.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2098);
            reg = x2098;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2099 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2099 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2100 = x2097 - x2099;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2101 = x2100 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2102 = Fp(x2101.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2102);
            reg = x2102;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2103 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2103 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2104 = x2101 - x2103;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2105 = x2104 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2106 = Fp(x2105.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2106);
            reg = x2106;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2107 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2107 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2108 = x2105 - x2107;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2109 = x2108 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2110 = Fp(x2109.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2110);
            reg = x2110;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2111 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2111 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2112 = x2109 - x2111;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2113 = x2112 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2113);
          reg = x2113;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2114 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2114 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2115 = x95 - x2114;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2116 = x2114 * x2115;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2116);
          reg = x2116;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2117 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2117 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2118 = x92 - x2114;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2119 = x2117 * x2118;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2119 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/1/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2120 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2120 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
        if (x94 != 0) {
          host_args.at(0) = x1761;
          host_args.at(1) = x1693;
          host_args.at(2) = x1697;
          host_args.at(3) = x1705;
          host_args.at(4) = x1709;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2121 = x1761 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1693);
            reg = x1693;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1697);
            reg = x1697;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1705);
            reg = x1705;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1709);
            reg = x1709;
          }
          {
            host_args.at(0) = x2121;
            host_args.at(1) = x1693;
            host_args.at(2) = x1697;
            host_args.at(3) = x1705;
            host_args.at(4) = x1709;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2122 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2122 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2123 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2123 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2124 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2124 != Fp::invalid());
          // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2125 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2125 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2121);
            reg = x2121;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1343);
            reg = x1343;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2122);
            reg = x2122;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2123);
            reg = x2123;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2124);
            reg = x2124;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2125);
            reg = x2125;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2126 = x1764 + x95;
        if (x2126 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2127 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x2127 != Fp::invalid());
    if (x2127 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2128 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2128 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2129 = x598 * x75;
      {
        host_args.at(0) = x2129;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2130 = host_outs.at(0);
        auto x2131 = host_outs.at(1);
        auto x2132 = host_outs.at(2);
        auto x2133 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2130);
          reg = x2130;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2131);
          reg = x2131;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2132);
          reg = x2132;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2133);
          reg = x2133;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2134 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2134 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2135 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2135 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2136 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2136 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2137 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2137 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2129);
        reg = x2129;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2128);
        reg = x2128;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2134);
        reg = x2134;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2135);
        reg = x2135;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2136);
        reg = x2136;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2137);
        reg = x2137;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2138 = Fp(x2137.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2139 = x2138 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2139);
          reg = x2139;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2140 = Fp(x2137.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2141 = x2140 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2141);
          reg = x2141;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2142 = Fp(x2137.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2143 = x2142 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2143);
          reg = x2143;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2144 = Fp(x2137.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2145 = x2144 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2145);
          reg = x2145;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2146 = Fp(x2137.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2147 = x2146 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2147);
          reg = x2147;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2148 = Fp(x2137.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2148);
          reg = x2148;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2149 = Fp(x2136.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2150 = x2149 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2150);
          reg = x2150;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2151 = Fp(x2136.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2152 = x2151 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2152);
          reg = x2152;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2153 = Fp(x2136.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2154 = x2153 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2154);
          reg = x2154;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2155 = Fp(x2136.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2156 = x2155 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2156);
          reg = x2156;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2157 = Fp(x2136.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2157);
          reg = x2157;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2158 = Fp(x2135.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2159 = x2158 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2159);
          reg = x2159;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2160 = Fp(x2135.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2161 = x2160 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2161);
          reg = x2161;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2162 = Fp(x2135.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2163 = x2162 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2163);
          reg = x2163;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2164 = Fp(x2135.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2165 = x2164 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2165);
          reg = x2165;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2166 = Fp(x2135.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2166);
          reg = x2166;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2167 = Fp(x2134.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2168 = x2167 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2168);
          reg = x2168;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2169 = Fp(x2134.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2169);
          reg = x2169;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2170 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x2170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2171 = x2170 * x55;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2172 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2173 = x2172 * x59;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2174 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x2174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2175 = x2174 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2176 = x2173 + x2175;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2177 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x2177 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2178 = x2177 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2179 = x2176 + x2178;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2180 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2180 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2181 = x2179 + x2180;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2182 = x2171 + x2181;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2183 = x2182 * x92;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2184 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x2184 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2185 = x2183 + x2184;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2186 = x2137 - x2185;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2186 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2187 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x2187 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2188 = x2187 * x70;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2189 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2189 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2190 = x2189 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2191 = x2188 + x2190;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2192 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x2192 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2193 = x2191 + x2192;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2194 = x2193 * x59;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2195 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2195 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2196 = x2195 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2197 = x2194 + x2196;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2198 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2198 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2199 = x2197 + x2198;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2200 = x2136 - x2199;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2200 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2201 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x2201 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2202 = x2201 * x64;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2203 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x2203 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2204 = x2203 * x77;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2205 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2205 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2206 = x2204 + x2205;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2207 = x2206 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2208 = x2202 + x2207;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2209 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2209 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2210 = x2209 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2211 = x2208 + x2210;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2212 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2212 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2213 = x2211 + x2212;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2214 = x2135 - x2213;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2214 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2215 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x2215 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2216 = x2215 * x64;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2217 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x2217 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2218 = x2216 + x2217;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2219 = x2134 - x2218;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2219 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2134;
        host_args.at(1) = x2135;
        host_args.at(2) = x2136;
        host_args.at(3) = x2137;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2220 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2221 = (x2220 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2221);
            reg = x2221;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2222 = x2220 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2223 = (x2222 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2223);
            reg = x2223;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2224 = x2220 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2225 = (x2224 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2225);
            reg = x2225;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2226 = x2220 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2227 = (x2226 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2227);
            reg = x2227;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2228 = x2220 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2229 = (x2228 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2229);
            reg = x2229;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2230 = x2220 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2231 = (x2230 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2231);
            reg = x2231;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2232 = x2220 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2233 = (x2232 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2233);
            reg = x2233;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2234 = x2220 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2235 = (x2234 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2235);
            reg = x2235;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2236 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2236 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2237 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2237 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2238 = x2237 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2239 = x2236 + x2238;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2240 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2240 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2241 = x2240 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2242 = x2239 + x2241;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2243 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2243 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2244 = x2243 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2245 = x2242 + x2244;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2246 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2246 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2247 = x2246 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2248 = x2245 + x2247;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2249 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2249 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2250 = x2249 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2251 = x2248 + x2250;
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2252 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x2252 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2253 = x2252 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2254 = x2251 + x2253;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2255 = x2254 - x2220;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2255 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2256 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x2256 != Fp::invalid());
        if (x2256 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2257 = x2177 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2258 = x2180 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2259 = x2257 + x2258;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2260 = x2209 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2261 = x2259 + x2260;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2262 = x2212 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2263 = x2261 + x2262;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2264 = x2170 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2265 = x2215 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2266 = x2264 + x2265;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2267 = x2172 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2268 = x2266 + x2267;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2269 = x2268 + x2174;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2270 = x2170 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2263);
            reg = x2263;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2269);
            reg = x2269;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2270);
            reg = x2270;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2270);
            reg = x2270;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2271 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x2271 != Fp::invalid());
        if (x2271 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2272 = x2177 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2273 = x2180 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2274 = x2272 + x2273;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2275 = x2209 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2276 = x2274 + x2275;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2277 = x2212 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2278 = x2276 + x2277;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2279 = x2170 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2280 = x2215 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2281 = x2279 + x2280;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2282 = x2172 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2283 = x2281 + x2282;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2284 = x2283 + x2174;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2285 = x2170 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2278);
            reg = x2278;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2284);
            reg = x2284;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2285);
            reg = x2285;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2285);
            reg = x2285;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2286 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x2286 != Fp::invalid());
        if (x2286 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2287 = x2177 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2288 = x2180 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2289 = x2287 + x2288;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2290 = x2209 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2291 = x2289 + x2290;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2292 = x2212 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2293 = x2291 + x2292;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2294 = x2170 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2295 = x2215 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2296 = x2294 + x2295;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2297 = x2172 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2298 = x2296 + x2297;
          // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2299 = x2298 + x2174;
          // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2300 = x2170 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2293);
            reg = x2293;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2299);
            reg = x2299;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2300);
            reg = x2300;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2300);
            reg = x2300;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2301 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x2301 != Fp::invalid());
        if (x2301 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2302 = x2177 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2303 = x2180 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2304 = x2302 + x2303;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2305 = x2184 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2306 = x2305 + x2193;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2307 = x2304 + x2306;
          // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2308 = x2307 - x2192;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2309 = x2192 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2310 = x2208 + x2309;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2311 = x2172 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2312 = x2310 + x2311;
          // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2313 = x2312 + x2174;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2314 = x2170 * x43;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2315 = x2314 + x2196;
          // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2316 = x2315 + x2198;
          // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2317 = x2170 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2308);
            reg = x2308;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2313);
            reg = x2313;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2316);
            reg = x2316;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2318 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x2318 != Fp::invalid());
        if (x2318 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2319 = x2177 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2320 = x2180 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2321 = x2319 + x2320;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2322 = x2184 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2323 = x2322 + x2193;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2324 = x2321 + x2323;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2325 = x2170 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2326 = x2172 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2327 = x2325 + x2326;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2328 = x2327 + x2174;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2329 = x2170 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2324);
            reg = x2324;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2328);
            reg = x2328;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2329);
            reg = x2329;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2329);
            reg = x2329;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2330 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x2330 != Fp::invalid());
        if (x2330 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2208);
            reg = x2208;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2199);
            reg = x2199;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2185);
            reg = x2185;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2331 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x2331 != Fp::invalid());
        if (x2331 != 0) {
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2208);
            reg = x2208;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2199);
            reg = x2199;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2185);
            reg = x2185;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2332 = x2195 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2333 = x2198 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2334 = x2332 + x2333;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2335 = x2334 + x2201;
      // loc("cirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2336 = x2335 + x48;
      {
        host_args.at(0) = x2336;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2337 = host_outs.at(0);
        auto x2338 = host_outs.at(1);
        auto x2339 = host_outs.at(2);
        auto x2340 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2337);
          reg = x2337;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2338);
          reg = x2338;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2339);
          reg = x2339;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2340);
          reg = x2340;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2341 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x2341 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2342 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2342 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2343 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2343 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2344 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2344 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2336);
        reg = x2336;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2128);
        reg = x2128;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2341);
        reg = x2341;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2342);
        reg = x2342;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2343);
        reg = x2343;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2344);
        reg = x2344;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2345 = x2184 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2346 = x2345 + x2193;
      // loc("cirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2347 = x2346 + x48;
      {
        host_args.at(0) = x2347;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2348 = host_outs.at(0);
        auto x2349 = host_outs.at(1);
        auto x2350 = host_outs.at(2);
        auto x2351 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2348);
          reg = x2348;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2349);
          reg = x2349;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2350);
          reg = x2350;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2351);
          reg = x2351;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2352 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x2352 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2353 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2353 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2354 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2354 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2355 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2355 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2347);
        reg = x2347;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2128);
        reg = x2128;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2352);
        reg = x2352;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2353);
        reg = x2353;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2354);
        reg = x2354;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2355);
        reg = x2355;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2356 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2356 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2357 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2357 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2358 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2358 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2359 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2359 != Fp::invalid());
      host_args.at(0) = x2356;
      host_args.at(1) = x2357;
      host_args.at(2) = x2358;
      host_args.at(3) = x2359;
      host_args.at(4) = x2335;
      host_args.at(5) = x2341;
      host_args.at(6) = x2342;
      host_args.at(7) = x2343;
      host_args.at(8) = x2344;
      host_args.at(9) = x2346;
      host_args.at(10) = x2352;
      host_args.at(11) = x2353;
      host_args.at(12) = x2354;
      host_args.at(13) = x2355;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2360 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2360 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":145:17)
      auto x2361 = x95 - x2360;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2362 = x2361 * x2341;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2363 = x2361 * x2342;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2364 = x2361 * x2343;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2365 = x2361 * x2344;
      // loc("cirgen/circuit/rv32im/body.cpp":35:52)
      auto x2366 = x595 * x77;
      // loc("cirgen/circuit/rv32im/body.cpp":35:41)
      auto x2367 = x592 + x2366;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x2368 = x585 - x77;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2369 = x2360 * x2368;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2370 = x2360 * x586;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2371 = x2360 * x589;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2372 = x2360 * x2367;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2373 = x2362 + x2369;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2374 = x2363 + x2370;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2375 = x2364 + x2371;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2376 = x2365 + x2372;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2377 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2377 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":147:17)
      auto x2378 = x95 - x2377;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2379 = x2378 * x2352;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2380 = x2378 * x2353;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2381 = x2378 * x2354;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2382 = x2378 * x2355;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2383 = x2377 * x2356;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2384 = x2377 * x2357;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2385 = x2377 * x2358;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2386 = x2377 * x2359;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2387 = x2379 + x2383;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2388 = x2380 + x2384;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2389 = x2381 + x2385;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2390 = x2382 + x2386;
      host_args.at(0) = x2373;
      host_args.at(1) = x2374;
      host_args.at(2) = x2375;
      host_args.at(3) = x2376;
      host_args.at(4) = x2387;
      host_args.at(5) = x2388;
      host_args.at(6) = x2389;
      host_args.at(7) = x2390;
      host(ctx, "log", "  inA = %w, inB = %w", host_args.data(), 8, host_outs.data(), 0);
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2391 = Fp(x2376.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2392 = x2391 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2392);
          reg = x2392;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2393 = Fp(x2376.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2394 = x2393 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2394);
          reg = x2394;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2395 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2395 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2396 = x2395 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2397 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x2397 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2398 = x2397 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2399 = x2396 + x2398;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2400 = x2376 - x2399;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2400 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2401 = Fp(x2390.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2402 = x2401 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2402);
          reg = x2402;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2403 = Fp(x2390.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2404 = x2403 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2404);
          reg = x2404;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2405 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2405 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2406 = x2405 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2407 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x2407 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2408 = x2407 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2409 = x2406 + x2408;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2410 = x2390 - x2409;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2410 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2387);
        reg = x2387;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2388);
        reg = x2388;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][193 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2389);
        reg = x2389;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][194 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2390);
        reg = x2390;
      }
      {
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2411 = Fp(x2373.asUInt32() & x2387.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2412 = Fp(x2374.asUInt32() & x2388.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2413 = Fp(x2375.asUInt32() & x2389.asUInt32());
        // loc("cirgen/components/u32.cpp":113:20)
        auto x2414 = Fp(x2376.asUInt32() & x2390.asUInt32());
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2411);
          reg = x2411;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2412);
          reg = x2412;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2413);
          reg = x2413;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2414);
          reg = x2414;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2415 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2415 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2416 = x2415 * x2373;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2417 = x2415 * x2374;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2418 = x2415 * x2375;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2419 = x2415 * x2376;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2420 = x2416 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2421 = x2417 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2422 = x2418 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2423 = x2419 + x91;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2424 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2424 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2425 = x2424 * x2387;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2426 = x2424 * x2388;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2427 = x2424 * x2389;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2428 = x2424 * x2390;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2429 = x2420 + x2425;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2430 = x2421 + x2426;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2431 = x2422 + x2427;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2432 = x2423 + x2428;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2433 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2433 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2434 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2434 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2435 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2435 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2436 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2436 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2437 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x2437 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2438 = x2433 * x2434;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2439 = x2433 * x2435;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2440 = x2433 * x2436;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x2441 = x2433 * x2437;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2442 = x2429 + x2438;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2443 = x2430 + x2439;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2444 = x2431 + x2440;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x2445 = x2432 + x2441;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x2446 = x2443 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x2447 = x2442 + x2446;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2448 = Fp(x2447.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2448);
          reg = x2448;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2449 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x2449 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2450 = x2447 - x2449;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2451 = x2450 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2452 = Fp(x2451.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2452);
          reg = x2452;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2453 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x2453 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2454 = x2451 - x2453;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2455 = x2454 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2455);
        reg = x2455;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2456 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2456 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2457 = x2456 + x2444;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x2458 = x2445 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x2459 = x2457 + x2458;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2460 = Fp(x2459.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2460);
          reg = x2460;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2461 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x2461 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2462 = x2459 - x2461;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2463 = x2462 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x2464 = Fp(x2463.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2464);
          reg = x2464;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x2465 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x2465 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x2466 = x2463 - x2465;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x2467 = x2466 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2467);
        reg = x2467;
      }
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x2468 = Fp(x2465.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x2469 = x2468 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2469);
          reg = x2469;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x2470 = Fp(x2465.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x2471 = x2470 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2471);
          reg = x2471;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2472 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2472 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2473 = x2472 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x2474 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x2474 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x2475 = x2474 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x2476 = x2473 + x2475;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x2477 = x2465 - x2476;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x2477 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2478 = x95 - x2405;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2479 = x2395 * x2478;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2480 = x95 - x2472;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2481 = x2479 * x2480;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2482 = x95 - x2395;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2483 = x2482 * x2405;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2484 = x2483 * x2472;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2485 = x2481 + x2484;
      // loc("cirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2485);
        reg = x2485;
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2486 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2486 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2487 = x2486 + x2472;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2488 = x2486 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2489 = x2488 * x2472;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2490 = x2487 - x2489;
      // loc("cirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2490);
        reg = x2490;
      }
      // loc("cirgen/components/u32.cpp":137:26)
      auto x2491 = x2453 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x2492 = x2449 + x2491;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2493 = (x2492 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2493);
          reg = x2493;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2494 = inv(x2492);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2494);
          reg = x2494;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2495 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x2495 != Fp::invalid());
      if (x2495 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2492 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2496 = x95 - x2495;
      if (x2496 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2497 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x2497 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2498 = x2492 * x2497;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2499 = x2498 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2499 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x2500 = x2465 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2501 = x2461 + x2500;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x2502 = x2496 * x79;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x2503 = x2501 + x2502;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2504 = (x2503 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2504);
          reg = x2504;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2505 = inv(x2503);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2505);
          reg = x2505;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2506 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x2506 != Fp::invalid());
      if (x2506 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2503 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2507 = x95 - x2506;
      if (x2507 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2508 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x2508 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2509 = x2503 * x2508;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2510 = x2509 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2510 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2511 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x2511 != Fp::invalid());
      // loc("Top/Mux/4/Mux/2/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2512 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x2512 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2513 = x95 - x2512;
      host_args.at(0) = x2449;
      host_args.at(1) = x2453;
      host_args.at(2) = x2461;
      host_args.at(3) = x2465;
      host_args.at(4) = x2506;
      host_args.at(5) = x2511;
      host_args.at(6) = x2513;
      host(ctx, "log", "  ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2514 = x2209 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2515 = x2212 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2516 = x2514 + x2515;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2517 = x2516 + x2215;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x2518 = (x2517 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2518);
          reg = x2518;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x2519 = inv(x2517);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2519);
          reg = x2519;
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2520 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2520 != Fp::invalid());
      if (x2520 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x2517 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x2521 = x95 - x2520;
      if (x2521 != 0) {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2522 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x2522 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2523 = x2517 * x2522;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x2524 = x2523 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x2524 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/compute.cpp":160:13)
      auto x2525 = x598 + x77;
      // loc("cirgen/components/u32.cpp":62:25)
      auto x2526 = x2357 * x90;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2527 = x2356 + x2526;
      // loc("cirgen/components/u32.cpp":62:49)
      auto x2528 = x2358 * x79;
      // loc("cirgen/components/u32.cpp":62:13)
      auto x2529 = x2527 + x2528;
      // loc("cirgen/components/u32.cpp":65:17)
      auto x2530 = x2359 * x47;
      // loc("cirgen/components/u32.cpp":65:16)
      auto x2531 = x2530 * x46;
      // loc("cirgen/components/u32.cpp":65:10)
      auto x2532 = x2529 + x2531;
      // loc("cirgen/circuit/rv32im/compute.cpp":161:14)
      auto x2533 = x598 + x2532;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:57)
      auto x2534 = x2461 * x79;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2535 = x2492 + x2534;
      // loc("cirgen/circuit/rv32im/compute.cpp":167:14)
      auto x2536 = x2465 * x78;
      // loc("cirgen/circuit/rv32im/compute.cpp":166:13)
      auto x2537 = x2535 + x2536;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2538 = x2511 * x2525;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2539 = x95 - x2511;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:34)
      auto x2540 = x2539 * x2533;
      // loc("cirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2541 = x2538 + x2540;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2542 = x2513 * x2533;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:38)
      auto x2543 = x95 - x2513;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:37)
      auto x2544 = x2543 * x2525;
      // loc("cirgen/circuit/rv32im/compute.cpp":172:14)
      auto x2545 = x2542 + x2544;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2546 = x2513 * x2525;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:36)
      auto x2547 = x2543 * x2533;
      // loc("cirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2548 = x2546 + x2547;
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2549 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2549 != Fp::invalid());
      if (x2549 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2550 = x2217 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2550 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2551 = x2206 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2551 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:54");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2552 = x2177 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2553 = x2180 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2554 = x2552 + x2553;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2555 = x2554 + x2514;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2556 = x2555 + x2515;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2557 = x2170 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2558 = x2215 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2559 = x2557 + x2558;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2560 = x2172 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2561 = x2559 + x2560;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2562 = x2561 + x2174;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2563 = x2170 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2556);
          reg = x2556;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2562);
          reg = x2562;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2563);
          reg = x2563;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2563);
          reg = x2563;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2564 = x2541 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2565 = Fp(x2564.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2565);
            reg = x2565;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2566 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2566 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2567 = x2564 - x2566;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2568 = x2567 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2569 = Fp(x2568.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2569);
            reg = x2569;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2570 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2570 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2571 = x2568 - x2570;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2572 = x2571 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2573 = Fp(x2572.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2573);
            reg = x2573;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2574 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2574 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2575 = x2572 - x2574;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2576 = x2575 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2577 = Fp(x2576.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2577);
            reg = x2577;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2578 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2578 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2579 = x2576 - x2578;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2580 = x2579 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2580);
          reg = x2580;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2581 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2581 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2582 = x95 - x2581;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2583 = x2581 * x2582;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2583);
          reg = x2583;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2584 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2584 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2585 = x92 - x2581;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2586 = x2584 * x2585;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2586 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2587 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2587 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2587);
          reg = x2587;
        }
        if (x94 != 0) {
          host_args.at(0) = x2517;
          host_args.at(1) = x2449;
          host_args.at(2) = x2453;
          host_args.at(3) = x2461;
          host_args.at(4) = x2465;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2588 = x2517 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2461);
            reg = x2461;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          {
            host_args.at(0) = x2588;
            host_args.at(1) = x2449;
            host_args.at(2) = x2453;
            host_args.at(3) = x2461;
            host_args.at(4) = x2465;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2589 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2589 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2590 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2590 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2591 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2591 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2592 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2592 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2588);
            reg = x2588;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2589);
            reg = x2589;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2590);
            reg = x2590;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2591);
            reg = x2591;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2592);
            reg = x2592;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2593 = x2520 + x95;
        if (x2593 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2594 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2594 != Fp::invalid());
      if (x2594 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2595 = x2217 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2595 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2596 = x2206 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2596 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:55");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2597 = x2177 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2598 = x2180 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2599 = x2597 + x2598;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2600 = x2599 + x2514;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2601 = x2600 + x2515;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2602 = x2170 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2603 = x2215 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2604 = x2602 + x2603;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2605 = x2172 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2606 = x2604 + x2605;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2607 = x2606 + x2174;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2608 = x2170 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2601);
          reg = x2601;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2607);
          reg = x2607;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2608);
          reg = x2608;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2608);
          reg = x2608;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2609 = x2545 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2610 = Fp(x2609.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2610);
            reg = x2610;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2611 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2611 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2612 = x2609 - x2611;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2613 = x2612 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2614 = Fp(x2613.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2614);
            reg = x2614;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2615 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2615 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2616 = x2613 - x2615;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2617 = x2616 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2618 = Fp(x2617.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2618);
            reg = x2618;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2619 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2619 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2620 = x2617 - x2619;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2621 = x2620 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2622 = Fp(x2621.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2622);
            reg = x2622;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2623 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2623 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2624 = x2621 - x2623;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2625 = x2624 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2625);
          reg = x2625;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2626 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2626 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2627 = x95 - x2626;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2628 = x2626 * x2627;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2628);
          reg = x2628;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2629 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2629 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2630 = x92 - x2626;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2631 = x2629 * x2630;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2631 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2632 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2632 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2632);
          reg = x2632;
        }
        if (x94 != 0) {
          host_args.at(0) = x2517;
          host_args.at(1) = x2449;
          host_args.at(2) = x2453;
          host_args.at(3) = x2461;
          host_args.at(4) = x2465;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2633 = x2517 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2461);
            reg = x2461;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          {
            host_args.at(0) = x2633;
            host_args.at(1) = x2449;
            host_args.at(2) = x2453;
            host_args.at(3) = x2461;
            host_args.at(4) = x2465;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2634 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2634 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2635 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2635 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2636 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2636 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2637 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2637 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2633);
            reg = x2633;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2634);
            reg = x2634;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2635);
            reg = x2635;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2636);
            reg = x2636;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2637);
            reg = x2637;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2638 = x2520 + x95;
        if (x2638 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2639 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2639 != Fp::invalid());
      if (x2639 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2640 = x2217 - x42;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2640 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2641 = x2206 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2641 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:56");
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2642 = x2177 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2643 = x2180 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2644 = x2642 + x2643;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2645 = x2644 + x2514;
        // loc("cirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2646 = x2645 + x2515;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2647 = x2170 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2648 = x2215 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2649 = x2647 + x2648;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2650 = x2172 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2651 = x2649 + x2650;
        // loc("cirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2652 = x2651 + x2174;
        // loc("cirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2653 = x2170 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2646);
          reg = x2646;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2652);
          reg = x2652;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2653);
          reg = x2653;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2653);
          reg = x2653;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2654 = x2548 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2655 = Fp(x2654.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2655);
            reg = x2655;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2656 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2656 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2657 = x2654 - x2656;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2658 = x2657 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2659 = Fp(x2658.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2659);
            reg = x2659;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2660 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2660 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2661 = x2658 - x2660;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2662 = x2661 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2663 = Fp(x2662.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2663);
            reg = x2663;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2664 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2664 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2665 = x2662 - x2664;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2666 = x2665 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2667 = Fp(x2666.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2667);
            reg = x2667;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2668 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2668 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2669 = x2666 - x2668;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2670 = x2669 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2670);
          reg = x2670;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2671 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2671 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2672 = x95 - x2671;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2673 = x2671 * x2672;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2673);
          reg = x2673;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2674 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2674 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2675 = x92 - x2671;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2676 = x2674 * x2675;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2676 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2677 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2677 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2677);
          reg = x2677;
        }
        if (x94 != 0) {
          host_args.at(0) = x2517;
          host_args.at(1) = x2449;
          host_args.at(2) = x2453;
          host_args.at(3) = x2461;
          host_args.at(4) = x2465;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2678 = x2517 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2461);
            reg = x2461;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          {
            host_args.at(0) = x2678;
            host_args.at(1) = x2449;
            host_args.at(2) = x2453;
            host_args.at(3) = x2461;
            host_args.at(4) = x2465;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2679 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2679 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2680 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2680 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2681 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2681 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2682 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2682 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2678);
            reg = x2678;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2679);
            reg = x2679;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2680);
            reg = x2680;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2681);
            reg = x2681;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2682);
            reg = x2682;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2683 = x2520 + x95;
        if (x2683 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2684 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2684 != Fp::invalid());
      if (x2684 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2685 = x2217 - x41;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2685 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:57");
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2686 = x2177 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2687 = x2180 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2688 = x2686 + x2687;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2689 = x2688 + x2346;
        // loc("cirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2690 = x2689 - x2192;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2691 = x2192 * x70;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2692 = x2208 + x2691;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2693 = x2172 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2694 = x2692 + x2693;
        // loc("cirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2695 = x2694 + x2174;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2696 = x2170 * x43;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2697 = x2696 + x2196;
        // loc("cirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2698 = x2697 + x2198;
        // loc("cirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2699 = x2170 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2690);
          reg = x2690;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2695);
          reg = x2695;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2698);
          reg = x2698;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2699);
          reg = x2699;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2700 = x2533 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2701 = Fp(x2700.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2701);
            reg = x2701;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2702 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2702 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2703 = x2700 - x2702;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2704 = x2703 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2705 = Fp(x2704.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2705);
            reg = x2705;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2706 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2706 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2707 = x2704 - x2706;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2708 = x2707 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2709 = Fp(x2708.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2709);
            reg = x2709;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2710 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2710 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2711 = x2708 - x2710;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2712 = x2711 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2713 = Fp(x2712.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2713);
            reg = x2713;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2714 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2714 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2715 = x2712 - x2714;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2716 = x2715 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2716);
          reg = x2716;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2717 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2717 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2718 = x95 - x2717;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2719 = x2717 * x2718;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2719);
          reg = x2719;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2720 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2720 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2721 = x92 - x2717;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2722 = x2720 * x2721;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2722 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2723 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2723 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2723);
          reg = x2723;
        }
        if (x2521 != 0) {
          host_args.at(0) = x2517;
          host_args.at(1) = x585;
          host_args.at(2) = x586;
          host_args.at(3) = x589;
          host_args.at(4) = x2367;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x2724 = x2517 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x585);
            reg = x585;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x586);
            reg = x586;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x589);
            reg = x589;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2367);
            reg = x2367;
          }
          {
            host_args.at(0) = x2724;
            host_args.at(1) = x585;
            host_args.at(2) = x586;
            host_args.at(3) = x589;
            host_args.at(4) = x2367;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2725 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2725 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2726 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2726 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2727 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2727 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2728 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2728 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2724);
            reg = x2724;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2725);
            reg = x2725;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2726);
            reg = x2726;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2727);
            reg = x2727;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2728);
            reg = x2728;
          }
        }
        if (x2520 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x2729 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2729 != Fp::invalid());
      if (x2729 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x2730 = x2217 - x40;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2730 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2206 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:58");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2731 = x2177 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2732 = x2180 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2733 = x2731 + x2732;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2734 = x2733 + x2346;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2735 = x2170 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2736 = x2172 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2737 = x2735 + x2736;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2738 = x2737 + x2174;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2739 = x2170 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2734);
          reg = x2734;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2738);
          reg = x2738;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2739);
          reg = x2739;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2739);
          reg = x2739;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2740 = x2537 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2741 = Fp(x2740.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2741);
            reg = x2741;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2742 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2742 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2743 = x2740 - x2742;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2744 = x2743 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2745 = Fp(x2744.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2746 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2746 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2747 = x2744 - x2746;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2748 = x2747 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2749 = Fp(x2748.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2750 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2750 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2751 = x2748 - x2750;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2752 = x2751 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2753 = Fp(x2752.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2753);
            reg = x2753;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2754 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2754 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2755 = x2752 - x2754;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2756 = x2755 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2756);
          reg = x2756;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2757 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2757 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2758 = x95 - x2757;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2759 = x2757 * x2758;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2759);
          reg = x2759;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2760 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2760 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2761 = x92 - x2757;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2762 = x2760 * x2761;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2762 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2763 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2763 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2763);
          reg = x2763;
        }
        if (x2521 != 0) {
          host_args.at(0) = x2517;
          host_args.at(1) = x585;
          host_args.at(2) = x586;
          host_args.at(3) = x589;
          host_args.at(4) = x2367;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x2764 = x2517 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x585);
            reg = x585;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x586);
            reg = x586;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x589);
            reg = x589;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2367);
            reg = x2367;
          }
          {
            host_args.at(0) = x2764;
            host_args.at(1) = x585;
            host_args.at(2) = x586;
            host_args.at(3) = x589;
            host_args.at(4) = x2367;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2765 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2765 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2766 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2766 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2767 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2767 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2768 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2768 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2764);
            reg = x2764;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2765);
            reg = x2765;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2766);
            reg = x2766;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2767);
            reg = x2767;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2768);
            reg = x2768;
          }
        }
        if (x2520 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x2769 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2769 != Fp::invalid());
      if (x2769 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x2770 = x2217 - x39;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x2770 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:59");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2208);
          reg = x2208;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2199);
          reg = x2199;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2185);
          reg = x2185;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2771 = x2525 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2772 = Fp(x2771.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2772);
            reg = x2772;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2773 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2773 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2774 = x2771 - x2773;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2775 = x2774 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2776 = Fp(x2775.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2776);
            reg = x2776;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2777 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2777 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2778 = x2775 - x2777;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2779 = x2778 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2780 = Fp(x2779.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2780);
            reg = x2780;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2781 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2781 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2782 = x2779 - x2781;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2783 = x2782 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2784 = Fp(x2783.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2784);
            reg = x2784;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2785 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2785 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2786 = x2783 - x2785;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2787 = x2786 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2787);
          reg = x2787;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2788 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2788 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2789 = x95 - x2788;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2790 = x2788 * x2789;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2790);
          reg = x2790;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2791 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2791 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2792 = x92 - x2788;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2793 = x2791 * x2792;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2793 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2794 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2794 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2794);
          reg = x2794;
        }
        if (x2521 != 0) {
          host_args.at(0) = x2517;
          host_args.at(1) = x2449;
          host_args.at(2) = x2453;
          host_args.at(3) = x2461;
          host_args.at(4) = x2465;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x2795 = x2517 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2461);
            reg = x2461;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          {
            host_args.at(0) = x2795;
            host_args.at(1) = x2449;
            host_args.at(2) = x2453;
            host_args.at(3) = x2461;
            host_args.at(4) = x2465;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2796 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2796 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2797 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2797 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2798 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2798 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2799 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2799 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2795);
            reg = x2795;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2796);
            reg = x2796;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2797);
            reg = x2797;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2798);
            reg = x2798;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2799);
            reg = x2799;
          }
        }
        if (x2520 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/2/ComputeCycle/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x2800 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2800 != Fp::invalid());
      if (x2800 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x2801 = x2217 - x38;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x2801 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:60");
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2208);
          reg = x2208;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2199);
          reg = x2199;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2185);
          reg = x2185;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x2802 = x2525 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2803 = Fp(x2802.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2803);
            reg = x2803;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2804 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x2804 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2805 = x2802 - x2804;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2806 = x2805 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2807 = Fp(x2806.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2807);
            reg = x2807;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2808 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x2808 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2809 = x2806 - x2808;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2810 = x2809 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x2811 = Fp(x2810.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2811);
            reg = x2811;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x2812 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x2812 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x2813 = x2810 - x2812;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x2814 = x2813 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x2815 = Fp(x2814.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2815);
            reg = x2815;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2816 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x2816 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x2817 = x2814 - x2816;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x2818 = x2817 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2818);
          reg = x2818;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2819 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x2819 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x2820 = x95 - x2819;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x2821 = x2819 * x2820;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2821);
          reg = x2821;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2822 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x2822 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x2823 = x92 - x2819;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x2824 = x2822 * x2823;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x2824 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/Mux/4/Mux/2/ComputeCycle/ComputeControl/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x2825 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2825 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2825);
          reg = x2825;
        }
        if (x2521 != 0) {
          host_args.at(0) = x2517;
          host_args.at(1) = x2449;
          host_args.at(2) = x2453;
          host_args.at(3) = x2461;
          host_args.at(4) = x2465;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./cirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x2826 = x2517 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2449);
            reg = x2449;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2453);
            reg = x2453;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2461);
            reg = x2461;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2465);
            reg = x2465;
          }
          {
            host_args.at(0) = x2826;
            host_args.at(1) = x2449;
            host_args.at(2) = x2453;
            host_args.at(3) = x2461;
            host_args.at(4) = x2465;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2827 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x2827 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2828 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x2828 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2829 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x2829 != Fp::invalid());
          // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x2830 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x2830 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2826);
            reg = x2826;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2128);
            reg = x2128;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2827);
            reg = x2827;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2828);
            reg = x2828;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2829);
            reg = x2829;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2830);
            reg = x2830;
          }
        }
        if (x2520 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/components/mux.h":39:25))
    auto x2831 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x2831 != Fp::invalid());
    if (x2831 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2832 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x2832 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":20:41)
      auto x2833 = x598 * x75;
      {
        host_args.at(0) = x2833;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2834 = host_outs.at(0);
        auto x2835 = host_outs.at(1);
        auto x2836 = host_outs.at(2);
        auto x2837 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2834);
          reg = x2834;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2835);
          reg = x2835;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2836);
          reg = x2836;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2837);
          reg = x2837;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2838 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x2838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2839 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x2839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2840 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x2840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2841 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x2841 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2833);
        reg = x2833;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2832);
        reg = x2832;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2838);
        reg = x2838;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2839);
        reg = x2839;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2840);
        reg = x2840;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2841);
        reg = x2841;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2842 = Fp(x2841.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2843 = x2842 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2843);
          reg = x2843;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2844 = Fp(x2841.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2845 = x2844 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2845);
          reg = x2845;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2846 = Fp(x2841.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2847 = x2846 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2848 = Fp(x2841.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2849 = x2848 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2849);
          reg = x2849;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2850 = Fp(x2841.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2851 = x2850 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2851);
          reg = x2851;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2852 = Fp(x2841.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2852);
          reg = x2852;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2853 = Fp(x2840.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2854 = x2853 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2854);
          reg = x2854;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2855 = Fp(x2840.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2856 = x2855 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2856);
          reg = x2856;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2857 = Fp(x2840.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2858 = x2857 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2858);
          reg = x2858;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2859 = Fp(x2840.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2860 = x2859 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2860);
          reg = x2860;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2861 = Fp(x2840.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2861);
          reg = x2861;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2862 = Fp(x2839.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2863 = x2862 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2863);
          reg = x2863;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2864 = Fp(x2839.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2865 = x2864 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2865);
          reg = x2865;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2866 = Fp(x2839.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2867 = x2866 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2867);
          reg = x2867;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2868 = Fp(x2839.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2869 = x2868 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2869);
          reg = x2869;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2870 = Fp(x2839.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2870);
          reg = x2870;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2871 = Fp(x2838.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2872 = x2871 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2872);
          reg = x2872;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2873 = Fp(x2838.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2873);
          reg = x2873;
        }
      }
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2874 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2874 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2875 = x2874 * x55;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2876 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2876 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2877 = x2876 * x59;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2878 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2878 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2879 = x2878 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2880 = x2877 + x2879;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2881 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2881 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2882 = x2881 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2883 = x2880 + x2882;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2884 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2884 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2885 = x2883 + x2884;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2886 = x2875 + x2885;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2887 = x2886 * x92;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2888 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2888 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2889 = x2887 + x2888;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2890 = x2841 - x2889;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2890 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2891 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2891 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2892 = x2891 * x70;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2893 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2893 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2894 = x2893 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2895 = x2892 + x2894;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2896 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2896 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2897 = x2895 + x2896;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2898 = x2897 * x59;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2899 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2899 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2900 = x2899 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2901 = x2898 + x2900;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2902 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2902 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2903 = x2901 + x2902;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2904 = x2840 - x2903;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2904 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2905 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2905 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2906 = x2905 * x64;
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2907 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2907 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2908 = x2907 * x77;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2909 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2909 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2910 = x2908 + x2909;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2911 = x2910 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2912 = x2906 + x2911;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2913 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x2913 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2914 = x2913 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2915 = x2912 + x2914;
      // loc("Top/Mux/4/Mux/3/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2916 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x2916 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2917 = x2915 + x2916;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2918 = x2839 - x2917;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2918 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/3/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x2919 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2919 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2920 = x2919 * x64;
      // loc("Top/Mux/4/Mux/3/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x2921 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2921 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2922 = x2920 + x2921;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2923 = x2838 - x2922;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2923 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2838;
        host_args.at(1) = x2839;
        host_args.at(2) = x2840;
        host_args.at(3) = x2841;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2924 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2925 = (x2924 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2925);
            reg = x2925;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2926 = x2924 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2927 = (x2926 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2927);
            reg = x2927;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2928 = x2924 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2929 = (x2928 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2929);
            reg = x2929;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2930 = x2924 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2931 = (x2930 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2931);
            reg = x2931;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2932 = x2924 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2933 = (x2932 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2933);
            reg = x2933;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2934 = x2924 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2935 = (x2934 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2935);
            reg = x2935;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2936 = x2924 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2937 = (x2936 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2937);
            reg = x2937;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2938 = x2924 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x2939 = (x2938 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2939);
            reg = x2939;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2940 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2940 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2941 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2941 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2942 = x2941 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2943 = x2940 + x2942;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2944 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2944 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2945 = x2944 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2946 = x2943 + x2945;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2947 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x2947 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2948 = x2947 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2949 = x2946 + x2948;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2950 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x2950 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2951 = x2950 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2952 = x2949 + x2951;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2953 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x2953 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2954 = x2953 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2955 = x2952 + x2954;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x2956 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x2956 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x2957 = x2956 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x2958 = x2955 + x2957;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x2959 = x2958 - x2924;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x2959 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      {
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x2960 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x2960 != Fp::invalid());
        if (x2960 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2961 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2962 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2963 = x2961 + x2962;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2964 = x2888 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2965 = x2964 + x2897;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2966 = x2963 + x2965;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2967 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2968 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2969 = x2967 + x2968;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2970 = x2969 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2971 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2966);
            reg = x2966;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2970);
            reg = x2970;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2971);
            reg = x2971;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2971);
            reg = x2971;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x2972 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x2972 != Fp::invalid());
        if (x2972 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2973 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2974 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2975 = x2973 + x2974;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2976 = x2888 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2977 = x2976 + x2897;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2978 = x2975 + x2977;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2979 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2980 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2981 = x2979 + x2980;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2982 = x2981 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2983 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2978);
            reg = x2978;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2982);
            reg = x2982;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2983);
            reg = x2983;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2983);
            reg = x2983;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x2984 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x2984 != Fp::invalid());
        if (x2984 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2985 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2986 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2987 = x2985 + x2986;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2988 = x2888 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2989 = x2988 + x2897;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2990 = x2987 + x2989;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2991 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2992 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2993 = x2991 + x2992;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2994 = x2993 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2995 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2990);
            reg = x2990;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2994);
            reg = x2994;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2995);
            reg = x2995;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2995);
            reg = x2995;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x2996 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x2996 != Fp::invalid());
        if (x2996 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2997 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2998 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2999 = x2997 + x2998;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3000 = x2888 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3001 = x3000 + x2897;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3002 = x2999 + x3001;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3003 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3004 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3005 = x3003 + x3004;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3006 = x3005 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3007 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3002);
            reg = x3002;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3006);
            reg = x3006;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3007);
            reg = x3007;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3007);
            reg = x3007;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3008 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3008 != Fp::invalid());
        if (x3008 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3009 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3010 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3011 = x3009 + x3010;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3012 = x2888 * x59;
          // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3013 = x3012 + x2897;
          // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3014 = x3011 + x3013;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3015 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3016 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3017 = x3015 + x3016;
          // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3018 = x3017 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3019 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3014);
            reg = x3014;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3018);
            reg = x3018;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3019);
            reg = x3019;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3019);
            reg = x3019;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3020 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x3020 != Fp::invalid());
        if (x3020 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3021 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3022 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3023 = x3021 + x3022;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3024 = x2913 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3025 = x2916 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3026 = x3024 + x3025;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3027 = x3026 + x2919;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3028 = x3023 + x3027;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3029 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3030 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3031 = x3029 + x3030;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3032 = x3031 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3033 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3028);
            reg = x3028;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3032);
            reg = x3032;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3033);
            reg = x3033;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3033);
            reg = x3033;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3034 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x3034 != Fp::invalid());
        if (x3034 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3035 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3036 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3037 = x3035 + x3036;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3038 = x2913 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3039 = x2916 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3040 = x3038 + x3039;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3041 = x3040 + x2919;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3042 = x3037 + x3041;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3043 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3044 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3045 = x3043 + x3044;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3046 = x3045 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3047 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3042);
            reg = x3042;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3046);
            reg = x3046;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3047);
            reg = x3047;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3047);
            reg = x3047;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3048 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x3048 != Fp::invalid());
        if (x3048 != 0) {
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3049 = x2881 * x64;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3050 = x2884 * x61;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3051 = x3049 + x3050;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3052 = x2913 * x70;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3053 = x2916 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3054 = x3052 + x3053;
          // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3055 = x3054 + x2919;
          // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3056 = x3051 + x3055;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3057 = x2874 * x49;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3058 = x2876 * x92;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3059 = x3057 + x3058;
          // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3060 = x3059 + x2878;
          // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3061 = x2874 * x91;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3056);
            reg = x3056;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3060);
            reg = x3060;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3061);
            reg = x3061;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3061);
            reg = x3061;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3062 = x2899 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3063 = x2902 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3064 = x3062 + x3063;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3065 = x3064 + x2905;
      // loc("cirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3066 = x3065 + x48;
      {
        host_args.at(0) = x3066;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3067 = host_outs.at(0);
        auto x3068 = host_outs.at(1);
        auto x3069 = host_outs.at(2);
        auto x3070 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3067);
          reg = x3067;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3068);
          reg = x3068;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3069);
          reg = x3069;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3070);
          reg = x3070;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3071 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3071 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3072 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3072 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3073 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3073 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3074 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3074 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3066);
        reg = x3066;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2832);
        reg = x2832;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3071);
        reg = x3071;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3072);
        reg = x3072;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3073);
        reg = x3073;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3074);
        reg = x3074;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3075 = x2888 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3076 = x3075 + x2897;
      // loc("cirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3077 = x3076 + x48;
      {
        host_args.at(0) = x3077;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3078 = host_outs.at(0);
        auto x3079 = host_outs.at(1);
        auto x3080 = host_outs.at(2);
        auto x3081 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3078);
          reg = x3078;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3079);
          reg = x3079;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3080);
          reg = x3080;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3081);
          reg = x3081;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3082 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3082 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3083 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3083 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3084 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3084 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3085 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3085 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3077);
        reg = x3077;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2832);
        reg = x2832;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3082);
        reg = x3082;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3083);
        reg = x3083;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3084);
        reg = x3084;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3085);
        reg = x3085;
      }
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3086 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3086 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3087 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3087 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3088 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3088 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3089 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3089 != Fp::invalid());
      host_args.at(0) = x3086;
      host_args.at(1) = x3087;
      host_args.at(2) = x3088;
      host_args.at(3) = x3089;
      host_args.at(4) = x3065;
      host_args.at(5) = x3071;
      host_args.at(6) = x3072;
      host_args.at(7) = x3073;
      host_args.at(8) = x3074;
      host_args.at(9) = x3076;
      host_args.at(10) = x3082;
      host_args.at(11) = x3083;
      host_args.at(12) = x3084;
      host_args.at(13) = x3085;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 14, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3090 = x2913 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3091 = x2916 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3092 = x3090 + x3091;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3093 = x3092 + x2919;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3094 = (x3093 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3094);
          reg = x3094;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3095 = inv(x3093);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3095);
          reg = x3095;
        }
      }
      // loc("Top/Mux/4/Mux/3/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3096 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3096 != Fp::invalid());
      if (x3096 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3093 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3097 = x95 - x3096;
      if (x3097 != 0) {
        // loc("Top/Mux/4/Mux/3/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3098 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x3098 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3099 = x3093 * x3098;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3100 = x3099 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3100 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("cirgen/circuit/rv32im/memio.cpp":48:17)
        auto x3101 = x3071 + x3086;
        // loc("cirgen/circuit/rv32im/memio.cpp":49:18)
        auto x3102 = Fp(x3101.asUInt32() & x76.asUInt32());
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3103 = (x3102 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3103);
            reg = x3103;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3104 = x3102 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3105 = (x3104 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3105);
            reg = x3105;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3106 = x3102 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3107 = (x3106 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3107);
            reg = x3107;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3108 = x3102 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3109 = (x3108 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3109);
            reg = x3109;
          }
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3110 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3110 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3111 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3111 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3112 = x3111 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3113 = x3110 + x3112;
        // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3114 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3114 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3115 = x3114 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3116 = x3113 + x3115;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3117 = x3116 - x3102;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3117 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("cirgen/circuit/rv32im/memio.cpp":50:20)
        auto x3118 = Fp(x3101.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":50:19)
        auto x3119 = x3118 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3120 = Fp(x3119.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3120);
            reg = x3120;
          }
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3121 = x3101 - x3116;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3122 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x3122 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":51:33)
        auto x3123 = x3122 * x90;
        // loc("cirgen/circuit/rv32im/memio.cpp":51:15)
        auto x3124 = x3121 - x3123;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3124);
          reg = x3124;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":53:22)
        auto x3125 = x3124 * x75;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3125);
          reg = x3125;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3126 = x3072 + x3087;
        // loc("cirgen/circuit/rv32im/memio.cpp":54:17)
        auto x3127 = x3126 + x3122;
        // loc("cirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3128 = Fp(x3127.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3128);
          reg = x3128;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":56:25)
        auto x3129 = Fp(x3127.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":56:24)
        auto x3130 = x3129 * x89;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3130);
          reg = x3130;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3131 = x3073 + x3088;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3132 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3132 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":57:17)
        auto x3133 = x3131 + x3132;
        // loc("cirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3134 = Fp(x3133.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3134);
          reg = x3134;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":59:25)
        auto x3135 = Fp(x3133.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":59:24)
        auto x3136 = x3135 * x89;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3136);
          reg = x3136;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3137 = x3074 + x3089;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3138 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3138 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/memio.cpp":60:17)
        auto x3139 = x3137 + x3138;
        // loc("cirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3140 = Fp(x3139.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3140);
          reg = x3140;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":62:24)
        auto x3141 = Fp(x3139.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":62:23)
        auto x3142 = x3141 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3142);
          reg = x3142;
        }
        // loc("cirgen/circuit/rv32im/memio.cpp":63:20)
        auto x3143 = Fp(x3139.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/memio.cpp":63:19)
        auto x3144 = x3143 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x3145 = Fp(x3144.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3145);
            reg = x3145;
          }
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3146 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3146 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3147 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3147 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":66:16)
      auto x3148 = x3147 * x77;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      auto x3149 = x3146 - x3148;
      // loc("cirgen/circuit/rv32im/memio.cpp":66:6)
      if (x3149 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:66");
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3150 = x3071 + x3086;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3151 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3151 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3152 = x3151 * x90;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3153 = x3152 + x3146;
      // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3154 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3154 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3155 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3155 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3156 = x3155 * x92;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3157 = x3154 + x3156;
      // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3158 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3158 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x3159 = x3158 * x76;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x3160 = x3157 + x3159;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:35)
      auto x3161 = x3153 + x3160;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      auto x3162 = x3150 - x3161;
      // loc("cirgen/circuit/rv32im/memio.cpp":68:6)
      if (x3162 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:68");
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3163 = x3072 + x3087;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3164 = x3163 + x3151;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3165 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3165 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3166 = x3165 * x90;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3167 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3167 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":70:46)
      auto x3168 = x3166 + x3167;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      auto x3169 = x3164 - x3168;
      // loc("cirgen/circuit/rv32im/memio.cpp":70:6)
      if (x3169 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:70");
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3170 = x3073 + x3088;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3171 = x3170 + x3165;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3172 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3172 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3173 = x3172 * x90;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3174 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3174 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":72:46)
      auto x3175 = x3173 + x3174;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      auto x3176 = x3171 - x3175;
      // loc("cirgen/circuit/rv32im/memio.cpp":72:6)
      if (x3176 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:72");
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3177 = x3074 + x3089;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3178 = x3177 + x3172;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3179 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3180 = x3179 * x90;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3181 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3181 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:63)
      auto x3182 = x3181 * x77;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3183 = x3180 + x3182;
      // loc("Top/Mux/4/Mux/3/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3184 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3184 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/memio.cpp":74:46)
      auto x3185 = x3183 + x3184;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      auto x3186 = x3178 - x3185;
      // loc("cirgen/circuit/rv32im/memio.cpp":74:6)
      if (x3186 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:74");
      // loc("cirgen/circuit/rv32im/memio.cpp":77:15)
      auto x3187 = x95 - x3181;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3188 = x3181 * x3187;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:28)
      auto x3189 = x92 - x3181;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      auto x3190 = x3188 * x3189;
      // loc("cirgen/circuit/rv32im/memio.cpp":77:7)
      if (x3190 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/memio.cpp:77");
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3191 = x3181 * x78;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:41)
      auto x3192 = x3184 * x37;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3193 = x3191 + x3192;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:68)
      auto x3194 = x3174 * x36;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3195 = x3193 + x3194;
      // loc("cirgen/circuit/rv32im/memio.cpp":81:14)
      auto x3196 = x3167 * x55;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3197 = x3195 + x3196;
      // loc("cirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3198 = x3197 + x3147;
      {
        host_args.at(0) = x3198;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3199 = host_outs.at(0);
        auto x3200 = host_outs.at(1);
        auto x3201 = host_outs.at(2);
        auto x3202 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3199);
          reg = x3199;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3200);
          reg = x3200;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3201);
          reg = x3201;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3202);
          reg = x3202;
        }
      }
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3203 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x3203 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3204 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3204 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3205 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3205 != Fp::invalid());
      // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3206 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3206 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3198);
        reg = x3198;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2832);
        reg = x2832;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3203);
        reg = x3203;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3204);
        reg = x3204;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3205);
        reg = x3205;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3206);
        reg = x3206;
      }
      host_args.at(0) = x3198;
      host_args.at(1) = x3160;
      host_args.at(2) = x3203;
      host_args.at(3) = x3204;
      host_args.at(4) = x3205;
      host_args.at(5) = x3206;
      host(ctx, "log", "  Addr = 0x%x, lowBits = %u, loaded = %w", host_args.data(), 6, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/memio.cpp":85:17)
      auto x3207 = x598 + x77;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3208 = x3207 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3209 = Fp(x3208.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3209);
          reg = x3209;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3210 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3210 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3211 = x3208 - x3210;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3212 = x3211 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3213 = Fp(x3212.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3213);
          reg = x3213;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3214 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3214 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3215 = x3212 - x3214;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3216 = x3215 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3217 = Fp(x3216.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3217);
          reg = x3217;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3218 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3218 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3219 = x3216 - x3218;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3220 = x3219 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x3221 = Fp(x3220.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3221);
          reg = x3221;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3222 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x3222 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x3223 = x3220 - x3222;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x3224 = x3223 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3224);
        reg = x3224;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3225 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x3225 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x3226 = x95 - x3225;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x3227 = x3225 * x3226;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3227);
        reg = x3227;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3228 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x3228 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x3229 = x92 - x3225;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x3230 = x3228 * x3229;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x3230 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/memio.cpp":86:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x80);
        reg = x80;
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3231 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3231 != Fp::invalid());
      if (x3231 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3232 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3232 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3233 = x3232 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3233 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3234 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3234 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3235 = x3234 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3236 = x3235 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3236 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3237 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3237 != Fp::invalid());
        if (x3237 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3238 = Fp(x3203.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3238);
              reg = x3238;
            }
          }
        }
        if (x3154 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3239 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3239);
              reg = x3239;
            }
          }
        }
        if (x3155 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3240 = Fp(x3205.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3240);
              reg = x3240;
            }
          }
        }
        if (x3158 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3241 = Fp(x3206.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3241);
              reg = x3241;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3242 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3242 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3243 = Fp(x3242.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3244 = x3243 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3244);
            reg = x3244;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3245 = Fp(x3242.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3246 = x3245 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3246);
            reg = x3246;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3247 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3247 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3248 = x95 - x3247;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3249 = x3247 * x3248;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3249 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3250 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3250 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3251 = x3247 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3252 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3252 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3253 = x3252 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3254 = x3251 + x3253;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3255 = x3250 - x3254;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3255 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3256 = x3247 * x91;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3257 = x3237 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3258 = x3154 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3259 = x3257 + x3258;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3260 = x3155 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3261 = x3259 + x3260;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3262 = x3158 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3263 = x3261 + x3262;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3263);
          reg = x3263;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3256);
          reg = x3256;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3256);
          reg = x3256;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3256);
          reg = x3256;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3264 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3264 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3265 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3265 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3266 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3266 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3267 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3267 != Fp::invalid());
        host_args.at(0) = x3256;
        host_args.at(1) = x3264;
        host_args.at(2) = x3265;
        host_args.at(3) = x3266;
        host_args.at(4) = x3267;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3097 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3268 = x3093 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3264);
            reg = x3264;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3265);
            reg = x3265;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3266);
            reg = x3266;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3267);
            reg = x3267;
          }
          {
            host_args.at(0) = x3268;
            host_args.at(1) = x3264;
            host_args.at(2) = x3265;
            host_args.at(3) = x3266;
            host_args.at(4) = x3267;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3269 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3269 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3270 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3270 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3271 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3271 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3272 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3272 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3268);
            reg = x3268;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3269);
            reg = x3269;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3270);
            reg = x3270;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3271);
            reg = x3271;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3272);
            reg = x3272;
          }
        }
        if (x3096 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3273 = x2921 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3273 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x2910 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:76");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3274 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3275 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3276 = x3274 + x3275;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3277 = x3276 + x3076;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3278 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3279 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3280 = x3278 + x3279;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3281 = x3280 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3282 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3277);
          reg = x3277;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3281);
          reg = x3281;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3282);
          reg = x3282;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3282);
          reg = x3282;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3283 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3283 != Fp::invalid());
      if (x3283 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3284 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3284 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3285 = x3284 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3285 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3286 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3286 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3287 = x3286 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3288 = x3287 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3288 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3289 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3289 != Fp::invalid());
        if (x3289 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3290 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3290);
              reg = x3290;
            }
          }
        }
        if (x3155 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3291 = Fp(x3206.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3291);
              reg = x3291;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3292 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3292 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3293 = Fp(x3292.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3294 = x3293 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3294);
            reg = x3294;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3295 = Fp(x3292.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3296 = x3295 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3296);
            reg = x3296;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3297 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3297 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3298 = x95 - x3297;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3299 = x3297 * x3298;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3299 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3300 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3300 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3301 = x3297 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3302 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3302 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3303 = x3302 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3304 = x3301 + x3303;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3305 = x3300 - x3304;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3305 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3306 = x3297 * x91;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3307 = x3289 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3308 = x3155 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3309 = x3307 + x3308;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3310 = x3289 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3311 = x3155 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3312 = x3310 + x3311;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3309);
          reg = x3309;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3312);
          reg = x3312;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3306);
          reg = x3306;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3306);
          reg = x3306;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3313 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3313 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3314 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3314 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3315 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3315 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3316 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3316 != Fp::invalid());
        host_args.at(0) = x3306;
        host_args.at(1) = x3313;
        host_args.at(2) = x3314;
        host_args.at(3) = x3315;
        host_args.at(4) = x3316;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3097 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3317 = x3093 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3313);
            reg = x3313;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3314);
            reg = x3314;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3315);
            reg = x3315;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3316);
            reg = x3316;
          }
          {
            host_args.at(0) = x3317;
            host_args.at(1) = x3313;
            host_args.at(2) = x3314;
            host_args.at(3) = x3315;
            host_args.at(4) = x3316;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3318 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3318 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3319 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3319 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3320 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3320 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3321 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3321 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3317);
            reg = x3317;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3318);
            reg = x3318;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3319);
            reg = x3319;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3320);
            reg = x3320;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3321);
            reg = x3321;
          }
        }
        if (x3096 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3322 = x2921 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3322 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3323 = x2910 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3323 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:77");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3324 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3325 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3326 = x3324 + x3325;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3327 = x3326 + x3076;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3328 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3329 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3330 = x3328 + x3329;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3331 = x3330 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3332 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3327);
          reg = x3327;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3331);
          reg = x3331;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3332);
          reg = x3332;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3332);
          reg = x3332;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3333 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3333 != Fp::invalid());
      if (x3333 != 0) {
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3334 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3334 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3335 = x3334 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3335 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3336 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3336 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3337 = x3336 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3338 = x3337 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3338 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3339 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3339 != Fp::invalid());
        if (x3339 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3340 = Fp(x3206.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3340);
              reg = x3340;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3341 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3341 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3342 = Fp(x3341.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3343 = x3342 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3343);
            reg = x3343;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3344 = Fp(x3341.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3345 = x3344 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3345);
            reg = x3345;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3346 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3346 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3347 = x95 - x3346;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3348 = x3346 * x3347;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3348 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3349 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3349 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3350 = x3346 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3351 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3351 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3352 = x3351 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3353 = x3350 + x3352;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3354 = x3349 - x3353;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3354 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3355 = x3339 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3356 = x3339 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3357 = x3339 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3358 = x3339 * x3206;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3355);
          reg = x3355;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3356);
          reg = x3356;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3357);
          reg = x3357;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3358);
          reg = x3358;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3359 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3359 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3360 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3360 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3361 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3361 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3362 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3362 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3359;
        host_args.at(2) = x3360;
        host_args.at(3) = x3361;
        host_args.at(4) = x3362;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3097 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3363 = x3093 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3359);
            reg = x3359;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3360);
            reg = x3360;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3361);
            reg = x3361;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3362);
            reg = x3362;
          }
          {
            host_args.at(0) = x3363;
            host_args.at(1) = x3359;
            host_args.at(2) = x3360;
            host_args.at(3) = x3361;
            host_args.at(4) = x3362;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3364 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3364 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3365 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3365 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3366 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3366 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3367 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3367 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3363);
            reg = x3363;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3364);
            reg = x3364;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3365);
            reg = x3365;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3366);
            reg = x3366;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3367);
            reg = x3367;
          }
        }
        if (x3096 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3368 = x2921 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3368 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3369 = x2910 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3369 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:78");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3370 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3371 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3372 = x3370 + x3371;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3373 = x3372 + x3076;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3374 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3375 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3376 = x3374 + x3375;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3377 = x3376 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3378 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3373);
          reg = x3373;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3377);
          reg = x3377;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3378);
          reg = x3378;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3378);
          reg = x3378;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3379 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3379 != Fp::invalid());
      if (x3379 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3380 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3380 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3381 = x3380 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3381 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3382 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3382 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3383 = x3382 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3384 = x3383 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3384 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3385 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3385 != Fp::invalid());
        if (x3385 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3386 = Fp(x3203.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3386);
              reg = x3386;
            }
          }
        }
        if (x3154 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3387 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3387);
              reg = x3387;
            }
          }
        }
        if (x3155 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3388 = Fp(x3205.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3388);
              reg = x3388;
            }
          }
        }
        if (x3158 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3389 = Fp(x3206.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3389);
              reg = x3389;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3390 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3390 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3391 = Fp(x3390.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3392 = x3391 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3392);
            reg = x3392;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3393 = Fp(x3390.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3394 = x3393 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3394);
            reg = x3394;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3395 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3395 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3396 = x95 - x3395;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3397 = x3395 * x3396;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3397 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3398 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3398 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3399 = x3395 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3400 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3400 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3401 = x3400 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3402 = x3399 + x3401;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3403 = x3398 - x3402;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3403 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3404 = x3385 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3405 = x3154 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3406 = x3404 + x3405;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3407 = x3155 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3408 = x3406 + x3407;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3409 = x3158 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3410 = x3408 + x3409;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3410);
          reg = x3410;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3411 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3412 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3412 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3413 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3414 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3414 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3411;
        host_args.at(2) = x3412;
        host_args.at(3) = x3413;
        host_args.at(4) = x3414;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3097 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3415 = x3093 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3411);
            reg = x3411;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3412);
            reg = x3412;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3413);
            reg = x3413;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3414);
            reg = x3414;
          }
          {
            host_args.at(0) = x3415;
            host_args.at(1) = x3411;
            host_args.at(2) = x3412;
            host_args.at(3) = x3413;
            host_args.at(4) = x3414;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3416 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3416 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3417 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3417 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3418 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3418 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3419 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3419 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3415);
            reg = x3415;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3416);
            reg = x3416;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3417);
            reg = x3417;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3418);
            reg = x3418;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3419);
            reg = x3419;
          }
        }
        if (x3096 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3420 = x2921 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3420 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3421 = x2910 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3421 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:79");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3422 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3423 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3424 = x3422 + x3423;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3425 = x3424 + x3076;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3426 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3427 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3428 = x3426 + x3427;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3429 = x3428 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3430 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3425);
          reg = x3425;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3429);
          reg = x3429;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3430);
          reg = x3430;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3430);
          reg = x3430;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3431 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3431 != Fp::invalid());
      if (x3431 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3432 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3432 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3433 = x3432 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3433 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3434 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3434 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3435 = x3434 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3436 = x3435 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3436 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3437 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3437 != Fp::invalid());
        if (x3437 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3438 = Fp(x3204.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3438);
              reg = x3438;
            }
          }
        }
        if (x3155 != 0) {
          {
            // loc("cirgen/components/bytes.cpp":89:21)
            auto x3439 = Fp(x3206.asUInt32() & x91.asUInt32());
            // loc("cirgen/components/bytes.cpp":89:12)
            {
              auto& reg = args[2][36 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3439);
              reg = x3439;
            }
          }
        }
        {
          // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
          auto x3440 = args[2][36 * steps + ((cycle - 0) & mask)];
          assert(x3440 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3441 = Fp(x3440.asUInt32() & x64.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3442 = x3441 * x63;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3442);
            reg = x3442;
          }
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3443 = Fp(x3440.asUInt32() & x52.asUInt32());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3444 = x3443 * x92;
          // loc("cirgen/components/bytes.cpp":94:3)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3444);
            reg = x3444;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3445 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x3445 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3446 = x95 - x3445;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3447 = x3445 * x3446;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3447 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3448 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x3448 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3449 = x3445 * x64;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x3450 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x3450 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3451 = x3450 * x56;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3452 = x3449 + x3451;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3453 = x3448 - x3452;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3453 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3454 = x3437 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3455 = x3155 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3456 = x3454 + x3455;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3457 = x3437 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3458 = x3155 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3459 = x3457 + x3458;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3456);
          reg = x3456;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3459);
          reg = x3459;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3460 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3460 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3461 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3461 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3462 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3463 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3463 != Fp::invalid());
        host_args.at(0) = x94;
        host_args.at(1) = x3460;
        host_args.at(2) = x3461;
        host_args.at(3) = x3462;
        host_args.at(4) = x3463;
        host(ctx, "log", "  fillByte = %x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3097 != 0) {
          // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3464 = x3093 + x48;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3460);
            reg = x3460;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3461);
            reg = x3461;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3462);
            reg = x3462;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3463);
            reg = x3463;
          }
          {
            host_args.at(0) = x3464;
            host_args.at(1) = x3460;
            host_args.at(2) = x3461;
            host_args.at(3) = x3462;
            host_args.at(4) = x3463;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3465 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x3465 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3466 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3466 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3467 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3467 != Fp::invalid());
          // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3468 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3468 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3464);
            reg = x3464;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2832);
            reg = x2832;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3465);
            reg = x3465;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3466);
            reg = x3466;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3467);
            reg = x3467;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3468);
            reg = x3468;
          }
        }
        if (x3096 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3469 = x2921 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3469 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3470 = x2910 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3470 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:80");
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3471 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3472 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3473 = x3471 + x3472;
        // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3474 = x3473 + x3076;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3475 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3476 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3477 = x3475 + x3476;
        // loc("cirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3478 = x3477 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3479 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3474);
          reg = x3474;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3478);
          reg = x3478;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3479);
          reg = x3479;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3479);
          reg = x3479;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3480 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3480 != Fp::invalid());
      if (x3480 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3481 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3481 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3482 = x3481 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3482 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3483 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3483 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3484 = x3483 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3485 = x3484 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3485 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3486 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3486 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3487 = x3486 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3488 = x95 - x3486;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3489 = x3488 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3490 = x3487 + x3489;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3491 = x3154 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3492 = x95 - x3154;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3493 = x3492 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3494 = x3491 + x3493;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3495 = x3155 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3496 = x95 - x3155;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3497 = x3496 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3498 = x3495 + x3497;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3499 = x3158 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3500 = x95 - x3158;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3501 = x3500 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3502 = x3499 + x3501;
        host_args.at(0) = x3490;
        host_args.at(1) = x3494;
        host_args.at(2) = x3498;
        host_args.at(3) = x3502;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3490);
          reg = x3490;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3494);
          reg = x3494;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3498);
          reg = x3498;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3502);
          reg = x3502;
        }
        {
          host_args.at(0) = x3198;
          host_args.at(1) = x3490;
          host_args.at(2) = x3494;
          host_args.at(3) = x3498;
          host_args.at(4) = x3502;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3503 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3503 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3504 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3505 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3506 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3506 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3198);
          reg = x3198;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2832);
          reg = x2832;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3503);
          reg = x3503;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3504);
          reg = x3504;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3505);
          reg = x3505;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3506);
          reg = x3506;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3507 = x2921 - x35;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3507 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x2910 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:81");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3508 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3509 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3510 = x3508 + x3509;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3511 = x3510 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3512 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3513 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3514 = x3512 + x3513;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3515 = x3514 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3516 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3511);
          reg = x3511;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3515);
          reg = x3515;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3516);
          reg = x3516;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3516);
          reg = x3516;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3517 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3517 != Fp::invalid());
      if (x3517 != 0) {
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3518 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3518 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3519 = x3518 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3519 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3520 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3520 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3521 = x3520 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3522 = x3521 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3522 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3523 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3523 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3524 = x3523 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3525 = x95 - x3523;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3526 = x3525 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3527 = x3524 + x3526;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3528 = x3155 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3529 = x95 - x3155;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3530 = x3529 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3531 = x3528 + x3530;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3532 = x3523 * x3083;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3533 = x3525 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3534 = x3532 + x3533;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3535 = x3155 * x3083;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3536 = x3529 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3537 = x3535 + x3536;
        host_args.at(0) = x3527;
        host_args.at(1) = x3534;
        host_args.at(2) = x3531;
        host_args.at(3) = x3537;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3527);
          reg = x3527;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3534);
          reg = x3534;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3531);
          reg = x3531;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3537);
          reg = x3537;
        }
        {
          host_args.at(0) = x3198;
          host_args.at(1) = x3527;
          host_args.at(2) = x3534;
          host_args.at(3) = x3531;
          host_args.at(4) = x3537;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3538 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3539 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3539 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3540 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3541 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3541 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3198);
          reg = x3198;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2832);
          reg = x2832;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3538);
          reg = x3538;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3539);
          reg = x3539;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3540);
          reg = x3540;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3541);
          reg = x3541;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3542 = x2921 - x35;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3542 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3543 = x2910 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3543 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:82");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3544 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3545 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3546 = x3544 + x3545;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3547 = x3546 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3548 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3549 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3550 = x3548 + x3549;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3551 = x3550 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3552 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3547);
          reg = x3547;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3551);
          reg = x3551;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3552);
          reg = x3552;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3552);
          reg = x3552;
        }
      }
      // loc("Top/Mux/4/Mux/3/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3553 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3553 != Fp::invalid());
      if (x3553 != 0) {
        if (x95 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3554 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3554 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3555 = x3554 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3555 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x94 != 0) {
          // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3556 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x3556 != Fp::invalid());
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3557 = x3556 + x3155;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3558 = x3557 - x95;
          // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3558 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/3/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3559 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x3559 != Fp::invalid());
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3560 = x3559 * x3082;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3561 = x95 - x3559;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3562 = x3561 * x3203;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3563 = x3560 + x3562;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3564 = x3559 * x3083;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3565 = x3561 * x3204;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3566 = x3564 + x3565;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3567 = x3559 * x3084;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3568 = x3561 * x3205;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3569 = x3567 + x3568;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3570 = x3559 * x3085;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3571 = x3561 * x3206;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3572 = x3570 + x3571;
        host_args.at(0) = x3563;
        host_args.at(1) = x3566;
        host_args.at(2) = x3569;
        host_args.at(3) = x3572;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3563);
          reg = x3563;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3566);
          reg = x3566;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3569);
          reg = x3569;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3572);
          reg = x3572;
        }
        {
          host_args.at(0) = x3198;
          host_args.at(1) = x3563;
          host_args.at(2) = x3566;
          host_args.at(3) = x3569;
          host_args.at(4) = x3572;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3573 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x3573 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3574 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x3574 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3575 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x3575 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3576 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x3576 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3198);
          reg = x3198;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2832);
          reg = x2832;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3573);
          reg = x3573;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3574);
          reg = x3574;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3575);
          reg = x3575;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3576);
          reg = x3576;
        }
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3577 = x2921 - x35;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3577 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3578 = x2910 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3578 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:83");
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3579 = x2881 * x64;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3580 = x2884 * x61;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3581 = x3579 + x3580;
        // loc("cirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3582 = x3581 + x3093;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3583 = x2874 * x49;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3584 = x2876 * x92;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3585 = x3583 + x3584;
        // loc("cirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3586 = x3585 + x2878;
        // loc("cirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3587 = x2874 * x91;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3582);
          reg = x3582;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3586);
          reg = x3586;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3587);
          reg = x3587;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3587);
          reg = x3587;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/components/mux.h":39:25))
    auto x3588 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x3588 != Fp::invalid());
    if (x3588 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3589 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x3589 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3590 = x598 * x75;
      {
        host_args.at(0) = x3590;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3591 = host_outs.at(0);
        auto x3592 = host_outs.at(1);
        auto x3593 = host_outs.at(2);
        auto x3594 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3591);
          reg = x3591;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3593);
          reg = x3593;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3594);
          reg = x3594;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3595 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x3595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3596 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x3596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3597 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x3597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3598 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x3598 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3590);
        reg = x3590;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3589);
        reg = x3589;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3595);
        reg = x3595;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3596);
        reg = x3596;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3597);
        reg = x3597;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3598);
        reg = x3598;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3599 = Fp(x3598.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3600 = x3599 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3600);
          reg = x3600;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3601 = Fp(x3598.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3602 = x3601 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3602);
          reg = x3602;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3603 = Fp(x3598.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3604 = x3603 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3604);
          reg = x3604;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3605 = Fp(x3598.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3606 = x3605 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3606);
          reg = x3606;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3607 = Fp(x3598.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3608 = x3607 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3608);
          reg = x3608;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3609 = Fp(x3598.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3609);
          reg = x3609;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3610 = Fp(x3597.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3611 = x3610 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3611);
          reg = x3611;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3612 = Fp(x3597.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3613 = x3612 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3613);
          reg = x3613;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3614 = Fp(x3597.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3615 = x3614 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3615);
          reg = x3615;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3616 = Fp(x3597.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3617 = x3616 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3617);
          reg = x3617;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3618 = Fp(x3597.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3618);
          reg = x3618;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3619 = Fp(x3596.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3620 = x3619 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3620);
          reg = x3620;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3621 = Fp(x3596.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3622 = x3621 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3622);
          reg = x3622;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3623 = Fp(x3596.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3624 = x3623 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3624);
          reg = x3624;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3625 = Fp(x3596.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3626 = x3625 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3626);
          reg = x3626;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3627 = Fp(x3596.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3627);
          reg = x3627;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3628 = Fp(x3595.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3629 = x3628 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3629);
          reg = x3629;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3630 = Fp(x3595.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3630);
          reg = x3630;
        }
      }
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3631 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x3631 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3632 = x3631 * x55;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3633 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3633 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3634 = x3633 * x59;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3635 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x3635 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3636 = x3635 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3637 = x3634 + x3636;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3638 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x3638 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3639 = x3638 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3640 = x3637 + x3639;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3641 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3641 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3642 = x3640 + x3641;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3643 = x3632 + x3642;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3644 = x3643 * x92;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3645 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x3645 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3646 = x3644 + x3645;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3647 = x3598 - x3646;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3647 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3648 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x3648 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3649 = x3648 * x70;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3650 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3650 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3651 = x3650 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3652 = x3649 + x3651;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3653 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x3653 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3654 = x3652 + x3653;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3655 = x3654 * x59;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3656 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3656 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3657 = x3656 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3658 = x3655 + x3657;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3659 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3659 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3660 = x3658 + x3659;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3661 = x3597 - x3660;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3661 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3662 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x3662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3663 = x3662 * x64;
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3664 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x3664 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3665 = x3664 * x77;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3666 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3666 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3667 = x3665 + x3666;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3668 = x3667 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3669 = x3663 + x3668;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3670 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3670 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3671 = x3670 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3672 = x3669 + x3671;
      // loc("Top/Mux/4/Mux/4/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3673 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3673 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3674 = x3672 + x3673;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3675 = x3596 - x3674;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3675 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/4/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3676 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x3676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3677 = x3676 * x64;
      // loc("Top/Mux/4/Mux/4/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3678 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x3678 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3679 = x3677 + x3678;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3680 = x3595 - x3679;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3680 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3595;
        host_args.at(1) = x3596;
        host_args.at(2) = x3597;
        host_args.at(3) = x3598;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3681 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3682 = (x3681 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3682);
            reg = x3682;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3683 = x3681 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3684 = (x3683 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3684);
            reg = x3684;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3685 = x3681 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3686 = (x3685 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3686);
            reg = x3686;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3687 = x3681 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3688 = (x3687 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3688);
            reg = x3688;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3689 = x3681 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3690 = (x3689 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3690);
            reg = x3690;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3691 = x3681 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3692 = (x3691 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3692);
            reg = x3692;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3693 = x3681 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3694 = (x3693 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3694);
            reg = x3694;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3695 = x3681 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x3696 = (x3695 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3696);
            reg = x3696;
          }
        }
        // loc("Top/Mux/4/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3697 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x3697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3698 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x3698 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3699 = x3698 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3700 = x3697 + x3699;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3701 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x3701 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3702 = x3701 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3703 = x3700 + x3702;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3704 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x3704 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3705 = x3704 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3706 = x3703 + x3705;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3707 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x3707 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3708 = x3707 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3709 = x3706 + x3708;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3710 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x3710 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3711 = x3710 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3712 = x3709 + x3711;
        // loc("Top/Mux/4/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3713 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x3713 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x3714 = x3713 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x3715 = x3712 + x3714;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x3716 = x3715 - x3681;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x3716 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      host_args.at(0) = x94;
      host_args.at(1) = x94;
      host_args.at(2) = x94;
      host_args.at(3) = x94;
      host_args.at(4) = x94;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/4/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3717 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x3717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x3718 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x3718 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x3719 = x3717 + x3718;
      // loc("Top/Mux/4/Mux/4/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x3720 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x3720 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x3721 = x3719 + x3720;
      // loc("Top/Mux/4/Mux/4/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x3722 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x3723 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3723 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x3724 = x3722 + x3723;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3725 = x3656 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3726 = x3659 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3727 = x3725 + x3726;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3728 = x3727 + x3662;
      // loc("cirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x3729 = x3728 + x48;
      {
        host_args.at(0) = x3729;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3730 = host_outs.at(0);
        auto x3731 = host_outs.at(1);
        auto x3732 = host_outs.at(2);
        auto x3733 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3730);
          reg = x3730;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3731);
          reg = x3731;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3732);
          reg = x3732;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3733);
          reg = x3733;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3734 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x3734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3735 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3736 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3737 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3737 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3729);
        reg = x3729;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3589);
        reg = x3589;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3734);
        reg = x3734;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3735);
        reg = x3735;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3736);
        reg = x3736;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3737);
        reg = x3737;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3738 = x3645 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3739 = x3738 + x3654;
      // loc("cirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x3740 = x3739 + x48;
      {
        host_args.at(0) = x3740;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3741 = host_outs.at(0);
        auto x3742 = host_outs.at(1);
        auto x3743 = host_outs.at(2);
        auto x3744 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3741);
          reg = x3741;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3742);
          reg = x3742;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3743);
          reg = x3743;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3744);
          reg = x3744;
        }
      }
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3745 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x3745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3746 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3747 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3748 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3748 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3740);
        reg = x3740;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3589);
        reg = x3589;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3745);
        reg = x3745;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3746);
        reg = x3746;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3747);
        reg = x3747;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3748);
        reg = x3748;
      }
      host_args.at(0) = x3728;
      host_args.at(1) = x3734;
      host_args.at(2) = x3735;
      host_args.at(3) = x3736;
      host_args.at(4) = x3737;
      host_args.at(5) = x3739;
      host_args.at(6) = x3745;
      host_args.at(7) = x3746;
      host_args.at(8) = x3747;
      host_args.at(9) = x3748;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3749 = x3638 * x64;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x3750 = x3641 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3751 = x3749 + x3750;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x3752 = x3751 + x3739;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3753 = x3723 * x3752;
      // loc("cirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x3754 = x95 - x3723;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3755 = x3754 * x3745;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3756 = x3753 + x3755;
      {
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x3757 = Fp(x3756.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x3758 = x3757 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3758);
          reg = x3758;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x3759 = Fp(x3756.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x3760 = x3759 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3760);
          reg = x3760;
        }
        // loc("cirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x3761 = Fp(x3756.asUInt32() & x33.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3762 = Fp(x3761.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3762);
            reg = x3762;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3763 = Fp(x3761.asUInt32() & x92.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3764 = x3763 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3764);
            reg = x3764;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3765 = Fp(x3761.asUInt32() & x77.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3766 = x3765 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3766);
            reg = x3766;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3767 = Fp(x3761.asUInt32() & x70.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3768 = x3767 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3768);
            reg = x3768;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x3769 = Fp(x3761.asUInt32() & x59.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x3770 = x3769 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3770);
            reg = x3770;
          }
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3771 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x3771 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x3772 = x3771 * x32;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x3773 = x3772 + x95;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3774 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x3774 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x3775 = x3774 * x76;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x3776 = x3775 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3777 = x3773 * x3776;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3778 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x3778 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x3779 = x3778 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x3780 = x3777 * x3779;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3781 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x3781 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3782 = x3781 * x92;
          // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x3783 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x3783 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x3784 = x3782 + x3783;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x3785 = (x3784 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x3786 = x3785 * x3780;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3787 = x3784 - x95;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x3788 = (x3787 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x3789 = x3788 * x3780;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3790 = x3784 - x92;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x3791 = (x3790 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x3792 = x3791 * x3780;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3793 = x3784 - x76;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x3794 = (x3793 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x3795 = x3794 * x3780;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3786);
            reg = x3786;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3789);
            reg = x3789;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3792);
            reg = x3792;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3795);
            reg = x3795;
          }
        }
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3796 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x3796 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3797 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x3797 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3798 = x3797 * x92;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3799 = x3796 + x3798;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3800 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x3800 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3801 = x3800 * x77;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3802 = x3799 + x3801;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3803 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x3803 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3804 = x3803 * x70;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3805 = x3802 + x3804;
        // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x3806 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x3806 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x3807 = x3806 * x59;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x3808 = x3805 + x3807;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x3809 = x3808 - x3761;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x3809 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/4/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3810 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x3810 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3811 = x3810 * x55;
      // loc("Top/Mux/4/Mux/4/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3812 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3812 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x3813 = x3812 * x61;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3814 = x3811 + x3813;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3815 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3816 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x3816 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3817 = x3816 * x92;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3818 = x3815 + x3817;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3819 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3819 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3820 = x3819 * x77;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3821 = x3818 + x3820;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3822 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x3822 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3823 = x3822 * x70;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3824 = x3821 + x3823;
      // loc("Top/Mux/4/Mux/4/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3825 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x3825 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x3826 = x3825 * x59;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x3827 = x3824 + x3826;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x3828 = x3814 + x3827;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x3829 = x3756 - x3828;
      // loc("cirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x3829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3830 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3831 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3832 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/4/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3833 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3833 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3834 = x3724 * x3830;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3835 = x3724 * x3831;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3836 = x3724 * x3832;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3837 = x3724 * x3833;
      // loc("cirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x3838 = x95 - x3724;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3839 = x3838 * x3745;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3840 = x3838 * x3746;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3841 = x3838 * x3747;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x3842 = x3838 * x3748;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3843 = x3834 + x3839;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3844 = x3835 + x3840;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3845 = x3836 + x3841;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x3846 = x3837 + x3842;
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3847 = Fp(x3737.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3848 = x3847 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3848);
          reg = x3848;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3849 = Fp(x3737.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3850 = x3849 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3850);
          reg = x3850;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3851 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3851 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3852 = x3851 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3853 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x3853 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3854 = x3853 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3855 = x3852 + x3854;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3856 = x3737 - x3855;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3856 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x3857 = Fp(x3846.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x3858 = x3857 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3858);
          reg = x3858;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x3859 = Fp(x3846.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x3860 = x3859 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3860);
          reg = x3860;
        }
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3861 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3861 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3862 = x3861 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x3863 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x3863 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x3864 = x3863 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x3865 = x3862 + x3864;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x3866 = x3846 - x3865;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x3866 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/components/u32.cpp":213:13)
      auto x3867 = x3717 * x3861;
      // loc("cirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][191 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3867);
        reg = x3867;
      }
      // loc("cirgen/components/u32.cpp":214:13)
      auto x3868 = x3719 * x3851;
      // loc("cirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][192 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3868);
        reg = x3868;
      }
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3869 = x3734 * x3843;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3870 = x3735 * x3843;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3871 = x3734 * x3844;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3872 = x3870 + x3871;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3873 = x3872 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3874 = x3869 + x3873;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3875 = Fp(x3874.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3875);
          reg = x3875;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3876 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x3876 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3877 = x3874 - x3876;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3878 = x3877 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3879 = Fp(x3878.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3879);
          reg = x3879;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3880 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3880 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3881 = x3878 - x3880;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3882 = x3881 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3883 = Fp(x3882.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3883);
          reg = x3883;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3884 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x3884 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3885 = x3882 - x3884;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3886 = x3885 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3886);
        reg = x3886;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3887 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x3887 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3888 = x3887 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3889 = x3884 + x3888;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3890 = x3736 * x3843;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3891 = x3735 * x3844;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3892 = x3890 + x3891;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3893 = x3734 * x3845;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3894 = x3892 + x3893;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3895 = x3889 + x3894;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3896 = x3737 * x3843;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3897 = x3736 * x3844;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3898 = x3896 + x3897;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3899 = x3735 * x3845;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3900 = x3898 + x3899;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3901 = x3734 * x3846;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3902 = x3900 + x3901;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3903 = x3902 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3904 = x3895 + x3903;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3905 = Fp(x3904.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3905);
          reg = x3905;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3906 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x3906 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3907 = x3904 - x3906;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3908 = x3907 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3909 = Fp(x3908.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3909);
          reg = x3909;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3910 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x3910 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3911 = x3908 - x3910;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3912 = x3911 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3913 = Fp(x3912.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3913);
          reg = x3913;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3914 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x3914 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3915 = x3912 - x3914;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3916 = x3915 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3916);
        reg = x3916;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3917 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x3917 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3918 = x3917 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3919 = x3914 + x3918;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3920 = x3737 * x3844;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3921 = x3736 * x3845;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3922 = x3920 + x3921;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3923 = x3735 * x3846;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3924 = x3922 + x3923;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3925 = x3919 + x3924;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3926 = x3737 * x3845;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3927 = x3736 * x3846;
      // loc("cirgen/components/u32.cpp":229:20)
      auto x3928 = x3926 + x3927;
      // loc("cirgen/components/u32.cpp":231:19)
      auto x3929 = x3928 * x90;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3930 = x3925 + x3929;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3931 = x3930 + x31;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3932 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3932 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":234:53)
      auto x3933 = x3735 * x90;
      // loc("cirgen/components/u32.cpp":234:38)
      auto x3934 = x3734 + x3933;
      // loc("cirgen/components/u32.cpp":234:30)
      auto x3935 = x3932 * x3934;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3936 = x3931 - x3935;
      // loc("Top/Mux/4/Mux/4/U32Mul/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x3937 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3937 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":235:37)
      auto x3938 = x3844 * x90;
      // loc("cirgen/components/u32.cpp":235:22)
      auto x3939 = x3843 + x3938;
      // loc("cirgen/components/u32.cpp":235:14)
      auto x3940 = x3937 * x3939;
      // loc("cirgen/components/u32.cpp":234:13)
      auto x3941 = x3936 - x3940;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3942 = Fp(x3941.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3942);
          reg = x3942;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3943 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x3943 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3944 = x3941 - x3943;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3945 = x3944 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3946 = Fp(x3945.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3946);
          reg = x3946;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3947 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x3947 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3948 = x3945 - x3947;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3949 = x3948 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3950 = Fp(x3949.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3950);
          reg = x3950;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3951 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x3951 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3952 = x3949 - x3951;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3953 = x3952 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3953);
        reg = x3953;
      }
      // loc("Top/Mux/4/Mux/4/U32Mul/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3954 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x3954 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":219:19)
      auto x3955 = x3954 * x90;
      // loc("cirgen/components/u32.cpp":219:13)
      auto x3956 = x3951 + x3955;
      // loc("cirgen/components/u32.cpp":229:31)
      auto x3957 = x3737 * x3846;
      // loc("cirgen/components/u32.cpp":231:13)
      auto x3958 = x3956 + x3957;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3959 = x3958 + x30;
      // loc("cirgen/components/u32.cpp":238:53)
      auto x3960 = x3737 * x90;
      // loc("cirgen/components/u32.cpp":238:38)
      auto x3961 = x3736 + x3960;
      // loc("cirgen/components/u32.cpp":238:30)
      auto x3962 = x3932 * x3961;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3963 = x3959 - x3962;
      // loc("cirgen/components/u32.cpp":239:37)
      auto x3964 = x3846 * x90;
      // loc("cirgen/components/u32.cpp":239:22)
      auto x3965 = x3845 + x3964;
      // loc("cirgen/components/u32.cpp":239:14)
      auto x3966 = x3937 * x3965;
      // loc("cirgen/components/u32.cpp":238:13)
      auto x3967 = x3963 - x3966;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3968 = Fp(x3967.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3968);
          reg = x3968;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3969 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x3969 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3970 = x3967 - x3969;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3971 = x3970 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3972 = Fp(x3971.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3972);
          reg = x3972;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3973 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x3973 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3974 = x3971 - x3973;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3975 = x3974 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3975);
        reg = x3975;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3976 = x3670 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3977 = x3673 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3978 = x3976 + x3977;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3979 = x3978 + x3676;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x3980 = (x3979 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3980);
          reg = x3980;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x3981 = inv(x3979);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3981);
          reg = x3981;
        }
      }
      // loc("Top/Mux/4/Mux/4/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x3982 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3982 != Fp::invalid());
      if (x3982 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x3979 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x3983 = x95 - x3982;
      if (x3983 != 0) {
        // loc("Top/Mux/4/Mux/4/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x3984 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x3984 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3985 = x3979 * x3984;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x3986 = x3985 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x3986 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x3987 = x598 + x77;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x3988 = x3987 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3989 = Fp(x3988.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3989);
          reg = x3989;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3990 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x3990 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3991 = x3988 - x3990;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3992 = x3991 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3993 = Fp(x3992.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3993);
          reg = x3993;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3994 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x3994 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3995 = x3992 - x3994;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x3996 = x3995 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x3997 = Fp(x3996.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3997);
          reg = x3997;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x3998 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x3998 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x3999 = x3996 - x3998;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4000 = x3999 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4001 = Fp(x4000.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4001);
          reg = x4001;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4002 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4002 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4003 = x4000 - x4002;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4004 = x4003 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4004);
        reg = x4004;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4005 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4005 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4006 = x95 - x4005;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4007 = x4005 * x4006;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4007);
        reg = x4007;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4008 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4008 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4009 = x92 - x4005;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4010 = x4008 * x4009;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4010 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x80);
        reg = x80;
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4011 = x3721 * x3983;
      if (x4011 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4012 = x3979 + x48;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3943);
          reg = x3943;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3947);
          reg = x3947;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3969);
          reg = x3969;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3973);
          reg = x3973;
        }
        {
          host_args.at(0) = x4012;
          host_args.at(1) = x3943;
          host_args.at(2) = x3947;
          host_args.at(3) = x3969;
          host_args.at(4) = x3973;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4013 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4013 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4014 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4014 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4015 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4015 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4016 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4016 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4012);
          reg = x4012;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4013);
          reg = x4013;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4014);
          reg = x4014;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4015);
          reg = x4015;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4016);
          reg = x4016;
        }
      }
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4017 = x95 - x3721;
      // loc("cirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4018 = x4017 * x3983;
      if (x4018 != 0) {
        // loc("cirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4019 = x3979 + x48;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3876);
          reg = x3876;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3880);
          reg = x3880;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3906);
          reg = x3906;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3910);
          reg = x3910;
        }
        {
          host_args.at(0) = x4019;
          host_args.at(1) = x3876;
          host_args.at(2) = x3880;
          host_args.at(3) = x3906;
          host_args.at(4) = x3910;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4020 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4020 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4021 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4021 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4022 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4022 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4023 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4023 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4019);
          reg = x4019;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4020);
          reg = x4020;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4021);
          reg = x4021;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4022);
          reg = x4022;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4023);
          reg = x4023;
        }
      }
      if (x3982 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/Mux/4/Mux/4/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4024 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4024 != Fp::invalid());
      if (x4024 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4025 = x3678 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4025 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3667 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4026 = x3643 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4026 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3717 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4027 = x3678 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4027 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4028 = x3667 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4028 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4029 = x3643 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4029 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x3718 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4030 = x3678 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4030 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4031 = x3667 - x92;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4031 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4032 = x3643 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4032 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x3720 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4033 = x3678 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4033 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4034 = x3667 - x76;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4034 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4035 = x3643 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4035 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x3722 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4036 = x3678 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4036 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4037 = x3667 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4037 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3643 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x3723 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4038 = x3678 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4038 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4039 = x3667 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4039 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3643 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4040 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x4040 != Fp::invalid());
    if (x4040 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4041 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x4041 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4042 = x598 * x75;
      {
        host_args.at(0) = x4042;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4043 = host_outs.at(0);
        auto x4044 = host_outs.at(1);
        auto x4045 = host_outs.at(2);
        auto x4046 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4043);
          reg = x4043;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4044);
          reg = x4044;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4045);
          reg = x4045;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4046);
          reg = x4046;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4047 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4047 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4048 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4048 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4049 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4049 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4050 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4050 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4042);
        reg = x4042;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4041);
        reg = x4041;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4047);
        reg = x4047;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4048);
        reg = x4048;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4049);
        reg = x4049;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4050);
        reg = x4050;
      }
      {
        // loc("cirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4051 = Fp(x4050.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4052 = x4051 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4052);
          reg = x4052;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4053 = Fp(x4050.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4054 = x4053 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4054);
          reg = x4054;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4055 = Fp(x4050.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4056 = x4055 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4056);
          reg = x4056;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4057 = Fp(x4050.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4058 = x4057 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4058);
          reg = x4058;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4059 = Fp(x4050.asUInt32() & x72.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4060 = x4059 * x56;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4060);
          reg = x4060;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4061 = Fp(x4050.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4061);
          reg = x4061;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4062 = Fp(x4049.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4063 = x4062 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4063);
          reg = x4063;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4064 = Fp(x4049.asUInt32() & x62.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4065 = x4064 * x60;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4065);
          reg = x4065;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4066 = Fp(x4049.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4067 = x4066 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4067);
          reg = x4067;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4068 = Fp(x4049.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4069 = x4068 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4069);
          reg = x4069;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4070 = Fp(x4049.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4070);
          reg = x4070;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4071 = Fp(x4048.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4072 = x4071 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4072);
          reg = x4072;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4073 = Fp(x4048.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4074 = x4073 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4074);
          reg = x4074;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4075 = Fp(x4048.asUInt32() & x53.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4076 = x4075 * x58;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4076);
          reg = x4076;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4077 = Fp(x4048.asUInt32() & x66.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4078 = x4077 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4078);
          reg = x4078;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4079 = Fp(x4048.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4079);
          reg = x4079;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4080 = Fp(x4047.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4081 = x4080 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4081);
          reg = x4081;
        }
        // loc("cirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4082 = Fp(x4047.asUInt32() & x52.asUInt32());
        // loc("cirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4082);
          reg = x4082;
        }
      }
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4083 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4083 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4084 = x4083 * x55;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4085 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4085 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4086 = x4085 * x59;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4087 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4087 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4088 = x4087 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4089 = x4086 + x4088;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4090 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4090 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4091 = x4090 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4092 = x4089 + x4091;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4093 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4093 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4094 = x4092 + x4093;
      // loc("cirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4095 = x4084 + x4094;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4096 = x4095 * x92;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4097 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4097 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4098 = x4096 + x4097;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4099 = x4050 - x4098;
      // loc("cirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4099 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4100 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4100 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4101 = x4100 * x70;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4102 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4102 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4103 = x4102 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4104 = x4101 + x4103;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4105 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4105 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4106 = x4104 + x4105;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4107 = x4106 * x59;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4108 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4108 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4109 = x4108 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4110 = x4107 + x4109;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4111 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4111 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4112 = x4110 + x4111;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4113 = x4049 - x4112;
      // loc("cirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4113 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4114 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4114 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4115 = x4114 * x64;
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4116 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4116 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4117 = x4116 * x77;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4118 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4118 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4119 = x4117 + x4118;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4120 = x4119 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4121 = x4115 + x4120;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4122 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4122 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4123 = x4122 * x77;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4124 = x4121 + x4123;
      // loc("Top/Mux/4/Mux/5/Decoder/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4125 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4125 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4126 = x4124 + x4125;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4127 = x4048 - x4126;
      // loc("cirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4127 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/Mux/4/Mux/5/Decoder/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4128 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4128 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4129 = x4128 * x64;
      // loc("Top/Mux/4/Mux/5/Decoder/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4130 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4130 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4131 = x4129 + x4130;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4132 = x4047 - x4131;
      // loc("cirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4132 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4047;
        host_args.at(1) = x4048;
        host_args.at(2) = x4049;
        host_args.at(3) = x4050;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4133 = host_outs.at(0);
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4134 = (x4133 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4134);
            reg = x4134;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4135 = x4133 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4136 = (x4135 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4136);
            reg = x4136;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4137 = x4133 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4138 = (x4137 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4138);
            reg = x4138;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4139 = x4133 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4140 = (x4139 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4140);
            reg = x4140;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4141 = x4133 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4142 = (x4141 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4142);
            reg = x4142;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4143 = x4133 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4144 = (x4143 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4144);
            reg = x4144;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4145 = x4133 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4146 = (x4145 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4146);
            reg = x4146;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4147 = x4133 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x4148 = (x4147 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4148);
            reg = x4148;
          }
        }
        // loc("Top/Mux/4/Mux/5/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4149 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x4149 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4150 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x4150 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4151 = x4150 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4152 = x4149 + x4151;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4153 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x4153 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4154 = x4153 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4155 = x4152 + x4154;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4156 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x4156 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4157 = x4156 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4158 = x4155 + x4157;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4159 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x4159 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4160 = x4159 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4161 = x4158 + x4160;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4162 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x4162 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4163 = x4162 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4164 = x4161 + x4163;
        // loc("Top/Mux/4/Mux/5/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4165 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x4165 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x4166 = x4165 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x4167 = x4164 + x4166;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x4168 = x4167 - x4133;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x4168 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/hot[0](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4169 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4169 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/hot[2](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4170 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4170 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4171 = x4169 + x4170;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[3](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4172 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4172 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4173 = x4170 + x4172;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[4](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4174 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4174 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/OneHot/hot[5](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4175 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4175 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4176 = x4174 + x4175;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4177 = x4171 + x4175;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[6](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4178 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4178 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4179 = x4176 + x4178;
      // loc("Top/Mux/4/Mux/5/OneHot/hot[7](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4180 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4180 != Fp::invalid());
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4181 = x4178 + x4180;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4182 = x4179 + x4180;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4183 = x4177 + x4180;
      // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4184 = x4175 + x4180;
      // loc("cirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][189 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4183);
        reg = x4183;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][190 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4184);
        reg = x4184;
      }
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4185 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4185 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4186 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4186 != Fp::invalid());
      host_args.at(0) = x4181;
      host_args.at(1) = x4182;
      host_args.at(2) = x4185;
      host_args.at(3) = x4186;
      host_args.at(4) = x4173;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4187 = x4108 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4188 = x4111 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4189 = x4187 + x4188;
      // loc("cirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4190 = x4189 + x4114;
      // loc("cirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4191 = x4190 + x48;
      {
        host_args.at(0) = x4191;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4192 = host_outs.at(0);
        auto x4193 = host_outs.at(1);
        auto x4194 = host_outs.at(2);
        auto x4195 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4192);
          reg = x4192;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4193);
          reg = x4193;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4194);
          reg = x4194;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4195);
          reg = x4195;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4196 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4196 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4197 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4197 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4198 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4198 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4199 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4199 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4191);
        reg = x4191;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4041);
        reg = x4041;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4196);
        reg = x4196;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4197);
        reg = x4197;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4198);
        reg = x4198;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4199);
        reg = x4199;
      }
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4200 = x4097 * x59;
      // loc("cirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4201 = x4200 + x4106;
      // loc("cirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4202 = x4201 + x48;
      {
        host_args.at(0) = x4202;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4203 = host_outs.at(0);
        auto x4204 = host_outs.at(1);
        auto x4205 = host_outs.at(2);
        auto x4206 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4203);
          reg = x4203;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4204);
          reg = x4204;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4205);
          reg = x4205;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4206);
          reg = x4206;
        }
      }
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4207 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4207 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4208 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4208 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4209 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4209 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4210 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4210 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4202);
        reg = x4202;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4041);
        reg = x4041;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4207);
        reg = x4207;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4208);
        reg = x4208;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4209);
        reg = x4209;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4210);
        reg = x4210;
      }
      host_args.at(0) = x4190;
      host_args.at(1) = x4196;
      host_args.at(2) = x4197;
      host_args.at(3) = x4198;
      host_args.at(4) = x4199;
      host_args.at(5) = x4201;
      host_args.at(6) = x4207;
      host_args.at(7) = x4208;
      host_args.at(8) = x4209;
      host_args.at(9) = x4210;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4211 = x4090 * x64;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4212 = x4093 * x61;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4213 = x4211 + x4212;
      // loc("cirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4214 = x4213 + x4201;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4215 = x4181 * x4214;
      // loc("cirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4216 = x95 - x4181;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4217 = x4216 * x4207;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4218 = x4215 + x4217;
      {
        // loc("cirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4219 = Fp(x4218.asUInt32() & x34.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4220 = x4219 * x54;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4220);
          reg = x4220;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4221 = Fp(x4218.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4222 = x4221 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4222);
          reg = x4222;
        }
        // loc("cirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4223 = Fp(x4218.asUInt32() & x33.asUInt32());
        {
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4224 = Fp(x4223.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4224);
            reg = x4224;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4225 = Fp(x4223.asUInt32() & x92.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4226 = x4225 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4226);
            reg = x4226;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4227 = Fp(x4223.asUInt32() & x77.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4228 = x4227 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4228);
            reg = x4228;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4229 = Fp(x4223.asUInt32() & x70.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4230 = x4229 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4230);
            reg = x4230;
          }
          // loc("cirgen/components/u32.cpp":187:21)
          auto x4231 = Fp(x4223.asUInt32() & x59.asUInt32());
          // loc("cirgen/components/u32.cpp":187:20)
          auto x4232 = x4231 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4232);
            reg = x4232;
          }
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4233 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x4233 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:21)
          auto x4234 = x4233 * x32;
          // loc("cirgen/components/u32.cpp":189:17)
          auto x4235 = x4234 + x95;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4236 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x4236 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:42)
          auto x4237 = x4236 * x76;
          // loc("cirgen/components/u32.cpp":189:38)
          auto x4238 = x4237 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4239 = x4235 * x4238;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4240 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x4240 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":189:58)
          auto x4241 = x4240 + x95;
          // loc("cirgen/components/u32.cpp":189:16)
          auto x4242 = x4239 * x4241;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4243 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x4243 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4244 = x4243 * x92;
          // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x4245 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x4245 != Fp::invalid());
          // loc("cirgen/components/u32.cpp":190:15)
          auto x4246 = x4244 + x4245;
          // loc("cirgen/components/u32.cpp":192:13)
          auto x4247 = (x4246 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:9)
          auto x4248 = x4247 * x4242;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4249 = x4246 - x95;
          // loc("cirgen/components/u32.cpp":192:34)
          auto x4250 = (x4249 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:30)
          auto x4251 = x4250 * x4242;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4252 = x4246 - x92;
          // loc("cirgen/components/u32.cpp":192:55)
          auto x4253 = (x4252 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:51)
          auto x4254 = x4253 * x4242;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4255 = x4246 - x76;
          // loc("cirgen/components/u32.cpp":192:76)
          auto x4256 = (x4255 == 0) ? Fp(1) : Fp(0);
          // loc("cirgen/components/u32.cpp":192:72)
          auto x4257 = x4256 * x4242;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4248);
            reg = x4248;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4251);
            reg = x4251;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4254);
            reg = x4254;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4257);
            reg = x4257;
          }
        }
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4258 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x4258 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4259 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x4259 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4260 = x4259 * x92;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4261 = x4258 + x4260;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4262 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4262 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4263 = x4262 * x77;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4264 = x4261 + x4263;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4265 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4265 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4266 = x4265 * x70;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4267 = x4264 + x4266;
        // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4268 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4268 != Fp::invalid());
        // loc("cirgen/components/u32.cpp":201:17)
        auto x4269 = x4268 * x59;
        // loc("cirgen/components/u32.cpp":201:11)
        auto x4270 = x4267 + x4269;
        // loc("cirgen/components/u32.cpp":195:6)
        auto x4271 = x4270 - x4223;
        // loc("cirgen/components/u32.cpp":195:6)
        if (x4271 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:195");
      }
      // loc("Top/Mux/4/Mux/5/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4272 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4272 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4273 = x4272 * x55;
      // loc("Top/Mux/4/Mux/5/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4274 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4274 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4275 = x4274 * x61;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4276 = x4273 + x4275;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4277 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4277 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4278 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4278 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4279 = x4278 * x92;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4280 = x4277 + x4279;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4281 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4281 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4282 = x4281 * x77;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4283 = x4280 + x4282;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4284 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4284 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4285 = x4284 * x70;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4286 = x4283 + x4285;
      // loc("Top/Mux/4/Mux/5/U32Po2/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4287 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4287 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":201:17)
      auto x4288 = x4287 * x59;
      // loc("cirgen/components/u32.cpp":201:11)
      auto x4289 = x4286 + x4288;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4290 = x4276 + x4289;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4291 = x4218 - x4290;
      // loc("cirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4291 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4292 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4292 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4293 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4293 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4294 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4294 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/U32Po2/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4295 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4295 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4296 = x4182 * x4292;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4297 = x4182 * x4293;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4298 = x4182 * x4294;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4299 = x4182 * x4295;
      // loc("cirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4300 = x95 - x4182;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4301 = x4300 * x4207;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4302 = x4300 * x4208;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4303 = x4300 * x4209;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4304 = x4300 * x4210;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4305 = x4296 + x4301;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4306 = x4297 + x4302;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4307 = x4298 + x4303;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4308 = x4299 + x4304;
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4305);
        reg = x4305;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4306);
        reg = x4306;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4307);
        reg = x4307;
      }
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4308);
        reg = x4308;
      }
      {
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4309 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x4309 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4310 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x4310 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4311 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x4311 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
        auto x4312 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x4312 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4313 = x4185 + x4186;
        host_args.at(0) = x4196;
        host_args.at(1) = x4197;
        host_args.at(2) = x4198;
        host_args.at(3) = x4199;
        host_args.at(4) = x4309;
        host_args.at(5) = x4310;
        host_args.at(6) = x4311;
        host_args.at(7) = x4312;
        host_args.at(8) = x4313;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4314 = host_outs.at(0);
        auto x4315 = host_outs.at(1);
        auto x4316 = host_outs.at(2);
        auto x4317 = host_outs.at(3);
        auto x4318 = host_outs.at(4);
        auto x4319 = host_outs.at(5);
        auto x4320 = host_outs.at(6);
        auto x4321 = host_outs.at(7);
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4314);
          reg = x4314;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4318);
          reg = x4318;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4315);
          reg = x4315;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4319);
          reg = x4319;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4316);
          reg = x4316;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4320);
          reg = x4320;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4317);
          reg = x4317;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4321);
          reg = x4321;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4322 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4322 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4323 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4323 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4324 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4324 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4325 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4325 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4326 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4326 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4327 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4327 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4328 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x4328 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4329 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x4329 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4330 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x4330 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4331 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x4331 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4332 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x4332 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4333 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x4333 != Fp::invalid());
      host_args.at(0) = x4196;
      host_args.at(1) = x4197;
      host_args.at(2) = x4198;
      host_args.at(3) = x4199;
      host_args.at(4) = x4322;
      host_args.at(5) = x4323;
      host_args.at(6) = x4324;
      host_args.at(7) = x4325;
      host_args.at(8) = x4326;
      host_args.at(9) = x4327;
      host_args.at(10) = x4328;
      host_args.at(11) = x4329;
      host_args.at(12) = x4330;
      host_args.at(13) = x4331;
      host_args.at(14) = x4332;
      host_args.at(15) = x4333;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4334 = x4122 * x70;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4335 = x4125 * x92;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4336 = x4334 + x4335;
      // loc("cirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4337 = x4336 + x4128;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4338 = (x4337 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4338);
          reg = x4338;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4339 = inv(x4337);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4339);
          reg = x4339;
        }
      }
      // loc("Top/Mux/4/Mux/5/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4340 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4340 != Fp::invalid());
      if (x4340 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4337 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4341 = x95 - x4340;
      if (x4341 != 0) {
        // loc("Top/Mux/4/Mux/5/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4342 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4342 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4343 = x4337 * x4342;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4344 = x4343 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4344 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4345 = x4173 * x4341;
      if (x4345 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4346 = x4337 + x48;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4330);
          reg = x4330;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4331);
          reg = x4331;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4332);
          reg = x4332;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4333);
          reg = x4333;
        }
        {
          host_args.at(0) = x4346;
          host_args.at(1) = x4330;
          host_args.at(2) = x4331;
          host_args.at(3) = x4332;
          host_args.at(4) = x4333;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4347 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4348 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4349 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4349 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4350 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4350 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4041);
          reg = x4041;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4347);
          reg = x4347;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4349);
          reg = x4349;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4350);
          reg = x4350;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4351 = x95 - x4173;
      // loc("cirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4352 = x4351 * x4341;
      if (x4352 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4353 = x4337 + x48;
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4326);
          reg = x4326;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4327);
          reg = x4327;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4328);
          reg = x4328;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4329);
          reg = x4329;
        }
        {
          host_args.at(0) = x4353;
          host_args.at(1) = x4326;
          host_args.at(2) = x4327;
          host_args.at(3) = x4328;
          host_args.at(4) = x4329;
          host_args.at(5) = x92;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4354 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x4354 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4355 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x4355 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4356 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x4356 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x4357 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x4357 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4353);
          reg = x4353;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4041);
          reg = x4041;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x92);
          reg = x92;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4354);
          reg = x4354;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4355);
          reg = x4355;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4356);
          reg = x4356;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4357);
          reg = x4357;
        }
      }
      if (x4340 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4358 = x598 + x77;
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4359 = x4358 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4360 = Fp(x4359.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4360);
          reg = x4360;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4361 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4361 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4362 = x4359 - x4361;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4363 = x4362 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4364 = Fp(x4363.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4364);
          reg = x4364;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4365 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4365 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4366 = x4363 - x4365;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4367 = x4366 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4368 = Fp(x4367.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4368);
          reg = x4368;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4369 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4369 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4370 = x4367 - x4369;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4371 = x4370 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4372 = Fp(x4371.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4372);
          reg = x4372;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4373 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4373 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4374 = x4371 - x4373;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4375 = x4374 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4375);
        reg = x4375;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4376 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4376 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4377 = x95 - x4376;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4378 = x4376 * x4377;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4378);
        reg = x4378;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4379 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4379 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4380 = x92 - x4376;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4381 = x4379 * x4380;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4381 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x71);
        reg = x71;
      }
      if (x4169 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4382 = x4130 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4382 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4383 = x4119 - x77;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4383 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4384 = x4095 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4384 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/Mux/4/Mux/5/OneHot/hot[1](Reg)"("./cirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4385 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4385 != Fp::invalid());
      if (x4385 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4386 = x4130 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4386 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4387 = x4119 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4387 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4388 = x4095 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4388 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4170 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4389 = x4130 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4389 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4390 = x4119 - x72;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4390 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4391 = x4095 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4391 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4172 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4392 = x4130 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4392 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4393 = x4119 - x71;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4393 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4394 = x4095 - x95;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4394 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4174 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4395 = x4130 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4395 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4396 = x4119 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4396 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4095 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4175 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4397 = x4130 - x45;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4397 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4398 = x4119 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4398 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4399 = x4095 - x61;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4399 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4178 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4400 = x4130 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4400 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4401 = x4119 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4401 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4095 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4180 != 0) {
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4402 = x4130 - x44;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4402 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4403 = x4119 - x73;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4403 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4404 = x4095 - x61;
        // loc("./cirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4404 != 0) throw std::runtime_error("eqz failed at: ./cirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4405 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x4405 != Fp::invalid());
    if (x4405 != 0) {
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4406 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4406 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4407 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4407 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4408 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4408 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4409 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4409 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4410 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x4410 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4411 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x4411 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4412 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x4412 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4413 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x4413 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4414 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x4414 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4415 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x4415 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4416 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x4416 != Fp::invalid());
      // loc("Top/Mux/4/Mux/0/ComputeCycle/ALU/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4417 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x4417 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4418 = Fp(x4406.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4418);
          reg = x4418;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4419 = Fp(x4410.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4419);
          reg = x4419;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4420 = Fp(x4406.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4421 = x4420 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4421);
          reg = x4421;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4422 = Fp(x4410.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4423 = x4422 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4423);
          reg = x4423;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4424 = Fp(x4406.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4425 = x4424 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4425);
          reg = x4425;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4426 = Fp(x4410.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4427 = x4426 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4427);
          reg = x4427;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4428 = Fp(x4406.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4429 = x4428 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4429);
          reg = x4429;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4430 = Fp(x4410.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4431 = x4430 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4431);
          reg = x4431;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4432 = Fp(x4406.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4433 = x4432 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4433);
          reg = x4433;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4434 = Fp(x4410.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4435 = x4434 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4435);
          reg = x4435;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4436 = Fp(x4406.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4437 = x4436 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4437);
          reg = x4437;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4438 = Fp(x4410.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4439 = x4438 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4439);
          reg = x4439;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4440 = Fp(x4406.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4441 = x4440 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4441);
          reg = x4441;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4442 = Fp(x4410.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4443 = x4442 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4443);
          reg = x4443;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4444 = Fp(x4406.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4445 = x4444 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4445);
          reg = x4445;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4446 = Fp(x4410.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4447 = x4446 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4447);
          reg = x4447;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4448 = Fp(x4407.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4448);
          reg = x4448;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4449 = Fp(x4411.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4449);
          reg = x4449;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4450 = Fp(x4407.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4451 = x4450 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4451);
          reg = x4451;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4452 = Fp(x4411.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4453 = x4452 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4453);
          reg = x4453;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4454 = Fp(x4407.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4455 = x4454 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4455);
          reg = x4455;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4456 = Fp(x4411.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4457 = x4456 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4457);
          reg = x4457;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4458 = Fp(x4407.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4459 = x4458 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4459);
          reg = x4459;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4460 = Fp(x4411.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4461 = x4460 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4461);
          reg = x4461;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4462 = Fp(x4407.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4463 = x4462 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4463);
          reg = x4463;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4464 = Fp(x4411.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4465 = x4464 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4465);
          reg = x4465;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4466 = Fp(x4407.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4467 = x4466 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4467);
          reg = x4467;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4468 = Fp(x4411.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4469 = x4468 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4469);
          reg = x4469;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4470 = Fp(x4407.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4471 = x4470 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4471);
          reg = x4471;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4472 = Fp(x4411.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4473 = x4472 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4473);
          reg = x4473;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4474 = Fp(x4407.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4475 = x4474 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4475);
          reg = x4475;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4476 = Fp(x4411.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4477 = x4476 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4477);
          reg = x4477;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4478 = Fp(x4408.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4478);
          reg = x4478;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4479 = Fp(x4412.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4479);
          reg = x4479;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4480 = Fp(x4408.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4481 = x4480 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4481);
          reg = x4481;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4482 = Fp(x4412.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4483 = x4482 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4483);
          reg = x4483;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4484 = Fp(x4408.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4485 = x4484 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4486 = Fp(x4412.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4487 = x4486 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4487);
          reg = x4487;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4488 = Fp(x4408.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4489 = x4488 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4489);
          reg = x4489;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4490 = Fp(x4412.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4491 = x4490 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4491);
          reg = x4491;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4492 = Fp(x4408.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4493 = x4492 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4493);
          reg = x4493;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4494 = Fp(x4412.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4495 = x4494 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4495);
          reg = x4495;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4496 = Fp(x4408.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4497 = x4496 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4497);
          reg = x4497;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4498 = Fp(x4412.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4499 = x4498 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4499);
          reg = x4499;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4500 = Fp(x4408.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4501 = x4500 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4502 = Fp(x4412.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4503 = x4502 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4503);
          reg = x4503;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4504 = Fp(x4408.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4505 = x4504 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4505);
          reg = x4505;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4506 = Fp(x4412.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4507 = x4506 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4507);
          reg = x4507;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4508 = Fp(x4409.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4508);
          reg = x4508;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4509 = Fp(x4413.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4509);
          reg = x4509;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4510 = Fp(x4409.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4511 = x4510 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4511);
          reg = x4511;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4512 = Fp(x4413.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4513 = x4512 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4513);
          reg = x4513;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4514 = Fp(x4409.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4515 = x4514 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4515);
          reg = x4515;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4516 = Fp(x4413.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4517 = x4516 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4517);
          reg = x4517;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4518 = Fp(x4409.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4519 = x4518 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4519);
          reg = x4519;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4520 = Fp(x4413.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4521 = x4520 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4521);
          reg = x4521;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4522 = Fp(x4409.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4523 = x4522 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4523);
          reg = x4523;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4524 = Fp(x4413.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4525 = x4524 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4525);
          reg = x4525;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4526 = Fp(x4409.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4527 = x4526 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4527);
          reg = x4527;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4528 = Fp(x4413.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4529 = x4528 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4529);
          reg = x4529;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4530 = Fp(x4409.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4531 = x4530 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4531);
          reg = x4531;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4532 = Fp(x4413.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4533 = x4532 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4533);
          reg = x4533;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":210:37)
        auto x4534 = Fp(x4409.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":210:36)
        auto x4535 = x4534 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4535);
          reg = x4535;
        }
        // loc("cirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4536 = Fp(x4413.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4537 = x4536 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4537);
          reg = x4537;
        }
      }
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4538 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4539 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x4539 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4540 = x4538 * x4539;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4541 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4542 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x4542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4543 = x4541 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4544 = x4538 + x4543;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4545 = x4542 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4546 = x4539 + x4545;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4547 = x4541 * x4542;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4548 = x4547 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4549 = x4540 + x4548;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4550 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4551 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x4551 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4552 = x4550 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4553 = x4544 + x4552;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4554 = x4551 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4555 = x4546 + x4554;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4556 = x4550 * x4551;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4557 = x4556 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4558 = x4549 + x4557;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4559 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4560 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x4560 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4561 = x4559 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4562 = x4553 + x4561;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4563 = x4560 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4564 = x4555 + x4563;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4565 = x4559 * x4560;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4566 = x4565 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4567 = x4558 + x4566;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4568 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4569 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x4569 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4570 = x4568 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4571 = x4562 + x4570;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4572 = x4569 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4573 = x4564 + x4572;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4574 = x4568 * x4569;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4575 = x4574 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4576 = x4567 + x4575;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4577 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4578 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x4578 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4579 = x4577 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4580 = x4571 + x4579;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4581 = x4578 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4582 = x4573 + x4581;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4583 = x4577 * x4578;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4584 = x4583 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4585 = x4576 + x4584;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4586 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x4586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4587 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x4587 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4588 = x4586 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4589 = x4580 + x4588;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4590 = x4587 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4591 = x4582 + x4590;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4592 = x4586 * x4587;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4593 = x4592 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4594 = x4585 + x4593;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4595 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4596 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x4596 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4597 = x4595 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4598 = x4589 + x4597;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4599 = x4596 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4600 = x4591 + x4599;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4601 = x4595 * x4596;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4602 = x4601 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4603 = x4594 + x4602;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4604 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4605 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4605 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4606 = x4604 * x4605;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4607 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4608 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4608 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4609 = x4607 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4610 = x4604 + x4609;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4611 = x4608 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4612 = x4605 + x4611;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4613 = x4607 * x4608;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4614 = x4613 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4615 = x4606 + x4614;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4616 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4617 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4617 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4618 = x4616 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4619 = x4610 + x4618;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4620 = x4617 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4621 = x4612 + x4620;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4622 = x4616 * x4617;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4623 = x4622 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4624 = x4615 + x4623;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4625 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4626 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4626 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4627 = x4625 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4628 = x4619 + x4627;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4629 = x4626 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4630 = x4621 + x4629;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4631 = x4625 * x4626;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4632 = x4631 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4633 = x4624 + x4632;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4634 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4635 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4635 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4636 = x4634 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4637 = x4628 + x4636;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4638 = x4635 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4639 = x4630 + x4638;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4640 = x4634 * x4635;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4641 = x4640 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4642 = x4633 + x4641;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4643 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4644 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4644 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4645 = x4643 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4646 = x4637 + x4645;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4647 = x4644 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4648 = x4639 + x4647;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4649 = x4643 * x4644;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4650 = x4649 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4651 = x4642 + x4650;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4652 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4653 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4653 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4654 = x4652 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4655 = x4646 + x4654;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4656 = x4653 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4657 = x4648 + x4656;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4658 = x4652 * x4653;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4659 = x4658 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4660 = x4651 + x4659;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4661 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4662 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4662 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4663 = x4661 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4664 = x4655 + x4663;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4665 = x4662 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4666 = x4657 + x4665;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4667 = x4661 * x4662;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4668 = x4667 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4669 = x4660 + x4668;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4670 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4671 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4671 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4672 = x4670 * x4671;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4673 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4674 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4674 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4675 = x4673 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4676 = x4670 + x4675;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4677 = x4674 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4678 = x4671 + x4677;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4679 = x4673 * x4674;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4680 = x4679 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4681 = x4672 + x4680;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4682 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4683 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4683 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4684 = x4682 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4685 = x4676 + x4684;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4686 = x4683 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4687 = x4678 + x4686;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4688 = x4682 * x4683;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4689 = x4688 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4690 = x4681 + x4689;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4691 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4692 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4692 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4693 = x4691 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4694 = x4685 + x4693;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4695 = x4692 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4696 = x4687 + x4695;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4697 = x4691 * x4692;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4698 = x4697 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4699 = x4690 + x4698;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4700 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4701 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4701 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4702 = x4700 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4703 = x4694 + x4702;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4704 = x4701 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4705 = x4696 + x4704;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4706 = x4700 * x4701;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4707 = x4706 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4708 = x4699 + x4707;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4709 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4710 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4710 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4711 = x4709 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4712 = x4703 + x4711;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4713 = x4710 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4714 = x4705 + x4713;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4715 = x4709 * x4710;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4716 = x4715 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4717 = x4708 + x4716;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4718 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4719 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4719 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4720 = x4718 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4721 = x4712 + x4720;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4722 = x4719 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4723 = x4714 + x4722;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4724 = x4718 * x4719;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4725 = x4724 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4726 = x4717 + x4725;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4727 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4728 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4728 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4729 = x4727 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4730 = x4721 + x4729;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4731 = x4728 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4732 = x4723 + x4731;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4733 = x4727 * x4728;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4734 = x4733 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4735 = x4726 + x4734;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4736 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4737 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4737 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4738 = x4736 * x4737;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4739 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4740 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4740 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4741 = x4739 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4742 = x4736 + x4741;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4743 = x4740 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4744 = x4737 + x4743;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4745 = x4739 * x4740;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4746 = x4745 * x92;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4747 = x4738 + x4746;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4748 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4749 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4749 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4750 = x4748 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4751 = x4742 + x4750;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4752 = x4749 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4753 = x4744 + x4752;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4754 = x4748 * x4749;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4755 = x4754 * x77;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4756 = x4747 + x4755;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4757 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4758 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4758 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4759 = x4757 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4760 = x4751 + x4759;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4761 = x4758 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4762 = x4753 + x4761;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4763 = x4757 * x4758;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4764 = x4763 * x70;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4765 = x4756 + x4764;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4766 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4767 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4767 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4768 = x4766 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4769 = x4760 + x4768;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4770 = x4767 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4771 = x4762 + x4770;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4772 = x4766 * x4767;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4773 = x4772 * x59;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4774 = x4765 + x4773;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4775 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4776 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4776 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4777 = x4775 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4778 = x4769 + x4777;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4779 = x4776 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4780 = x4771 + x4779;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4781 = x4775 * x4776;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4782 = x4781 * x61;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4783 = x4774 + x4782;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4784 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4784 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4785 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x4785 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4786 = x4784 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4787 = x4778 + x4786;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4788 = x4785 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4789 = x4780 + x4788;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4790 = x4784 * x4785;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4791 = x4790 * x55;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4792 = x4783 + x4791;
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4793 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x4793 != Fp::invalid());
      // loc("Top/Mux/4/Mux/6/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4794 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4794 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/compute.cpp":222:41)
      auto x4795 = x4793 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":222:24)
      auto x4796 = x4787 + x4795;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4797 = x4794 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4798 = x4789 + x4797;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4799 = x4793 * x4794;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4800 = x4799 * x64;
      // loc("cirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4801 = x4792 + x4800;
      host_args.at(0) = x4406;
      host_args.at(1) = x4407;
      host_args.at(2) = x4408;
      host_args.at(3) = x4409;
      host_args.at(4) = x4598;
      host_args.at(5) = x4664;
      host_args.at(6) = x4730;
      host_args.at(7) = x4796;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4410;
      host_args.at(1) = x4411;
      host_args.at(2) = x4412;
      host_args.at(3) = x4413;
      host_args.at(4) = x4600;
      host_args.at(5) = x4666;
      host_args.at(6) = x4732;
      host_args.at(7) = x4798;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4414;
      host_args.at(1) = x4415;
      host_args.at(2) = x4416;
      host_args.at(3) = x4417;
      host_args.at(4) = x4603;
      host_args.at(5) = x4669;
      host_args.at(6) = x4735;
      host_args.at(7) = x4801;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4802 = x4406 - x4598;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4802 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4803 = x4407 - x4664;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4803 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4804 = x4408 - x4730;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4804 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      auto x4805 = x4409 - x4796;
      // loc("cirgen/circuit/rv32im/compute.cpp":230:3)
      if (x4805 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:230");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4806 = x4410 - x4600;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4806 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4807 = x4411 - x4666;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4807 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4808 = x4412 - x4732;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4808 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      auto x4809 = x4413 - x4798;
      // loc("cirgen/circuit/rv32im/compute.cpp":231:3)
      if (x4809 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:231");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4810 = x4414 - x4603;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4810 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4811 = x4415 - x4669;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4811 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4812 = x4416 - x4735;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4812 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      auto x4813 = x4417 - x4801;
      // loc("cirgen/circuit/rv32im/compute.cpp":232:3)
      if (x4813 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/compute.cpp:232");
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x4814 = x598 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4815 = Fp(x4814.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4815);
          reg = x4815;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4816 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x4816 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4817 = x4814 - x4816;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4818 = x4817 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4819 = Fp(x4818.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4819);
          reg = x4819;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4820 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x4820 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4821 = x4818 - x4820;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4822 = x4821 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4823 = Fp(x4822.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4823);
          reg = x4823;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4824 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x4824 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4825 = x4822 - x4824;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4826 = x4825 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x4827 = Fp(x4826.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4827);
          reg = x4827;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4828 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x4828 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x4829 = x4826 - x4828;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x4830 = x4829 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4830);
        reg = x4830;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4831 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x4831 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x4832 = x95 - x4831;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x4833 = x4831 * x4832;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4833);
        reg = x4833;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4834 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x4834 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x4835 = x92 - x4831;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x4836 = x4834 * x4835;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x4836 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/compute.cpp":235:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x80);
        reg = x80;
      }
    }
    // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/components/mux.h":39:25))
    auto x4837 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x4837 != Fp::invalid());
    if (x4837 != 0) {
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4838 = args[2][118 * steps + ((cycle - 1) & mask)];
      assert(x4838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4839 = args[2][119 * steps + ((cycle - 1) & mask)];
      assert(x4839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4840 = args[2][120 * steps + ((cycle - 1) & mask)];
      assert(x4840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4841 = args[2][121 * steps + ((cycle - 1) & mask)];
      assert(x4841 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4842 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x4842 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4843 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x4843 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4844 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x4844 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4845 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x4845 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4846 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x4846 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4847 = args[2][30 * steps + ((cycle - 1) & mask)];
      assert(x4847 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4848 = args[2][31 * steps + ((cycle - 1) & mask)];
      assert(x4848 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4849 = args[2][32 * steps + ((cycle - 1) & mask)];
      assert(x4849 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4850 = args[2][33 * steps + ((cycle - 1) & mask)];
      assert(x4850 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4851 = args[2][34 * steps + ((cycle - 1) & mask)];
      assert(x4851 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4852 = args[2][35 * steps + ((cycle - 1) & mask)];
      assert(x4852 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4853 = args[2][36 * steps + ((cycle - 1) & mask)];
      assert(x4853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":135:51))
      auto x4854 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x4854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/5/Reg"("cirgen/circuit/rv32im/divide.cpp":136:51))
      auto x4855 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x4855 != Fp::invalid());
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4856 = Fp(x4841.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4857 = x4856 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4857);
          reg = x4857;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4858 = Fp(x4841.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4859 = x4858 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4859);
          reg = x4859;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4860 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x4860 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4861 = x4860 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4862 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x4862 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4863 = x4862 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4864 = x4861 + x4863;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4865 = x4841 - x4864;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4865 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      {
        // loc("cirgen/components/u32.cpp":120:18)
        auto x4866 = Fp(x4845.asUInt32() & x64.asUInt32());
        // loc("cirgen/components/u32.cpp":120:17)
        auto x4867 = x4866 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4867);
          reg = x4867;
        }
        // loc("cirgen/components/u32.cpp":121:25)
        auto x4868 = Fp(x4845.asUInt32() & x52.asUInt32());
        // loc("cirgen/components/u32.cpp":121:24)
        auto x4869 = x4868 * x92;
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4869);
          reg = x4869;
        }
      }
      // loc("Top/Mux/4/Mux/7/TopBit/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4870 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x4870 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4871 = x4870 * x64;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x4872 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x4872 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":123:34)
      auto x4873 = x4872 * x56;
      // loc("cirgen/components/u32.cpp":123:19)
      auto x4874 = x4871 + x4873;
      // loc("cirgen/components/u32.cpp":123:6)
      auto x4875 = x4845 - x4874;
      // loc("cirgen/components/u32.cpp":123:6)
      if (x4875 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:123");
      // loc("cirgen/circuit/rv32im/divide.cpp":139:17)
      auto x4876 = x4854 * x4860;
      // loc("cirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4876);
        reg = x4876;
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":140:29)
      auto x4877 = x95 - x4855;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4878 = x4854 * x4877;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:17)
      auto x4879 = x4878 * x4870;
      // loc("cirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4879);
        reg = x4879;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4880 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x4880 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":142:47)
      auto x4881 = x95 - x4880;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4882 = x4881 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4883 = x4881 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4884 = x4881 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4885 = x4881 * x4841;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4886 = x4882 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4887 = x4883 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4888 = x4884 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4889 = x4885 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4890 = x4880 * x4838;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4891 = x4880 * x4839;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4892 = x4880 * x4840;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4893 = x4880 * x4841;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4894 = x4886 - x4890;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4895 = x4887 - x4891;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4896 = x4888 - x4892;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4897 = x4889 - x4893;
      // loc("cirgen/circuit/rv32im/divide.cpp":143:17)
      auto x4898 = x4880 * x4855;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4899 = x4894 - x4898;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4900 = x4895 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4901 = x4899 + x4900;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4902 = Fp(x4901.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4902);
          reg = x4902;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4903 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x4903 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4904 = x4901 - x4903;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4905 = x4904 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4906 = Fp(x4905.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4906);
          reg = x4906;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4907 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x4907 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4908 = x4905 - x4907;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4909 = x4908 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4909);
        reg = x4909;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4910 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x4910 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4911 = x4910 + x4896;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4912 = x4897 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4913 = x4911 + x4912;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4914 = Fp(x4913.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4914);
          reg = x4914;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4915 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x4915 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4916 = x4913 - x4915;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4917 = x4916 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4918 = Fp(x4917.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4918);
          reg = x4918;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4919 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4919 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4920 = x4917 - x4919;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4921 = x4920 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4921);
        reg = x4921;
      }
      host_args.at(0) = x4838;
      host_args.at(1) = x4839;
      host_args.at(2) = x4840;
      host_args.at(3) = x4841;
      host_args.at(4) = x4903;
      host_args.at(5) = x4907;
      host_args.at(6) = x4915;
      host_args.at(7) = x4919;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4922 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x4922 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":145:47)
      auto x4923 = x95 - x4922;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4924 = x4923 * x4842;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4925 = x4923 * x4843;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4926 = x4923 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4927 = x4923 * x4845;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4928 = x4924 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4929 = x4925 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4930 = x4926 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4931 = x4927 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4932 = x4922 * x4842;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4933 = x4922 * x4843;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4934 = x4922 * x4844;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4935 = x4922 * x4845;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4936 = x4928 - x4932;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4937 = x4929 - x4933;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4938 = x4930 - x4934;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4939 = x4931 - x4935;
      // loc("cirgen/circuit/rv32im/divide.cpp":146:17)
      auto x4940 = x4922 * x4855;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x4941 = x4936 - x4940;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x4942 = x4937 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x4943 = x4941 + x4942;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4944 = Fp(x4943.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4944);
          reg = x4944;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4945 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4945 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4946 = x4943 - x4945;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4947 = x4946 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4948 = Fp(x4947.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4948);
          reg = x4948;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4949 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4949 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4950 = x4947 - x4949;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4951 = x4950 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4951);
        reg = x4951;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4952 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4952 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4953 = x4952 + x4938;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x4954 = x4939 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x4955 = x4953 + x4954;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4956 = Fp(x4955.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4956);
          reg = x4956;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4957 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4957 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4958 = x4955 - x4957;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4959 = x4958 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x4960 = Fp(x4959.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4960);
          reg = x4960;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x4961 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4961 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x4962 = x4959 - x4961;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x4963 = x4962 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4963);
        reg = x4963;
      }
      host_args.at(0) = x4842;
      host_args.at(1) = x4843;
      host_args.at(2) = x4844;
      host_args.at(3) = x4845;
      host_args.at(4) = x4945;
      host_args.at(5) = x4949;
      host_args.at(6) = x4957;
      host_args.at(7) = x4961;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":137:26)
      auto x4964 = x4949 * x90;
      // loc("cirgen/components/u32.cpp":137:12)
      auto x4965 = x4945 + x4964;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4966 = (x4965 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4966);
          reg = x4966;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4967 = inv(x4965);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4967);
          reg = x4967;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4968 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x4968 != Fp::invalid());
      if (x4968 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4965 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4969 = x95 - x4968;
      if (x4969 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4970 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x4970 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4971 = x4965 * x4970;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4972 = x4971 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4972 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/components/u32.cpp":138:27)
      auto x4973 = x4961 * x90;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4974 = x4957 + x4973;
      // loc("cirgen/components/u32.cpp":138:47)
      auto x4975 = x4969 * x79;
      // loc("cirgen/components/u32.cpp":138:13)
      auto x4976 = x4974 + x4975;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x4977 = (x4976 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4977);
          reg = x4977;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x4978 = inv(x4976);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4978);
          reg = x4978;
        }
      }
      // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x4979 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x4979 != Fp::invalid());
      if (x4979 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x4976 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x4980 = x95 - x4979;
      if (x4980 != 0) {
        // loc("Top/Mux/4/Mux/7/IsZeroU32/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x4981 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x4981 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4982 = x4976 * x4981;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x4983 = x4982 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x4983 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4984 = x4880 + x4922;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4985 = x4880 * x92;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:38)
      auto x4986 = x4985 * x4922;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4987 = x4984 - x4986;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:64)
      auto x4988 = x4979 * x4880;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:16)
      auto x4989 = x4987 - x4988;
      // loc("cirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4989);
        reg = x4989;
      }
      // loc("Top/Mux/4/Mux/7/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x4990 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x4990 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/divide.cpp":151:46)
      auto x4991 = x95 - x4990;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4992 = x4991 * x4846;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4993 = x4991 * x4847;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4994 = x4991 * x4848;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x4995 = x4991 * x4849;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4996 = x4992 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4997 = x4993 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4998 = x4994 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x4999 = x4995 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5000 = x4990 * x4846;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5001 = x4990 * x4847;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5002 = x4990 * x4848;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5003 = x4990 * x4849;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5004 = x4996 - x5000;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5005 = x4997 - x5001;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5006 = x4998 - x5002;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5007 = x4999 - x5003;
      // loc("cirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5008 = x4990 * x4855;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5009 = x5004 - x5008;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5010 = x5005 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5011 = x5009 + x5010;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5012 = Fp(x5011.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5012);
          reg = x5012;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5013 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5013 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5014 = x5011 - x5013;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5015 = x5014 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5016 = Fp(x5015.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5016);
          reg = x5016;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5017 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5017 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5018 = x5015 - x5017;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5019 = x5018 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5019);
        reg = x5019;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5020 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5020 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5021 = x5020 + x5006;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5022 = x5007 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5023 = x5021 + x5022;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5024 = Fp(x5023.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5024);
          reg = x5024;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5025 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5025 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5026 = x5023 - x5025;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5027 = x5026 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5028 = Fp(x5027.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5028);
          reg = x5028;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5029 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5029 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5030 = x5027 - x5029;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5031 = x5030 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5031);
        reg = x5031;
      }
      host_args.at(0) = x4846;
      host_args.at(1) = x4847;
      host_args.at(2) = x4848;
      host_args.at(3) = x4849;
      host_args.at(4) = x5013;
      host_args.at(5) = x5017;
      host_args.at(6) = x5025;
      host_args.at(7) = x5029;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5032 = x4881 * x4850;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5033 = x4881 * x4851;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5034 = x4881 * x4852;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5035 = x4881 * x4853;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5036 = x5032 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5037 = x5033 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5038 = x5034 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5039 = x5035 + x91;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5040 = x4880 * x4850;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5041 = x4880 * x4851;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5042 = x4880 * x4852;
      // loc("cirgen/components/u32.cpp":105:20)
      auto x5043 = x4880 * x4853;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5044 = x5036 - x5040;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5045 = x5037 - x5041;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5046 = x5038 - x5042;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5047 = x5039 - x5043;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5048 = x5044 - x4898;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5049 = x5045 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5050 = x5048 + x5049;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5051 = Fp(x5050.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5051);
          reg = x5051;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5052 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5052 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5053 = x5050 - x5052;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5054 = x5053 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5055 = Fp(x5054.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5055);
          reg = x5055;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5056 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5056 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5057 = x5054 - x5056;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5058 = x5057 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5058);
        reg = x5058;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5059 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5059 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5060 = x5059 + x5046;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5061 = x5047 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5062 = x5060 + x5061;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5063 = Fp(x5062.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5063);
          reg = x5063;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5064 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5064 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5065 = x5062 - x5064;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5066 = x5065 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5067 = Fp(x5066.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5067);
          reg = x5067;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5068 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5068 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5069 = x5066 - x5068;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5070 = x5069 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5070);
        reg = x5070;
      }
      host_args.at(0) = x4850;
      host_args.at(1) = x4851;
      host_args.at(2) = x4852;
      host_args.at(3) = x4853;
      host_args.at(4) = x5052;
      host_args.at(5) = x5056;
      host_args.at(6) = x5064;
      host_args.at(7) = x5068;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5071 = x4945 + x90;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5072 = x4949 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5073 = x4957 + x91;
      // loc("cirgen/components/u32.cpp":89:20)
      auto x5074 = x4961 + x91;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5075 = x5071 - x95;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5076 = x5075 - x5052;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5077 = x5072 - x5056;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5078 = x5073 - x5064;
      // loc("cirgen/components/u32.cpp":97:20)
      auto x5079 = x5074 - x5068;
      // loc("cirgen/components/u32.cpp":146:29)
      auto x5080 = x5077 * x90;
      // loc("cirgen/components/u32.cpp":146:15)
      auto x5081 = x5076 + x5080;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5082 = Fp(x5081.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5082);
          reg = x5082;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5083 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5083 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5084 = x5081 - x5083;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5085 = x5084 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5086 = Fp(x5085.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5086);
          reg = x5086;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5087 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5087 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5088 = x5085 - x5087;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5089 = x5088 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5089);
        reg = x5089;
      }
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5090 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5090 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5091 = x5090 + x5078;
      // loc("cirgen/components/u32.cpp":148:41)
      auto x5092 = x5079 * x90;
      // loc("cirgen/components/u32.cpp":148:16)
      auto x5093 = x5091 + x5092;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5094 = Fp(x5093.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5094);
          reg = x5094;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5095 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5095 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5096 = x5093 - x5095;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5097 = x5096 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5098 = Fp(x5097.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5098);
          reg = x5098;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5099 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5099 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5100 = x5097 - x5099;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5101 = x5100 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5101);
        reg = x5101;
      }
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5102 = x5013 * x4945;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5103 = x5102 + x5052;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5104 = x5013 * x4949;
      // loc("cirgen/components/u32.cpp":261:51)
      auto x5105 = x5017 * x4945;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5106 = x5104 + x5105;
      // loc("cirgen/components/u32.cpp":261:21)
      auto x5107 = x5106 + x5056;
      // loc("cirgen/components/u32.cpp":261:14)
      auto x5108 = x5107 * x90;
      // loc("cirgen/components/u32.cpp":260:14)
      auto x5109 = x5103 + x5108;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5110 = Fp(x5109.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5110);
          reg = x5110;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5111 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5111 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5112 = x5109 - x5111;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5113 = x5112 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5114 = Fp(x5113.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5114);
          reg = x5114;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5115 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5115 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5116 = x5113 - x5115;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5117 = x5116 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5118 = Fp(x5117.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5118);
          reg = x5118;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5119 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5119 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5120 = x5117 - x5119;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5121 = x5120 * x89;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5121);
        reg = x5121;
      }
      // loc("Top/Mux/4/Mux/7/U32MulAcc/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5122 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5122 != Fp::invalid());
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5123 = x5122 * x90;
      // loc("cirgen/components/u32.cpp":264:15)
      auto x5124 = x5123 + x5119;
      // loc("cirgen/components/u32.cpp":266:7)
      auto x5125 = x5017 * x4961;
      // loc("cirgen/components/u32.cpp":266:7)
      if (x5125 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:266");
      // loc("cirgen/components/u32.cpp":267:7)
      auto x5126 = x5025 * x4957;
      // loc("cirgen/components/u32.cpp":267:7)
      if (x5126 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:267");
      // loc("cirgen/components/u32.cpp":268:7)
      auto x5127 = x5029 * x4949;
      // loc("cirgen/components/u32.cpp":268:7)
      if (x5127 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:268");
      // loc("cirgen/components/u32.cpp":269:7)
      auto x5128 = x5025 * x4961;
      // loc("cirgen/components/u32.cpp":269:7)
      if (x5128 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:269");
      // loc("cirgen/components/u32.cpp":270:7)
      auto x5129 = x5029 * x4957;
      // loc("cirgen/components/u32.cpp":270:7)
      if (x5129 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:270");
      // loc("cirgen/components/u32.cpp":271:7)
      auto x5130 = x5029 * x4961;
      // loc("cirgen/components/u32.cpp":271:7)
      if (x5130 != 0) throw std::runtime_error("eqz failed at: cirgen/components/u32.cpp:271");
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5131 = x5025 * x4945;
      // loc("cirgen/components/u32.cpp":273:45)
      auto x5132 = x5017 * x4949;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5133 = x5131 + x5132;
      // loc("cirgen/components/u32.cpp":274:15)
      auto x5134 = x5013 * x4957;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5135 = x5133 + x5134;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5136 = x5135 + x5064;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5137 = x5136 + x5124;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5138 = x5029 * x4945;
      // loc("cirgen/components/u32.cpp":275:52)
      auto x5139 = x5025 * x4949;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5140 = x5138 + x5139;
      // loc("cirgen/components/u32.cpp":276:22)
      auto x5141 = x5017 * x4957;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5142 = x5140 + x5141;
      // loc("cirgen/components/u32.cpp":276:52)
      auto x5143 = x5013 * x4961;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5144 = x5142 + x5143;
      // loc("cirgen/components/u32.cpp":275:22)
      auto x5145 = x5144 + x5068;
      // loc("cirgen/components/u32.cpp":275:15)
      auto x5146 = x5145 * x90;
      // loc("cirgen/components/u32.cpp":273:15)
      auto x5147 = x5137 + x5146;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5148 = Fp(x5147.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5148);
          reg = x5148;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5149 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5149 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5150 = x5147 - x5149;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5151 = x5150 * x89;
      // loc("cirgen/components/bytes.cpp":94:3)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5151);
        reg = x5151;
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":85:10))
      auto x5152 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5152 != Fp::invalid());
      // loc("Top/Mux/4/Mux/7/U32Normalize/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5153 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5153 != Fp::invalid());
      host_args.at(0) = x5111;
      host_args.at(1) = x5115;
      host_args.at(2) = x5149;
      host_args.at(3) = x5152;
      host_args.at(4) = x5153;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5154 = x5111 - x4903;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5154 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5155 = x5115 - x4907;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5155 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5156 = x5149 - x4915;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5156 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5157 = x5152 - x4919;
      // loc("cirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5157 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:161");
      if (x4980 != 0) {
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5158 = x5153 - x95;
        // loc("cirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5158 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5159 = x598 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5160 = Fp(x5159.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5160);
          reg = x5160;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5161 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5161 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5162 = x5159 - x5161;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5163 = x5162 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5164 = Fp(x5163.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5164);
          reg = x5164;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5165 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5165 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5166 = x5163 - x5165;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5167 = x5166 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5168 = Fp(x5167.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5168);
          reg = x5168;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5169 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5169 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5170 = x5167 - x5169;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5171 = x5170 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5172 = Fp(x5171.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5172);
          reg = x5172;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5173 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5173 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5174 = x5171 - x5173;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5175 = x5174 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5175);
        reg = x5175;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5176 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5177 = x95 - x5176;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5178 = x5176 * x5177;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5178);
        reg = x5178;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5179 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5180 = x92 - x5176;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5181 = x5179 * x5180;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5181 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("cirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][93 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x80);
        reg = x80;
      }
    }
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5182 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x5182 != Fp::invalid());
    if (x5182 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5183 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5183 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":128:41)
      auto x5184 = x598 * x75;
      {
        host_args.at(0) = x5184;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5185 = host_outs.at(0);
        auto x5186 = host_outs.at(1);
        auto x5187 = host_outs.at(2);
        auto x5188 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5185);
          reg = x5185;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5186);
          reg = x5186;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5187);
          reg = x5187;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5188);
          reg = x5188;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5189 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5189 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5190 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5190 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5191 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5191 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5192 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5192 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][108 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5184);
        reg = x5184;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][109 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5183);
        reg = x5183;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][110 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][111 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5189);
        reg = x5189;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][112 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5190);
        reg = x5190;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][113 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5191);
        reg = x5191;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][114 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5192);
        reg = x5192;
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":130:6)
      auto x5193 = x5189 - x29;
      // loc("cirgen/circuit/rv32im/ecall.cpp":130:6)
      if (x5193 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:130");
      // loc("cirgen/circuit/rv32im/ecall.cpp":131:7)
      if (x5190 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:131");
      // loc("cirgen/circuit/rv32im/ecall.cpp":132:7)
      if (x5191 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:132");
      // loc("cirgen/circuit/rv32im/ecall.cpp":133:7)
      if (x5192 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:133");
      {
        host_args.at(0) = x28;
        host_args.at(1) = x95;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5194 = host_outs.at(0);
        auto x5195 = host_outs.at(1);
        auto x5196 = host_outs.at(2);
        auto x5197 = host_outs.at(3);
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5194);
          reg = x5194;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5195);
          reg = x5195;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5196);
          reg = x5196;
        }
        // loc("cirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5197);
          reg = x5197;
        }
      }
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5198 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5198 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5199 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5199 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5200 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5200 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5201 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5201 != Fp::invalid());
      // loc("cirgen/components/ram.cpp":130:3)
      {
        auto& reg = args[2][115 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x28);
        reg = x28;
      }
      // loc("cirgen/components/ram.cpp":131:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5183);
        reg = x5183;
      }
      // loc("cirgen/components/ram.cpp":132:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5198);
        reg = x5198;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5199);
        reg = x5199;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5200);
        reg = x5200;
      }
      // loc("cirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5201);
        reg = x5201;
      }
      {
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5202 = (x5198 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5202);
          reg = x5202;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5203 = x5198 - x95;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5204 = (x5203 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5204);
          reg = x5204;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5205 = x5198 - x92;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5206 = (x5205 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5206);
          reg = x5206;
        }
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5207 = x5198 - x76;
        // loc("./cirgen/components/onehot.h":37:26)
        auto x5208 = (x5207 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5208);
          reg = x5208;
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5209 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5209 != Fp::invalid());
      // loc("Top/Mux/4/Mux/8/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5210 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5210 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5211 = x5210 * x92;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5212 = x5209 + x5211;
      // loc("Top/Mux/4/Mux/8/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5213 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5213 != Fp::invalid());
      // loc("./cirgen/components/onehot.h":46:19)
      auto x5214 = x5213 * x76;
      // loc("./cirgen/components/onehot.h":46:13)
      auto x5215 = x5212 + x5214;
      // loc("./cirgen/components/onehot.h":40:8)
      auto x5216 = x5215 - x5198;
      // loc("./cirgen/components/onehot.h":40:8)
      if (x5216 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      {
        // loc("cirgen/circuit/rv32im/ecall.cpp":140:47)
        auto x5217 = (x5215 == 0) ? Fp(1) : Fp(0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":140:47)
        auto x5218 = x95 - x5217;
        if (x5218 != 0) {
          host_args.at(0) = x5198;
          host_args.at(1) = x5199;
          host_args.at(2) = x5200;
          host_args.at(3) = x5201;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/Mux/4/Mux/8/OneHot/hot[0](Reg)"("./cirgen/components/mux.h":39:25))
      auto x5219 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5219 != Fp::invalid());
      if (x5219 != 0) {
        {
          host_args.at(0) = x5198;
          host_args.at(1) = x5199;
          host_args.at(2) = x5200;
          host_args.at(3) = x5201;
          host(ctx, "halt", "", host_args.data(), 4, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5220 = x598 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5221 = Fp(x5220.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5221);
            reg = x5221;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5222 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5222 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5223 = x5220 - x5222;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5224 = x5223 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5225 = Fp(x5224.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5225);
            reg = x5225;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5226 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5226 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5227 = x5224 - x5226;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5228 = x5227 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5229 = Fp(x5228.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5229);
            reg = x5229;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5230 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5230 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5231 = x5228 - x5230;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5232 = x5231 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5233 = Fp(x5232.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5233);
            reg = x5233;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5234 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5234 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5235 = x5232 - x5234;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5236 = x5235 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5236);
          reg = x5236;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5237 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5237 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5238 = x95 - x5237;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5239 = x5237 * x5238;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5239);
          reg = x5239;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5240 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5240 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5241 = x92 - x5237;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5242 = x5240 * x5241;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5242 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":24:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      if (x5209 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5243 = host_outs.at(0);
          auto x5244 = host_outs.at(1);
          auto x5245 = host_outs.at(2);
          auto x5246 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5243);
            reg = x5243;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5244);
            reg = x5244;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5245);
            reg = x5245;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5246);
            reg = x5246;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5247 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5247 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5248 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5248 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5249 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5249 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5250 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5250 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5248);
          reg = x5248;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5249);
          reg = x5249;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5250);
          reg = x5250;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5251 = host_outs.at(0);
          auto x5252 = host_outs.at(1);
          auto x5253 = host_outs.at(2);
          auto x5254 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5251);
            reg = x5251;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5252);
            reg = x5252;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5253);
            reg = x5253;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5254);
            reg = x5254;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5255 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5255 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5256 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5256 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5257 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5257 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5258 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5258 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5255);
          reg = x5255;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5256);
          reg = x5256;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5257);
          reg = x5257;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5258);
          reg = x5258;
        }
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5259 = (x5247 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5259);
            reg = x5259;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5260 = x5247 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5261 = (x5260 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5261);
            reg = x5261;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5262 = x5247 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5263 = (x5262 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5263);
            reg = x5263;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5264 = x5247 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5265 = (x5264 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5265);
            reg = x5265;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5266 = x5247 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5267 = (x5266 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5267);
            reg = x5267;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5268 = x5247 - x73;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5269 = (x5268 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5269);
            reg = x5269;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5270 = x5247 - x72;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5271 = (x5270 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5271);
            reg = x5271;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5272 = x5247 - x71;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5273 = (x5272 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5273);
            reg = x5273;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5274 = x5247 - x70;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x5275 = (x5274 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5275);
            reg = x5275;
          }
        }
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5276 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x5276 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5277 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x5277 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5278 = x5277 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5279 = x5276 + x5278;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5280 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x5280 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5281 = x5280 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5282 = x5279 + x5281;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5283 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x5283 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5284 = x5283 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5285 = x5282 + x5284;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5286 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x5286 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5287 = x5286 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5288 = x5285 + x5287;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5289 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x5289 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5290 = x5289 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5291 = x5288 + x5290;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5292 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x5292 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5293 = x5292 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5294 = x5291 + x5293;
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5295 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x5295 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5296 = x5295 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5297 = x5294 + x5296;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x5298 = x5297 - x5247;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x5298 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/4/Mux/8/Mux/1/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":43:24))
        auto x5299 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x5299 != Fp::invalid());
        if (x5299 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5300 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5301 = x5300 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][36] = x5301;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5302 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5303 = x5302 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][37] = x5303;
        }
        if (x5276 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5304 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5305 = x5304 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][38] = x5305;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5306 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5307 = x5306 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][39] = x5307;
        }
        if (x5277 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5308 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5309 = x5308 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][40] = x5309;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5310 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5311 = x5310 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][41] = x5311;
        }
        if (x5280 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5312 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5313 = x5312 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][42] = x5313;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5314 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5315 = x5314 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][43] = x5315;
        }
        if (x5283 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5316 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5317 = x5316 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][44] = x5317;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5318 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5319 = x5318 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][45] = x5319;
        }
        if (x5286 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5320 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5321 = x5320 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][46] = x5321;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5322 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5323 = x5322 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][47] = x5323;
        }
        if (x5289 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5324 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5325 = x5324 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][48] = x5325;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5326 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5327 = x5326 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][49] = x5327;
        }
        if (x5292 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5328 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5329 = x5328 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][50] = x5329;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5330 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5331 = x5330 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][51] = x5331;
        }
        if (x5295 != 0) {
          host_args.at(0) = x5297;
          host_args.at(1) = x5255;
          host_args.at(2) = x5256;
          host_args.at(3) = x5257;
          host_args.at(4) = x5258;
          host(ctx, "log", "  OUTPUT to %u: %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5332 = x5256 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:34)
          auto x5333 = x5332 + x5255;
          // loc("cirgen/circuit/rv32im/ecall.cpp":45:7)
          args[1][52] = x5333;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5334 = x5258 * x90;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:38)
          auto x5335 = x5334 + x5257;
          // loc("cirgen/circuit/rv32im/ecall.cpp":46:7)
          args[1][53] = x5335;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":50:17)
        auto x5336 = x598 + x77;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5337 = x5336 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5338 = Fp(x5337.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5338);
            reg = x5338;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5339 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5339 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5340 = x5337 - x5339;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5341 = x5340 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5342 = Fp(x5341.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5342);
            reg = x5342;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5343 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5343 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5344 = x5341 - x5343;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5345 = x5344 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5346 = Fp(x5345.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5346);
            reg = x5346;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5347 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5347 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5348 = x5345 - x5347;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5349 = x5348 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5350 = Fp(x5349.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5350);
            reg = x5350;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5351 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5351 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5352 = x5349 - x5351;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5353 = x5352 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5353);
          reg = x5353;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5354 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5354 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5355 = x95 - x5354;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5356 = x5354 * x5355;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5356);
          reg = x5356;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5357 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5357 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5358 = x92 - x5354;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5359 = x5357 * x5358;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5359 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":51:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
      }
      if (x5210 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5360 = host_outs.at(0);
          auto x5361 = host_outs.at(1);
          auto x5362 = host_outs.at(2);
          auto x5363 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5360);
            reg = x5360;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5361);
            reg = x5361;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5362);
            reg = x5362;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5363);
            reg = x5363;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5364 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5364 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5365 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5365 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5366 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5366 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5367 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5367 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5364);
          reg = x5364;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5365);
          reg = x5365;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5366);
          reg = x5366;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5367);
          reg = x5367;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5368 = host_outs.at(0);
          auto x5369 = host_outs.at(1);
          auto x5370 = host_outs.at(2);
          auto x5371 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5368);
            reg = x5368;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5369);
            reg = x5369;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5370);
            reg = x5370;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5371);
            reg = x5371;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5372 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5372 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5373 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5373 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5374 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5374 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5375 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5375 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5372);
          reg = x5372;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5373);
          reg = x5373;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5374);
          reg = x5374;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5375);
          reg = x5375;
        }
        {
          // loc("./cirgen/components/u32.h":25:12)
          auto x5376 = x5373 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5377 = x5372 + x5376;
          // loc("./cirgen/components/u32.h":26:12)
          auto x5378 = x5374 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5379 = x5377 + x5378;
          // loc("./cirgen/components/u32.h":27:12)
          auto x5380 = x5375 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x5381 = x5379 + x5380;
          // loc("cirgen/circuit/rv32im/ecall.cpp":78:22)
          auto x5382 = Fp(x5381.asUInt32() & x76.asUInt32());
          if (x5382 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:26)
            auto x5383 = x5381 - x5382;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:26)
            auto x5384 = x5383 + x77;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:25)
            auto x5385 = x5384 * x75;
            // loc("cirgen/circuit/rv32im/ecall.cpp":80:7)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5385);
              reg = x5385;
            }
            // loc("cirgen/circuit/rv32im/ecall.cpp":81:42)
            auto x5386 = x5382 - x95;
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][79 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5386);
              reg = x5386;
            }
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":83:23)
          auto x5387 = (x5382 == 0) ? Fp(1) : Fp(0);
          if (x5387 != 0) {
            // loc("cirgen/circuit/rv32im/ecall.cpp":84:25)
            auto x5388 = x5381 * x75;
            // loc("cirgen/circuit/rv32im/ecall.cpp":84:7)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5388);
              reg = x5388;
            }
            // loc("./cirgen/components/bits.h":61:23)
            {
              auto& reg = args[2][79 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x76);
              reg = x76;
            }
          }
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5389 = x5373 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5390 = x5372 + x5389;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5391 = x5374 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5392 = x5390 + x5391;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5393 = x5375 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5394 = x5392 + x5393;
        // loc("Top/Mux/4/Mux/8/Mux/2/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5395 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x5395 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5396 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x5396 != Fp::invalid());
        host_args.at(0) = x5394;
        host_args.at(1) = x5395;
        host_args.at(2) = x5396;
        host(ctx, "log", "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:7)
        auto x5397 = x5395 - x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:6)
        auto x5398 = x5397 * x77;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:44)
        auto x5399 = x5396 + x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":94:6)
        auto x5400 = x5398 + x5399;
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:6)
        auto x5401 = x5394 - x5400;
        // loc("cirgen/circuit/rv32im/ecall.cpp":93:6)
        if (x5401 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:93");
        // loc("cirgen/circuit/rv32im/ecall.cpp":97:31)
        auto x5402 = x5364 * x75;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5403 = Fp(x5402.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5403);
            reg = x5403;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5404 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x5404 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5405 = x5402 - x5404;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5406 = x5405 * x89;
        // loc("cirgen/circuit/rv32im/ecall.cpp":97:7)
        if (x5406 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:97");
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5407 = Fp(x5402.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5407);
            reg = x5407;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5408 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x5408 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5409 = x5402 - x5408;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5410 = x5409 * x89;
        // loc("cirgen/circuit/rv32im/ecall.cpp":98:7)
        if (x5410 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:98");
        {
          host_args.at(0) = x5394;
          host(ctx, "syscallInit", "", host_args.data(), 1, host_outs.data(), 0);
        }
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5411 = x598 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5412 = Fp(x5411.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5412);
            reg = x5412;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5413 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5413 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5414 = x5411 - x5413;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5415 = x5414 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5416 = Fp(x5415.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5416);
            reg = x5416;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5417 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5417 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5418 = x5415 - x5417;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5419 = x5418 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5420 = Fp(x5419.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5420);
            reg = x5420;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5421 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5421 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5422 = x5419 - x5421;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5423 = x5422 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5424 = Fp(x5423.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5424);
            reg = x5424;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5425 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5425 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5426 = x5423 - x5425;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5427 = x5426 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5427);
          reg = x5427;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5428 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5428 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5429 = x95 - x5428;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5430 = x5428 * x5429;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5430);
          reg = x5430;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5431 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5431 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5432 = x92 - x5428;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5433 = x5431 * x5432;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5433 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":103:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
        host(ctx, "log", "Set next major to be ecall copy in", host_args.data(), 0, host_outs.data(), 0);
      }
      if (x5213 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5434 = host_outs.at(0);
          auto x5435 = host_outs.at(1);
          auto x5436 = host_outs.at(2);
          auto x5437 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5434);
            reg = x5434;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5435);
            reg = x5435;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5436);
            reg = x5436;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5437);
            reg = x5437;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5438 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x5438 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5439 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5439 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5440 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5440 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5441 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5441 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5438);
          reg = x5438;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5439);
          reg = x5439;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5440);
          reg = x5440;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5441);
          reg = x5441;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5442 = host_outs.at(0);
          auto x5443 = host_outs.at(1);
          auto x5444 = host_outs.at(2);
          auto x5445 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5442);
            reg = x5442;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5443);
            reg = x5443;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5444);
            reg = x5444;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5445);
            reg = x5445;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5446 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5446 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5447 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5447 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5448 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5448 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5449 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5449 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5446);
          reg = x5446;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5447);
          reg = x5447;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5448);
          reg = x5448;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5449);
          reg = x5449;
        }
        {
          host_args.at(0) = x25;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5450 = host_outs.at(0);
          auto x5451 = host_outs.at(1);
          auto x5452 = host_outs.at(2);
          auto x5453 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5450);
            reg = x5450;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5451);
            reg = x5451;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5452);
            reg = x5452;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5453);
            reg = x5453;
          }
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5454 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5454 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5455 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5455 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5456 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5456 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5457 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5457 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5454);
          reg = x5454;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5455);
          reg = x5455;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5456);
          reg = x5456;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5457);
          reg = x5457;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":117:17)
        auto x5458 = x598 + x77;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x5459 = x5458 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5460 = Fp(x5459.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5460);
            reg = x5460;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5461 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x5461 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5462 = x5459 - x5461;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5463 = x5462 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5464 = Fp(x5463.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5464);
            reg = x5464;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5465 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x5465 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5466 = x5463 - x5465;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5467 = x5466 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x5468 = Fp(x5467.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5468);
            reg = x5468;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x5469 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x5469 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x5470 = x5467 - x5469;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x5471 = x5470 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x5472 = Fp(x5471.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5472);
            reg = x5472;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5473 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x5473 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x5474 = x5471 - x5473;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x5475 = x5474 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5475);
          reg = x5475;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5476 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x5476 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x5477 = x95 - x5476;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x5478 = x5476 * x5477;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5478);
          reg = x5478;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5479 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x5479 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x5480 = x92 - x5476;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x5481 = x5479 * x5480;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x5481 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":118:3)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/components/mux.h":39:25))
    auto x5482 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x5482 != Fp::invalid());
    if (x5482 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5483 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x5483 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5484 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x5484 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[12](Reg)"("cirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5485 = args[2][106 * steps + ((cycle - 1) & mask)];
      assert(x5485 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5486 = x5484 + x5485;
      if (x5486 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x77);
          reg = x77;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5487 = x95 - x5484;
      // loc("cirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5488 = x5487 - x5485;
      if (x5488 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5489 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5489 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5489);
          reg = x5489;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5490 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5490 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5491 = x5490 - x95;
        // loc("cirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5491);
          reg = x5491;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5492 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x5492 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5493 = (x5492 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5493);
          reg = x5493;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5494 = inv(x5492);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5494);
          reg = x5494;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5495 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x5495 != Fp::invalid());
      if (x5495 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5492 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5496 = x95 - x5495;
      if (x5496 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5497 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x5497 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5498 = x5492 * x5497;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5499 = x5498 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5499 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x5495 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x68);
          reg = x68;
        }
      }
      if (x5496 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5500 = x2127 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5501 = x1342 + x5500;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5502 = x2831 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5503 = x5501 + x5502;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5504 = x3588 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5505 = x5503 + x5504;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5506 = x4040 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5507 = x5505 + x5506;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5508 = x4405 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5509 = x5507 + x5508;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5510 = x4837 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5511 = x5509 + x5510;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5512 = x5182 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5513 = x5511 + x5512;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5514 = x5482 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5515 = x5513 + x5514;
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5516 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x5516 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5517 = x5516 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5518 = x5515 + x5517;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5519 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x5519 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5520 = x5519 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5521 = x5518 + x5520;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5522 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x5522 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5523 = x5522 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5524 = x5521 + x5523;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5525 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x5525 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x5526 = x5525 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x5527 = x5524 + x5526;
        // loc("cirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5527);
          reg = x5527;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x5528 = x598 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5529 = Fp(x5528.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5529);
          reg = x5529;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5530 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5530 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5531 = x5528 - x5530;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5532 = x5531 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5533 = Fp(x5532.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5533);
          reg = x5533;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5534 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5534 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5535 = x5532 - x5534;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5536 = x5535 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x5537 = Fp(x5536.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5537);
          reg = x5537;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x5538 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5538 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x5539 = x5536 - x5538;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x5540 = x5539 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x5541 = Fp(x5540.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5541);
          reg = x5541;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5542 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5542 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x5543 = x5540 - x5542;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x5544 = x5543 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5544);
        reg = x5544;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5545 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x5545 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x5546 = x95 - x5545;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x5547 = x5545 * x5546;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5547);
        reg = x5547;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x5548 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x5548 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x5549 = x92 - x5545;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x5550 = x5548 * x5549;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x5550 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5551 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x5551 != Fp::invalid());
      host_args.at(0) = x69;
      host_args.at(1) = x5551;
      host_args.at(2) = x5492;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5484 != 0) {
        {
          host_args.at(0) = x24;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5552 = host_outs.at(0);
          auto x5553 = host_outs.at(1);
          auto x5554 = host_outs.at(2);
          auto x5555 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5552);
            reg = x5552;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5553);
            reg = x5553;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5554);
            reg = x5554;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5555);
            reg = x5555;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5556 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5557 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5557 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5558 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5558 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5559 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5559 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5556);
          reg = x5556;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5557);
          reg = x5557;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5558);
          reg = x5558;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5559);
          reg = x5559;
        }
        {
          host_args.at(0) = x23;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5560 = host_outs.at(0);
          auto x5561 = host_outs.at(1);
          auto x5562 = host_outs.at(2);
          auto x5563 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5560);
            reg = x5560;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5561);
            reg = x5561;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5562);
            reg = x5562;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5563);
            reg = x5563;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5564 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5565 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5566 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5567 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5567 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x23);
          reg = x23;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5564);
          reg = x5564;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5565);
          reg = x5565;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5566);
          reg = x5566;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5567);
          reg = x5567;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5568 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x5568 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5569 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x5569 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5570 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x5570 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5571 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x5571 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5572 = x5569 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5573 = x5568 + x5572;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5574 = x5570 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5575 = x5573 + x5574;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5576 = x5571 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5577 = x5575 + x5576;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5578 = x5577 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5578);
          reg = x5578;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5579 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5580 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5580 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5581 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5582 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5582 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5583 = x5580 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5584 = x5579 + x5583;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5585 = x5581 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5586 = x5584 + x5585;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5587 = x5582 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5588 = x5586 + x5587;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5589 = x5588 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5589);
          reg = x5589;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5590 = x5557 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5591 = x5556 + x5590;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5592 = x5558 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5593 = x5591 + x5592;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5594 = x5559 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5595 = x5593 + x5594;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5596 = x5595 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5596);
          reg = x5596;
        }
        // loc("./cirgen/components/u32.h":25:12)
        auto x5597 = x5565 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5598 = x5564 + x5597;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5599 = x5566 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5600 = x5598 + x5599;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5601 = x5567 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5602 = x5600 + x5601;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5603 = x5602 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5603);
          reg = x5603;
        }
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5604 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x5604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5605 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5606 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5607 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5607 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x5608 = x5605 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5609 = x5604 + x5608;
        // loc("./cirgen/components/u32.h":26:12)
        auto x5610 = x5606 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5611 = x5609 + x5610;
        // loc("./cirgen/components/u32.h":27:12)
        auto x5612 = x5607 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x5613 = x5611 + x5612;
        // loc("cirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5613);
          reg = x5613;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5614 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5614 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":204:10)
        auto x5615 = x5614 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5616 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5616 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5617 = x5616 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5618 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5618 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5619 = x5618 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5620 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5620 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5621 = x5620 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5622 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5622 != Fp::invalid());
        host_args.at(0) = x5615;
        host_args.at(1) = x5617;
        host_args.at(2) = x5619;
        host_args.at(3) = x5621;
        host_args.at(4) = x5622;
        host(ctx, "log", "  FromEcall: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5485 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":214:53))
        auto x5623 = args[2][162 * steps + ((cycle - 1) & mask)];
        assert(x5623 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":214:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5623);
          reg = x5623;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":215:51))
        auto x5624 = args[2][163 * steps + ((cycle - 1) & mask)];
        assert(x5624 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5624);
          reg = x5624;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":216:83))
        auto x5625 = args[2][164 * steps + ((cycle - 1) & mask)];
        assert(x5625 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x5626 = x5625 * x22;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x5627 = x5626 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5627);
          reg = x5627;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":217:83)
        auto x5628 = x5627 + x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5628);
          reg = x5628;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/sha.cpp":218:49))
        auto x5629 = args[2][166 * steps + ((cycle - 1) & mask)];
        assert(x5629 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5629);
          reg = x5629;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5630 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x5630 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":221:10)
        auto x5631 = x5630 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5632 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5632 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":222:10)
        auto x5633 = x5632 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5634 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5634 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5635 = x5634 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5636 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5636 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":224:10)
        auto x5637 = x5636 * x77;
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5638 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x5638 != Fp::invalid());
        host_args.at(0) = x5631;
        host_args.at(1) = x5633;
        host_args.at(2) = x5635;
        host_args.at(3) = x5637;
        host_args.at(4) = x5638;
        host(ctx, "log", "  FromPageFault: stateOut = 0x%x, stateIn = 0x%x, data0 = 0x%x, data1 = 0x%x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5488 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":228:42))
        auto x5639 = args[2][131 * steps + ((cycle - 1) & mask)];
        assert(x5639 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":228:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5639);
          reg = x5639;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":229:40))
        auto x5640 = args[2][132 * steps + ((cycle - 1) & mask)];
        assert(x5640 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":229:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5640);
          reg = x5640;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":230:36))
        auto x5641 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5641 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5641);
          reg = x5641;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":231:36))
        auto x5642 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5642 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5642);
          reg = x5642;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":232:38))
        auto x5643 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x5643 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5643);
          reg = x5643;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5644 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5644 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5644);
          reg = x5644;
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5645 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x5645 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":236:24)
        auto x5646 = x5645 + x5492;
        {
          host_args.at(0) = x5646;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5647 = host_outs.at(0);
          auto x5648 = host_outs.at(1);
          auto x5649 = host_outs.at(2);
          auto x5650 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5647);
            reg = x5647;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5648);
            reg = x5648;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5649);
            reg = x5649;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5650);
            reg = x5650;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5651 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5651 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5652 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5652 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5653 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5654 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5654 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5646);
          reg = x5646;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5651);
          reg = x5651;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5652);
          reg = x5652;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5653);
          reg = x5653;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5654);
          reg = x5654;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":237:24)
        auto x5655 = x5646 + x77;
        {
          host_args.at(0) = x5655;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5656 = host_outs.at(0);
          auto x5657 = host_outs.at(1);
          auto x5658 = host_outs.at(2);
          auto x5659 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5656);
            reg = x5656;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5657);
            reg = x5657;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5658);
            reg = x5658;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5659);
            reg = x5659;
          }
        }
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5660 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x5660 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5661 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5661 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5662 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5662 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x5663 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5663 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5655);
          reg = x5655;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5483);
          reg = x5483;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5660);
          reg = x5660;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5661);
          reg = x5661;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5662);
          reg = x5662;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5663);
          reg = x5663;
        }
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5664 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x5664 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x5665 = (x5664 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5665);
          reg = x5665;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x5666 = inv(x5664);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5666);
          reg = x5666;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5667 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x5667 != Fp::invalid());
      if (x5667 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x5664 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x5668 = x95 - x5667;
      if (x5668 != 0) {
        // loc("Top/Mux/4/Mux/9/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x5669 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5669 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5670 = x5664 * x5669;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x5671 = x5670 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x5671 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5672 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5673 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x5673 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5674 = x5673 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5675 = x5672 + x5674;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5676 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x5676 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5677 = x5676 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5678 = x5675 + x5677;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5679 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x5679 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5680 = x5679 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5681 = x5678 + x5680;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5682 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x5682 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5683 = x5682 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5684 = x5681 + x5683;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5685 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x5685 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5686 = x5685 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5687 = x5684 + x5686;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5688 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x5688 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5689 = x5688 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5690 = x5687 + x5689;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5691 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x5691 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5692 = x5691 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5693 = x5690 + x5692;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5694 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x5694 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5695 = x5694 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5696 = x5693 + x5695;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5697 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x5697 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5698 = x5697 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5699 = x5696 + x5698;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5700 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5700 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5701 = x5700 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5702 = x5699 + x5701;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5703 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5703 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5704 = x5703 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5705 = x5702 + x5704;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5706 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5706 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5707 = x5706 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5708 = x5705 + x5707;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5709 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5709 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5710 = x5709 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5711 = x5708 + x5710;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5712 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5712 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5713 = x5712 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5714 = x5711 + x5713;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5715 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5715 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5716 = x5715 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5717 = x5714 + x5716;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5718 = x94 - x5717;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5719 = x5718 * x9;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5719);
        reg = x5719;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5720 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5720 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5721 = Fp(x5720.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5721);
          reg = x5721;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5722 = Fp(x5720.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5723 = x5722 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5723);
          reg = x5723;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5724 = Fp(x5720.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5725 = x5724 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5725);
          reg = x5725;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5726 = Fp(x5720.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5727 = x5726 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5727);
          reg = x5727;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5728 = Fp(x5720.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5729 = x5728 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5729);
          reg = x5729;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5730 = Fp(x5720.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5731 = x5730 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5731);
          reg = x5731;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5732 = Fp(x5720.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5733 = x5732 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5733);
          reg = x5733;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5734 = Fp(x5720.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5735 = x5734 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5735);
          reg = x5735;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5736 = Fp(x5720.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5737 = x5736 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5737);
          reg = x5737;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5738 = Fp(x5720.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5739 = x5738 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5739);
          reg = x5739;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5740 = Fp(x5720.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5741 = x5740 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5741);
          reg = x5741;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5742 = Fp(x5720.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5743 = x5742 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5743);
          reg = x5743;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5744 = Fp(x5720.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5745 = x5744 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5745);
          reg = x5745;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5746 = Fp(x5720.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5747 = x5746 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5747);
          reg = x5747;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5748 = Fp(x5720.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5749 = x5748 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5749);
          reg = x5749;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5750 = Fp(x5720.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5751 = x5750 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5751);
          reg = x5751;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5752 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5752 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5753 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5753 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5754 = x5753 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5755 = x5752 + x5754;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5756 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5756 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5757 = x5756 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5758 = x5755 + x5757;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5759 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5759 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5760 = x5759 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5761 = x5758 + x5760;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5762 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5762 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5763 = x5762 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5764 = x5761 + x5763;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5765 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5765 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5766 = x5765 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5767 = x5764 + x5766;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5768 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5768 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5769 = x5768 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5770 = x5767 + x5769;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5771 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5771 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5772 = x5771 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5773 = x5770 + x5772;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5774 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5774 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5775 = x5774 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5776 = x5773 + x5775;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5777 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5777 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5778 = x5777 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5779 = x5776 + x5778;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5780 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5780 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5781 = x5780 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5782 = x5779 + x5781;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5783 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x5783 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5784 = x5783 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5785 = x5782 + x5784;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5786 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x5786 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5787 = x5786 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5788 = x5785 + x5787;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5789 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x5789 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5790 = x5789 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5791 = x5788 + x5790;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5792 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x5792 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5793 = x5792 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5794 = x5791 + x5793;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5795 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x5795 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5796 = x5795 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5797 = x5794 + x5796;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5798 = x5720 - x5797;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5799 = x5798 * x9;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5799);
        reg = x5799;
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5800 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x5800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5801 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x5801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5802 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x5802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5803 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x5803 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5804 = x5802 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5805 = x5803 + x5804;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5806 = x5800 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5807 = x5801 + x5806;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5808 = Fp(x5805.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5808);
          reg = x5808;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5809 = Fp(x5805.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5810 = x5809 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5810);
          reg = x5810;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5811 = Fp(x5805.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5812 = x5811 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5812);
          reg = x5812;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5813 = Fp(x5805.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5814 = x5813 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5814);
          reg = x5814;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5815 = Fp(x5805.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5816 = x5815 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5816);
          reg = x5816;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5817 = Fp(x5805.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5818 = x5817 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5818);
          reg = x5818;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5819 = Fp(x5805.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5820 = x5819 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5820);
          reg = x5820;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5821 = Fp(x5805.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5822 = x5821 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5822);
          reg = x5822;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5823 = Fp(x5805.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5824 = x5823 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5824);
          reg = x5824;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5825 = Fp(x5805.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5826 = x5825 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5826);
          reg = x5826;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5827 = Fp(x5805.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5828 = x5827 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5828);
          reg = x5828;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5829 = Fp(x5805.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5830 = x5829 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5830);
          reg = x5830;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5831 = Fp(x5805.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5832 = x5831 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5832);
          reg = x5832;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5833 = Fp(x5805.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5834 = x5833 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5834);
          reg = x5834;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5835 = Fp(x5805.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5836 = x5835 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5836);
          reg = x5836;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5837 = Fp(x5805.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5838 = x5837 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5838);
          reg = x5838;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5839 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x5839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5840 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x5840 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5841 = x5840 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5842 = x5839 + x5841;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5843 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x5843 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5844 = x5843 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5845 = x5842 + x5844;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5846 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x5846 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5847 = x5846 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5848 = x5845 + x5847;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5849 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x5849 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5850 = x5849 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5851 = x5848 + x5850;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5852 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x5852 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5853 = x5852 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5854 = x5851 + x5853;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5855 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x5855 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5856 = x5855 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5857 = x5854 + x5856;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5858 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x5858 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5859 = x5858 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5860 = x5857 + x5859;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5861 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x5861 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5862 = x5861 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5863 = x5860 + x5862;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5864 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x5864 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5865 = x5864 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5866 = x5863 + x5865;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5867 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x5867 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5868 = x5867 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5869 = x5866 + x5868;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5870 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x5870 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5871 = x5870 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5872 = x5869 + x5871;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5873 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x5873 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5874 = x5873 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5875 = x5872 + x5874;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5876 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x5876 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5877 = x5876 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5878 = x5875 + x5877;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5879 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x5879 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5880 = x5879 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5881 = x5878 + x5880;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5882 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x5882 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5883 = x5882 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5884 = x5881 + x5883;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5885 = x5805 - x5884;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5886 = x5885 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x5887 = Fp(x5886.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5887);
          reg = x5887;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5888 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5888 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x5889 = x5886 - x5888;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x5890 = x5889 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x5891 = x95 - x5890;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x5892 = x5890 * x5891;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x5892 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x5893 = x5807 + x5886;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5894 = Fp(x5893.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5894);
          reg = x5894;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5895 = Fp(x5893.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5896 = x5895 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5896);
          reg = x5896;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5897 = Fp(x5893.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5898 = x5897 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5898);
          reg = x5898;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5899 = Fp(x5893.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5900 = x5899 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5900);
          reg = x5900;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5901 = Fp(x5893.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5902 = x5901 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5902);
          reg = x5902;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5903 = Fp(x5893.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5904 = x5903 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5904);
          reg = x5904;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5905 = Fp(x5893.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5906 = x5905 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5906);
          reg = x5906;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5907 = Fp(x5893.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5908 = x5907 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5908);
          reg = x5908;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5909 = Fp(x5893.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5910 = x5909 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5910);
          reg = x5910;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5911 = Fp(x5893.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5912 = x5911 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5912);
          reg = x5912;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5913 = Fp(x5893.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5914 = x5913 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5914);
          reg = x5914;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5915 = Fp(x5893.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5916 = x5915 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5916);
          reg = x5916;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5917 = Fp(x5893.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5918 = x5917 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5918);
          reg = x5918;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5919 = Fp(x5893.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5920 = x5919 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5920);
          reg = x5920;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5921 = Fp(x5893.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5922 = x5921 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5922);
          reg = x5922;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5923 = Fp(x5893.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5924 = x5923 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5924);
          reg = x5924;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5925 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x5925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5926 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x5926 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5927 = x5926 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5928 = x5925 + x5927;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5929 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x5929 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5930 = x5929 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5931 = x5928 + x5930;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5932 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x5932 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5933 = x5932 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5934 = x5931 + x5933;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5935 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x5935 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5936 = x5935 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5937 = x5934 + x5936;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5938 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x5938 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5939 = x5938 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5940 = x5937 + x5939;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5941 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x5941 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5942 = x5941 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5943 = x5940 + x5942;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5944 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x5944 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5945 = x5944 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5946 = x5943 + x5945;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5947 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x5947 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5948 = x5947 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5949 = x5946 + x5948;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5950 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x5950 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5951 = x5950 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5952 = x5949 + x5951;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5953 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5953 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5954 = x5953 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5955 = x5952 + x5954;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5956 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5956 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5957 = x5956 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5958 = x5955 + x5957;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5959 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5959 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5960 = x5959 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5961 = x5958 + x5960;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5962 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5962 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5963 = x5962 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5964 = x5961 + x5963;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5965 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x5965 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5966 = x5965 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5967 = x5964 + x5966;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5968 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x5968 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x5969 = x5968 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x5970 = x5967 + x5969;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x5971 = x5893 - x5970;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x5972 = x5971 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x5973 = Fp(x5972.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5973);
          reg = x5973;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5974 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x5974 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x5975 = x5972 - x5974;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x5976 = x5975 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x5977 = x95 - x5976;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x5978 = x5976 * x5977;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x5978 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5979 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5980 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5981 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x5982 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5982 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x5983 = x5981 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x5984 = x5982 + x5983;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x5985 = x5979 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x5986 = x5980 + x5985;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5987 = Fp(x5984.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5987);
          reg = x5987;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5988 = Fp(x5984.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5989 = x5988 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5989);
          reg = x5989;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5990 = Fp(x5984.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5991 = x5990 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5991);
          reg = x5991;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5992 = Fp(x5984.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5993 = x5992 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5993);
          reg = x5993;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5994 = Fp(x5984.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5995 = x5994 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5995);
          reg = x5995;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5996 = Fp(x5984.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5997 = x5996 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5997);
          reg = x5997;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x5998 = Fp(x5984.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x5999 = x5998 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5999);
          reg = x5999;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6000 = Fp(x5984.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6001 = x6000 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6001);
          reg = x6001;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6002 = Fp(x5984.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6003 = x6002 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6003);
          reg = x6003;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6004 = Fp(x5984.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6005 = x6004 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6005);
          reg = x6005;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6006 = Fp(x5984.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6007 = x6006 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6007);
          reg = x6007;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6008 = Fp(x5984.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6009 = x6008 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6009);
          reg = x6009;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6010 = Fp(x5984.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6011 = x6010 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6011);
          reg = x6011;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6012 = Fp(x5984.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6013 = x6012 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6013);
          reg = x6013;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6014 = Fp(x5984.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6015 = x6014 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6015);
          reg = x6015;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6016 = Fp(x5984.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6017 = x6016 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6017);
          reg = x6017;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6018 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6018 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6019 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6019 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6020 = x6019 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6021 = x6018 + x6020;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6022 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6022 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6023 = x6022 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6024 = x6021 + x6023;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6025 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6025 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6026 = x6025 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6027 = x6024 + x6026;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6028 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6028 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6029 = x6028 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6030 = x6027 + x6029;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6031 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6031 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6032 = x6031 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6033 = x6030 + x6032;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6034 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6034 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6035 = x6034 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6036 = x6033 + x6035;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6037 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6037 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6038 = x6037 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6039 = x6036 + x6038;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6040 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6040 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6041 = x6040 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6042 = x6039 + x6041;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6043 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6043 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6044 = x6043 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6045 = x6042 + x6044;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6046 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6046 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6047 = x6046 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6048 = x6045 + x6047;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6049 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6049 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6050 = x6049 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6051 = x6048 + x6050;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6052 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6052 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6053 = x6052 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6054 = x6051 + x6053;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6055 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6055 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6056 = x6055 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6057 = x6054 + x6056;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6058 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6058 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6059 = x6058 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6060 = x6057 + x6059;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6061 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6061 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6062 = x6061 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6063 = x6060 + x6062;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6064 = x5984 - x6063;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6065 = x6064 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6066 = Fp(x6065.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6066);
          reg = x6066;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6067 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x6067 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6068 = x6065 - x6067;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6069 = x6068 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6070 = x95 - x6069;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6071 = x6069 * x6070;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6071 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6072 = x5986 + x6065;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6073 = Fp(x6072.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6073);
          reg = x6073;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6074 = Fp(x6072.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6075 = x6074 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6075);
          reg = x6075;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6076 = Fp(x6072.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6077 = x6076 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6077);
          reg = x6077;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6078 = Fp(x6072.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6079 = x6078 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6079);
          reg = x6079;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6080 = Fp(x6072.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6081 = x6080 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6081);
          reg = x6081;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6082 = Fp(x6072.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6083 = x6082 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6083);
          reg = x6083;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6084 = Fp(x6072.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6085 = x6084 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6085);
          reg = x6085;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6086 = Fp(x6072.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6087 = x6086 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6087);
          reg = x6087;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6088 = Fp(x6072.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6089 = x6088 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6089);
          reg = x6089;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6090 = Fp(x6072.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6091 = x6090 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6091);
          reg = x6091;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6092 = Fp(x6072.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6093 = x6092 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6093);
          reg = x6093;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6094 = Fp(x6072.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6095 = x6094 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6095);
          reg = x6095;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6096 = Fp(x6072.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6097 = x6096 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6097);
          reg = x6097;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6098 = Fp(x6072.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6099 = x6098 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6099);
          reg = x6099;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6100 = Fp(x6072.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6101 = x6100 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6101);
          reg = x6101;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6102 = Fp(x6072.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6103 = x6102 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6103);
          reg = x6103;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6104 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6104 != Fp::invalid());
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6105 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6105 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6106 = x6105 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6107 = x6104 + x6106;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6108 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6108 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6109 = x6108 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6110 = x6107 + x6109;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6111 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6111 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6112 = x6111 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6113 = x6110 + x6112;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6114 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6114 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6115 = x6114 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6116 = x6113 + x6115;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6117 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6117 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6118 = x6117 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6119 = x6116 + x6118;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6120 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6120 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6121 = x6120 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6122 = x6119 + x6121;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6123 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6123 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6124 = x6123 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6125 = x6122 + x6124;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6126 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6126 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6127 = x6126 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6128 = x6125 + x6127;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6129 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6129 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6130 = x6129 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6131 = x6128 + x6130;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6132 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6132 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6133 = x6132 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6134 = x6131 + x6133;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6135 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6135 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6136 = x6135 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6137 = x6134 + x6136;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6138 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6138 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6139 = x6138 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6140 = x6137 + x6139;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6141 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6141 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6142 = x6141 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6143 = x6140 + x6142;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6144 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6144 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6145 = x6144 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6146 = x6143 + x6145;
      // loc("Top/Mux/4/Mux/9/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6147 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6147 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6148 = x6147 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6149 = x6146 + x6148;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6150 = x6072 - x6149;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6151 = x6150 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6152 = Fp(x6151.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6152);
          reg = x6152;
        }
      }
      // loc("Top/Mux/4/Mux/9/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6153 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6153 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6154 = x6151 - x6153;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6155 = x6154 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6156 = x95 - x6155;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6157 = x6155 * x6156;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6157 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/components/mux.h":39:25))
    auto x6158 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x6158 != Fp::invalid());
    if (x6158 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6159 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x6159 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[9](Reg)"("cirgen/circuit/rv32im/sha.cpp":259:70))
      auto x6160 = args[2][103 * steps + ((cycle - 1) & mask)];
      assert(x6160 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[11](Reg)"("cirgen/circuit/rv32im/sha.cpp":260:70))
      auto x6161 = args[2][105 * steps + ((cycle - 1) & mask)];
      assert(x6161 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":261:29)
      auto x6162 = x6160 + x6161;
      if (x6162 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":263:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6163 = x95 - x6160;
      // loc("cirgen/circuit/rv32im/sha.cpp":265:33)
      auto x6164 = x6163 - x6161;
      if (x6164 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6165 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x6165 != Fp::invalid());
        if (x6165 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":269:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x71);
            reg = x71;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":271:20)
        auto x6166 = x95 - x6165;
        if (x6166 != 0) {
          // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6167 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x6167 != Fp::invalid());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6167);
            reg = x6167;
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":274:42))
          auto x6168 = args[2][135 * steps + ((cycle - 1) & mask)];
          assert(x6168 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":274:42)
          auto x6169 = x6168 - x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":274:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6169);
            reg = x6169;
          }
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6170 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x6170 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6171 = (x6170 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6171);
          reg = x6171;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6172 = inv(x6170);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6172);
          reg = x6172;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6173 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x6173 != Fp::invalid());
      if (x6173 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6170 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6174 = x95 - x6173;
      if (x6174 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6175 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x6175 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6176 = x6170 * x6175;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6177 = x6176 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6177 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x6173 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6178 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6178 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":281:17)
        auto x6179 = x95 - x6178;
        if (x6179 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":281:21)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x68);
            reg = x68;
          }
        }
        if (x6178 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":282:17)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x67);
            reg = x67;
          }
        }
      }
      if (x6174 != 0) {
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6180 = x2127 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6181 = x1342 + x6180;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6182 = x2831 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6183 = x6181 + x6182;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6184 = x3588 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6185 = x6183 + x6184;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6186 = x4040 * x73;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6187 = x6185 + x6186;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6188 = x4405 * x72;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6189 = x6187 + x6188;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6190 = x4837 * x71;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6191 = x6189 + x6190;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6192 = x5182 * x70;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6193 = x6191 + x6192;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6194 = x5482 * x69;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6195 = x6193 + x6194;
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6196 = x6158 * x68;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6197 = x6195 + x6196;
        // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6198 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x6198 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6199 = x6198 * x67;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6200 = x6197 + x6199;
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6201 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x6201 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6202 = x6201 * x66;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6203 = x6200 + x6202;
        // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6204 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x6204 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x6205 = x6204 * x65;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x6206 = x6203 + x6205;
        // loc("cirgen/circuit/rv32im/sha.cpp":284:33)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6206);
          reg = x6206;
        }
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x6207 = x598 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6208 = Fp(x6207.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6208);
          reg = x6208;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6209 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x6209 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6210 = x6207 - x6209;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6211 = x6210 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6212 = Fp(x6211.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6212);
          reg = x6212;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6213 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x6213 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6214 = x6211 - x6213;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6215 = x6214 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x6216 = Fp(x6215.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6216);
          reg = x6216;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x6217 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6217 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x6218 = x6215 - x6217;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x6219 = x6218 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x6220 = Fp(x6219.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6220);
          reg = x6220;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6221 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x6221 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x6222 = x6219 - x6221;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x6223 = x6222 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6223);
        reg = x6223;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6224 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6224 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x6225 = x95 - x6224;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x6226 = x6224 * x6225;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6226);
        reg = x6226;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6227 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x6227 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x6228 = x92 - x6224;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x6229 = x6227 * x6228;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x6229 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":287:40))
      auto x6230 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x6230 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":287:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6230);
        reg = x6230;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":288:38))
      auto x6231 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x6231 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":288:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6231);
        reg = x6231;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":289:34))
      auto x6232 = args[2][133 * steps + ((cycle - 1) & mask)];
      assert(x6232 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":289:3)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6232);
        reg = x6232;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":290:34))
      auto x6233 = args[2][134 * steps + ((cycle - 1) & mask)];
      assert(x6233 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6233);
        reg = x6233;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":291:36))
      auto x6234 = args[2][138 * steps + ((cycle - 1) & mask)];
      assert(x6234 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6234);
        reg = x6234;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6235 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x6235 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6235);
        reg = x6235;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6236 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x6236 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x6237 = (x6236 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6237);
          reg = x6237;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x6238 = inv(x6236);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6238);
          reg = x6238;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6239 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6239 != Fp::invalid());
      if (x6239 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x6236 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x6240 = x95 - x6239;
      if (x6240 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x6241 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6241 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6242 = x6236 * x6241;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x6243 = x6242 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x6243 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6244 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x6244 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":300:8)
      auto x6245 = x6244 * x77;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6246 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x6246 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":301:8)
      auto x6247 = x6246 * x77;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x6248 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x6248 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":302:8)
      auto x6249 = x6248 * x77;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6250 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6250 != Fp::invalid());
      host_args.at(0) = x68;
      host_args.at(1) = x6250;
      host_args.at(2) = x6170;
      host_args.at(3) = x6245;
      host_args.at(4) = x6247;
      host_args.at(5) = x6249;
      host_args.at(6) = x6236;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = 0x%x, data1 = 0x%x, state = 0x%x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("cirgen/circuit/rv32im/sha.cpp":306:15)
      auto x6251 = x95 - x6250;
      if (x6251 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6252 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6252 != Fp::invalid());
        if (x6252 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6253 = x6244 + x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":307:37)
          auto x6254 = x6253 - x6170;
          {
            host_args.at(0) = x6254;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6255 = host_outs.at(0);
            auto x6256 = host_outs.at(1);
            auto x6257 = host_outs.at(2);
            auto x6258 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6255);
              reg = x6255;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6256);
              reg = x6256;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6257);
              reg = x6257;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6258);
              reg = x6258;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6259 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6259 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6260 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6260 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6261 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6261 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6262 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6262 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6254);
            reg = x6254;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6159);
            reg = x6159;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6259);
            reg = x6259;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6260);
            reg = x6260;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6261);
            reg = x6261;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6262);
            reg = x6262;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":308:16)
        auto x6263 = x95 - x6252;
        if (x6263 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6264 = x6244 + x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":308:39)
          auto x6265 = x6264 - x6170;
          {
            host_args.at(0) = x6265;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6266 = host_outs.at(0);
            auto x6267 = host_outs.at(1);
            auto x6268 = host_outs.at(2);
            auto x6269 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6266);
              reg = x6266;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6267);
              reg = x6267;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6268);
              reg = x6268;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6269);
              reg = x6269;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6270 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6270 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6271 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6271 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6272 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6272 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6273 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6273 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6265);
            reg = x6265;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6159);
            reg = x6159;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6270);
            reg = x6270;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6271);
            reg = x6271;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6272);
            reg = x6272;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6273);
            reg = x6273;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":309:24)
        auto x6274 = x8 - x6170;
        {
          host_args.at(0) = x6274;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6275 = host_outs.at(0);
          auto x6276 = host_outs.at(1);
          auto x6277 = host_outs.at(2);
          auto x6278 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6275);
            reg = x6275;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6276);
            reg = x6276;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6277);
            reg = x6277;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6278);
            reg = x6278;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6279 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6279 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6280 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6280 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6281 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6281 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6282 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6282 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6274);
          reg = x6274;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6159);
          reg = x6159;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6279);
          reg = x6279;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6280);
          reg = x6280;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6281);
          reg = x6281;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6282);
          reg = x6282;
        }
      }
      if (x6250 != 0) {
        // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6283 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x6283 != Fp::invalid());
        if (x6283 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6284 = x6246 + x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":312:37)
          auto x6285 = x6284 - x6170;
          {
            host_args.at(0) = x6285;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6286 = host_outs.at(0);
            auto x6287 = host_outs.at(1);
            auto x6288 = host_outs.at(2);
            auto x6289 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6286);
              reg = x6286;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6287);
              reg = x6287;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6288);
              reg = x6288;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6289);
              reg = x6289;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6290 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6290 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6291 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6291 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6292 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6292 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6293 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6293 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6285);
            reg = x6285;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6159);
            reg = x6159;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6290);
            reg = x6290;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6291);
            reg = x6291;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6292);
            reg = x6292;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6293);
            reg = x6293;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":313:16)
        auto x6294 = x95 - x6283;
        if (x6294 != 0) {
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6295 = x6246 + x71;
          // loc("cirgen/circuit/rv32im/sha.cpp":313:39)
          auto x6296 = x6295 - x6170;
          {
            host_args.at(0) = x6296;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x6297 = host_outs.at(0);
            auto x6298 = host_outs.at(1);
            auto x6299 = host_outs.at(2);
            auto x6300 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6297);
              reg = x6297;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6298);
              reg = x6298;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6299);
              reg = x6299;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x6300);
              reg = x6300;
            }
          }
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6301 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x6301 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6302 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x6302 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6303 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x6303 != Fp::invalid());
          // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x6304 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x6304 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6296);
            reg = x6296;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6159);
            reg = x6159;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6301);
            reg = x6301;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6302);
            reg = x6302;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6303);
            reg = x6303;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6304);
            reg = x6304;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":314:24)
        auto x6305 = x7 - x6170;
        {
          host_args.at(0) = x6305;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6306 = host_outs.at(0);
          auto x6307 = host_outs.at(1);
          auto x6308 = host_outs.at(2);
          auto x6309 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6306);
            reg = x6306;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6307);
            reg = x6307;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6308);
            reg = x6308;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6309);
            reg = x6309;
          }
        }
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6310 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x6310 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6311 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6311 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6312 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6312 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x6313 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6313 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6305);
          reg = x6305;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6159);
          reg = x6159;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6310);
          reg = x6310;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6311);
          reg = x6311;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6312);
          reg = x6312;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6313);
          reg = x6313;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6314 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x6314 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6315 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x6315 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6316 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x6316 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6317 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x6317 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6318 = x6316 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6319 = x6317 + x6318;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6320 = x6314 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6321 = x6315 + x6320;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6322 = Fp(x6319.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6322);
          reg = x6322;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6323 = Fp(x6319.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6324 = x6323 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6324);
          reg = x6324;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6325 = Fp(x6319.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6326 = x6325 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6326);
          reg = x6326;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6327 = Fp(x6319.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6328 = x6327 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6328);
          reg = x6328;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6329 = Fp(x6319.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6330 = x6329 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6330);
          reg = x6330;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6331 = Fp(x6319.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6332 = x6331 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6332);
          reg = x6332;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6333 = Fp(x6319.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6334 = x6333 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6334);
          reg = x6334;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6335 = Fp(x6319.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6336 = x6335 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6336);
          reg = x6336;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6337 = Fp(x6319.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6338 = x6337 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6338);
          reg = x6338;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6339 = Fp(x6319.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6340 = x6339 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6340);
          reg = x6340;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6341 = Fp(x6319.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6342 = x6341 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6342);
          reg = x6342;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6343 = Fp(x6319.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6344 = x6343 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6344);
          reg = x6344;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6345 = Fp(x6319.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6346 = x6345 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6346);
          reg = x6346;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6347 = Fp(x6319.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6348 = x6347 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6348);
          reg = x6348;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6349 = Fp(x6319.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6350 = x6349 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6350);
          reg = x6350;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6351 = Fp(x6319.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6352 = x6351 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6352);
          reg = x6352;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6353 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6353 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6354 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6354 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6355 = x6354 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6356 = x6353 + x6355;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6357 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6357 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6358 = x6357 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6359 = x6356 + x6358;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6360 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6360 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6361 = x6360 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6362 = x6359 + x6361;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6363 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6363 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6364 = x6363 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6365 = x6362 + x6364;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6366 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6366 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6367 = x6366 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6368 = x6365 + x6367;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6369 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6369 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6370 = x6369 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6371 = x6368 + x6370;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6372 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x6372 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6373 = x6372 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6374 = x6371 + x6373;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6375 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x6375 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6376 = x6375 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6377 = x6374 + x6376;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6378 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x6378 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6379 = x6378 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6380 = x6377 + x6379;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6381 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6381 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6382 = x6381 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6383 = x6380 + x6382;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6384 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6384 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6385 = x6384 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6386 = x6383 + x6385;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6387 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6387 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6388 = x6387 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6389 = x6386 + x6388;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6390 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6390 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6391 = x6390 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6392 = x6389 + x6391;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6393 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6393 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6394 = x6393 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6395 = x6392 + x6394;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6396 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6396 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6397 = x6396 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6398 = x6395 + x6397;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6399 = x6319 - x6398;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6400 = x6399 * x9;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6400);
        reg = x6400;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6401 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6401 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6402 = x6321 + x6401;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6403 = Fp(x6402.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6403);
          reg = x6403;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6404 = Fp(x6402.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6405 = x6404 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6405);
          reg = x6405;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6406 = Fp(x6402.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6407 = x6406 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6407);
          reg = x6407;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6408 = Fp(x6402.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6409 = x6408 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6409);
          reg = x6409;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6410 = Fp(x6402.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6411 = x6410 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6411);
          reg = x6411;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6412 = Fp(x6402.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6413 = x6412 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6413);
          reg = x6413;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6414 = Fp(x6402.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6415 = x6414 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6415);
          reg = x6415;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6416 = Fp(x6402.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6417 = x6416 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6417);
          reg = x6417;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6418 = Fp(x6402.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6419 = x6418 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6419);
          reg = x6419;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6420 = Fp(x6402.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6421 = x6420 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6421);
          reg = x6421;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6422 = Fp(x6402.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6423 = x6422 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6423);
          reg = x6423;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6424 = Fp(x6402.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6425 = x6424 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6425);
          reg = x6425;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6426 = Fp(x6402.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6427 = x6426 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6427);
          reg = x6427;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6428 = Fp(x6402.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6429 = x6428 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6429);
          reg = x6429;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6430 = Fp(x6402.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6431 = x6430 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6431);
          reg = x6431;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6432 = Fp(x6402.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6433 = x6432 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6433);
          reg = x6433;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6434 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6434 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6435 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6435 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6436 = x6435 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6437 = x6434 + x6436;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6438 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6438 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6439 = x6438 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6440 = x6437 + x6439;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6441 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6441 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6442 = x6441 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6443 = x6440 + x6442;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6444 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6444 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6445 = x6444 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6446 = x6443 + x6445;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6447 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6447 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6448 = x6447 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6449 = x6446 + x6448;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6450 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6450 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6451 = x6450 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6452 = x6449 + x6451;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6453 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6453 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6454 = x6453 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6455 = x6452 + x6454;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6456 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6456 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6457 = x6456 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6458 = x6455 + x6457;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6459 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x6459 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6460 = x6459 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6461 = x6458 + x6460;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6462 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x6462 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6463 = x6462 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6464 = x6461 + x6463;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6465 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x6465 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6466 = x6465 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6467 = x6464 + x6466;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6468 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x6468 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6469 = x6468 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6470 = x6467 + x6469;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6471 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x6471 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6472 = x6471 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6473 = x6470 + x6472;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6474 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x6474 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6475 = x6474 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6476 = x6473 + x6475;
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6477 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x6477 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6478 = x6477 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6479 = x6476 + x6478;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6480 = x6402 - x6479;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6481 = x6480 * x9;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6481);
        reg = x6481;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6482 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x6482 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6483 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6483 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6484 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6484 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6485 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x6485 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6486 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x6486 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6487 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x6487 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6488 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x6488 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6489 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x6489 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6490 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x6490 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6491 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6491 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6492 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6492 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6493 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6493 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6494 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6494 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6495 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6495 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6496 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6496 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6497 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6497 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6498 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6498 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6499 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6499 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6500 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6500 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6501 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6501 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6502 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6502 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6503 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6503 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6504 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6504 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6505 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6505 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6506 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6506 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6507 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6507 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6508 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6508 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6509 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6509 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6510 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6510 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6511 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6511 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6512 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6512 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6513 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6513 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6514 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x6514 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6515 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x6515 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6516 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x6516 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6517 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x6517 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6518 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x6518 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6519 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x6519 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6520 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x6520 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6521 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x6521 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6522 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x6522 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6523 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6523 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6524 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6525 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6526 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6527 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6528 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6529 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6530 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6531 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6532 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6533 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6533 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6534 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6534 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6535 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6535 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6536 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6536 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6537 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6537 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6538 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6538 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6539 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6539 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6540 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6540 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6541 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6541 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6542 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6542 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6543 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6543 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6544 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6544 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6545 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6545 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6546 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x6546 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6547 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x6547 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6548 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x6548 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6549 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x6549 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6550 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x6550 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6551 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x6551 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6552 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x6552 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6553 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x6553 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6554 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x6554 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6555 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6556 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6557 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6558 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6559 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6560 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6561 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6562 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6563 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6564 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6565 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6565 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6566 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6566 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6567 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6567 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6568 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6568 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6569 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6569 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6570 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6570 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6571 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6571 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6572 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6572 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6573 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6573 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6574 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6574 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6575 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6575 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6576 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6576 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6577 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6577 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6578 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x6578 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6579 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x6579 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6580 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x6580 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6581 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x6581 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6582 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x6582 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6583 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6584 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x6584 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6585 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x6585 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6586 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x6586 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6587 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6588 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6589 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6590 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6591 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6592 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6593 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6594 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6595 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6596 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6597 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6597 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6598 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6599 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6599 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6600 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6600 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6601 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6602 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6602 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6603 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6603 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6604 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6605 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6606 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6607 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6608 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6609 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6610 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6611 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6611 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6612 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6612 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6613 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6613 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6614 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6614 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6615 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6615 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6616 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6616 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6617 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6617 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6618 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6618 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6619 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6620 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6621 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6622 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6623 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6624 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6625 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6626 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6627 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6628 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6629 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6629 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6630 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6630 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6631 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6631 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6632 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6632 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6633 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6633 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6634 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6634 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6635 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6635 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6636 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6636 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6637 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6637 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6638 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6638 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6639 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6639 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6640 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6640 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6641 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6641 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6642 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6642 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6643 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6643 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6644 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6644 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6645 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6645 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6646 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6646 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6647 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6647 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6648 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6648 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6649 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6649 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6650 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6650 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6651 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6651 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6652 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6652 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6653 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6653 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6654 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6654 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6655 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6655 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6656 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x6656 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6657 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x6657 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6658 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x6658 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6659 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x6659 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6660 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x6660 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6661 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x6661 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6662 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x6662 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6663 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x6663 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6664 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x6664 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6665 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x6665 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6666 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x6666 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6667 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6668 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6669 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6670 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6671 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x6671 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6672 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x6672 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6673 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x6673 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6674 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6674 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6675 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6675 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6676 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6676 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6677 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6677 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6678 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6678 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6679 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6679 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6680 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6680 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6681 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6681 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6682 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6682 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6683 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x6683 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6684 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x6684 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6685 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x6685 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6686 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x6686 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6687 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x6687 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6688 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x6688 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6689 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x6689 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6690 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x6690 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6691 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x6691 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6692 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x6692 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6693 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x6693 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6694 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x6694 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6695 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x6695 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6696 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x6696 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6697 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x6697 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6698 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x6698 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6699 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x6699 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6700 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x6700 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6701 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x6701 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6702 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x6702 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6703 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x6703 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6704 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x6704 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6705 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x6705 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6706 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6707 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6708 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6708 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6709 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6709 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6710 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6711 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6711 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6712 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6712 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6713 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6714 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6714 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6715 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x6715 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6716 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6717 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x6717 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6718 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x6718 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6719 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6720 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x6720 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6721 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x6721 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6722 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6723 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x6723 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6724 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x6724 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6725 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6726 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x6726 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6727 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x6727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6728 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6729 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x6729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6730 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x6730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6731 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6732 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x6732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6733 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x6733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6734 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6735 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x6735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6736 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x6736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6737 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6738 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x6738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6739 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6740 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x6741 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6741 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x6742 = x6739 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x6743 = x6738 + x6742;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x6744 = x6741 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x6745 = x6740 + x6744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6746 = x6495 + x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6747 = x6495 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6748 = x6747 * x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6749 = x6746 - x6748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6750 = x6496 + x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6751 = x6496 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6752 = x6751 * x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6753 = x6750 - x6752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6754 = x6497 + x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6755 = x6497 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6756 = x6755 * x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6757 = x6754 - x6756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6758 = x6498 + x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6759 = x6498 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6760 = x6759 * x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6761 = x6758 - x6760;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6762 = x6499 + x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6763 = x6499 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6764 = x6763 * x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6765 = x6762 - x6764;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6766 = x6500 + x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6767 = x6500 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6768 = x6767 * x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6769 = x6766 - x6768;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6770 = x6501 + x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6771 = x6501 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6772 = x6771 * x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6773 = x6770 - x6772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6774 = x6502 + x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6775 = x6502 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6776 = x6775 * x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6777 = x6774 - x6776;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6778 = x6503 + x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6779 = x6503 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6780 = x6779 * x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6781 = x6778 - x6780;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6782 = x6504 + x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6783 = x6504 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6784 = x6783 * x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6785 = x6782 - x6784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6786 = x6505 + x6482;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6787 = x6505 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6788 = x6787 * x6482;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6789 = x6786 - x6788;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6790 = x6506 + x6483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6791 = x6506 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6792 = x6791 * x6483;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6793 = x6790 - x6792;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6794 = x6507 + x6484;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6795 = x6507 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6796 = x6795 * x6484;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6797 = x6794 - x6796;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6798 = x6508 + x6485;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6799 = x6508 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6800 = x6799 * x6485;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6801 = x6798 - x6800;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6802 = x6509 + x6486;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6803 = x6509 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6804 = x6803 * x6486;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6805 = x6802 - x6804;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6806 = x6510 + x6487;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6807 = x6510 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6808 = x6807 * x6487;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6809 = x6806 - x6808;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6810 = x6511 + x6488;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6811 = x6511 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6812 = x6811 * x6488;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6813 = x6810 - x6812;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6814 = x6512 + x6489;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6815 = x6512 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6816 = x6815 * x6489;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6817 = x6814 - x6816;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6818 = x6513 + x6490;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6819 = x6513 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6820 = x6819 * x6490;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6821 = x6818 - x6820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6822 = x6482 + x6491;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6823 = x6482 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6824 = x6823 * x6491;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6825 = x6822 - x6824;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6826 = x6483 + x6492;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6827 = x6483 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6828 = x6827 * x6492;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6829 = x6826 - x6828;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6830 = x6484 + x6493;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6831 = x6484 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6832 = x6831 * x6493;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6833 = x6830 - x6832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6834 = x6485 + x6494;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6835 = x6485 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6836 = x6835 * x6494;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6837 = x6834 - x6836;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6838 = x6486 + x6495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6839 = x6486 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6840 = x6839 * x6495;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6841 = x6838 - x6840;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6842 = x6487 + x6496;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6843 = x6487 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6844 = x6843 * x6496;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6845 = x6842 - x6844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6846 = x6488 + x6497;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6847 = x6488 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6848 = x6847 * x6497;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6849 = x6846 - x6848;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6850 = x6489 + x6498;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6851 = x6489 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6852 = x6851 * x6498;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6853 = x6850 - x6852;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6854 = x6490 + x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6855 = x6490 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6856 = x6855 * x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6857 = x6854 - x6856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6858 = x6491 + x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6859 = x6491 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6860 = x6859 * x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6861 = x6858 - x6860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6862 = x6492 + x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6863 = x6492 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6864 = x6863 * x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6865 = x6862 - x6864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6866 = x6493 + x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6867 = x6493 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6868 = x6867 * x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6869 = x6866 - x6868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6870 = x6494 + x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6871 = x6494 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6872 = x6871 * x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6873 = x6870 - x6872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6874 = x6484 + x6749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6875 = x6831 * x6749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6876 = x6874 - x6875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6877 = x6485 + x6753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6878 = x6835 * x6753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6879 = x6877 - x6878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6880 = x6486 + x6757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6881 = x6839 * x6757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6882 = x6880 - x6881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6883 = x6487 + x6761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6884 = x6843 * x6761;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6885 = x6883 - x6884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6886 = x6488 + x6765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6887 = x6847 * x6765;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6888 = x6886 - x6887;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6889 = x6489 + x6769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6890 = x6851 * x6769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6891 = x6889 - x6890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6892 = x6490 + x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6893 = x6855 * x6773;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6894 = x6892 - x6893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6895 = x6491 + x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6896 = x6859 * x6777;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6897 = x6895 - x6896;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6898 = x6492 + x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6899 = x6863 * x6781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6900 = x6898 - x6899;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6901 = x6493 + x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6902 = x6867 * x6785;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6903 = x6901 - x6902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6904 = x6494 + x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6905 = x6871 * x6789;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6906 = x6904 - x6905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6907 = x6495 + x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6908 = x6747 * x6793;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6909 = x6907 - x6908;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6910 = x6496 + x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6911 = x6751 * x6797;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6912 = x6910 - x6911;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6913 = x6497 + x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6914 = x6755 * x6801;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6915 = x6913 - x6914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6916 = x6498 + x6805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6917 = x6759 * x6805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6918 = x6916 - x6917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6919 = x6499 + x6809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6920 = x6763 * x6809;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6921 = x6919 - x6920;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6922 = x6500 + x6813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6923 = x6767 * x6813;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6924 = x6922 - x6923;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6925 = x6501 + x6817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6926 = x6771 * x6817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6927 = x6925 - x6926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6928 = x6502 + x6821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6929 = x6775 * x6821;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6930 = x6928 - x6929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6931 = x6503 + x6825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6932 = x6779 * x6825;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6933 = x6931 - x6932;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6934 = x6504 + x6829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6935 = x6783 * x6829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6936 = x6934 - x6935;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6937 = x6505 + x6833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6938 = x6787 * x6833;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6939 = x6937 - x6938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6940 = x6506 + x6837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6941 = x6791 * x6837;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6942 = x6940 - x6941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6943 = x6507 + x6841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6944 = x6795 * x6841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6945 = x6943 - x6944;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6946 = x6508 + x6845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6947 = x6799 * x6845;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6948 = x6946 - x6947;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6949 = x6509 + x6849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6950 = x6803 * x6849;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6951 = x6949 - x6950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6952 = x6510 + x6853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6953 = x6807 * x6853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6954 = x6952 - x6953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6955 = x6511 + x6857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6956 = x6811 * x6857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6957 = x6955 - x6956;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6958 = x6512 + x6861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6959 = x6815 * x6861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6960 = x6958 - x6959;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6961 = x6513 + x6865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6962 = x6819 * x6865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6963 = x6961 - x6962;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6964 = x6482 + x6869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6965 = x6823 * x6869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6966 = x6964 - x6965;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6967 = x6483 + x6873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6968 = x6827 * x6873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6969 = x6967 - x6968;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6970 = x6621 + x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6971 = x6621 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6972 = x6971 * x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6973 = x6970 - x6972;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6974 = x6622 + x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6975 = x6622 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6976 = x6975 * x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6977 = x6974 - x6976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6978 = x6623 + x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6979 = x6623 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6980 = x6979 * x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6981 = x6978 - x6980;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6982 = x6624 + x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6983 = x6624 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6984 = x6983 * x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6985 = x6982 - x6984;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6986 = x6625 + x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6987 = x6625 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6988 = x6987 * x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6989 = x6986 - x6988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6990 = x6626 + x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6991 = x6626 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6992 = x6991 * x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6993 = x6990 - x6992;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6994 = x6627 + x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6995 = x6627 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6996 = x6995 * x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6997 = x6994 - x6996;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x6998 = x6628 + x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x6999 = x6628 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7000 = x6999 * x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7001 = x6998 - x7000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7002 = x6629 + x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7003 = x6629 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7004 = x7003 * x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7005 = x7002 - x7004;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7006 = x6630 + x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7007 = x6630 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7008 = x7007 * x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7009 = x7006 - x7008;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7010 = x6631 + x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7011 = x6631 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7012 = x7011 * x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7013 = x7010 - x7012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7014 = x6632 + x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7015 = x6632 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7016 = x7015 * x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7017 = x7014 - x7016;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7018 = x6633 + x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7019 = x6633 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7020 = x7019 * x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7021 = x7018 - x7020;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7022 = x6634 + x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7023 = x6634 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7024 = x7023 * x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7025 = x7022 - x7024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7026 = x6635 + x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7027 = x6635 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7028 = x7027 * x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7029 = x7026 - x7028;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7030 = x6636 + x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7031 = x6636 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7032 = x7031 * x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7033 = x7030 - x7032;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7034 = x6637 + x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7035 = x6637 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7036 = x7035 * x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7037 = x7034 - x7036;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7038 = x6638 + x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7039 = x6638 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7040 = x7039 * x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7041 = x7038 - x7040;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7042 = x6639 + x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7043 = x6639 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7044 = x7043 * x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7045 = x7042 - x7044;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7046 = x6640 + x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7047 = x6640 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7048 = x7047 * x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7049 = x7046 - x7048;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7050 = x6641 + x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7051 = x6641 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7052 = x7051 * x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7053 = x7050 - x7052;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7054 = x6610 + x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7055 = x6610 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7056 = x7055 * x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7057 = x7054 - x7056;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7058 = x6611 + x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7059 = x6611 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7060 = x7059 * x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7061 = x7058 - x7060;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7062 = x6612 + x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7063 = x6612 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7064 = x7063 * x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7065 = x7062 - x7064;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7066 = x6613 + x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7067 = x6613 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7068 = x7067 * x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7069 = x7066 - x7068;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7070 = x6614 + x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7071 = x6614 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7072 = x7071 * x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7073 = x7070 - x7072;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7074 = x6615 + x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7075 = x6615 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7076 = x7075 * x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7077 = x7074 - x7076;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7078 = x6616 + x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7079 = x6616 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7080 = x7079 * x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7081 = x7078 - x7080;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7082 = x6617 + x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7083 = x6617 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7084 = x7083 * x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7085 = x7082 - x7084;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7086 = x6618 + x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7087 = x6618 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7088 = x7087 * x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7089 = x7086 - x7088;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7090 = x6619 + x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7091 = x6619 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7092 = x7091 * x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7093 = x7090 - x7092;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7094 = x6620 + x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7095 = x6620 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7096 = x7095 * x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7097 = x7094 - x7096;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7098 = x6616 + x6973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7099 = x7079 * x6973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7100 = x7098 - x7099;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7101 = x6617 + x6977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7102 = x7083 * x6977;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7103 = x7101 - x7102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7104 = x6618 + x6981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7105 = x7087 * x6981;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7106 = x7104 - x7105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7107 = x6619 + x6985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7108 = x7091 * x6985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7109 = x7107 - x7108;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7110 = x6620 + x6989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7111 = x7095 * x6989;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7112 = x7110 - x7111;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7113 = x6621 + x6993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7114 = x6971 * x6993;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7115 = x7113 - x7114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7116 = x6622 + x6997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7117 = x6975 * x6997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7118 = x7116 - x7117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x6623 + x7001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7120 = x6979 * x7001;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7121 = x7119 - x7120;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x6624 + x7005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7123 = x6983 * x7005;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7124 = x7122 - x7123;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7125 = x6625 + x7009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7126 = x6987 * x7009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7127 = x7125 - x7126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7128 = x6626 + x7013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7129 = x6991 * x7013;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7130 = x7128 - x7129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x6627 + x7017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7132 = x6995 * x7017;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7133 = x7131 - x7132;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x6628 + x7021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7135 = x6999 * x7021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7136 = x7134 - x7135;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7137 = x6629 + x7025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7138 = x7003 * x7025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7139 = x7137 - x7138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7140 = x6630 + x7029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7141 = x7007 * x7029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7142 = x7140 - x7141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x6631 + x7033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7144 = x7011 * x7033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7145 = x7143 - x7144;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x6632 + x7037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7147 = x7015 * x7037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7148 = x7146 - x7147;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7149 = x6633 + x7041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7150 = x7019 * x7041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7151 = x7149 - x7150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7152 = x6634 + x7045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7153 = x7023 * x7045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7154 = x7152 - x7153;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x6635 + x7049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7156 = x7027 * x7049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7157 = x7155 - x7156;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x6636 + x7053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7159 = x7031 * x7053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7160 = x7158 - x7159;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7161 = x6637 + x7057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7162 = x7035 * x7057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7163 = x7161 - x7162;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7164 = x6638 + x7061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7165 = x7039 * x7061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7166 = x7164 - x7165;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x6639 + x7065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7168 = x7043 * x7065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7169 = x7167 - x7168;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x6640 + x7069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7171 = x7047 * x7069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7172 = x7170 - x7171;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7173 = x6641 + x7073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7174 = x7051 * x7073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7175 = x7173 - x7174;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7176 = x6610 + x7077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7177 = x7055 * x7077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7178 = x7176 - x7177;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7179 = x6611 + x7081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7180 = x7059 * x7081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7181 = x7179 - x7180;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x6612 + x7085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7183 = x7063 * x7085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7184 = x7182 - x7183;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7185 = x6613 + x7089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7186 = x7067 * x7089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7187 = x7185 - x7186;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7188 = x6614 + x7093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7189 = x7071 * x7093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7190 = x7188 - x7189;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7191 = x6615 + x7097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7192 = x7075 * x7097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7193 = x7191 - x7192;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7194 = x6707 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7195 = x6706 + x7194;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7196 = x6708 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7197 = x7195 + x7196;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7198 = x6709 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7199 = x7197 + x7198;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7200 = x6710 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7201 = x7199 + x7200;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7202 = x6711 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7203 = x7201 + x7202;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7204 = x6712 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7205 = x7203 + x7204;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7206 = x6713 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7207 = x7205 + x7206;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7208 = x6714 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7209 = x7207 + x7208;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7210 = x6715 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7211 = x7209 + x7210;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7212 = x6716 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7213 = x7211 + x7212;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7214 = x6717 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7215 = x7213 + x7214;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7216 = x6718 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7217 = x7215 + x7216;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7218 = x6719 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7219 = x7217 + x7218;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7220 = x6720 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7221 = x7219 + x7220;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7222 = x6721 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7223 = x7221 + x7222;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7224 = x6723 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7225 = x6722 + x7224;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7226 = x6724 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7227 = x7225 + x7226;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7228 = x6725 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7229 = x7227 + x7228;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7230 = x6726 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7231 = x7229 + x7230;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7232 = x6727 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7233 = x7231 + x7232;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7234 = x6728 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7235 = x7233 + x7234;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7236 = x6729 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7237 = x7235 + x7236;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7238 = x6730 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7239 = x7237 + x7238;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7240 = x6731 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7241 = x7239 + x7240;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7242 = x6732 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7243 = x7241 + x7242;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7244 = x6733 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7245 = x7243 + x7244;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7246 = x6734 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7247 = x7245 + x7246;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7248 = x6735 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7249 = x7247 + x7248;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7250 = x6736 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7251 = x7249 + x7250;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7252 = x6737 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7253 = x7251 + x7252;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7254 = x6610 * x6642;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7255 = x95 - x6610;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7256 = x7255 * x6674;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7257 = x7254 + x7256;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7258 = x6611 * x6643;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7259 = x95 - x6611;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7260 = x7259 * x6675;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7261 = x7258 + x7260;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7262 = x6612 * x6644;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7263 = x95 - x6612;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7264 = x7263 * x6676;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7265 = x7262 + x7264;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7266 = x6613 * x6645;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7267 = x95 - x6613;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7268 = x7267 * x6677;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7269 = x7266 + x7268;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7270 = x6614 * x6646;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7271 = x95 - x6614;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7272 = x7271 * x6678;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7273 = x7270 + x7272;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7274 = x6615 * x6647;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7275 = x95 - x6615;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7276 = x7275 * x6679;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7277 = x7274 + x7276;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7278 = x6616 * x6648;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7279 = x95 - x6616;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7280 = x7279 * x6680;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7281 = x7278 + x7280;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7282 = x6617 * x6649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7283 = x95 - x6617;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7284 = x7283 * x6681;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7285 = x7282 + x7284;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7286 = x6618 * x6650;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7287 = x95 - x6618;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7288 = x7287 * x6682;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7289 = x7286 + x7288;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7290 = x6619 * x6651;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7291 = x95 - x6619;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7292 = x7291 * x6683;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7293 = x7290 + x7292;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7294 = x6620 * x6652;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7295 = x95 - x6620;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7296 = x7295 * x6684;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7297 = x7294 + x7296;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7298 = x6621 * x6653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7299 = x95 - x6621;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7300 = x7299 * x6685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7301 = x7298 + x7300;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7302 = x6622 * x6654;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7303 = x95 - x6622;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7304 = x7303 * x6686;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7305 = x7302 + x7304;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7306 = x6623 * x6655;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7307 = x95 - x6623;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7308 = x7307 * x6687;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7309 = x7306 + x7308;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7310 = x6624 * x6656;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7311 = x95 - x6624;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7312 = x7311 * x6688;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7313 = x7310 + x7312;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7314 = x6625 * x6657;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7315 = x95 - x6625;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7316 = x7315 * x6689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7317 = x7314 + x7316;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7318 = x6626 * x6658;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7319 = x95 - x6626;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7320 = x7319 * x6690;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7321 = x7318 + x7320;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7322 = x6627 * x6659;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7323 = x95 - x6627;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7324 = x7323 * x6691;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7325 = x7322 + x7324;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7326 = x6628 * x6660;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7327 = x95 - x6628;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7328 = x7327 * x6692;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7329 = x7326 + x7328;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7330 = x6629 * x6661;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7331 = x95 - x6629;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7332 = x7331 * x6693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7333 = x7330 + x7332;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7334 = x6630 * x6662;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7335 = x95 - x6630;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7336 = x7335 * x6694;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7337 = x7334 + x7336;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7338 = x6631 * x6663;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7339 = x95 - x6631;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7340 = x7339 * x6695;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7341 = x7338 + x7340;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7342 = x6632 * x6664;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7343 = x95 - x6632;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7344 = x7343 * x6696;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7345 = x7342 + x7344;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7346 = x6633 * x6665;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7347 = x95 - x6633;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7348 = x7347 * x6697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7349 = x7346 + x7348;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7350 = x6634 * x6666;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7351 = x95 - x6634;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7352 = x7351 * x6698;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7353 = x7350 + x7352;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7354 = x6635 * x6667;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7355 = x95 - x6635;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7356 = x7355 * x6699;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7357 = x7354 + x7356;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7358 = x6636 * x6668;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7359 = x95 - x6636;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7360 = x7359 * x6700;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7361 = x7358 + x7360;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7362 = x6637 * x6669;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7363 = x95 - x6637;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7364 = x7363 * x6701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7365 = x7362 + x7364;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7366 = x6638 * x6670;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7367 = x95 - x6638;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7368 = x7367 * x6702;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7369 = x7366 + x7368;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7370 = x6639 * x6671;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7371 = x95 - x6639;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7372 = x7371 * x6703;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7373 = x7370 + x7372;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7374 = x6640 * x6672;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7375 = x95 - x6640;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7376 = x7375 * x6704;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7377 = x7374 + x7376;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7378 = x6641 * x6673;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7379 = x95 - x6641;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7380 = x7379 * x6705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7381 = x7378 + x7380;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7382 = x7261 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7383 = x7257 + x7382;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7384 = x7265 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7385 = x7383 + x7384;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7386 = x7269 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7387 = x7385 + x7386;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7388 = x7273 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7389 = x7387 + x7388;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7390 = x7277 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7391 = x7389 + x7390;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7392 = x7281 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7393 = x7391 + x7392;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7394 = x7285 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7395 = x7393 + x7394;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7396 = x7289 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7397 = x7395 + x7396;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7398 = x7293 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7399 = x7397 + x7398;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7400 = x7297 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7401 = x7399 + x7400;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7402 = x7301 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7403 = x7401 + x7402;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7404 = x7305 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7405 = x7403 + x7404;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7406 = x7309 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7407 = x7405 + x7406;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7408 = x7313 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7409 = x7407 + x7408;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7410 = x7317 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7411 = x7409 + x7410;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7412 = x7325 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7413 = x7321 + x7412;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7414 = x7329 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7415 = x7413 + x7414;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7416 = x7333 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7417 = x7415 + x7416;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7418 = x7337 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7419 = x7417 + x7418;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7420 = x7341 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7421 = x7419 + x7420;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7422 = x7345 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7423 = x7421 + x7422;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7424 = x7349 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7425 = x7423 + x7424;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7426 = x7353 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7427 = x7425 + x7426;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7428 = x7357 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7429 = x7427 + x7428;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7430 = x7361 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7431 = x7429 + x7430;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7432 = x7365 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7433 = x7431 + x7432;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7434 = x7369 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7435 = x7433 + x7434;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7436 = x7373 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7437 = x7435 + x7436;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7438 = x7377 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7439 = x7437 + x7438;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7440 = x7381 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7441 = x7439 + x7440;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7442 = x7103 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7443 = x7100 + x7442;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7444 = x7106 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7445 = x7443 + x7444;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7446 = x7109 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7447 = x7445 + x7446;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7448 = x7112 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7449 = x7447 + x7448;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7450 = x7115 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7451 = x7449 + x7450;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7452 = x7118 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7453 = x7451 + x7452;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7454 = x7121 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7455 = x7453 + x7454;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7456 = x7124 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7457 = x7455 + x7456;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7458 = x7127 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7459 = x7457 + x7458;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7460 = x7130 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7461 = x7459 + x7460;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7462 = x7133 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7463 = x7461 + x7462;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7464 = x7136 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7465 = x7463 + x7464;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7466 = x7139 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7467 = x7465 + x7466;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7468 = x7142 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7469 = x7467 + x7468;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7470 = x7145 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7471 = x7469 + x7470;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7472 = x7151 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7473 = x7148 + x7472;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7474 = x7154 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7475 = x7473 + x7474;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7476 = x7157 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7477 = x7475 + x7476;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7478 = x7160 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7479 = x7477 + x7478;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7480 = x7163 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7481 = x7479 + x7480;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7482 = x7166 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7483 = x7481 + x7482;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7484 = x7169 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7485 = x7483 + x7484;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7486 = x7172 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7487 = x7485 + x7486;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7488 = x7175 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7489 = x7487 + x7488;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7490 = x7178 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7491 = x7489 + x7490;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7492 = x7181 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7493 = x7491 + x7492;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7494 = x7184 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7495 = x7493 + x7494;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7496 = x7187 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7497 = x7495 + x7496;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7498 = x7190 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7499 = x7497 + x7498;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7500 = x7193 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7501 = x7499 + x7500;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7502 = x7411 + x7471;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7503 = x7441 + x7501;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7504 = x7223 + x7502;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7505 = x7253 + x7503;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7506 = x6743 + x7504;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7507 = x6745 + x7505;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7508 = x6398 + x7506;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7509 = x6479 + x7507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7510 = x6482 * x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7511 = x95 - x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7512 = x7510 * x7511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7513 = x95 - x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7514 = x6482 * x7513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7515 = x7514 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7516 = x7512 + x7515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7517 = x95 - x6482;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7518 = x7517 * x6514;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7519 = x7518 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7520 = x7516 + x7519;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7521 = x7510 * x6546;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7522 = x7520 + x7521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7523 = x6483 * x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7524 = x95 - x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7525 = x7523 * x7524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7526 = x95 - x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7527 = x6483 * x7526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7528 = x7527 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7529 = x7525 + x7528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7530 = x95 - x6483;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7531 = x7530 * x6515;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7532 = x7531 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7533 = x7529 + x7532;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7534 = x7523 * x6547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7535 = x7533 + x7534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7536 = x6484 * x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7537 = x95 - x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7538 = x7536 * x7537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7539 = x95 - x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7540 = x6484 * x7539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7541 = x7540 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7542 = x7538 + x7541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7543 = x95 - x6484;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7544 = x7543 * x6516;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7545 = x7544 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7546 = x7542 + x7545;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7547 = x7536 * x6548;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7548 = x7546 + x7547;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7549 = x6485 * x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7550 = x95 - x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7551 = x7549 * x7550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7552 = x95 - x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7553 = x6485 * x7552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7554 = x7553 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7555 = x7551 + x7554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7556 = x95 - x6485;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7557 = x7556 * x6517;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7558 = x7557 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7559 = x7555 + x7558;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7560 = x7549 * x6549;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7561 = x7559 + x7560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7562 = x6486 * x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7563 = x95 - x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7564 = x7562 * x7563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7565 = x95 - x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7566 = x6486 * x7565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7567 = x7566 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7568 = x7564 + x7567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7569 = x95 - x6486;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7570 = x7569 * x6518;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7571 = x7570 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7572 = x7568 + x7571;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7573 = x7562 * x6550;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7574 = x7572 + x7573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7575 = x6487 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7576 = x95 - x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7577 = x7575 * x7576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7578 = x95 - x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7579 = x6487 * x7578;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7580 = x7579 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7581 = x7577 + x7580;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7582 = x95 - x6487;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7583 = x7582 * x6519;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7584 = x7583 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7585 = x7581 + x7584;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7586 = x7575 * x6551;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7587 = x7585 + x7586;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7588 = x6488 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7589 = x95 - x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7590 = x7588 * x7589;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7591 = x95 - x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7592 = x6488 * x7591;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7593 = x7592 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7594 = x7590 + x7593;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7595 = x95 - x6488;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7596 = x7595 * x6520;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7597 = x7596 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7598 = x7594 + x7597;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7599 = x7588 * x6552;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7600 = x7598 + x7599;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7601 = x6489 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7602 = x95 - x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7603 = x7601 * x7602;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7604 = x95 - x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7605 = x6489 * x7604;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7606 = x7605 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7607 = x7603 + x7606;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7608 = x95 - x6489;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7609 = x7608 * x6521;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7610 = x7609 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7611 = x7607 + x7610;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7612 = x7601 * x6553;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7613 = x7611 + x7612;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7614 = x6490 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7615 = x95 - x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7616 = x7614 * x7615;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7617 = x95 - x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7618 = x6490 * x7617;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7619 = x7618 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7620 = x7616 + x7619;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7621 = x95 - x6490;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7622 = x7621 * x6522;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7623 = x7622 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7624 = x7620 + x7623;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7625 = x7614 * x6554;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7626 = x7624 + x7625;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7627 = x6491 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7628 = x95 - x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7629 = x7627 * x7628;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7630 = x95 - x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7631 = x6491 * x7630;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7632 = x7631 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7633 = x7629 + x7632;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7634 = x95 - x6491;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7635 = x7634 * x6523;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7636 = x7635 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7637 = x7633 + x7636;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7638 = x7627 * x6555;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7639 = x7637 + x7638;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7640 = x6492 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7641 = x95 - x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7642 = x7640 * x7641;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7643 = x95 - x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7644 = x6492 * x7643;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7645 = x7644 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7646 = x7642 + x7645;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7647 = x95 - x6492;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7648 = x7647 * x6524;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7649 = x7648 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7650 = x7646 + x7649;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7651 = x7640 * x6556;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7652 = x7650 + x7651;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7653 = x6493 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7654 = x95 - x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7655 = x7653 * x7654;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7656 = x95 - x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7657 = x6493 * x7656;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7658 = x7657 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7659 = x7655 + x7658;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7660 = x95 - x6493;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7661 = x7660 * x6525;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7662 = x7661 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7663 = x7659 + x7662;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7664 = x7653 * x6557;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7665 = x7663 + x7664;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7666 = x6494 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7667 = x95 - x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7668 = x7666 * x7667;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7669 = x95 - x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7670 = x6494 * x7669;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7671 = x7670 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7672 = x7668 + x7671;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7673 = x95 - x6494;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7674 = x7673 * x6526;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7675 = x7674 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7676 = x7672 + x7675;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7677 = x7666 * x6558;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7678 = x7676 + x7677;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7679 = x6495 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7680 = x95 - x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7681 = x7679 * x7680;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7682 = x95 - x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7683 = x6495 * x7682;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7684 = x7683 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7685 = x7681 + x7684;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7686 = x95 - x6495;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7687 = x7686 * x6527;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7688 = x7687 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7689 = x7685 + x7688;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7690 = x7679 * x6559;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7691 = x7689 + x7690;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7692 = x6496 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7693 = x95 - x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7694 = x7692 * x7693;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7695 = x95 - x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7696 = x6496 * x7695;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7697 = x7696 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7698 = x7694 + x7697;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7699 = x95 - x6496;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7700 = x7699 * x6528;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7701 = x7700 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7702 = x7698 + x7701;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7703 = x7692 * x6560;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7704 = x7702 + x7703;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7705 = x6497 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7706 = x95 - x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7707 = x7705 * x7706;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7708 = x95 - x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7709 = x6497 * x7708;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7710 = x7709 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7711 = x7707 + x7710;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7712 = x95 - x6497;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7713 = x7712 * x6529;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7714 = x7713 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7715 = x7711 + x7714;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7716 = x7705 * x6561;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7717 = x7715 + x7716;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7718 = x6498 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7719 = x95 - x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7720 = x7718 * x7719;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7721 = x95 - x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7722 = x6498 * x7721;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7723 = x7722 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7724 = x7720 + x7723;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7725 = x95 - x6498;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7726 = x7725 * x6530;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7727 = x7726 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7728 = x7724 + x7727;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7729 = x7718 * x6562;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7730 = x7728 + x7729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7731 = x6499 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7732 = x95 - x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7733 = x7731 * x7732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7734 = x95 - x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7735 = x6499 * x7734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7736 = x7735 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7737 = x7733 + x7736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7738 = x95 - x6499;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7739 = x7738 * x6531;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7740 = x7739 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7741 = x7737 + x7740;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7742 = x7731 * x6563;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7743 = x7741 + x7742;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7744 = x6500 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7745 = x95 - x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7746 = x7744 * x7745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7747 = x95 - x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7748 = x6500 * x7747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7749 = x7748 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7750 = x7746 + x7749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7751 = x95 - x6500;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7752 = x7751 * x6532;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7753 = x7752 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7754 = x7750 + x7753;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7755 = x7744 * x6564;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7756 = x7754 + x7755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7757 = x6501 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7758 = x95 - x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7759 = x7757 * x7758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7760 = x95 - x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7761 = x6501 * x7760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7762 = x7761 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7763 = x7759 + x7762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7764 = x95 - x6501;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7765 = x7764 * x6533;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7766 = x7765 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7767 = x7763 + x7766;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7768 = x7757 * x6565;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7769 = x7767 + x7768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7770 = x6502 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7771 = x95 - x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7772 = x7770 * x7771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7773 = x95 - x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7774 = x6502 * x7773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7775 = x7774 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7776 = x7772 + x7775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7777 = x95 - x6502;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7778 = x7777 * x6534;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7779 = x7778 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7780 = x7776 + x7779;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7781 = x7770 * x6566;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7782 = x7780 + x7781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7783 = x6503 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7784 = x95 - x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7785 = x7783 * x7784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7786 = x95 - x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7787 = x6503 * x7786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7788 = x7787 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7789 = x7785 + x7788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7790 = x95 - x6503;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7791 = x7790 * x6535;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7792 = x7791 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7793 = x7789 + x7792;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7794 = x7783 * x6567;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7795 = x7793 + x7794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7796 = x6504 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7797 = x95 - x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7798 = x7796 * x7797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7799 = x95 - x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7800 = x6504 * x7799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7801 = x7800 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7802 = x7798 + x7801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7803 = x95 - x6504;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7804 = x7803 * x6536;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7805 = x7804 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7806 = x7802 + x7805;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7807 = x7796 * x6568;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7808 = x7806 + x7807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7809 = x6505 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7810 = x95 - x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7811 = x7809 * x7810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7812 = x95 - x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7813 = x6505 * x7812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7814 = x7813 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7815 = x7811 + x7814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7816 = x95 - x6505;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7817 = x7816 * x6537;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7818 = x7817 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7819 = x7815 + x7818;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7820 = x7809 * x6569;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7821 = x7819 + x7820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7822 = x6506 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7823 = x95 - x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7824 = x7822 * x7823;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7825 = x95 - x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7826 = x6506 * x7825;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7827 = x7826 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7828 = x7824 + x7827;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7829 = x95 - x6506;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7830 = x7829 * x6538;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7831 = x7830 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7832 = x7828 + x7831;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7833 = x7822 * x6570;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7834 = x7832 + x7833;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7835 = x6507 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7836 = x95 - x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7837 = x7835 * x7836;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7838 = x95 - x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7839 = x6507 * x7838;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7840 = x7839 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7841 = x7837 + x7840;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7842 = x95 - x6507;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7843 = x7842 * x6539;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7844 = x7843 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7845 = x7841 + x7844;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7846 = x7835 * x6571;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7847 = x7845 + x7846;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7848 = x6508 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7849 = x95 - x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7850 = x7848 * x7849;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7851 = x95 - x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7852 = x6508 * x7851;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7853 = x7852 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7854 = x7850 + x7853;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7855 = x95 - x6508;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7856 = x7855 * x6540;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7857 = x7856 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7858 = x7854 + x7857;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7859 = x7848 * x6572;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7860 = x7858 + x7859;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7861 = x6509 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7862 = x95 - x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7863 = x7861 * x7862;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7864 = x95 - x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7865 = x6509 * x7864;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7866 = x7865 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7867 = x7863 + x7866;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7868 = x95 - x6509;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7869 = x7868 * x6541;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7870 = x7869 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7871 = x7867 + x7870;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7872 = x7861 * x6573;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7873 = x7871 + x7872;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7874 = x6510 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7875 = x95 - x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7876 = x7874 * x7875;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7877 = x95 - x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7878 = x6510 * x7877;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7879 = x7878 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7880 = x7876 + x7879;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7881 = x95 - x6510;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7882 = x7881 * x6542;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7883 = x7882 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7884 = x7880 + x7883;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7885 = x7874 * x6574;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7886 = x7884 + x7885;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7887 = x6511 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7888 = x95 - x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7889 = x7887 * x7888;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7890 = x95 - x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7891 = x6511 * x7890;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7892 = x7891 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7893 = x7889 + x7892;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7894 = x95 - x6511;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7895 = x7894 * x6543;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7896 = x7895 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7897 = x7893 + x7896;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7898 = x7887 * x6575;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7899 = x7897 + x7898;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7900 = x6512 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7901 = x95 - x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7902 = x7900 * x7901;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7903 = x95 - x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7904 = x6512 * x7903;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7905 = x7904 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7906 = x7902 + x7905;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7907 = x95 - x6512;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7908 = x7907 * x6544;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7909 = x7908 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7910 = x7906 + x7909;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7911 = x7900 * x6576;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7912 = x7910 + x7911;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7913 = x6513 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7914 = x95 - x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7915 = x7913 * x7914;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7916 = x95 - x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7917 = x6513 * x7916;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7918 = x7917 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7919 = x7915 + x7918;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7920 = x95 - x6513;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7921 = x7920 * x6545;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7922 = x7921 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7923 = x7919 + x7922;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7924 = x7913 * x6577;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7925 = x7923 + x7924;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7926 = x7535 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7927 = x7522 + x7926;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7928 = x7548 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7929 = x7927 + x7928;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7930 = x7561 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7931 = x7929 + x7930;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7932 = x7574 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7933 = x7931 + x7932;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7934 = x7587 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7935 = x7933 + x7934;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7936 = x7600 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7937 = x7935 + x7936;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7938 = x7613 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7939 = x7937 + x7938;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7940 = x7626 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7941 = x7939 + x7940;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7942 = x7639 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7943 = x7941 + x7942;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7944 = x7652 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7945 = x7943 + x7944;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7946 = x7665 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7947 = x7945 + x7946;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7948 = x7678 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7949 = x7947 + x7948;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7950 = x7691 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7951 = x7949 + x7950;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7952 = x7704 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7953 = x7951 + x7952;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7954 = x7717 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7955 = x7953 + x7954;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7956 = x7743 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7957 = x7730 + x7956;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7958 = x7756 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7959 = x7957 + x7958;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7960 = x7769 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7961 = x7959 + x7960;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7962 = x7782 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7963 = x7961 + x7962;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7964 = x7795 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7965 = x7963 + x7964;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7966 = x7808 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7967 = x7965 + x7966;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7968 = x7821 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7969 = x7967 + x7968;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7970 = x7834 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7971 = x7969 + x7970;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7972 = x7847 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7973 = x7971 + x7972;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7974 = x7860 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7975 = x7973 + x7974;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7976 = x7873 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7977 = x7975 + x7976;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7978 = x7886 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7979 = x7977 + x7978;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7980 = x7899 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7981 = x7979 + x7980;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7982 = x7912 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7983 = x7981 + x7982;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7984 = x7925 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7985 = x7983 + x7984;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7986 = x6879 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7987 = x6876 + x7986;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7988 = x6882 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7989 = x7987 + x7988;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7990 = x6885 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7991 = x7989 + x7990;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7992 = x6888 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7993 = x7991 + x7992;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7994 = x6891 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7995 = x7993 + x7994;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7996 = x6894 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7997 = x7995 + x7996;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7998 = x6897 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7999 = x7997 + x7998;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8000 = x6900 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8001 = x7999 + x8000;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8002 = x6903 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8003 = x8001 + x8002;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8004 = x6906 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8005 = x8003 + x8004;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8006 = x6909 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8007 = x8005 + x8006;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8008 = x6912 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8009 = x8007 + x8008;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8010 = x6915 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8011 = x8009 + x8010;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8012 = x6918 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8013 = x8011 + x8012;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8014 = x6921 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8015 = x8013 + x8014;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8016 = x6927 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8017 = x6924 + x8016;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8018 = x6930 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8019 = x8017 + x8018;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8020 = x6933 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8021 = x8019 + x8020;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8022 = x6936 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8023 = x8021 + x8022;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8024 = x6939 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8025 = x8023 + x8024;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8026 = x6942 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8027 = x8025 + x8026;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8028 = x6945 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8029 = x8027 + x8028;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8030 = x6948 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8031 = x8029 + x8030;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8032 = x6951 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8033 = x8031 + x8032;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8034 = x6954 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8035 = x8033 + x8034;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8036 = x6957 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8037 = x8035 + x8036;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8038 = x6960 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8039 = x8037 + x8038;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8040 = x6963 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8041 = x8039 + x8040;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8042 = x6966 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8043 = x8041 + x8042;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8044 = x6969 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8045 = x8043 + x8044;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8046 = x7955 + x8015;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8047 = x7985 + x8045;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8048 = x7508 + x8046;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8049 = x7509 + x8047;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8050 = x6579 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8051 = x6578 + x8050;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8052 = x6580 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8053 = x8051 + x8052;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8054 = x6581 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8055 = x8053 + x8054;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8056 = x6582 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8057 = x8055 + x8056;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8058 = x6583 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8059 = x8057 + x8058;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8060 = x6584 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8061 = x8059 + x8060;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8062 = x6585 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8063 = x8061 + x8062;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8064 = x6586 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8065 = x8063 + x8064;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8066 = x6587 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8067 = x8065 + x8066;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8068 = x6588 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8069 = x8067 + x8068;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8070 = x6589 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8071 = x8069 + x8070;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8072 = x6590 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8073 = x8071 + x8072;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8074 = x6591 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8075 = x8073 + x8074;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8076 = x6592 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8077 = x8075 + x8076;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8078 = x6593 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8079 = x8077 + x8078;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8080 = x6595 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8081 = x6594 + x8080;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8082 = x6596 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8083 = x8081 + x8082;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8084 = x6597 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8085 = x8083 + x8084;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8086 = x6598 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8087 = x8085 + x8086;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8088 = x6599 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8089 = x8087 + x8088;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8090 = x6600 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8091 = x8089 + x8090;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8092 = x6601 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8093 = x8091 + x8092;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8094 = x6602 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8095 = x8093 + x8094;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8096 = x6603 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8097 = x8095 + x8096;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8098 = x6604 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8099 = x8097 + x8098;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8100 = x6605 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8101 = x8099 + x8100;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8102 = x6606 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8103 = x8101 + x8102;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8104 = x6607 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8105 = x8103 + x8104;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8106 = x6608 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8107 = x8105 + x8106;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8108 = x6609 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8109 = x8107 + x8108;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8110 = x7508 + x8079;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8111 = x7509 + x8109;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8048);
        reg = x8048;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8110);
        reg = x8110;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8049);
        reg = x8049;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8111);
        reg = x8111;
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8112 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8112 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8113 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x8113 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8114 = Fp(x8112.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8114);
          reg = x8114;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8115 = Fp(x8112.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8116 = x8115 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8116);
          reg = x8116;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8117 = Fp(x8112.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8118 = x8117 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8118);
          reg = x8118;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8119 = Fp(x8112.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8120 = x8119 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8120);
          reg = x8120;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8121 = Fp(x8112.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8122 = x8121 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8122);
          reg = x8122;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8123 = Fp(x8112.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8124 = x8123 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8124);
          reg = x8124;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8125 = Fp(x8112.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8126 = x8125 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8126);
          reg = x8126;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8127 = Fp(x8112.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8128 = x8127 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8128);
          reg = x8128;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8129 = Fp(x8112.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8130 = x8129 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8130);
          reg = x8130;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8131 = Fp(x8112.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8132 = x8131 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8132);
          reg = x8132;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8133 = Fp(x8112.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8134 = x8133 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8134);
          reg = x8134;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8135 = Fp(x8112.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8136 = x8135 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8136);
          reg = x8136;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8137 = Fp(x8112.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8138 = x8137 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8138);
          reg = x8138;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8139 = Fp(x8112.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8140 = x8139 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8140);
          reg = x8140;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8141 = Fp(x8112.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8142 = x8141 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8142);
          reg = x8142;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8143 = Fp(x8112.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8144 = x8143 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8144);
          reg = x8144;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8145 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x8145 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8146 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x8146 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8147 = x8146 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8148 = x8145 + x8147;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8149 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x8149 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8150 = x8149 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8151 = x8148 + x8150;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8152 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8152 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8153 = x8152 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8154 = x8151 + x8153;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8155 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8155 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8156 = x8155 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8157 = x8154 + x8156;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8158 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8158 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8159 = x8158 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8160 = x8157 + x8159;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8161 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8161 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8162 = x8161 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8163 = x8160 + x8162;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8164 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x8164 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8165 = x8164 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8166 = x8163 + x8165;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8167 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x8167 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8168 = x8167 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8169 = x8166 + x8168;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8170 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8170 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8171 = x8170 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8172 = x8169 + x8171;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8173 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8173 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8174 = x8173 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8175 = x8172 + x8174;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8176 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8176 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8177 = x8176 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8178 = x8175 + x8177;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8179 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8179 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8180 = x8179 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8181 = x8178 + x8180;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8182 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8182 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8183 = x8182 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8184 = x8181 + x8183;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8185 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8185 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8186 = x8185 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8187 = x8184 + x8186;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8188 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8188 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8189 = x8188 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8190 = x8187 + x8189;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8191 = x8112 - x8190;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8192 = x8191 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8193 = Fp(x8192.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8193);
          reg = x8193;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8194 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8194 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8195 = x8192 - x8194;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8196 = x8195 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8197 = x95 - x8196;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8198 = x8196 * x8197;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8198 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8199 = x8113 + x8192;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8200 = Fp(x8199.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8200);
          reg = x8200;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8201 = Fp(x8199.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8202 = x8201 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8202);
          reg = x8202;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8203 = Fp(x8199.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8204 = x8203 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8204);
          reg = x8204;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8205 = Fp(x8199.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8206 = x8205 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8206);
          reg = x8206;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8207 = Fp(x8199.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8208 = x8207 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8208);
          reg = x8208;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8209 = Fp(x8199.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8210 = x8209 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8210);
          reg = x8210;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8211 = Fp(x8199.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8212 = x8211 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8212);
          reg = x8212;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8213 = Fp(x8199.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8214 = x8213 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8214);
          reg = x8214;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8215 = Fp(x8199.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8216 = x8215 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8216);
          reg = x8216;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8217 = Fp(x8199.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8218 = x8217 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8218);
          reg = x8218;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8219 = Fp(x8199.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8220 = x8219 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8220);
          reg = x8220;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8221 = Fp(x8199.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8222 = x8221 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8222);
          reg = x8222;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8223 = Fp(x8199.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8224 = x8223 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8224);
          reg = x8224;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8225 = Fp(x8199.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8226 = x8225 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8226);
          reg = x8226;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8227 = Fp(x8199.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8228 = x8227 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8228);
          reg = x8228;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8229 = Fp(x8199.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8230 = x8229 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8230);
          reg = x8230;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8231 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8231 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8232 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8232 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8233 = x8232 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8234 = x8231 + x8233;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8235 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8235 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8236 = x8235 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8237 = x8234 + x8236;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8238 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8238 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8239 = x8238 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8240 = x8237 + x8239;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8241 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8241 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8242 = x8241 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8243 = x8240 + x8242;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8244 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8244 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8245 = x8244 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8246 = x8243 + x8245;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8247 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8247 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8248 = x8247 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8249 = x8246 + x8248;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8250 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8250 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8251 = x8250 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8252 = x8249 + x8251;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8253 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8253 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8254 = x8253 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8255 = x8252 + x8254;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8256 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8256 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8257 = x8256 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8258 = x8255 + x8257;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8259 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8259 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8260 = x8259 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8261 = x8258 + x8260;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8262 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8262 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8263 = x8262 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8264 = x8261 + x8263;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8265 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8265 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8266 = x8265 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8267 = x8264 + x8266;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8268 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8268 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8269 = x8268 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8270 = x8267 + x8269;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8271 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8271 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8272 = x8271 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8273 = x8270 + x8272;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8274 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8274 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8275 = x8274 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8276 = x8273 + x8275;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8277 = x8199 - x8276;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8278 = x8277 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8279 = Fp(x8278.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8279);
          reg = x8279;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8280 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x8280 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8281 = x8278 - x8280;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8282 = x8281 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8283 = x95 - x8282;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8284 = x8282 * x8283;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8284 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8285 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8285 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8286 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8286 != Fp::invalid());
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8287 = Fp(x8285.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8287);
          reg = x8287;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8288 = Fp(x8285.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8289 = x8288 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8289);
          reg = x8289;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8290 = Fp(x8285.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8291 = x8290 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8291);
          reg = x8291;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8292 = Fp(x8285.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8293 = x8292 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8293);
          reg = x8293;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8294 = Fp(x8285.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8295 = x8294 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8295);
          reg = x8295;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8296 = Fp(x8285.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8297 = x8296 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8297);
          reg = x8297;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8298 = Fp(x8285.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8299 = x8298 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8299);
          reg = x8299;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8300 = Fp(x8285.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8301 = x8300 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8301);
          reg = x8301;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8302 = Fp(x8285.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8303 = x8302 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8303);
          reg = x8303;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8304 = Fp(x8285.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8305 = x8304 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8305);
          reg = x8305;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8306 = Fp(x8285.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8307 = x8306 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8307);
          reg = x8307;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8308 = Fp(x8285.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8309 = x8308 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8309);
          reg = x8309;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8310 = Fp(x8285.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8311 = x8310 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8311);
          reg = x8311;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8312 = Fp(x8285.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8313 = x8312 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8313);
          reg = x8313;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8314 = Fp(x8285.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8315 = x8314 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8315);
          reg = x8315;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8316 = Fp(x8285.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8317 = x8316 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8317);
          reg = x8317;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8318 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8318 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8319 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8319 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8320 = x8319 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8321 = x8318 + x8320;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8322 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8322 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8323 = x8322 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8324 = x8321 + x8323;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8325 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8325 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8326 = x8325 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8327 = x8324 + x8326;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8328 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8328 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8329 = x8328 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8330 = x8327 + x8329;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8331 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8331 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8332 = x8331 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8333 = x8330 + x8332;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8334 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8334 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8335 = x8334 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8336 = x8333 + x8335;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8337 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8337 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8338 = x8337 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8339 = x8336 + x8338;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8340 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8340 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8341 = x8340 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8342 = x8339 + x8341;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8343 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8343 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8344 = x8343 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8345 = x8342 + x8344;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8346 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8346 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8347 = x8346 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8348 = x8345 + x8347;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8349 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8349 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8350 = x8349 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8351 = x8348 + x8350;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8352 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8352 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8353 = x8352 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8354 = x8351 + x8353;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8355 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8355 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8356 = x8355 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8357 = x8354 + x8356;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8358 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8358 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8359 = x8358 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8360 = x8357 + x8359;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8361 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8361 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8362 = x8361 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8363 = x8360 + x8362;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8364 = x8285 - x8363;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8365 = x8364 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8366 = Fp(x8365.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8366);
          reg = x8366;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8367 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x8367 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8368 = x8365 - x8367;
      // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8369 = x8368 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8370 = x95 - x8369;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8371 = x8369 * x8370;
      // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8371 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
      // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8372 = x8286 + x8365;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8373 = Fp(x8372.asUInt32() & x95.asUInt32());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8373);
          reg = x8373;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8374 = Fp(x8372.asUInt32() & x92.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8375 = x8374 * x56;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8375);
          reg = x8375;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8376 = Fp(x8372.asUInt32() & x77.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8377 = x8376 * x75;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8377);
          reg = x8377;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8378 = Fp(x8372.asUInt32() & x70.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8379 = x8378 * x57;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8379);
          reg = x8379;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8380 = Fp(x8372.asUInt32() & x59.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8381 = x8380 * x58;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8381);
          reg = x8381;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8382 = Fp(x8372.asUInt32() & x61.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8383 = x8382 * x60;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8383);
          reg = x8383;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8384 = Fp(x8372.asUInt32() & x55.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8385 = x8384 * x54;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8385);
          reg = x8385;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8386 = Fp(x8372.asUInt32() & x64.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8387 = x8386 * x63;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8387);
          reg = x8387;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8388 = Fp(x8372.asUInt32() & x90.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8389 = x8388 * x89;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8389);
          reg = x8389;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8390 = Fp(x8372.asUInt32() & x21.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8391 = x8390 * x20;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8391);
          reg = x8391;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8392 = Fp(x8372.asUInt32() & x22.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8393 = x8392 * x19;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8393);
          reg = x8393;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8394 = Fp(x8372.asUInt32() & x18.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8395 = x8394 * x17;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8395);
          reg = x8395;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8396 = Fp(x8372.asUInt32() & x16.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8397 = x8396 * x15;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8397);
          reg = x8397;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8398 = Fp(x8372.asUInt32() & x14.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8399 = x8398 * x13;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8399);
          reg = x8399;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8400 = Fp(x8372.asUInt32() & x36.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8401 = x8400 * x12;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8401);
          reg = x8401;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8402 = Fp(x8372.asUInt32() & x11.asUInt32());
        // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8403 = x8402 * x10;
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8403);
          reg = x8403;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8404 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8404 != Fp::invalid());
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8405 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8405 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8406 = x8405 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8407 = x8404 + x8406;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8408 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8408 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8409 = x8408 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8410 = x8407 + x8409;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8411 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8411 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8412 = x8411 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8413 = x8410 + x8412;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8414 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8414 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8415 = x8414 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8416 = x8413 + x8415;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8417 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8417 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8418 = x8417 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8419 = x8416 + x8418;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8420 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8420 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8421 = x8420 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8422 = x8419 + x8421;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8423 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8423 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8424 = x8423 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8425 = x8422 + x8424;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8426 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8426 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8427 = x8426 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8428 = x8425 + x8427;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8429 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8429 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8430 = x8429 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8431 = x8428 + x8430;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8432 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8432 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8433 = x8432 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8434 = x8431 + x8433;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8435 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8435 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8436 = x8435 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8437 = x8434 + x8436;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8438 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8438 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8439 = x8438 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8440 = x8437 + x8439;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8441 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8441 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8442 = x8441 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8443 = x8440 + x8442;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8444 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8444 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8445 = x8444 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8446 = x8443 + x8445;
      // loc("Top/Mux/4/Mux/10/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8447 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8447 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8448 = x8447 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8449 = x8446 + x8448;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8450 = x8372 - x8449;
      // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8451 = x8450 * x9;
      {
        // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8452 = Fp(x8451.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8452);
          reg = x8452;
        }
      }
      // loc("Top/Mux/4/Mux/10/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8453 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x8453 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8454 = x8451 - x8453;
      // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8455 = x8454 * x75;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8456 = x95 - x8455;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8457 = x8455 * x8456;
      // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8457 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/components/mux.h":39:25))
    auto x8458 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x8458 != Fp::invalid());
    if (x8458 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8459 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x8459 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8460 = args[2][136 * steps + ((cycle - 1) & mask)];
      assert(x8460 != Fp::invalid());
      if (x8460 != 0) {
        // loc("Top/Mux/4/OneHot/hot[10](Reg)"("cirgen/circuit/rv32im/sha.cpp":339:72))
        auto x8461 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x8461 != Fp::invalid());
        if (x8461 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":342:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6);
            reg = x6;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":343:40))
          auto x8462 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8462 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":343:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8462);
            reg = x8462;
          }
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":345:22)
        auto x8463 = x95 - x8461;
        if (x8463 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":347:7)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x76);
            reg = x76;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":348:44))
          auto x8464 = args[2][138 * steps + ((cycle - 1) & mask)];
          assert(x8464 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":348:44)
          auto x8465 = x8464 - x95;
          // loc("cirgen/circuit/rv32im/sha.cpp":348:7)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8465);
            reg = x8465;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":351:18)
      auto x8466 = x95 - x8460;
      if (x8466 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8467 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x8467 != Fp::invalid());
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8467);
          reg = x8467;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":354:40))
        auto x8468 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x8468 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":354:40)
        auto x8469 = x8468 - x95;
        // loc("cirgen/circuit/rv32im/sha.cpp":354:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8469);
          reg = x8469;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":355:38))
        auto x8470 = args[2][138 * steps + ((cycle - 1) & mask)];
        assert(x8470 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":355:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8470);
          reg = x8470;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8471 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x8471 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8472 = (x8471 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8472);
          reg = x8472;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8473 = inv(x8471);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8473);
          reg = x8473;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8474 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x8474 != Fp::invalid());
      if (x8474 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8471 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8475 = x95 - x8474;
      if (x8475 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8476 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x8476 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8477 = x8471 * x8476;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8478 = x8477 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8478 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8479 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x8479 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":359:15)
      auto x8480 = x95 - x8479;
      if (x8474 != 0) {
        if (x8480 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        if (x8479 != 0) {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      if (x8475 != 0) {
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":369:38))
      auto x8481 = args[2][132 * steps + ((cycle - 1) & mask)];
      assert(x8481 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":369:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8481);
        reg = x8481;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":370:40))
      auto x8482 = args[2][131 * steps + ((cycle - 1) & mask)];
      assert(x8482 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":370:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8482);
        reg = x8482;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8483 = args[2][143 * steps + ((cycle - 1) & mask)];
      assert(x8483 != Fp::invalid());
      // loc("./cirgen/components/bits.h":20:23)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8483);
        reg = x8483;
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8484 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x8484 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x8485 = (x8484 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8485);
          reg = x8485;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x8486 = inv(x8484);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8486);
          reg = x8486;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8487 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x8487 != Fp::invalid());
      if (x8487 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x8484 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x8488 = x95 - x8487;
      if (x8488 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x8489 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x8489 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8490 = x8484 * x8489;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x8491 = x8490 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x8491 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x8492 = x598 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8493 = Fp(x8492.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8493);
          reg = x8493;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8494 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x8494 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8495 = x8492 - x8494;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8496 = x8495 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8497 = Fp(x8496.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8497);
          reg = x8497;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8498 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x8498 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8499 = x8496 - x8498;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8500 = x8499 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x8501 = Fp(x8500.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8501);
          reg = x8501;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x8502 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x8502 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x8503 = x8500 - x8502;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x8504 = x8503 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x8505 = Fp(x8504.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8505);
          reg = x8505;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8506 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x8506 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x8507 = x8504 - x8506;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x8508 = x8507 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8508);
        reg = x8508;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8509 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8509 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x8510 = x95 - x8509;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x8511 = x8509 * x8510;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8511);
        reg = x8511;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x8512 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x8512 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x8513 = x92 - x8509;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x8514 = x8512 * x8513;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x8514 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x67;
      host_args.at(1) = x8479;
      host_args.at(2) = x8471;
      host_args.at(3) = x8484;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8480 != 0) {
        // loc("cirgen/circuit/rv32im/sha.cpp":381:24)
        auto x8515 = x5 - x8471;
        {
          host_args.at(0) = x8515;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8516 = host_outs.at(0);
          auto x8517 = host_outs.at(1);
          auto x8518 = host_outs.at(2);
          auto x8519 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8516);
            reg = x8516;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8517);
            reg = x8517;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8518);
            reg = x8518;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8519);
            reg = x8519;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8520 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x8520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8521 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x8521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8522 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x8522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x8523 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x8523 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8515);
          reg = x8515;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8459);
          reg = x8459;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8520);
          reg = x8520;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8521);
          reg = x8521;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8522);
          reg = x8522;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8523);
          reg = x8523;
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8524 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8524 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8525 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8525 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8526 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8526 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8527 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8527 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8528 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8528 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8529 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8529 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8530 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8530 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8531 = args[2][89 * steps + ((cycle - 2) & mask)];
      assert(x8531 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8532 = args[2][90 * steps + ((cycle - 2) & mask)];
      assert(x8532 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8533 = args[2][91 * steps + ((cycle - 2) & mask)];
      assert(x8533 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8534 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8534 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8535 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8535 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8536 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8536 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8537 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8537 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8538 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8538 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8539 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8539 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8540 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8540 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8541 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8541 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8542 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8542 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8543 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8543 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8544 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8544 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8545 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8545 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8546 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8546 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8547 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8547 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8548 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8548 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8549 = args[2][34 * steps + ((cycle - 2) & mask)];
      assert(x8549 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8550 = args[2][35 * steps + ((cycle - 2) & mask)];
      assert(x8550 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8551 = args[2][36 * steps + ((cycle - 2) & mask)];
      assert(x8551 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8552 = args[2][37 * steps + ((cycle - 2) & mask)];
      assert(x8552 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8553 = args[2][38 * steps + ((cycle - 2) & mask)];
      assert(x8553 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8554 = args[2][39 * steps + ((cycle - 2) & mask)];
      assert(x8554 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8555 = args[2][40 * steps + ((cycle - 2) & mask)];
      assert(x8555 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8556 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8556 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8557 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8557 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8558 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8558 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8559 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8559 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8560 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8560 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8561 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8561 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8562 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8562 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8563 = args[2][89 * steps + ((cycle - 7) & mask)];
      assert(x8563 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8564 = args[2][90 * steps + ((cycle - 7) & mask)];
      assert(x8564 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8565 = args[2][91 * steps + ((cycle - 7) & mask)];
      assert(x8565 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8566 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8566 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8567 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8567 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8568 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8568 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8569 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8569 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8570 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8570 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8571 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8571 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8572 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8572 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8573 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8573 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8574 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8574 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8575 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8575 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8576 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8576 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8577 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8577 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8578 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8578 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8579 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8579 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8580 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8580 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8581 = args[2][34 * steps + ((cycle - 7) & mask)];
      assert(x8581 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8582 = args[2][35 * steps + ((cycle - 7) & mask)];
      assert(x8582 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8583 = args[2][36 * steps + ((cycle - 7) & mask)];
      assert(x8583 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8584 = args[2][37 * steps + ((cycle - 7) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8585 = args[2][38 * steps + ((cycle - 7) & mask)];
      assert(x8585 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8586 = args[2][39 * steps + ((cycle - 7) & mask)];
      assert(x8586 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8587 = args[2][40 * steps + ((cycle - 7) & mask)];
      assert(x8587 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8588 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8588 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8589 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8589 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8590 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8590 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8591 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8591 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8592 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8592 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8593 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8593 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8594 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8594 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8595 = args[2][89 * steps + ((cycle - 15) & mask)];
      assert(x8595 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8596 = args[2][90 * steps + ((cycle - 15) & mask)];
      assert(x8596 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8597 = args[2][91 * steps + ((cycle - 15) & mask)];
      assert(x8597 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8598 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8598 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8599 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8599 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8600 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8601 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8601 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8602 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8602 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8603 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8604 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8604 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8605 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8605 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8606 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8607 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8607 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8608 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8608 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8609 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8610 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8610 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8611 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8611 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8612 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8613 = args[2][34 * steps + ((cycle - 15) & mask)];
      assert(x8613 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8614 = args[2][35 * steps + ((cycle - 15) & mask)];
      assert(x8614 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8615 = args[2][36 * steps + ((cycle - 15) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8616 = args[2][37 * steps + ((cycle - 15) & mask)];
      assert(x8616 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8617 = args[2][38 * steps + ((cycle - 15) & mask)];
      assert(x8617 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8618 = args[2][39 * steps + ((cycle - 15) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8619 = args[2][40 * steps + ((cycle - 15) & mask)];
      assert(x8619 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8620 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8620 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8621 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8622 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8622 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8623 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8623 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8624 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8625 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8625 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8626 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8626 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8627 = args[2][89 * steps + ((cycle - 16) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8628 = args[2][90 * steps + ((cycle - 16) & mask)];
      assert(x8628 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8629 = args[2][91 * steps + ((cycle - 16) & mask)];
      assert(x8629 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8630 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8630 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8631 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8631 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8632 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8632 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8633 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8634 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8634 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8635 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8635 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8636 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8636 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8637 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8637 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8638 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8639 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8639 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8640 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x8640 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8641 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x8641 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8642 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x8642 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8643 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x8643 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8644 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x8644 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8645 = args[2][34 * steps + ((cycle - 16) & mask)];
      assert(x8645 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8646 = args[2][35 * steps + ((cycle - 16) & mask)];
      assert(x8646 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8647 = args[2][36 * steps + ((cycle - 16) & mask)];
      assert(x8647 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8648 = args[2][37 * steps + ((cycle - 16) & mask)];
      assert(x8648 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8649 = args[2][38 * steps + ((cycle - 16) & mask)];
      assert(x8649 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8650 = args[2][39 * steps + ((cycle - 16) & mask)];
      assert(x8650 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x8651 = args[2][40 * steps + ((cycle - 16) & mask)];
      assert(x8651 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8652 = x8606 + x8591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8653 = x8606 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8654 = x8653 * x8591;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8655 = x8652 - x8654;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8656 = x8607 + x8592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8657 = x8607 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8658 = x8657 * x8592;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8659 = x8656 - x8658;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8660 = x8608 + x8593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8661 = x8608 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8662 = x8661 * x8593;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8663 = x8660 - x8662;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8664 = x8609 + x8594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8665 = x8609 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8666 = x8665 * x8594;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8667 = x8664 - x8666;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8668 = x8610 + x8595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8669 = x8610 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8670 = x8669 * x8595;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8671 = x8668 - x8670;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8672 = x8611 + x8596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8673 = x8611 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8674 = x8673 * x8596;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8675 = x8672 - x8674;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8676 = x8612 + x8597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8677 = x8612 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8678 = x8677 * x8597;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8679 = x8676 - x8678;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8680 = x8613 + x8598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8681 = x8613 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8682 = x8681 * x8598;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8683 = x8680 - x8682;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8684 = x8614 + x8599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8685 = x8614 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8686 = x8685 * x8599;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8687 = x8684 - x8686;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8688 = x8615 + x8600;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8689 = x8615 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8690 = x8689 * x8600;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8691 = x8688 - x8690;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8692 = x8616 + x8601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8693 = x8616 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8694 = x8693 * x8601;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8695 = x8692 - x8694;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8696 = x8617 + x8602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8697 = x8617 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8698 = x8697 * x8602;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8699 = x8696 - x8698;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8700 = x8618 + x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8701 = x8618 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8702 = x8701 * x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8703 = x8700 - x8702;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8704 = x8619 + x8604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8705 = x8619 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8706 = x8705 * x8604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8707 = x8704 - x8706;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8708 = x8588 + x8605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8709 = x8588 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8710 = x8709 * x8605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8711 = x8708 - x8710;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8712 = x8589 + x8606;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8713 = x8589 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8714 = x8713 * x8606;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8715 = x8712 - x8714;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8716 = x8590 + x8607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8717 = x8590 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8718 = x8717 * x8607;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8719 = x8716 - x8718;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8720 = x8591 + x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8721 = x8591 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8722 = x8721 * x8608;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8723 = x8720 - x8722;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8724 = x8592 + x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8725 = x8592 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8726 = x8725 * x8609;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8727 = x8724 - x8726;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8728 = x8593 + x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8729 = x8593 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8730 = x8729 * x8610;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8731 = x8728 - x8730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8732 = x8594 + x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8733 = x8594 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8734 = x8733 * x8611;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8735 = x8732 - x8734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8736 = x8595 + x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8737 = x8595 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8738 = x8737 * x8612;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8739 = x8736 - x8738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8740 = x8596 + x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8741 = x8596 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8742 = x8741 * x8613;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8743 = x8740 - x8742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8744 = x8597 + x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8745 = x8597 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8746 = x8745 * x8614;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8747 = x8744 - x8746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8748 = x8598 + x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8749 = x8598 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8750 = x8749 * x8615;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8751 = x8748 - x8750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8752 = x8599 + x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8753 = x8599 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8754 = x8753 * x8616;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8755 = x8752 - x8754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8756 = x8600 + x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8757 = x8600 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8758 = x8757 * x8617;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8759 = x8756 - x8758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8760 = x8601 + x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8761 = x8601 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8762 = x8761 * x8618;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8763 = x8760 - x8762;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8764 = x8602 + x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8765 = x8602 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8766 = x8765 * x8619;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8767 = x8764 - x8766;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8768 = x8595 + x8655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8769 = x8737 * x8655;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8770 = x8768 - x8769;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8771 = x8596 + x8659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8772 = x8741 * x8659;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8773 = x8771 - x8772;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8774 = x8597 + x8663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8775 = x8745 * x8663;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8776 = x8774 - x8775;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8777 = x8598 + x8667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8778 = x8749 * x8667;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8779 = x8777 - x8778;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8780 = x8599 + x8671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8781 = x8753 * x8671;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8782 = x8780 - x8781;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8783 = x8600 + x8675;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8784 = x8757 * x8675;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8785 = x8783 - x8784;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8786 = x8601 + x8679;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8787 = x8761 * x8679;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8788 = x8786 - x8787;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8789 = x8602 + x8683;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8790 = x8765 * x8683;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8791 = x8789 - x8790;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8792 = x8603 + x8687;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8793 = x8603 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8794 = x8793 * x8687;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8795 = x8792 - x8794;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8796 = x8604 + x8691;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8797 = x8604 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8798 = x8797 * x8691;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8799 = x8796 - x8798;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8800 = x8605 + x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8801 = x8605 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8802 = x8801 * x8695;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8803 = x8800 - x8802;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8804 = x8606 + x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8805 = x8653 * x8699;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8806 = x8804 - x8805;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8807 = x8607 + x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8808 = x8657 * x8703;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8809 = x8807 - x8808;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8810 = x8608 + x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8811 = x8661 * x8707;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8812 = x8810 - x8811;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8813 = x8609 + x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8814 = x8665 * x8711;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8815 = x8813 - x8814;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8816 = x8610 + x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8817 = x8669 * x8715;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8818 = x8816 - x8817;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8819 = x8611 + x8719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8820 = x8673 * x8719;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8821 = x8819 - x8820;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8822 = x8612 + x8723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8823 = x8677 * x8723;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8824 = x8822 - x8823;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8825 = x8613 + x8727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8826 = x8681 * x8727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8827 = x8825 - x8826;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8828 = x8614 + x8731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8829 = x8685 * x8731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8830 = x8828 - x8829;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8831 = x8615 + x8735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8832 = x8689 * x8735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8833 = x8831 - x8832;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8834 = x8616 + x8739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8835 = x8693 * x8739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8836 = x8834 - x8835;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8837 = x8617 + x8743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8838 = x8697 * x8743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8839 = x8837 - x8838;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8840 = x8618 + x8747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8841 = x8701 * x8747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8842 = x8840 - x8841;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8843 = x8619 + x8751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8844 = x8705 * x8751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8845 = x8843 - x8844;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8846 = x8588 + x8755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8847 = x8709 * x8755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8848 = x8846 - x8847;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8849 = x8589 + x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8850 = x8713 * x8759;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8851 = x8849 - x8850;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8852 = x8590 + x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8853 = x8717 * x8763;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8854 = x8852 - x8853;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8855 = x8591 + x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8856 = x8721 * x8767;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8857 = x8855 - x8856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8858 = x8592 + x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8859 = x8725 * x8603;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8860 = x8858 - x8859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8861 = x8593 + x8604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8862 = x8729 * x8604;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8863 = x8861 - x8862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8864 = x8594 + x8605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8865 = x8733 * x8605;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8866 = x8864 - x8865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8867 = x8543 + x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8868 = x8543 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8869 = x8868 * x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8870 = x8867 - x8869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8871 = x8544 + x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8872 = x8544 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8873 = x8872 * x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8874 = x8871 - x8873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8875 = x8545 + x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8876 = x8545 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8877 = x8876 * x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8878 = x8875 - x8877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8879 = x8546 + x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8880 = x8546 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8881 = x8880 * x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8882 = x8879 - x8881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8883 = x8547 + x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8884 = x8547 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8885 = x8884 * x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8886 = x8883 - x8885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8887 = x8548 + x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8888 = x8548 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8889 = x8888 * x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8890 = x8887 - x8889;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8891 = x8549 + x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8892 = x8549 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8893 = x8892 * x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8894 = x8891 - x8893;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8895 = x8550 + x8541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8896 = x8550 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8897 = x8896 * x8541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8898 = x8895 - x8897;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8899 = x8551 + x8542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8900 = x8551 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8901 = x8900 * x8542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8902 = x8899 - x8901;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8903 = x8552 + x8543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8904 = x8552 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8905 = x8904 * x8543;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8906 = x8903 - x8905;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8907 = x8553 + x8544;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8908 = x8553 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8909 = x8908 * x8544;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8910 = x8907 - x8909;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8911 = x8554 + x8545;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8912 = x8554 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8913 = x8912 * x8545;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8914 = x8911 - x8913;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8915 = x8555 + x8546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8916 = x8555 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8917 = x8916 * x8546;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8918 = x8915 - x8917;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8919 = x8524 + x8547;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8920 = x8524 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8921 = x8920 * x8547;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8922 = x8919 - x8921;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8923 = x8525 + x8548;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8924 = x8525 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8925 = x8924 * x8548;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8926 = x8923 - x8925;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8927 = x8526 + x8549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8928 = x8526 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8929 = x8928 * x8549;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8930 = x8927 - x8929;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8931 = x8527 + x8550;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8932 = x8527 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8933 = x8932 * x8550;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8934 = x8931 - x8933;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8935 = x8528 + x8551;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8936 = x8528 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8937 = x8936 * x8551;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8938 = x8935 - x8937;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8939 = x8529 + x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8940 = x8529 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8941 = x8940 * x8552;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8942 = x8939 - x8941;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8943 = x8530 + x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8944 = x8530 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8945 = x8944 * x8553;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8946 = x8943 - x8945;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8947 = x8531 + x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8948 = x8531 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8949 = x8948 * x8554;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8950 = x8947 - x8949;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8951 = x8532 + x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8952 = x8532 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8953 = x8952 * x8555;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8954 = x8951 - x8953;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8955 = x8541 + x8870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8956 = x8541 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8957 = x8956 * x8870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8958 = x8955 - x8957;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8959 = x8542 + x8874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8960 = x8542 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8961 = x8960 * x8874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8962 = x8959 - x8961;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8963 = x8543 + x8878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8964 = x8868 * x8878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8965 = x8963 - x8964;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8966 = x8544 + x8882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8967 = x8872 * x8882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8968 = x8966 - x8967;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8969 = x8545 + x8886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8970 = x8876 * x8886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8971 = x8969 - x8970;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8972 = x8546 + x8890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8973 = x8880 * x8890;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8974 = x8972 - x8973;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8975 = x8547 + x8894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8976 = x8884 * x8894;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8977 = x8975 - x8976;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8978 = x8548 + x8898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8979 = x8888 * x8898;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8980 = x8978 - x8979;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8981 = x8549 + x8902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8982 = x8892 * x8902;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8983 = x8981 - x8982;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8984 = x8550 + x8906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8985 = x8896 * x8906;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8986 = x8984 - x8985;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8987 = x8551 + x8910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8988 = x8900 * x8910;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8989 = x8987 - x8988;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8990 = x8552 + x8914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8991 = x8904 * x8914;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8992 = x8990 - x8991;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8993 = x8553 + x8918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8994 = x8908 * x8918;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8995 = x8993 - x8994;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8996 = x8554 + x8922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x8997 = x8912 * x8922;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8998 = x8996 - x8997;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x8999 = x8555 + x8926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9000 = x8916 * x8926;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9001 = x8999 - x9000;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9002 = x8524 + x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9003 = x8920 * x8930;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9004 = x9002 - x9003;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9005 = x8525 + x8934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9006 = x8924 * x8934;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9007 = x9005 - x9006;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9008 = x8526 + x8938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9009 = x8928 * x8938;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9010 = x9008 - x9009;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9011 = x8527 + x8942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9012 = x8932 * x8942;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9013 = x9011 - x9012;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9014 = x8528 + x8946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9015 = x8936 * x8946;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9016 = x9014 - x9015;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9017 = x8529 + x8950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9018 = x8940 * x8950;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9019 = x9017 - x9018;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9020 = x8530 + x8954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9021 = x8944 * x8954;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9022 = x9020 - x9021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9023 = x8531 + x8533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9024 = x8948 * x8533;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9025 = x9023 - x9024;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9026 = x8532 + x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9027 = x8952 * x8534;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9028 = x9026 - x9027;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9029 = x8533 + x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9030 = x8533 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9031 = x9030 * x8535;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9032 = x9029 - x9031;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9033 = x8534 + x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9034 = x8534 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9035 = x9034 * x8536;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x9033 - x9035;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9037 = x8535 + x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9038 = x8535 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9039 = x9038 * x8537;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9040 = x9037 - x9039;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9041 = x8536 + x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9042 = x8536 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9043 = x9042 * x8538;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9044 = x9041 - x9043;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9045 = x8537 + x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9046 = x8537 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9047 = x9046 * x8539;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9048 = x9045 - x9047;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9049 = x8538 + x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9050 = x8538 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9051 = x9050 * x8540;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9052 = x9049 - x9051;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9053 = x8539 + x8541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9054 = x8539 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9055 = x9054 * x8541;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9056 = x9053 - x9055;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9057 = x8540 + x8542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9058 = x8540 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9059 = x9058 * x8542;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9060 = x9057 - x9059;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9061 = x8621 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9062 = x8620 + x9061;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9063 = x8622 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9064 = x9062 + x9063;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9065 = x8623 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9066 = x9064 + x9065;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9067 = x8624 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9068 = x9066 + x9067;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9069 = x8625 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9070 = x9068 + x9069;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9071 = x8626 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9072 = x9070 + x9071;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9073 = x8627 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9074 = x9072 + x9073;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9075 = x8628 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9076 = x9074 + x9075;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9077 = x8629 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9078 = x9076 + x9077;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9079 = x8630 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9080 = x9078 + x9079;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9081 = x8631 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9082 = x9080 + x9081;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9083 = x8632 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9084 = x9082 + x9083;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9085 = x8633 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9086 = x9084 + x9085;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9087 = x8634 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9088 = x9086 + x9087;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9089 = x8635 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9090 = x9088 + x9089;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9091 = x8637 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9092 = x8636 + x9091;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9093 = x8638 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9094 = x9092 + x9093;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9095 = x8639 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9096 = x9094 + x9095;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9097 = x8640 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9098 = x9096 + x9097;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9099 = x8641 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9100 = x9098 + x9099;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9101 = x8642 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9102 = x9100 + x9101;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9103 = x8643 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9104 = x9102 + x9103;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9105 = x8644 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9106 = x9104 + x9105;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9107 = x8645 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9108 = x9106 + x9107;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9109 = x8646 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9110 = x9108 + x9109;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9111 = x8647 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9112 = x9110 + x9111;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9113 = x8648 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9114 = x9112 + x9113;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9115 = x8649 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9116 = x9114 + x9115;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9117 = x8650 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9118 = x9116 + x9117;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9119 = x8651 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9120 = x9118 + x9119;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9121 = x8773 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9122 = x8770 + x9121;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9123 = x8776 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9124 = x9122 + x9123;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9125 = x8779 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9126 = x9124 + x9125;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9127 = x8782 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9128 = x9126 + x9127;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9129 = x8785 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9130 = x9128 + x9129;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9131 = x8788 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9132 = x9130 + x9131;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9133 = x8791 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9134 = x9132 + x9133;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9135 = x8795 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9136 = x9134 + x9135;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9137 = x8799 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9138 = x9136 + x9137;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9139 = x8803 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9140 = x9138 + x9139;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9141 = x8806 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9142 = x9140 + x9141;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9143 = x8809 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9144 = x9142 + x9143;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9145 = x8812 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9146 = x9144 + x9145;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9147 = x8815 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9148 = x9146 + x9147;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9149 = x8818 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9150 = x9148 + x9149;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9151 = x8824 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9152 = x8821 + x9151;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9153 = x8827 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9154 = x9152 + x9153;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9155 = x8830 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9156 = x9154 + x9155;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9157 = x8833 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9158 = x9156 + x9157;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9159 = x8836 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9160 = x9158 + x9159;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9161 = x8839 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9162 = x9160 + x9161;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9163 = x8842 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9164 = x9162 + x9163;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9165 = x8845 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9166 = x9164 + x9165;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9167 = x8848 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9168 = x9166 + x9167;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9169 = x8851 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9170 = x9168 + x9169;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9171 = x8854 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9172 = x9170 + x9171;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9173 = x8857 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9174 = x9172 + x9173;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9175 = x8860 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9176 = x9174 + x9175;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9177 = x8863 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9178 = x9176 + x9177;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9179 = x8866 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9180 = x9178 + x9179;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9181 = x8557 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9182 = x8556 + x9181;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9183 = x8558 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9184 = x9182 + x9183;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9185 = x8559 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9186 = x9184 + x9185;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9187 = x8560 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9188 = x9186 + x9187;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9189 = x8561 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9190 = x9188 + x9189;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9191 = x8562 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9192 = x9190 + x9191;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9193 = x8563 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9194 = x9192 + x9193;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9195 = x8564 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9196 = x9194 + x9195;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9197 = x8565 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9198 = x9196 + x9197;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9199 = x8566 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9200 = x9198 + x9199;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9201 = x8567 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9202 = x9200 + x9201;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9203 = x8568 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9204 = x9202 + x9203;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9205 = x8569 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9206 = x9204 + x9205;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9207 = x8570 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9208 = x9206 + x9207;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9209 = x8571 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9210 = x9208 + x9209;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9211 = x8573 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9212 = x8572 + x9211;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9213 = x8574 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9214 = x9212 + x9213;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9215 = x8575 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9216 = x9214 + x9215;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9217 = x8576 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9218 = x9216 + x9217;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9219 = x8577 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9220 = x9218 + x9219;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9221 = x8578 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9222 = x9220 + x9221;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9223 = x8579 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9224 = x9222 + x9223;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9225 = x8580 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9226 = x9224 + x9225;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9227 = x8581 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9228 = x9226 + x9227;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9229 = x8582 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9230 = x9228 + x9229;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9231 = x8583 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9232 = x9230 + x9231;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9233 = x8584 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9234 = x9232 + x9233;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9235 = x8585 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9236 = x9234 + x9235;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9237 = x8586 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9238 = x9236 + x9237;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9239 = x8587 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9240 = x9238 + x9239;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9241 = x8962 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9242 = x8958 + x9241;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9243 = x8965 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9244 = x9242 + x9243;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9245 = x8968 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9246 = x9244 + x9245;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9247 = x8971 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9248 = x9246 + x9247;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9249 = x8974 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9250 = x9248 + x9249;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9251 = x8977 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9252 = x9250 + x9251;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9253 = x8980 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9254 = x9252 + x9253;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9255 = x8983 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9256 = x9254 + x9255;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9257 = x8986 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9258 = x9256 + x9257;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9259 = x8989 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9260 = x9258 + x9259;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9261 = x8992 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9262 = x9260 + x9261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9263 = x8995 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9264 = x9262 + x9263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9265 = x8998 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9266 = x9264 + x9265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9267 = x9001 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9268 = x9266 + x9267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9269 = x9004 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9270 = x9268 + x9269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9271 = x9010 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9272 = x9007 + x9271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9273 = x9013 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9274 = x9272 + x9273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9275 = x9016 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9276 = x9274 + x9275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9277 = x9019 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9278 = x9276 + x9277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9279 = x9022 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9280 = x9278 + x9279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9281 = x9025 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9282 = x9280 + x9281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9283 = x9028 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9284 = x9282 + x9283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9285 = x9032 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9286 = x9284 + x9285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9287 = x9036 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9288 = x9286 + x9287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9289 = x9040 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9290 = x9288 + x9289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9291 = x9044 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9292 = x9290 + x9291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9293 = x9048 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9294 = x9292 + x9293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9295 = x9052 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9296 = x9294 + x9295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9297 = x9056 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9298 = x9296 + x9297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9299 = x9060 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9300 = x9298 + x9299;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9301 = x9210 + x9270;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9302 = x9240 + x9300;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9303 = x9150 + x9301;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9304 = x9180 + x9302;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9305 = x9090 + x9303;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9306 = x9120 + x9304;
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][148 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9305);
        reg = x9305;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":457:5)
      {
        auto& reg = args[2][149 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9306);
        reg = x9306;
      }
      if (x8479 != 0) {
        {
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9307 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9307 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9308 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9308 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9309 = x9308 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9310 = x9307 + x9309;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9311 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9311 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9312 = x9311 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9313 = x9310 + x9312;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9314 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9314 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9315 = x9314 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9316 = x9313 + x9315;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9317 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9317 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9318 = x9317 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9319 = x9316 + x9318;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9320 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9320 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9321 = x9320 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9322 = x9319 + x9321;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9323 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9323 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9324 = x9323 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9325 = x9322 + x9324;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9326 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9326 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9327 = x9326 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9328 = x9325 + x9327;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9329 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9329 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9330 = x9329 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9331 = x9328 + x9330;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9332 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9332 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9333 = x9332 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9334 = x9331 + x9333;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9335 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9335 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9336 = x9335 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9337 = x9334 + x9336;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9338 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9338 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9339 = x9338 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9340 = x9337 + x9339;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9341 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9341 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9342 = x9341 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9343 = x9340 + x9342;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9344 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9344 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9345 = x9344 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9346 = x9343 + x9345;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9347 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9347 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9348 = x9347 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9349 = x9346 + x9348;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9350 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9350 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9351 = x9350 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9352 = x9349 + x9351;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9353 = x94 - x9352;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9354 = x9353 * x9;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9354);
          reg = x9354;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9355 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9355 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9356 = Fp(x9355.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9356);
            reg = x9356;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9357 = Fp(x9355.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9358 = x9357 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9358);
            reg = x9358;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9359 = Fp(x9355.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9360 = x9359 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9360);
            reg = x9360;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9361 = Fp(x9355.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9362 = x9361 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9362);
            reg = x9362;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9363 = Fp(x9355.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9364 = x9363 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9364);
            reg = x9364;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9365 = Fp(x9355.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9366 = x9365 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9366);
            reg = x9366;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9367 = Fp(x9355.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9368 = x9367 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9368);
            reg = x9368;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9369 = Fp(x9355.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9370 = x9369 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9370);
            reg = x9370;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9371 = Fp(x9355.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9372 = x9371 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9372);
            reg = x9372;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9373 = Fp(x9355.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9374 = x9373 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9374);
            reg = x9374;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9375 = Fp(x9355.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9376 = x9375 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9376);
            reg = x9376;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9377 = Fp(x9355.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9378 = x9377 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9378);
            reg = x9378;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9379 = Fp(x9355.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9380 = x9379 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9380);
            reg = x9380;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9381 = Fp(x9355.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9382 = x9381 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9382);
            reg = x9382;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9383 = Fp(x9355.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9384 = x9383 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9384);
            reg = x9384;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9385 = Fp(x9355.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9386 = x9385 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9386);
            reg = x9386;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9387 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9387 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9388 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9388 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9389 = x9388 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9390 = x9387 + x9389;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9391 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9391 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9392 = x9391 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9393 = x9390 + x9392;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9394 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9394 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9395 = x9394 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9396 = x9393 + x9395;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9397 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9397 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9398 = x9397 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9399 = x9396 + x9398;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9400 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9400 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9401 = x9400 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9402 = x9399 + x9401;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9403 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9403 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9404 = x9403 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9405 = x9402 + x9404;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9406 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9406 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9407 = x9406 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9408 = x9405 + x9407;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9409 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9409 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9410 = x9409 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9411 = x9408 + x9410;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9412 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9412 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9413 = x9412 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9414 = x9411 + x9413;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9415 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9415 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9416 = x9415 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9417 = x9414 + x9416;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9418 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9418 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9419 = x9418 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9420 = x9417 + x9419;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9421 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9421 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9422 = x9421 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9423 = x9420 + x9422;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9424 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9424 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9425 = x9424 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9426 = x9423 + x9425;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9427 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9427 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9428 = x9427 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9429 = x9426 + x9428;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9430 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9430 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9431 = x9430 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9432 = x9429 + x9431;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9433 = x9355 - x9432;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9434 = x9433 * x9;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9434);
          reg = x9434;
        }
      }
      if (x8480 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9435 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x9435 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9436 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x9436 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9437 = Fp(x9435.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9437);
            reg = x9437;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9438 = Fp(x9435.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9439 = x9438 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9439);
            reg = x9439;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9440 = Fp(x9435.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9441 = x9440 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9441);
            reg = x9441;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9442 = Fp(x9435.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9443 = x9442 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9443);
            reg = x9443;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9444 = Fp(x9435.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9445 = x9444 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9445);
            reg = x9445;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9446 = Fp(x9435.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9447 = x9446 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9447);
            reg = x9447;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9448 = Fp(x9435.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9449 = x9448 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9449);
            reg = x9449;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9450 = Fp(x9435.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9451 = x9450 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9451);
            reg = x9451;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9452 = Fp(x9435.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9453 = x9452 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9453);
            reg = x9453;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9454 = Fp(x9435.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9455 = x9454 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9455);
            reg = x9455;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9456 = Fp(x9435.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9457 = x9456 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9457);
            reg = x9457;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9458 = Fp(x9435.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9459 = x9458 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9459);
            reg = x9459;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9460 = Fp(x9435.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9461 = x9460 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9461);
            reg = x9461;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9462 = Fp(x9435.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9463 = x9462 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9463);
            reg = x9463;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9464 = Fp(x9435.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9465 = x9464 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9465);
            reg = x9465;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9466 = Fp(x9435.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9467 = x9466 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9467);
            reg = x9467;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9468 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9468 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9469 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9469 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9470 = x9469 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9471 = x9468 + x9470;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9472 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9472 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9473 = x9472 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9474 = x9471 + x9473;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9475 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9475 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9476 = x9475 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9477 = x9474 + x9476;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9478 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9478 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9479 = x9478 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9480 = x9477 + x9479;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9481 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9481 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9482 = x9481 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9483 = x9480 + x9482;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9484 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9484 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9485 = x9484 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9486 = x9483 + x9485;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9487 = args[2][89 * steps + ((cycle - 0) & mask)];
        assert(x9487 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9488 = x9487 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9489 = x9486 + x9488;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9490 = args[2][90 * steps + ((cycle - 0) & mask)];
        assert(x9490 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9491 = x9490 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9492 = x9489 + x9491;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9493 = args[2][91 * steps + ((cycle - 0) & mask)];
        assert(x9493 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9494 = x9493 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9495 = x9492 + x9494;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9496 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9496 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9497 = x9496 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9498 = x9495 + x9497;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9499 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9499 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9500 = x9499 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9501 = x9498 + x9500;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9502 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9502 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9503 = x9502 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9504 = x9501 + x9503;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9505 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9505 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9506 = x9505 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9507 = x9504 + x9506;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9508 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9508 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9509 = x9508 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9510 = x9507 + x9509;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9511 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9511 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9512 = x9511 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9513 = x9510 + x9512;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9514 = x9435 - x9513;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9515 = x9514 * x9;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9515);
          reg = x9515;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9516 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9516 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9517 = x9436 + x9516;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9518 = Fp(x9517.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9518);
            reg = x9518;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9519 = Fp(x9517.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9520 = x9519 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9520);
            reg = x9520;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9521 = Fp(x9517.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9522 = x9521 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9522);
            reg = x9522;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9523 = Fp(x9517.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9524 = x9523 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9524);
            reg = x9524;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9525 = Fp(x9517.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9526 = x9525 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9526);
            reg = x9526;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9527 = Fp(x9517.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9528 = x9527 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9528);
            reg = x9528;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9529 = Fp(x9517.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9530 = x9529 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9530);
            reg = x9530;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9531 = Fp(x9517.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9532 = x9531 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9532);
            reg = x9532;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9533 = Fp(x9517.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9534 = x9533 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9534);
            reg = x9534;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9535 = Fp(x9517.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9536 = x9535 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9536);
            reg = x9536;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9537 = Fp(x9517.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9538 = x9537 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9538);
            reg = x9538;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9539 = Fp(x9517.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9540 = x9539 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9540);
            reg = x9540;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9541 = Fp(x9517.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9542 = x9541 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9542);
            reg = x9542;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9543 = Fp(x9517.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9544 = x9543 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9544);
            reg = x9544;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9545 = Fp(x9517.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9546 = x9545 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9546);
            reg = x9546;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9547 = Fp(x9517.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9548 = x9547 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9548);
            reg = x9548;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9549 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9549 != Fp::invalid());
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9550 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9550 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9551 = x9550 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9552 = x9549 + x9551;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9553 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9553 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9554 = x9553 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9555 = x9552 + x9554;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9556 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9556 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9557 = x9556 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9558 = x9555 + x9557;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9559 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9559 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9560 = x9559 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9561 = x9558 + x9560;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9562 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9562 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9563 = x9562 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9564 = x9561 + x9563;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9565 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9565 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9566 = x9565 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9567 = x9564 + x9566;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9568 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9568 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9569 = x9568 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9570 = x9567 + x9569;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9571 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9571 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9572 = x9571 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9573 = x9570 + x9572;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9574 = args[2][34 * steps + ((cycle - 0) & mask)];
        assert(x9574 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9575 = x9574 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9576 = x9573 + x9575;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9577 = args[2][35 * steps + ((cycle - 0) & mask)];
        assert(x9577 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9578 = x9577 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9579 = x9576 + x9578;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9580 = args[2][36 * steps + ((cycle - 0) & mask)];
        assert(x9580 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9581 = x9580 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9582 = x9579 + x9581;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9583 = args[2][37 * steps + ((cycle - 0) & mask)];
        assert(x9583 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9584 = x9583 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9585 = x9582 + x9584;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9586 = args[2][38 * steps + ((cycle - 0) & mask)];
        assert(x9586 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9587 = x9586 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9588 = x9585 + x9587;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9589 = args[2][39 * steps + ((cycle - 0) & mask)];
        assert(x9589 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9590 = x9589 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9591 = x9588 + x9590;
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9592 = args[2][40 * steps + ((cycle - 0) & mask)];
        assert(x9592 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9593 = x9592 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9594 = x9591 + x9593;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9595 = x9517 - x9594;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9596 = x9595 * x9;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9596);
          reg = x9596;
        }
      }
      if (x8479 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9597 = args[2][150 * steps + ((cycle - 4) & mask)];
        assert(x9597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9598 = args[2][151 * steps + ((cycle - 4) & mask)];
        assert(x9598 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9599 = args[2][152 * steps + ((cycle - 4) & mask)];
        assert(x9599 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9600 = args[2][153 * steps + ((cycle - 4) & mask)];
        assert(x9600 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9601 = args[2][154 * steps + ((cycle - 4) & mask)];
        assert(x9601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9602 = args[2][155 * steps + ((cycle - 4) & mask)];
        assert(x9602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9603 = args[2][156 * steps + ((cycle - 4) & mask)];
        assert(x9603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9604 = args[2][157 * steps + ((cycle - 4) & mask)];
        assert(x9604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9605 = args[2][158 * steps + ((cycle - 4) & mask)];
        assert(x9605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9606 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9606 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9607 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9607 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9608 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9608 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9609 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9609 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9610 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9610 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9611 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9611 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9612 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9612 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9613 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9613 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9614 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9614 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9615 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9615 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9616 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9616 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9617 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9618 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9619 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9620 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9620 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9621 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9622 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9623 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9624 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9625 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9626 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9627 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9627 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9628 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9628 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9629 = x9598 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9630 = x9597 + x9629;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9631 = x9599 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9632 = x9630 + x9631;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9633 = x9600 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9634 = x9632 + x9633;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9635 = x9601 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9636 = x9634 + x9635;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9637 = x9602 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9638 = x9636 + x9637;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9639 = x9603 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9640 = x9638 + x9639;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9641 = x9604 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9642 = x9640 + x9641;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9643 = x9605 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9644 = x9642 + x9643;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9645 = x9606 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9646 = x9644 + x9645;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9647 = x9607 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9648 = x9646 + x9647;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9649 = x9608 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9650 = x9648 + x9649;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9651 = x9609 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9652 = x9650 + x9651;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9653 = x9610 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9654 = x9652 + x9653;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9655 = x9611 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9656 = x9654 + x9655;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9657 = x9612 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9658 = x9656 + x9657;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9659 = x9614 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9660 = x9613 + x9659;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9661 = x9615 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9662 = x9660 + x9661;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9663 = x9616 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9664 = x9662 + x9663;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9665 = x9617 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9666 = x9664 + x9665;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9667 = x9618 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9668 = x9666 + x9667;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9669 = x9619 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9670 = x9668 + x9669;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9671 = x9620 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9672 = x9670 + x9671;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9673 = x9621 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9674 = x9672 + x9673;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9675 = x9622 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9676 = x9674 + x9675;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9677 = x9623 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9678 = x9676 + x9677;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9679 = x9624 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9680 = x9678 + x9679;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9681 = x9625 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9682 = x9680 + x9681;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9683 = x9626 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9684 = x9682 + x9683;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9685 = x9627 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9686 = x9684 + x9685;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9687 = x9628 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9688 = x9686 + x9687;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9689 = args[2][150 * steps + ((cycle - 68) & mask)];
        assert(x9689 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9690 = args[2][151 * steps + ((cycle - 68) & mask)];
        assert(x9690 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9691 = args[2][152 * steps + ((cycle - 68) & mask)];
        assert(x9691 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9692 = args[2][153 * steps + ((cycle - 68) & mask)];
        assert(x9692 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9693 = args[2][154 * steps + ((cycle - 68) & mask)];
        assert(x9693 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9694 = args[2][155 * steps + ((cycle - 68) & mask)];
        assert(x9694 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9695 = args[2][156 * steps + ((cycle - 68) & mask)];
        assert(x9695 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9696 = args[2][157 * steps + ((cycle - 68) & mask)];
        assert(x9696 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9697 = args[2][158 * steps + ((cycle - 68) & mask)];
        assert(x9697 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9698 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x9698 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9699 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x9699 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9700 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x9700 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9701 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x9701 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9702 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x9702 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9703 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x9703 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9704 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x9704 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9705 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x9705 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9706 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x9706 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9707 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x9707 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9708 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x9708 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9709 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x9709 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9710 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x9710 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9711 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x9711 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9712 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x9712 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9713 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x9713 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9714 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x9714 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9715 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x9715 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9716 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x9716 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9717 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x9717 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9718 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x9718 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9719 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x9719 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9720 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x9720 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9721 = x9690 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9722 = x9689 + x9721;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9723 = x9691 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9724 = x9722 + x9723;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9725 = x9692 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9726 = x9724 + x9725;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9727 = x9693 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9728 = x9726 + x9727;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9729 = x9694 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9730 = x9728 + x9729;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9731 = x9695 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9732 = x9730 + x9731;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9733 = x9696 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9734 = x9732 + x9733;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9735 = x9697 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9736 = x9734 + x9735;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9737 = x9698 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9738 = x9736 + x9737;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9739 = x9699 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9740 = x9738 + x9739;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9741 = x9700 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9742 = x9740 + x9741;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9743 = x9701 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9744 = x9742 + x9743;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9745 = x9702 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9746 = x9744 + x9745;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9747 = x9703 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9748 = x9746 + x9747;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9749 = x9704 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9750 = x9748 + x9749;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9751 = x9706 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9752 = x9705 + x9751;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9753 = x9707 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9754 = x9752 + x9753;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9755 = x9708 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9756 = x9754 + x9755;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9757 = x9709 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9758 = x9756 + x9757;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9759 = x9710 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9760 = x9758 + x9759;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9761 = x9711 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9762 = x9760 + x9761;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9763 = x9712 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9764 = x9762 + x9763;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9765 = x9713 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9766 = x9764 + x9765;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9767 = x9714 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9768 = x9766 + x9767;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9769 = x9715 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9770 = x9768 + x9769;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9771 = x9716 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9772 = x9770 + x9771;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9773 = x9717 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9774 = x9772 + x9773;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9775 = x9718 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9776 = x9774 + x9775;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9777 = x9719 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9778 = x9776 + x9777;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9779 = x9720 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9780 = x9778 + x9779;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9781 = x9658 + x9750;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x9782 = x9688 + x9780;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9783 = Fp(x9781.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9783);
            reg = x9783;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9784 = Fp(x9781.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9785 = x9784 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9785);
            reg = x9785;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9786 = Fp(x9781.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9787 = x9786 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9787);
            reg = x9787;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9788 = Fp(x9781.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9789 = x9788 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9789);
            reg = x9789;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9790 = Fp(x9781.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9791 = x9790 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9791);
            reg = x9791;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9792 = Fp(x9781.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9793 = x9792 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9793);
            reg = x9793;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9794 = Fp(x9781.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9795 = x9794 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9795);
            reg = x9795;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9796 = Fp(x9781.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9797 = x9796 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9797);
            reg = x9797;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9798 = Fp(x9781.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9799 = x9798 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9799);
            reg = x9799;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9800 = Fp(x9781.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9801 = x9800 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9801);
            reg = x9801;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9802 = Fp(x9781.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9803 = x9802 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9803);
            reg = x9803;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9804 = Fp(x9781.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9805 = x9804 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9805);
            reg = x9805;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9806 = Fp(x9781.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9807 = x9806 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9807);
            reg = x9807;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9808 = Fp(x9781.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9809 = x9808 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9809);
            reg = x9809;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9810 = Fp(x9781.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9811 = x9810 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9811);
            reg = x9811;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9812 = Fp(x9781.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9813 = x9812 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9813);
            reg = x9813;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9814 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x9814 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9815 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x9815 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9816 = x9815 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9817 = x9814 + x9816;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9818 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x9818 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9819 = x9818 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9820 = x9817 + x9819;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9821 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x9821 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9822 = x9821 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9823 = x9820 + x9822;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9824 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x9824 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9825 = x9824 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9826 = x9823 + x9825;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9827 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x9827 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9828 = x9827 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9829 = x9826 + x9828;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9830 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x9830 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9831 = x9830 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9832 = x9829 + x9831;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9833 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9833 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9834 = x9833 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9835 = x9832 + x9834;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9836 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9836 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9837 = x9836 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9838 = x9835 + x9837;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9839 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x9839 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9840 = x9839 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9841 = x9838 + x9840;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9842 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x9842 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9843 = x9842 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9844 = x9841 + x9843;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9845 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x9845 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9846 = x9845 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9847 = x9844 + x9846;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9848 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x9848 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9849 = x9848 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9850 = x9847 + x9849;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9851 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x9851 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9852 = x9851 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9853 = x9850 + x9852;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9854 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x9854 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9855 = x9854 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9856 = x9853 + x9855;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9857 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x9857 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9858 = x9857 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9859 = x9856 + x9858;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9860 = x9781 - x9859;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9861 = x9860 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x9862 = Fp(x9861.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9862);
            reg = x9862;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9863 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x9863 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x9864 = x9861 - x9863;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x9865 = x9864 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x9866 = x95 - x9865;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x9867 = x9865 * x9866;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x9867 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x9868 = x9782 + x9861;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9869 = Fp(x9868.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9869);
            reg = x9869;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9870 = Fp(x9868.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9871 = x9870 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9871);
            reg = x9871;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9872 = Fp(x9868.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9873 = x9872 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9873);
            reg = x9873;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9874 = Fp(x9868.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9875 = x9874 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9875);
            reg = x9875;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9876 = Fp(x9868.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9877 = x9876 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9877);
            reg = x9877;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9878 = Fp(x9868.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9879 = x9878 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9879);
            reg = x9879;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9880 = Fp(x9868.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9881 = x9880 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9881);
            reg = x9881;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9882 = Fp(x9868.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9883 = x9882 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9883);
            reg = x9883;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9884 = Fp(x9868.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9885 = x9884 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9885);
            reg = x9885;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9886 = Fp(x9868.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9887 = x9886 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9887);
            reg = x9887;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9888 = Fp(x9868.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9889 = x9888 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9889);
            reg = x9889;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9890 = Fp(x9868.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9891 = x9890 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9891);
            reg = x9891;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9892 = Fp(x9868.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9893 = x9892 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9893);
            reg = x9893;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9894 = Fp(x9868.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9895 = x9894 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9895);
            reg = x9895;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9896 = Fp(x9868.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9897 = x9896 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9897);
            reg = x9897;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9898 = Fp(x9868.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9899 = x9898 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9899);
            reg = x9899;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9900 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x9900 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9901 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x9901 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9902 = x9901 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9903 = x9900 + x9902;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9904 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x9904 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9905 = x9904 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9906 = x9903 + x9905;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9907 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x9907 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9908 = x9907 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9909 = x9906 + x9908;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9910 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x9910 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9911 = x9910 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9912 = x9909 + x9911;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9913 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x9913 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9914 = x9913 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9915 = x9912 + x9914;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9916 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x9916 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9917 = x9916 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9918 = x9915 + x9917;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9919 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x9919 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9920 = x9919 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9921 = x9918 + x9920;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9922 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x9922 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9923 = x9922 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9924 = x9921 + x9923;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9925 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x9925 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9926 = x9925 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9927 = x9924 + x9926;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9928 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x9928 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9929 = x9928 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9930 = x9927 + x9929;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9931 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x9931 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9932 = x9931 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9933 = x9930 + x9932;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9934 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x9934 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9935 = x9934 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9936 = x9933 + x9935;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9937 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x9937 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9938 = x9937 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9939 = x9936 + x9938;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9940 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x9940 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9941 = x9940 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9942 = x9939 + x9941;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9943 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x9943 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9944 = x9943 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9945 = x9942 + x9944;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9946 = x9868 - x9945;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9947 = x9946 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x9948 = Fp(x9947.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9948);
            reg = x9948;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9949 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9949 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x9950 = x9947 - x9949;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x9951 = x9950 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x9952 = x95 - x9951;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x9953 = x9951 * x9952;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x9953 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9954 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9954 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9955 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x9955 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9956 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x9956 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9957 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x9957 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9958 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x9958 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9959 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x9959 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9960 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x9960 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9961 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x9961 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9962 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x9962 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9963 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x9963 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9964 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x9964 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9965 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x9965 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9966 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x9966 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9967 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x9967 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9968 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x9968 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9969 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x9969 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9970 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x9970 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9971 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x9971 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9972 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x9972 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9973 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x9973 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9974 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x9974 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9975 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x9975 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9976 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x9976 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9977 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x9977 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9978 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x9978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9979 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x9979 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9980 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x9980 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9981 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x9981 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9982 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x9982 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9983 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x9983 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9984 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x9984 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x9985 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x9985 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9986 = x9955 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9987 = x9954 + x9986;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9988 = x9956 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9989 = x9987 + x9988;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9990 = x9957 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9991 = x9989 + x9990;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9992 = x9958 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9993 = x9991 + x9992;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9994 = x9959 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9995 = x9993 + x9994;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9996 = x9960 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9997 = x9995 + x9996;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9998 = x9961 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9999 = x9997 + x9998;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10000 = x9962 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10001 = x9999 + x10000;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10002 = x9963 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10003 = x10001 + x10002;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10004 = x9964 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10005 = x10003 + x10004;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10006 = x9965 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10007 = x10005 + x10006;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10008 = x9966 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10009 = x10007 + x10008;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10010 = x9967 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10011 = x10009 + x10010;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10012 = x9968 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10013 = x10011 + x10012;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10014 = x9969 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10015 = x10013 + x10014;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10016 = x9971 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10017 = x9970 + x10016;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10018 = x9972 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10019 = x10017 + x10018;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10020 = x9973 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10021 = x10019 + x10020;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10022 = x9974 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10023 = x10021 + x10022;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10024 = x9975 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10025 = x10023 + x10024;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10026 = x9976 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10027 = x10025 + x10026;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10028 = x9977 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10029 = x10027 + x10028;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10030 = x9978 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10031 = x10029 + x10030;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10032 = x9979 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10033 = x10031 + x10032;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10034 = x9980 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10035 = x10033 + x10034;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10036 = x9981 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10037 = x10035 + x10036;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10038 = x9982 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10039 = x10037 + x10038;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10040 = x9983 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10041 = x10039 + x10040;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10042 = x9984 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10043 = x10041 + x10042;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10044 = x9985 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10045 = x10043 + x10044;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10046 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x10046 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10047 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10047 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10048 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10048 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10049 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10049 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10050 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10050 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10051 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10051 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10052 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10052 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10053 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10053 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10054 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10054 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10055 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10055 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10056 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10056 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10057 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10057 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10058 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10058 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10059 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10059 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10060 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10060 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10061 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10061 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10062 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10062 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10063 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10063 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10064 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10064 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10065 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10065 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10066 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10066 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10067 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10067 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10068 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10069 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10069 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10070 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10070 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10071 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10072 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10072 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10073 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10073 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10074 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10074 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10075 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10075 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10076 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10077 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10077 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10078 = x10047 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10079 = x10046 + x10078;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10080 = x10048 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10081 = x10079 + x10080;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10082 = x10049 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10083 = x10081 + x10082;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10084 = x10050 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10085 = x10083 + x10084;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10086 = x10051 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10087 = x10085 + x10086;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10088 = x10052 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10089 = x10087 + x10088;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10090 = x10053 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10091 = x10089 + x10090;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10092 = x10054 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10093 = x10091 + x10092;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10094 = x10055 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10095 = x10093 + x10094;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10096 = x10056 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10097 = x10095 + x10096;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10098 = x10057 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10099 = x10097 + x10098;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10100 = x10058 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10101 = x10099 + x10100;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10102 = x10059 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10103 = x10101 + x10102;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10104 = x10060 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10105 = x10103 + x10104;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10106 = x10061 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10107 = x10105 + x10106;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10108 = x10063 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10109 = x10062 + x10108;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10110 = x10064 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10111 = x10109 + x10110;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10112 = x10065 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10113 = x10111 + x10112;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10114 = x10066 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10115 = x10113 + x10114;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10116 = x10067 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10117 = x10115 + x10116;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10118 = x10068 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10119 = x10117 + x10118;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10120 = x10069 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10121 = x10119 + x10120;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10122 = x10070 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10123 = x10121 + x10122;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10124 = x10071 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10125 = x10123 + x10124;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10126 = x10072 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10127 = x10125 + x10126;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10128 = x10073 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10129 = x10127 + x10128;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10130 = x10074 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10131 = x10129 + x10130;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10132 = x10075 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10133 = x10131 + x10132;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10134 = x10076 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10135 = x10133 + x10134;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10136 = x10077 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10137 = x10135 + x10136;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10138 = x10015 + x10107;
        // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10139 = x10045 + x10137;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10140 = Fp(x10138.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10140);
            reg = x10140;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10141 = Fp(x10138.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10142 = x10141 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10142);
            reg = x10142;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10143 = Fp(x10138.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10144 = x10143 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10144);
            reg = x10144;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10145 = Fp(x10138.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10146 = x10145 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10146);
            reg = x10146;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10147 = Fp(x10138.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10148 = x10147 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10148);
            reg = x10148;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10149 = Fp(x10138.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10150 = x10149 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10150);
            reg = x10150;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10151 = Fp(x10138.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10152 = x10151 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10152);
            reg = x10152;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10153 = Fp(x10138.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10154 = x10153 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10154);
            reg = x10154;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10155 = Fp(x10138.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10156 = x10155 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10156);
            reg = x10156;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10157 = Fp(x10138.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10158 = x10157 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10158);
            reg = x10158;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10159 = Fp(x10138.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10160 = x10159 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10160);
            reg = x10160;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10161 = Fp(x10138.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10162 = x10161 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10162);
            reg = x10162;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10163 = Fp(x10138.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10164 = x10163 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10164);
            reg = x10164;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10165 = Fp(x10138.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10166 = x10165 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10166);
            reg = x10166;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10167 = Fp(x10138.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10168 = x10167 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10168);
            reg = x10168;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10169 = Fp(x10138.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10170 = x10169 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10170);
            reg = x10170;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10171 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10171 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10172 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10172 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10173 = x10172 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10174 = x10171 + x10173;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10175 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10175 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10176 = x10175 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10177 = x10174 + x10176;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10178 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10178 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10179 = x10178 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10180 = x10177 + x10179;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10181 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10181 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10182 = x10181 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10183 = x10180 + x10182;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10184 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10184 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10185 = x10184 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10186 = x10183 + x10185;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10187 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10187 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10188 = x10187 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10189 = x10186 + x10188;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10190 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10190 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10191 = x10190 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10192 = x10189 + x10191;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10193 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10193 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10194 = x10193 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10195 = x10192 + x10194;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10196 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10196 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10197 = x10196 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10198 = x10195 + x10197;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10199 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10199 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10200 = x10199 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10201 = x10198 + x10200;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10202 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10202 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10203 = x10202 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10204 = x10201 + x10203;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10205 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10205 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10206 = x10205 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10207 = x10204 + x10206;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10208 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10208 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10209 = x10208 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10210 = x10207 + x10209;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10211 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10211 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10212 = x10211 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10213 = x10210 + x10212;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10214 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10214 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10215 = x10214 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10216 = x10213 + x10215;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10217 = x10138 - x10216;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10218 = x10217 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10219 = Fp(x10218.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10219);
            reg = x10219;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10220 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x10220 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10221 = x10218 - x10220;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10222 = x10221 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10223 = x95 - x10222;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10224 = x10222 * x10223;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10224 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10225 = x10139 + x10218;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10226 = Fp(x10225.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10226);
            reg = x10226;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10227 = Fp(x10225.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10228 = x10227 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10228);
            reg = x10228;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10229 = Fp(x10225.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10230 = x10229 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10230);
            reg = x10230;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10231 = Fp(x10225.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10232 = x10231 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10232);
            reg = x10232;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10233 = Fp(x10225.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10234 = x10233 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10234);
            reg = x10234;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10235 = Fp(x10225.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10236 = x10235 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10236);
            reg = x10236;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10237 = Fp(x10225.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10238 = x10237 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10238);
            reg = x10238;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10239 = Fp(x10225.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10240 = x10239 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10240);
            reg = x10240;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10241 = Fp(x10225.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10242 = x10241 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10242);
            reg = x10242;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10243 = Fp(x10225.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10244 = x10243 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10244);
            reg = x10244;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10245 = Fp(x10225.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10246 = x10245 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10246);
            reg = x10246;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10247 = Fp(x10225.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10248 = x10247 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10248);
            reg = x10248;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10249 = Fp(x10225.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10250 = x10249 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10250);
            reg = x10250;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10251 = Fp(x10225.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10252 = x10251 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10252);
            reg = x10252;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10253 = Fp(x10225.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10254 = x10253 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10254);
            reg = x10254;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10255 = Fp(x10225.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10256 = x10255 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10256);
            reg = x10256;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10257 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10257 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10258 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10258 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10259 = x10258 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10260 = x10257 + x10259;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10261 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10261 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10262 = x10261 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10263 = x10260 + x10262;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10264 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10264 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10265 = x10264 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10266 = x10263 + x10265;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10267 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10267 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10268 = x10267 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10269 = x10266 + x10268;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10270 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10270 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10271 = x10270 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10272 = x10269 + x10271;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10273 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10273 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10274 = x10273 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10275 = x10272 + x10274;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10276 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10276 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10277 = x10276 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10278 = x10275 + x10277;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10279 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10279 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10280 = x10279 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10281 = x10278 + x10280;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10282 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10282 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10283 = x10282 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10284 = x10281 + x10283;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10285 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10285 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10286 = x10285 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10287 = x10284 + x10286;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10288 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10288 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10289 = x10288 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10290 = x10287 + x10289;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10291 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10291 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10292 = x10291 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10293 = x10290 + x10292;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10294 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10294 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10295 = x10294 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10296 = x10293 + x10295;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10297 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10297 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10298 = x10297 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10299 = x10296 + x10298;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10300 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10300 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10301 = x10300 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10302 = x10299 + x10301;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10303 = x10225 - x10302;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10304 = x10303 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10305 = Fp(x10304.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10305);
            reg = x10305;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x10306 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x10306 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10307 = x10304 - x10306;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10308 = x10307 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10309 = x95 - x10308;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10310 = x10308 * x10309;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10310 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10311 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x10311 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":399:17)
      auto x10312 = x95 - x10311;
      if (x8487 != 0) {
        if (x10311 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10313 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10313 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":403:26)
          auto x10314 = x10313 + x8471;
          {
            host_args.at(0) = x10314;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10315 = host_outs.at(0);
            auto x10316 = host_outs.at(1);
            auto x10317 = host_outs.at(2);
            auto x10318 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10315);
              reg = x10315;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10316);
              reg = x10316;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10317);
              reg = x10317;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10318);
              reg = x10318;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10319 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10319 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10320 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10320 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10321 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10321 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10322 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10322 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10314);
            reg = x10314;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8459);
            reg = x8459;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10319);
            reg = x10319;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10320);
            reg = x10320;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10321);
            reg = x10321;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10322);
            reg = x10322;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10323 = x10313 + x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":404:26)
          auto x10324 = x10323 + x8471;
          {
            host_args.at(0) = x10324;
            host_args.at(1) = x95;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10325 = host_outs.at(0);
            auto x10326 = host_outs.at(1);
            auto x10327 = host_outs.at(2);
            auto x10328 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10325);
              reg = x10325;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10326);
              reg = x10326;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10327);
              reg = x10327;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10328);
              reg = x10328;
            }
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10329 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10329 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10330 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10330 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10331 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10331 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10332 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10332 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10324);
            reg = x10324;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8459);
            reg = x8459;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10329);
            reg = x10329;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10330);
            reg = x10330;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10331);
            reg = x10331;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10332);
            reg = x10332;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x10333 = args[2][108 * steps + ((cycle - 0) & mask)];
          assert(x10333 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":405:39)
          auto x10334 = x10333 * x77;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10335 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10335 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10336 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10336 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10337 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10337 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10338 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10338 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10339 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10339 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10340 = x10339 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10341 = x10335 + x10340;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10342 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10342 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10343 = x10342 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10344 = x10336 + x10343;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10345 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10345 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10346 = x10345 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10347 = x10337 + x10346;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10348 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10348 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10349 = x10348 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10350 = x10338 + x10349;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10351 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10351 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10352 = x10351 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10353 = x10341 + x10352;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10354 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10354 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10355 = x10354 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10356 = x10344 + x10355;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10357 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10357 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10358 = x10357 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10359 = x10347 + x10358;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10360 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10360 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10361 = x10360 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10362 = x10350 + x10361;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10363 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10363 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10364 = x10363 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10365 = x10353 + x10364;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10366 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10366 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10367 = x10366 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10368 = x10356 + x10367;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10369 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10369 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10370 = x10369 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10371 = x10359 + x10370;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10372 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10372 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10373 = x10372 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10374 = x10362 + x10373;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10375 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10375 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10376 = x10375 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10377 = x10365 + x10376;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10378 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10378 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10379 = x10378 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10380 = x10368 + x10379;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10381 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10381 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10382 = x10381 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10383 = x10371 + x10382;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10384 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10384 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10385 = x10384 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10386 = x10374 + x10385;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10387 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10387 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10388 = x10387 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10389 = x10377 + x10388;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10390 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10390 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10391 = x10390 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10392 = x10380 + x10391;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10393 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10393 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10394 = x10393 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10395 = x10383 + x10394;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10396 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10396 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10397 = x10396 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10398 = x10386 + x10397;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10399 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10399 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10400 = x10399 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10401 = x10389 + x10400;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10402 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10402 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10403 = x10402 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10404 = x10392 + x10403;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10405 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10405 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10406 = x10405 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10407 = x10395 + x10406;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10408 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10408 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10409 = x10408 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10410 = x10398 + x10409;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10411 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10411 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10412 = x10411 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10413 = x10401 + x10412;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10414 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10414 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10415 = x10414 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10416 = x10404 + x10415;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10417 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10417 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10418 = x10417 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10419 = x10407 + x10418;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10420 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10420 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10421 = x10420 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10422 = x10410 + x10421;
          host_args.at(0) = x10334;
          host_args.at(1) = x10319;
          host_args.at(2) = x10320;
          host_args.at(3) = x10321;
          host_args.at(4) = x10322;
          host_args.at(5) = x10422;
          host_args.at(6) = x10419;
          host_args.at(7) = x10416;
          host_args.at(8) = x10413;
          host(ctx, "log", "  io0: [0x%x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
          auto x10423 = args[2][115 * steps + ((cycle - 0) & mask)];
          assert(x10423 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":406:39)
          auto x10424 = x10423 * x77;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10425 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10425 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10426 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10426 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10427 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10427 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10428 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10428 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10429 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10429 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10430 = x10429 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10431 = x10425 + x10430;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10432 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10432 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10433 = x10432 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10434 = x10426 + x10433;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10435 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10435 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10436 = x10435 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10437 = x10427 + x10436;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10438 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10438 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10439 = x10438 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10440 = x10428 + x10439;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10441 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10441 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10442 = x10441 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10443 = x10431 + x10442;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10444 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10444 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10445 = x10444 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10446 = x10434 + x10445;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10447 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10447 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10448 = x10447 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10449 = x10437 + x10448;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10450 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10450 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10451 = x10450 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10452 = x10440 + x10451;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10453 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10453 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10454 = x10453 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10455 = x10443 + x10454;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10456 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10456 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10457 = x10456 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10458 = x10446 + x10457;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10459 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10459 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10460 = x10459 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10461 = x10449 + x10460;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10462 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10462 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10463 = x10462 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10464 = x10452 + x10463;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10465 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10465 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10466 = x10465 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10467 = x10455 + x10466;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10468 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10468 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10469 = x10468 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10470 = x10458 + x10469;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10471 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10471 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10472 = x10471 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10473 = x10461 + x10472;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10474 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10474 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10475 = x10474 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10476 = x10464 + x10475;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10477 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10477 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10478 = x10477 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10479 = x10467 + x10478;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10480 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10480 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10481 = x10480 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10482 = x10470 + x10481;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10483 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10483 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10484 = x10483 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10485 = x10473 + x10484;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10486 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10486 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10487 = x10486 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10488 = x10476 + x10487;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10489 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10489 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10490 = x10489 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10491 = x10479 + x10490;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10492 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10492 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10493 = x10492 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10494 = x10482 + x10493;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10495 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10495 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10496 = x10495 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10497 = x10485 + x10496;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10498 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10498 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10499 = x10498 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10500 = x10488 + x10499;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10501 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10501 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10502 = x10501 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10503 = x10491 + x10502;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10504 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10504 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10505 = x10504 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10506 = x10494 + x10505;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10507 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10507 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10508 = x10507 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10509 = x10497 + x10508;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10510 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10510 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10511 = x10510 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10512 = x10500 + x10511;
          host_args.at(0) = x10424;
          host_args.at(1) = x10329;
          host_args.at(2) = x10330;
          host_args.at(3) = x10331;
          host_args.at(4) = x10332;
          host_args.at(5) = x10512;
          host_args.at(6) = x10509;
          host_args.at(7) = x10506;
          host_args.at(8) = x10503;
          host(ctx, "log", "  io1: [0x%x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./cirgen/components/u32.h":25:12)
          auto x10513 = x10320 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10514 = x10319 + x10513;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10515 = x10321 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10516 = x10514 + x10515;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10517 = x10322 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10518 = x10516 + x10517;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10519 = x10419 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10520 = x10422 + x10519;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10521 = x10416 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10522 = x10520 + x10521;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10523 = x10413 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10524 = x10522 + x10523;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          auto x10525 = x10518 - x10524;
          // loc("cirgen/circuit/rv32im/sha.cpp":407:10)
          if (x10525 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:407");
          // loc("./cirgen/components/u32.h":25:12)
          auto x10526 = x10330 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10527 = x10329 + x10526;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10528 = x10331 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10529 = x10527 + x10528;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10530 = x10332 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10531 = x10529 + x10530;
          // loc("./cirgen/components/u32.h":25:12)
          auto x10532 = x10509 * x90;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10533 = x10512 + x10532;
          // loc("./cirgen/components/u32.h":26:12)
          auto x10534 = x10506 * x79;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10535 = x10533 + x10534;
          // loc("./cirgen/components/u32.h":27:12)
          auto x10536 = x10503 * x78;
          // loc("./cirgen/components/u32.h":24:12)
          auto x10537 = x10535 + x10536;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          auto x10538 = x10531 - x10537;
          // loc("cirgen/circuit/rv32im/sha.cpp":408:10)
          if (x10538 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:408");
        }
        if (x10312 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x10539 = args[2][131 * steps + ((cycle - 0) & mask)];
          assert(x10539 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":411:27)
          auto x10540 = x10539 + x8471;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10541 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x10541 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10542 = args[2][158 * steps + ((cycle - 0) & mask)];
          assert(x10542 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10543 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10543 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10544 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10544 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10545 = args[2][151 * steps + ((cycle - 0) & mask)];
          assert(x10545 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10546 = x10545 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10547 = x10541 + x10546;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10548 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10548 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10549 = x10548 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10550 = x10542 + x10549;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10551 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10551 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10552 = x10551 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10553 = x10543 + x10552;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10554 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10554 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10555 = x10554 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10556 = x10544 + x10555;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10557 = args[2][152 * steps + ((cycle - 0) & mask)];
          assert(x10557 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10558 = x10557 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10559 = x10547 + x10558;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10560 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10560 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10561 = x10560 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10562 = x10550 + x10561;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10563 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10563 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10564 = x10563 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10565 = x10553 + x10564;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10566 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10566 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10567 = x10566 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10568 = x10556 + x10567;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10569 = args[2][153 * steps + ((cycle - 0) & mask)];
          assert(x10569 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10570 = x10569 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10571 = x10559 + x10570;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10572 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10572 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10573 = x10572 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10574 = x10562 + x10573;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10575 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10575 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10576 = x10575 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10577 = x10565 + x10576;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10578 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10578 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10579 = x10578 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10580 = x10568 + x10579;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10581 = args[2][154 * steps + ((cycle - 0) & mask)];
          assert(x10581 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10582 = x10581 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10583 = x10571 + x10582;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10584 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10584 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10585 = x10584 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10586 = x10574 + x10585;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10587 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10587 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10588 = x10587 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10589 = x10577 + x10588;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10590 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10590 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10591 = x10590 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10592 = x10580 + x10591;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10593 = args[2][155 * steps + ((cycle - 0) & mask)];
          assert(x10593 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10594 = x10593 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10595 = x10583 + x10594;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10596 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10596 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10597 = x10596 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10598 = x10586 + x10597;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10599 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10599 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10600 = x10599 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10601 = x10589 + x10600;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10602 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10602 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10603 = x10602 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10604 = x10592 + x10603;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10605 = args[2][156 * steps + ((cycle - 0) & mask)];
          assert(x10605 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10606 = x10605 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10607 = x10595 + x10606;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10608 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10608 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10609 = x10608 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10610 = x10598 + x10609;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10611 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10611 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10612 = x10611 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10613 = x10601 + x10612;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10614 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10614 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10615 = x10614 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10616 = x10604 + x10615;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10617 = args[2][157 * steps + ((cycle - 0) & mask)];
          assert(x10617 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10618 = x10617 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10619 = x10607 + x10618;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10620 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10620 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10621 = x10620 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10622 = x10610 + x10621;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10623 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10623 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10624 = x10623 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10625 = x10613 + x10624;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10626 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10626 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10627 = x10626 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10628 = x10616 + x10627;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10628);
            reg = x10628;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10625);
            reg = x10625;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10622);
            reg = x10622;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10619);
            reg = x10619;
          }
          {
            host_args.at(0) = x10540;
            host_args.at(1) = x10628;
            host_args.at(2) = x10625;
            host_args.at(3) = x10622;
            host_args.at(4) = x10619;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10629 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x10629 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10630 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x10630 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10631 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x10631 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10632 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x10632 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10540);
            reg = x10540;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8459);
            reg = x8459;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10629);
            reg = x10629;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10630);
            reg = x10630;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10631);
            reg = x10631;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10632);
            reg = x10632;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10633 = x10539 + x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":412:27)
          auto x10634 = x10633 + x8471;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10635 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10635 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10636 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10636 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10637 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10637 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10638 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10638 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10639 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10639 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10640 = x10639 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10641 = x10635 + x10640;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10642 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10642 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10643 = x10642 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10644 = x10636 + x10643;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10645 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10645 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10646 = x10645 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10647 = x10637 + x10646;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10648 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10648 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10649 = x10648 * x92;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10650 = x10638 + x10649;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10651 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10651 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10652 = x10651 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10653 = x10641 + x10652;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10654 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10654 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10655 = x10654 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10656 = x10644 + x10655;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10657 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10657 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10658 = x10657 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10659 = x10647 + x10658;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10660 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10660 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10661 = x10660 * x77;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10662 = x10650 + x10661;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10663 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10663 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10664 = x10663 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10665 = x10653 + x10664;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10666 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10666 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10667 = x10666 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10668 = x10656 + x10667;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10669 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10669 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10670 = x10669 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10671 = x10659 + x10670;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10672 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10672 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10673 = x10672 * x70;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10674 = x10662 + x10673;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10675 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10675 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10676 = x10675 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10677 = x10665 + x10676;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10678 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10678 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10679 = x10678 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10680 = x10668 + x10679;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10681 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10681 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10682 = x10681 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10683 = x10671 + x10682;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10684 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10684 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10685 = x10684 * x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10686 = x10674 + x10685;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10687 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10687 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10688 = x10687 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10689 = x10677 + x10688;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10690 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10690 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10691 = x10690 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10692 = x10680 + x10691;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10693 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10693 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10694 = x10693 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10695 = x10683 + x10694;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10696 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10696 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10697 = x10696 * x61;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10698 = x10686 + x10697;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10699 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10699 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10700 = x10699 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10701 = x10689 + x10700;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10702 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10702 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10703 = x10702 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10704 = x10692 + x10703;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10705 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10705 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10706 = x10705 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10707 = x10695 + x10706;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10708 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10708 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10709 = x10708 * x55;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10710 = x10698 + x10709;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10711 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10711 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10712 = x10711 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10713 = x10701 + x10712;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10714 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10714 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10715 = x10714 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10716 = x10704 + x10715;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10717 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10717 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10718 = x10717 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10719 = x10707 + x10718;
          // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10720 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10720 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10721 = x10720 * x64;
          // loc("cirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10722 = x10710 + x10721;
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10722);
            reg = x10722;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10719);
            reg = x10719;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10716);
            reg = x10716;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10713);
            reg = x10713;
          }
          {
            host_args.at(0) = x10634;
            host_args.at(1) = x10722;
            host_args.at(2) = x10719;
            host_args.at(3) = x10716;
            host_args.at(4) = x10713;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10723 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x10723 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10724 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10724 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10725 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10725 != Fp::invalid());
          // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x10726 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10726 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10634);
            reg = x10634;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8459);
            reg = x8459;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10723);
            reg = x10723;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10724);
            reg = x10724;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10725);
            reg = x10725;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10726);
            reg = x10726;
          }
        }
      }
      if (x8488 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        if (x8479 != 0) {
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10727 = args[2][150 * steps + ((cycle - 1) & mask)];
      assert(x10727 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10728 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x10728 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10729 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x10729 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10730 = args[2][153 * steps + ((cycle - 1) & mask)];
      assert(x10730 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10731 = args[2][154 * steps + ((cycle - 1) & mask)];
      assert(x10731 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10732 = args[2][155 * steps + ((cycle - 1) & mask)];
      assert(x10732 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10733 = args[2][156 * steps + ((cycle - 1) & mask)];
      assert(x10733 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10734 = args[2][157 * steps + ((cycle - 1) & mask)];
      assert(x10734 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10735 = args[2][158 * steps + ((cycle - 1) & mask)];
      assert(x10735 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10736 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x10736 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10737 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x10737 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10738 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x10738 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10739 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x10739 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10740 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x10740 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10741 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x10741 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10742 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x10742 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10743 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x10743 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10744 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x10744 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10745 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x10745 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10746 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x10746 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10747 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x10747 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10748 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x10748 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10749 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x10749 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10750 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x10750 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10751 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x10751 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10752 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x10752 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10753 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x10753 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10754 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x10754 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10755 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x10755 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10756 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x10756 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10757 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x10757 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10758 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x10758 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10759 = args[2][150 * steps + ((cycle - 2) & mask)];
      assert(x10759 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10760 = args[2][151 * steps + ((cycle - 2) & mask)];
      assert(x10760 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10761 = args[2][152 * steps + ((cycle - 2) & mask)];
      assert(x10761 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10762 = args[2][153 * steps + ((cycle - 2) & mask)];
      assert(x10762 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10763 = args[2][154 * steps + ((cycle - 2) & mask)];
      assert(x10763 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10764 = args[2][155 * steps + ((cycle - 2) & mask)];
      assert(x10764 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10765 = args[2][156 * steps + ((cycle - 2) & mask)];
      assert(x10765 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10766 = args[2][157 * steps + ((cycle - 2) & mask)];
      assert(x10766 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10767 = args[2][158 * steps + ((cycle - 2) & mask)];
      assert(x10767 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10768 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x10768 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10769 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x10769 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10770 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x10770 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10771 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x10771 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10772 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x10772 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10773 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x10773 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10774 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x10774 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10775 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x10775 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10776 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x10776 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10777 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x10777 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10778 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x10778 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10779 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x10779 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10780 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x10780 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10781 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x10781 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10782 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x10782 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10783 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x10783 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10784 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x10784 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10785 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x10785 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10786 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x10786 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10787 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x10787 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10788 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x10788 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10789 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x10789 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10790 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x10790 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10791 = args[2][150 * steps + ((cycle - 3) & mask)];
      assert(x10791 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10792 = args[2][151 * steps + ((cycle - 3) & mask)];
      assert(x10792 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10793 = args[2][152 * steps + ((cycle - 3) & mask)];
      assert(x10793 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10794 = args[2][153 * steps + ((cycle - 3) & mask)];
      assert(x10794 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10795 = args[2][154 * steps + ((cycle - 3) & mask)];
      assert(x10795 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10796 = args[2][155 * steps + ((cycle - 3) & mask)];
      assert(x10796 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10797 = args[2][156 * steps + ((cycle - 3) & mask)];
      assert(x10797 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10798 = args[2][157 * steps + ((cycle - 3) & mask)];
      assert(x10798 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10799 = args[2][158 * steps + ((cycle - 3) & mask)];
      assert(x10799 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10800 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x10800 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10801 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x10801 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10802 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x10802 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10803 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x10803 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10804 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x10804 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10805 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x10805 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10806 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x10806 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10807 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x10807 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10808 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x10808 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10809 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x10809 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10810 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x10810 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10811 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x10811 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10812 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x10812 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10813 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x10813 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10814 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x10814 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10815 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x10815 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10816 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x10816 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10817 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x10817 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10818 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x10818 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10819 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x10819 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10820 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x10820 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10821 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x10821 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10822 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x10822 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10823 = args[2][150 * steps + ((cycle - 4) & mask)];
      assert(x10823 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10824 = args[2][151 * steps + ((cycle - 4) & mask)];
      assert(x10824 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10825 = args[2][152 * steps + ((cycle - 4) & mask)];
      assert(x10825 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10826 = args[2][153 * steps + ((cycle - 4) & mask)];
      assert(x10826 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10827 = args[2][154 * steps + ((cycle - 4) & mask)];
      assert(x10827 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10828 = args[2][155 * steps + ((cycle - 4) & mask)];
      assert(x10828 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10829 = args[2][156 * steps + ((cycle - 4) & mask)];
      assert(x10829 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10830 = args[2][157 * steps + ((cycle - 4) & mask)];
      assert(x10830 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10831 = args[2][158 * steps + ((cycle - 4) & mask)];
      assert(x10831 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10832 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x10832 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10833 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x10833 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10834 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x10834 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10835 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x10835 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10836 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x10836 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10837 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x10837 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10838 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x10838 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10839 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x10839 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10840 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x10840 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10841 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x10841 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10842 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x10842 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10843 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x10843 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10844 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x10844 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10845 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x10845 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10846 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x10846 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10847 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x10847 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10848 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x10848 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10849 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x10849 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10850 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x10850 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10851 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x10851 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10852 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x10852 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10853 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x10853 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10854 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x10854 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10855 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x10855 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10856 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x10856 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10857 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x10857 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10858 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x10858 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10859 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x10859 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10860 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x10860 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10861 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x10861 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10862 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x10862 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10863 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x10863 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10864 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x10864 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10865 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x10865 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10866 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x10866 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10867 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x10867 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10868 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x10868 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10869 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x10869 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10870 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x10870 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10871 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x10871 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10872 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x10872 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10873 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x10873 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10874 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x10874 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10875 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x10875 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10876 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x10876 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10877 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x10877 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10878 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x10878 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10879 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x10879 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10880 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x10880 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10881 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x10881 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10882 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x10882 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10883 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x10883 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10884 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x10884 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10885 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x10885 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10886 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x10886 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10887 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x10887 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10888 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x10888 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10889 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x10889 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10890 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x10890 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10891 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x10891 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10892 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x10892 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10893 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x10893 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10894 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x10894 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10895 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x10895 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10896 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x10896 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10897 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x10897 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10898 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x10898 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10899 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x10899 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10900 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x10900 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10901 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x10901 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10902 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x10902 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10903 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x10903 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10904 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x10904 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10905 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x10905 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10906 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x10906 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10907 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x10907 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10908 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x10908 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10909 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x10909 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10910 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x10910 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10911 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x10911 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10912 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x10912 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10913 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x10913 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10914 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x10914 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10915 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x10915 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10916 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x10916 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10917 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x10917 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10918 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x10918 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10919 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x10919 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10920 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x10920 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10921 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x10921 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10922 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x10922 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10923 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x10923 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10924 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x10924 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10925 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x10925 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10926 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x10926 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10927 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x10927 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10928 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x10928 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10929 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x10929 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10930 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x10930 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10931 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x10931 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10932 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x10932 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10933 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x10933 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10934 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x10934 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10935 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x10935 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10936 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x10936 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10937 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x10937 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10938 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x10938 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10939 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x10939 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10940 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x10940 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10941 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x10941 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10942 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x10942 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10943 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x10943 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10944 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x10944 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10945 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x10945 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10946 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x10946 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10947 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x10947 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10948 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x10948 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10949 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x10949 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10950 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x10950 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10951 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x10951 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10952 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x10952 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10953 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x10953 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10954 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x10954 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10955 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x10955 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10956 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x10956 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10957 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x10957 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10958 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x10958 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10959 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x10959 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10960 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x10960 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10961 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x10961 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10962 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x10962 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10963 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x10963 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10964 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x10964 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10965 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x10965 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10966 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x10966 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10967 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x10967 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10968 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x10968 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10969 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x10969 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10970 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x10970 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10971 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x10971 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10972 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x10972 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10973 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x10973 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10974 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x10974 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10975 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x10975 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10976 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x10976 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10977 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x10977 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10978 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x10978 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10979 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x10979 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10980 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x10980 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10981 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x10981 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10982 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x10982 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10983 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x10983 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10984 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x10984 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10985 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x10985 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10986 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x10986 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10987 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x10987 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10988 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x10988 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10989 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x10989 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10990 = args[2][89 * steps + ((cycle - 0) & mask)];
      assert(x10990 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10991 = args[2][90 * steps + ((cycle - 0) & mask)];
      assert(x10991 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10992 = args[2][91 * steps + ((cycle - 0) & mask)];
      assert(x10992 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10993 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x10993 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10994 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x10994 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10995 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x10995 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10996 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x10996 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10997 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x10997 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10998 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x10998 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x10999 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x10999 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11000 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11000 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11001 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11001 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11002 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11002 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11003 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11003 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11004 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11004 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11005 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11005 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11006 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11006 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11007 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11007 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11008 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x11008 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11009 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x11009 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11010 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x11010 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11011 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x11011 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11012 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x11012 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11013 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x11013 != Fp::invalid());
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11014 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x11014 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11015 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x11015 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11016 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x11016 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11017 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x11017 != Fp::invalid());
      // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x11018 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x11018 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11019 = x11016 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11020 = x11015 + x11019;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11021 = x11018 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11022 = x11017 + x11021;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11023 = x10740 + x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11024 = x10740 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11025 = x11024 * x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11026 = x11023 - x11025;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11027 = x10741 + x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11028 = x10741 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11029 = x11028 * x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11030 = x11027 - x11029;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11031 = x10742 + x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11032 = x10742 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11033 = x11032 * x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11034 = x11031 - x11033;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11035 = x10743 + x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11036 = x10743 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11037 = x11036 * x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11038 = x11035 - x11037;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11039 = x10744 + x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11040 = x10744 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11041 = x11040 * x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11042 = x11039 - x11041;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11043 = x10745 + x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11044 = x10745 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11045 = x11044 * x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11046 = x11043 - x11045;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11047 = x10746 + x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11048 = x10746 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11049 = x11048 * x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11050 = x11047 - x11049;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11051 = x10747 + x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11052 = x10747 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11053 = x11052 * x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11054 = x11051 - x11053;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11055 = x10748 + x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11056 = x10748 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11057 = x11056 * x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11058 = x11055 - x11057;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11059 = x10749 + x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11060 = x10749 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11061 = x11060 * x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11062 = x11059 - x11061;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11063 = x10750 + x10727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11064 = x10750 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11065 = x11064 * x10727;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11066 = x11063 - x11065;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11067 = x10751 + x10728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11068 = x10751 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11069 = x11068 * x10728;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11070 = x11067 - x11069;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11071 = x10752 + x10729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11072 = x10752 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11073 = x11072 * x10729;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11074 = x11071 - x11073;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11075 = x10753 + x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11076 = x10753 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11077 = x11076 * x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11078 = x11075 - x11077;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11079 = x10754 + x10731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11080 = x10754 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11081 = x11080 * x10731;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11082 = x11079 - x11081;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11083 = x10755 + x10732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11084 = x10755 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11085 = x11084 * x10732;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11086 = x11083 - x11085;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11087 = x10756 + x10733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11088 = x10756 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11089 = x11088 * x10733;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11090 = x11087 - x11089;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11091 = x10757 + x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11092 = x10757 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11093 = x11092 * x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11094 = x11091 - x11093;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11095 = x10758 + x10735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11096 = x10758 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11097 = x11096 * x10735;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11098 = x11095 - x11097;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11099 = x10727 + x10736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11100 = x10727 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11101 = x11100 * x10736;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11102 = x11099 - x11101;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11103 = x10728 + x10737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11104 = x10728 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11105 = x11104 * x10737;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11106 = x11103 - x11105;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11107 = x10729 + x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11108 = x10729 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11109 = x11108 * x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11110 = x11107 - x11109;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11111 = x10730 + x10739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11112 = x10730 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11113 = x11112 * x10739;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11114 = x11111 - x11113;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11115 = x10731 + x10740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11116 = x10731 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11117 = x11116 * x10740;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11118 = x11115 - x11117;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11119 = x10732 + x10741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11120 = x10732 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11121 = x11120 * x10741;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11122 = x11119 - x11121;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11123 = x10733 + x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11124 = x10733 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11125 = x11124 * x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11126 = x11123 - x11125;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11127 = x10734 + x10743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11128 = x10734 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11129 = x11128 * x10743;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11130 = x11127 - x11129;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11131 = x10735 + x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11132 = x10735 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11133 = x11132 * x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11134 = x11131 - x11133;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11135 = x10736 + x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11136 = x10736 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11137 = x11136 * x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11138 = x11135 - x11137;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11139 = x10737 + x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11140 = x10737 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11141 = x11140 * x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11142 = x11139 - x11141;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11143 = x10738 + x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11144 = x10738 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11145 = x11144 * x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11146 = x11143 - x11145;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11147 = x10739 + x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11148 = x10739 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11149 = x11148 * x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11150 = x11147 - x11149;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11151 = x10729 + x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11152 = x11108 * x11026;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11153 = x11151 - x11152;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11154 = x10730 + x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11155 = x11112 * x11030;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11156 = x11154 - x11155;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11157 = x10731 + x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11158 = x11116 * x11034;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11159 = x11157 - x11158;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11160 = x10732 + x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11161 = x11120 * x11038;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11162 = x11160 - x11161;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11163 = x10733 + x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11164 = x11124 * x11042;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11165 = x11163 - x11164;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11166 = x10734 + x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11167 = x11128 * x11046;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11168 = x11166 - x11167;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11169 = x10735 + x11050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11170 = x11132 * x11050;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11171 = x11169 - x11170;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11172 = x10736 + x11054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11173 = x11136 * x11054;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11174 = x11172 - x11173;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11175 = x10737 + x11058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11176 = x11140 * x11058;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11177 = x11175 - x11176;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11178 = x10738 + x11062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11179 = x11144 * x11062;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11180 = x11178 - x11179;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11181 = x10739 + x11066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11182 = x11148 * x11066;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11183 = x11181 - x11182;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11184 = x10740 + x11070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11185 = x11024 * x11070;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11186 = x11184 - x11185;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11187 = x10741 + x11074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11188 = x11028 * x11074;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11189 = x11187 - x11188;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11190 = x10742 + x11078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11191 = x11032 * x11078;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11192 = x11190 - x11191;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11193 = x10743 + x11082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11194 = x11036 * x11082;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11195 = x11193 - x11194;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11196 = x10744 + x11086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11197 = x11040 * x11086;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11198 = x11196 - x11197;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11199 = x10745 + x11090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11200 = x11044 * x11090;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11201 = x11199 - x11200;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11202 = x10746 + x11094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11203 = x11048 * x11094;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11204 = x11202 - x11203;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11205 = x10747 + x11098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11206 = x11052 * x11098;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11207 = x11205 - x11206;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11208 = x10748 + x11102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11209 = x11056 * x11102;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11210 = x11208 - x11209;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11211 = x10749 + x11106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11212 = x11060 * x11106;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11213 = x11211 - x11212;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11214 = x10750 + x11110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11215 = x11064 * x11110;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11216 = x11214 - x11215;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11217 = x10751 + x11114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11218 = x11068 * x11114;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11219 = x11217 - x11218;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11220 = x10752 + x11118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11221 = x11072 * x11118;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11222 = x11220 - x11221;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11223 = x10753 + x11122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11224 = x11076 * x11122;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11225 = x11223 - x11224;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11226 = x10754 + x11126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11227 = x11080 * x11126;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11228 = x11226 - x11227;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11229 = x10755 + x11130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11230 = x11084 * x11130;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11231 = x11229 - x11230;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11232 = x10756 + x11134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11233 = x11088 * x11134;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11234 = x11232 - x11233;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11235 = x10757 + x11138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11236 = x11092 * x11138;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11237 = x11235 - x11236;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11238 = x10758 + x11142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11239 = x11096 * x11142;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11240 = x11238 - x11239;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11241 = x10727 + x11146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11242 = x11100 * x11146;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11243 = x11241 - x11242;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11244 = x10728 + x11150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11245 = x11104 * x11150;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11246 = x11244 - x11245;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11247 = x10866 + x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11248 = x10866 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11249 = x11248 * x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11250 = x11247 - x11249;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11251 = x10867 + x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11252 = x10867 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11253 = x11252 * x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11254 = x11251 - x11253;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11255 = x10868 + x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11256 = x10868 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11257 = x11256 * x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11258 = x11255 - x11257;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11259 = x10869 + x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11260 = x10869 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11261 = x11260 * x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11262 = x11259 - x11261;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11263 = x10870 + x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11264 = x10870 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11265 = x11264 * x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11266 = x11263 - x11265;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11267 = x10871 + x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11268 = x10871 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11269 = x11268 * x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11270 = x11267 - x11269;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11271 = x10872 + x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11272 = x10872 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11273 = x11272 * x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11274 = x11271 - x11273;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11275 = x10873 + x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11276 = x10873 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11277 = x11276 * x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11278 = x11275 - x11277;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11279 = x10874 + x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11280 = x10874 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11281 = x11280 * x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11282 = x11279 - x11281;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11283 = x10875 + x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11284 = x10875 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11285 = x11284 * x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11286 = x11283 - x11285;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11287 = x10876 + x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11288 = x10876 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11289 = x11288 * x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11290 = x11287 - x11289;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11291 = x10877 + x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11292 = x10877 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11293 = x11292 * x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11294 = x11291 - x11293;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11295 = x10878 + x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11296 = x10878 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11297 = x11296 * x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11298 = x11295 - x11297;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11299 = x10879 + x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11300 = x10879 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11301 = x11300 * x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11302 = x11299 - x11301;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11303 = x10880 + x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11304 = x10880 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11305 = x11304 * x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11306 = x11303 - x11305;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11307 = x10881 + x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11308 = x10881 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11309 = x11308 * x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11310 = x11307 - x11309;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11311 = x10882 + x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11312 = x10882 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11313 = x11312 * x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11314 = x11311 - x11313;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11315 = x10883 + x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11316 = x10883 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11317 = x11316 * x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11318 = x11315 - x11317;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11319 = x10884 + x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11320 = x10884 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11321 = x11320 * x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11322 = x11319 - x11321;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11323 = x10885 + x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11324 = x10885 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11325 = x11324 * x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11326 = x11323 - x11325;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11327 = x10886 + x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11328 = x10886 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11329 = x11328 * x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11330 = x11327 - x11329;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11331 = x10855 + x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11332 = x10855 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11333 = x11332 * x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11334 = x11331 - x11333;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11335 = x10856 + x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11336 = x10856 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11337 = x11336 * x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11338 = x11335 - x11337;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11339 = x10857 + x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11340 = x10857 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11341 = x11340 * x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11342 = x11339 - x11341;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11343 = x10858 + x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11344 = x10858 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11345 = x11344 * x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11346 = x11343 - x11345;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11347 = x10859 + x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11348 = x10859 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11349 = x11348 * x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11350 = x11347 - x11349;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11351 = x10860 + x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11352 = x10860 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11353 = x11352 * x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11354 = x11351 - x11353;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11355 = x10861 + x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11356 = x10861 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11357 = x11356 * x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11358 = x11355 - x11357;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11359 = x10862 + x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11360 = x10862 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11361 = x11360 * x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11362 = x11359 - x11361;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11363 = x10863 + x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11364 = x10863 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11365 = x11364 * x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11366 = x11363 - x11365;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11367 = x10864 + x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11368 = x10864 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11369 = x11368 * x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11370 = x11367 - x11369;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11371 = x10865 + x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11372 = x10865 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11373 = x11372 * x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11374 = x11371 - x11373;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11375 = x10861 + x11250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11376 = x11356 * x11250;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11377 = x11375 - x11376;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11378 = x10862 + x11254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11379 = x11360 * x11254;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11380 = x11378 - x11379;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11381 = x10863 + x11258;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11382 = x11364 * x11258;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11383 = x11381 - x11382;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11384 = x10864 + x11262;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11385 = x11368 * x11262;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11386 = x11384 - x11385;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11387 = x10865 + x11266;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11388 = x11372 * x11266;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11389 = x11387 - x11388;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11390 = x10866 + x11270;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11391 = x11248 * x11270;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11392 = x11390 - x11391;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11393 = x10867 + x11274;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11394 = x11252 * x11274;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11395 = x11393 - x11394;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11396 = x10868 + x11278;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11397 = x11256 * x11278;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11398 = x11396 - x11397;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11399 = x10869 + x11282;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11400 = x11260 * x11282;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11401 = x11399 - x11400;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11402 = x10870 + x11286;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11403 = x11264 * x11286;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11404 = x11402 - x11403;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11405 = x10871 + x11290;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11406 = x11268 * x11290;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11407 = x11405 - x11406;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11408 = x10872 + x11294;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11409 = x11272 * x11294;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11410 = x11408 - x11409;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11411 = x10873 + x11298;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11412 = x11276 * x11298;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11413 = x11411 - x11412;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11414 = x10874 + x11302;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11415 = x11280 * x11302;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11416 = x11414 - x11415;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11417 = x10875 + x11306;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11418 = x11284 * x11306;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11419 = x11417 - x11418;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11420 = x10876 + x11310;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11421 = x11288 * x11310;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11422 = x11420 - x11421;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11423 = x10877 + x11314;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11424 = x11292 * x11314;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11425 = x11423 - x11424;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11426 = x10878 + x11318;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11427 = x11296 * x11318;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11428 = x11426 - x11427;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11429 = x10879 + x11322;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11430 = x11300 * x11322;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11431 = x11429 - x11430;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11432 = x10880 + x11326;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11433 = x11304 * x11326;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11434 = x11432 - x11433;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11435 = x10881 + x11330;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11436 = x11308 * x11330;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11437 = x11435 - x11436;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11438 = x10882 + x11334;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11439 = x11312 * x11334;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11440 = x11438 - x11439;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11441 = x10883 + x11338;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11442 = x11316 * x11338;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11443 = x11441 - x11442;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11444 = x10884 + x11342;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11445 = x11320 * x11342;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11446 = x11444 - x11445;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11447 = x10885 + x11346;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11448 = x11324 * x11346;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11449 = x11447 - x11448;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11450 = x10886 + x11350;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11451 = x11328 * x11350;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11452 = x11450 - x11451;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11453 = x10855 + x11354;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11454 = x11332 * x11354;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11455 = x11453 - x11454;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11456 = x10856 + x11358;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11457 = x11336 * x11358;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11458 = x11456 - x11457;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11459 = x10857 + x11362;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11460 = x11340 * x11362;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11461 = x11459 - x11460;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11462 = x10858 + x11366;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11463 = x11344 * x11366;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11464 = x11462 - x11463;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11465 = x10859 + x11370;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11466 = x11348 * x11370;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11467 = x11465 - x11466;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11468 = x10860 + x11374;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11469 = x11352 * x11374;
      // loc("cirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11470 = x11468 - x11469;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11471 = x10984 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11472 = x10983 + x11471;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11473 = x10985 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11474 = x11472 + x11473;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11475 = x10986 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11476 = x11474 + x11475;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11477 = x10987 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11478 = x11476 + x11477;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11479 = x10988 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11480 = x11478 + x11479;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11481 = x10989 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11482 = x11480 + x11481;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11483 = x10990 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11484 = x11482 + x11483;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11485 = x10991 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11486 = x11484 + x11485;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11487 = x10992 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11488 = x11486 + x11487;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11489 = x10993 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11490 = x11488 + x11489;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11491 = x10994 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11492 = x11490 + x11491;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11493 = x10995 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11494 = x11492 + x11493;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11495 = x10996 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11496 = x11494 + x11495;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11497 = x10997 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11498 = x11496 + x11497;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11499 = x10998 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11500 = x11498 + x11499;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11501 = x11000 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11502 = x10999 + x11501;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11503 = x11001 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11504 = x11502 + x11503;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11505 = x11002 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11506 = x11504 + x11505;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11507 = x11003 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11508 = x11506 + x11507;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11509 = x11004 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11510 = x11508 + x11509;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11511 = x11005 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11512 = x11510 + x11511;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11513 = x11006 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11514 = x11512 + x11513;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11515 = x11007 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11516 = x11514 + x11515;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11517 = x11008 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11518 = x11516 + x11517;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11519 = x11009 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11520 = x11518 + x11519;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11521 = x11010 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11522 = x11520 + x11521;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11523 = x11011 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11524 = x11522 + x11523;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11525 = x11012 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11526 = x11524 + x11525;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11527 = x11013 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11528 = x11526 + x11527;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11529 = x11014 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11530 = x11528 + x11529;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11531 = x10952 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11532 = x10951 + x11531;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11533 = x10953 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11534 = x11532 + x11533;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11535 = x10954 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11536 = x11534 + x11535;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11537 = x10955 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11538 = x11536 + x11537;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11539 = x10956 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11540 = x11538 + x11539;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11541 = x10957 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11542 = x11540 + x11541;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11543 = x10958 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11544 = x11542 + x11543;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11545 = x10959 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11546 = x11544 + x11545;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11547 = x10960 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11548 = x11546 + x11547;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11549 = x10961 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11550 = x11548 + x11549;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11551 = x10962 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11552 = x11550 + x11551;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11553 = x10963 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11554 = x11552 + x11553;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11555 = x10964 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11556 = x11554 + x11555;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11557 = x10965 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11558 = x11556 + x11557;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11559 = x10966 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11560 = x11558 + x11559;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11561 = x10968 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11562 = x10967 + x11561;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11563 = x10969 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11564 = x11562 + x11563;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11565 = x10970 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11566 = x11564 + x11565;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11567 = x10971 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11568 = x11566 + x11567;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11569 = x10972 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11570 = x11568 + x11569;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11571 = x10973 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11572 = x11570 + x11571;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11573 = x10974 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11574 = x11572 + x11573;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11575 = x10975 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11576 = x11574 + x11575;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11577 = x10976 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11578 = x11576 + x11577;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11579 = x10977 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11580 = x11578 + x11579;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11581 = x10978 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11582 = x11580 + x11581;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11583 = x10979 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11584 = x11582 + x11583;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11585 = x10980 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11586 = x11584 + x11585;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11587 = x10981 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11588 = x11586 + x11587;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11589 = x10982 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11590 = x11588 + x11589;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11591 = x10855 * x10887;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11592 = x95 - x10855;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11593 = x11592 * x10919;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11594 = x11591 + x11593;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11595 = x10856 * x10888;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11596 = x95 - x10856;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11597 = x11596 * x10920;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11598 = x11595 + x11597;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11599 = x10857 * x10889;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11600 = x95 - x10857;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11601 = x11600 * x10921;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11602 = x11599 + x11601;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11603 = x10858 * x10890;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11604 = x95 - x10858;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11605 = x11604 * x10922;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11606 = x11603 + x11605;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11607 = x10859 * x10891;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11608 = x95 - x10859;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11609 = x11608 * x10923;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11610 = x11607 + x11609;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11611 = x10860 * x10892;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11612 = x95 - x10860;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11613 = x11612 * x10924;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11614 = x11611 + x11613;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11615 = x10861 * x10893;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11616 = x95 - x10861;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11617 = x11616 * x10925;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11618 = x11615 + x11617;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11619 = x10862 * x10894;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11620 = x95 - x10862;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11621 = x11620 * x10926;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11622 = x11619 + x11621;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11623 = x10863 * x10895;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11624 = x95 - x10863;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11625 = x11624 * x10927;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11626 = x11623 + x11625;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11627 = x10864 * x10896;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11628 = x95 - x10864;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11629 = x11628 * x10928;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11630 = x11627 + x11629;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11631 = x10865 * x10897;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11632 = x95 - x10865;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11633 = x11632 * x10929;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11634 = x11631 + x11633;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11635 = x10866 * x10898;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11636 = x95 - x10866;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11637 = x11636 * x10930;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11638 = x11635 + x11637;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11639 = x10867 * x10899;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11640 = x95 - x10867;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11641 = x11640 * x10931;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11642 = x11639 + x11641;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11643 = x10868 * x10900;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11644 = x95 - x10868;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11645 = x11644 * x10932;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11646 = x11643 + x11645;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11647 = x10869 * x10901;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11648 = x95 - x10869;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11649 = x11648 * x10933;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11650 = x11647 + x11649;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11651 = x10870 * x10902;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11652 = x95 - x10870;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11653 = x11652 * x10934;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11654 = x11651 + x11653;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11655 = x10871 * x10903;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11656 = x95 - x10871;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11657 = x11656 * x10935;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11658 = x11655 + x11657;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11659 = x10872 * x10904;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11660 = x95 - x10872;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11661 = x11660 * x10936;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11662 = x11659 + x11661;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11663 = x10873 * x10905;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11664 = x95 - x10873;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11665 = x11664 * x10937;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11666 = x11663 + x11665;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11667 = x10874 * x10906;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11668 = x95 - x10874;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11669 = x11668 * x10938;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11670 = x11667 + x11669;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11671 = x10875 * x10907;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11672 = x95 - x10875;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11673 = x11672 * x10939;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11674 = x11671 + x11673;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11675 = x10876 * x10908;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11676 = x95 - x10876;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11677 = x11676 * x10940;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11678 = x11675 + x11677;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11679 = x10877 * x10909;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11680 = x95 - x10877;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11681 = x11680 * x10941;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11682 = x11679 + x11681;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11683 = x10878 * x10910;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11684 = x95 - x10878;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11685 = x11684 * x10942;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11686 = x11683 + x11685;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11687 = x10879 * x10911;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11688 = x95 - x10879;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11689 = x11688 * x10943;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11690 = x11687 + x11689;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11691 = x10880 * x10912;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11692 = x95 - x10880;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11693 = x11692 * x10944;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11694 = x11691 + x11693;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11695 = x10881 * x10913;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11696 = x95 - x10881;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11697 = x11696 * x10945;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11698 = x11695 + x11697;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11699 = x10882 * x10914;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11700 = x95 - x10882;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11701 = x11700 * x10946;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11702 = x11699 + x11701;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11703 = x10883 * x10915;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11704 = x95 - x10883;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11705 = x11704 * x10947;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11706 = x11703 + x11705;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11707 = x10884 * x10916;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11708 = x95 - x10884;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11709 = x11708 * x10948;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11710 = x11707 + x11709;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11711 = x10885 * x10917;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11712 = x95 - x10885;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11713 = x11712 * x10949;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11714 = x11711 + x11713;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11715 = x10886 * x10918;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11716 = x95 - x10886;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11717 = x11716 * x10950;
      // loc("cirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11718 = x11715 + x11717;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11719 = x11598 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11720 = x11594 + x11719;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11721 = x11602 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11722 = x11720 + x11721;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11723 = x11606 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11724 = x11722 + x11723;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11725 = x11610 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11726 = x11724 + x11725;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11727 = x11614 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11728 = x11726 + x11727;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11729 = x11618 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11730 = x11728 + x11729;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11731 = x11622 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11732 = x11730 + x11731;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11733 = x11626 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11734 = x11732 + x11733;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11735 = x11630 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11736 = x11734 + x11735;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11737 = x11634 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11738 = x11736 + x11737;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11739 = x11638 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11740 = x11738 + x11739;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11741 = x11642 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11742 = x11740 + x11741;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11743 = x11646 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11744 = x11742 + x11743;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11745 = x11650 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11746 = x11744 + x11745;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11747 = x11654 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11748 = x11746 + x11747;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11749 = x11662 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11750 = x11658 + x11749;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11751 = x11666 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11752 = x11750 + x11751;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11753 = x11670 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11754 = x11752 + x11753;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11755 = x11674 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11756 = x11754 + x11755;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11757 = x11678 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11758 = x11756 + x11757;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11759 = x11682 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11760 = x11758 + x11759;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11761 = x11686 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11762 = x11760 + x11761;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11763 = x11690 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11764 = x11762 + x11763;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11765 = x11694 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11766 = x11764 + x11765;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11767 = x11698 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11768 = x11766 + x11767;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11769 = x11702 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11770 = x11768 + x11769;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11771 = x11706 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11772 = x11770 + x11771;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11773 = x11710 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11774 = x11772 + x11773;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11775 = x11714 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11776 = x11774 + x11775;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11777 = x11718 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11778 = x11776 + x11777;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11779 = x11380 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11780 = x11377 + x11779;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11781 = x11383 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11782 = x11780 + x11781;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11783 = x11386 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11784 = x11782 + x11783;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11785 = x11389 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11786 = x11784 + x11785;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11787 = x11392 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11788 = x11786 + x11787;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11789 = x11395 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11790 = x11788 + x11789;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11791 = x11398 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11792 = x11790 + x11791;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11793 = x11401 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11794 = x11792 + x11793;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11795 = x11404 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11796 = x11794 + x11795;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11797 = x11407 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11798 = x11796 + x11797;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11799 = x11410 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11800 = x11798 + x11799;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11801 = x11413 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11802 = x11800 + x11801;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11803 = x11416 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11804 = x11802 + x11803;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11805 = x11419 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11806 = x11804 + x11805;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11807 = x11422 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11808 = x11806 + x11807;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11809 = x11428 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11810 = x11425 + x11809;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11811 = x11431 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11812 = x11810 + x11811;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11813 = x11434 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11814 = x11812 + x11813;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11815 = x11437 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11816 = x11814 + x11815;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11817 = x11440 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11818 = x11816 + x11817;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11819 = x11443 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11820 = x11818 + x11819;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11821 = x11446 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11822 = x11820 + x11821;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11823 = x11449 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11824 = x11822 + x11823;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11825 = x11452 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11826 = x11824 + x11825;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11827 = x11455 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11828 = x11826 + x11827;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11829 = x11458 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11830 = x11828 + x11829;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11831 = x11461 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11832 = x11830 + x11831;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11833 = x11464 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11834 = x11832 + x11833;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11835 = x11467 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11836 = x11834 + x11835;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11837 = x11470 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11838 = x11836 + x11837;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11839 = x11748 + x11808;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11840 = x11778 + x11838;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11841 = x11560 + x11839;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11842 = x11590 + x11840;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11843 = x11020 + x11841;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11844 = x11022 + x11842;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11845 = x11500 + x11843;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x11846 = x11530 + x11844;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11847 = x10727 * x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11848 = x95 - x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11849 = x11847 * x11848;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11850 = x95 - x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11851 = x10727 * x11850;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11852 = x11851 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11853 = x11849 + x11852;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11854 = x95 - x10727;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11855 = x11854 * x10759;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11856 = x11855 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11857 = x11853 + x11856;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11858 = x11847 * x10791;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11859 = x11857 + x11858;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11860 = x10728 * x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11861 = x95 - x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11862 = x11860 * x11861;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11863 = x95 - x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11864 = x10728 * x11863;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11865 = x11864 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11866 = x11862 + x11865;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11867 = x95 - x10728;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11868 = x11867 * x10760;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11869 = x11868 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11870 = x11866 + x11869;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11871 = x11860 * x10792;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11872 = x11870 + x11871;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11873 = x10729 * x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11874 = x95 - x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11875 = x11873 * x11874;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11876 = x95 - x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11877 = x10729 * x11876;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11878 = x11877 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11879 = x11875 + x11878;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11880 = x95 - x10729;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11881 = x11880 * x10761;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11882 = x11881 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11883 = x11879 + x11882;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11884 = x11873 * x10793;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11885 = x11883 + x11884;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11886 = x10730 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11887 = x95 - x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11888 = x11886 * x11887;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11889 = x95 - x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11890 = x10730 * x11889;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11891 = x11890 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11892 = x11888 + x11891;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11893 = x95 - x10730;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11894 = x11893 * x10762;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11895 = x11894 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11896 = x11892 + x11895;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11897 = x11886 * x10794;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11898 = x11896 + x11897;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11899 = x10731 * x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11900 = x95 - x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11901 = x11899 * x11900;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11902 = x95 - x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11903 = x10731 * x11902;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11904 = x11903 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11905 = x11901 + x11904;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11906 = x95 - x10731;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11907 = x11906 * x10763;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11908 = x11907 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11909 = x11905 + x11908;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11910 = x11899 * x10795;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11911 = x11909 + x11910;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11912 = x10732 * x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11913 = x95 - x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11914 = x11912 * x11913;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11915 = x95 - x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11916 = x10732 * x11915;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11917 = x11916 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11918 = x11914 + x11917;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11919 = x95 - x10732;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11920 = x11919 * x10764;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11921 = x11920 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11922 = x11918 + x11921;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11923 = x11912 * x10796;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11924 = x11922 + x11923;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11925 = x10733 * x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11926 = x95 - x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11927 = x11925 * x11926;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11928 = x95 - x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11929 = x10733 * x11928;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11930 = x11929 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11931 = x11927 + x11930;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11932 = x95 - x10733;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11933 = x11932 * x10765;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11934 = x11933 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11935 = x11931 + x11934;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11936 = x11925 * x10797;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11937 = x11935 + x11936;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11938 = x10734 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11939 = x95 - x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11940 = x11938 * x11939;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11941 = x95 - x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11942 = x10734 * x11941;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11943 = x11942 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11944 = x11940 + x11943;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11945 = x95 - x10734;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11946 = x11945 * x10766;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11947 = x11946 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11948 = x11944 + x11947;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11949 = x11938 * x10798;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11950 = x11948 + x11949;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11951 = x10735 * x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11952 = x95 - x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11953 = x11951 * x11952;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11954 = x95 - x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11955 = x10735 * x11954;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11956 = x11955 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11957 = x11953 + x11956;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11958 = x95 - x10735;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11959 = x11958 * x10767;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11960 = x11959 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11961 = x11957 + x11960;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11962 = x11951 * x10799;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11963 = x11961 + x11962;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11964 = x10736 * x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11965 = x95 - x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11966 = x11964 * x11965;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11967 = x95 - x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11968 = x10736 * x11967;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11969 = x11968 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11970 = x11966 + x11969;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11971 = x95 - x10736;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11972 = x11971 * x10768;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11973 = x11972 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11974 = x11970 + x11973;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11975 = x11964 * x10800;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11976 = x11974 + x11975;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11977 = x10737 * x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11978 = x95 - x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11979 = x11977 * x11978;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11980 = x95 - x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11981 = x10737 * x11980;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11982 = x11981 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11983 = x11979 + x11982;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11984 = x95 - x10737;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11985 = x11984 * x10769;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11986 = x11985 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11987 = x11983 + x11986;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x11988 = x11977 * x10801;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11989 = x11987 + x11988;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11990 = x10738 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x11991 = x95 - x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11992 = x11990 * x11991;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x11993 = x95 - x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11994 = x10738 * x11993;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x11995 = x11994 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x11996 = x11992 + x11995;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x11997 = x95 - x10738;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11998 = x11997 * x10770;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x11999 = x11998 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12000 = x11996 + x11999;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12001 = x11990 * x10802;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12002 = x12000 + x12001;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12003 = x10739 * x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12004 = x95 - x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12005 = x12003 * x12004;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12006 = x95 - x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12007 = x10739 * x12006;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12008 = x12007 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12009 = x12005 + x12008;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12010 = x95 - x10739;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12011 = x12010 * x10771;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12012 = x12011 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12013 = x12009 + x12012;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12014 = x12003 * x10803;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12015 = x12013 + x12014;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12016 = x10740 * x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12017 = x95 - x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12018 = x12016 * x12017;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12019 = x95 - x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12020 = x10740 * x12019;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12021 = x12020 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12022 = x12018 + x12021;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12023 = x95 - x10740;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12024 = x12023 * x10772;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12025 = x12024 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12026 = x12022 + x12025;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12027 = x12016 * x10804;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12028 = x12026 + x12027;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12029 = x10741 * x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12030 = x95 - x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12031 = x12029 * x12030;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12032 = x95 - x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12033 = x10741 * x12032;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12034 = x12033 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12035 = x12031 + x12034;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12036 = x95 - x10741;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12037 = x12036 * x10773;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12038 = x12037 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12039 = x12035 + x12038;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12040 = x12029 * x10805;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12041 = x12039 + x12040;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12042 = x10742 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12043 = x95 - x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12044 = x12042 * x12043;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12045 = x95 - x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12046 = x10742 * x12045;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12047 = x12046 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12048 = x12044 + x12047;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12049 = x95 - x10742;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12050 = x12049 * x10774;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12051 = x12050 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12052 = x12048 + x12051;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12053 = x12042 * x10806;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12054 = x12052 + x12053;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12055 = x10743 * x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12056 = x95 - x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12057 = x12055 * x12056;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12058 = x95 - x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12059 = x10743 * x12058;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12060 = x12059 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12061 = x12057 + x12060;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12062 = x95 - x10743;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12063 = x12062 * x10775;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12064 = x12063 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12065 = x12061 + x12064;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12066 = x12055 * x10807;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12067 = x12065 + x12066;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12068 = x10744 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12069 = x95 - x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12070 = x12068 * x12069;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12071 = x95 - x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12072 = x10744 * x12071;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12073 = x12072 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12074 = x12070 + x12073;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12075 = x95 - x10744;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12076 = x12075 * x10776;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12077 = x12076 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12078 = x12074 + x12077;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12079 = x12068 * x10808;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12080 = x12078 + x12079;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12081 = x10745 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12082 = x95 - x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12083 = x12081 * x12082;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12084 = x95 - x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12085 = x10745 * x12084;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12086 = x12085 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12087 = x12083 + x12086;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12088 = x95 - x10745;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12089 = x12088 * x10777;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12090 = x12089 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12091 = x12087 + x12090;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12092 = x12081 * x10809;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12093 = x12091 + x12092;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12094 = x10746 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12095 = x95 - x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12096 = x12094 * x12095;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12097 = x95 - x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12098 = x10746 * x12097;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12099 = x12098 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12100 = x12096 + x12099;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12101 = x95 - x10746;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12102 = x12101 * x10778;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12103 = x12102 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12104 = x12100 + x12103;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12105 = x12094 * x10810;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12106 = x12104 + x12105;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12107 = x10747 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12108 = x95 - x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12109 = x12107 * x12108;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12110 = x95 - x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12111 = x10747 * x12110;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12112 = x12111 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12113 = x12109 + x12112;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12114 = x95 - x10747;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12115 = x12114 * x10779;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12116 = x12115 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12117 = x12113 + x12116;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12118 = x12107 * x10811;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12119 = x12117 + x12118;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12120 = x10748 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12121 = x95 - x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12122 = x12120 * x12121;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12123 = x95 - x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12124 = x10748 * x12123;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12125 = x12124 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12126 = x12122 + x12125;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12127 = x95 - x10748;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12128 = x12127 * x10780;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12129 = x12128 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12130 = x12126 + x12129;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12131 = x12120 * x10812;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12132 = x12130 + x12131;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12133 = x10749 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12134 = x95 - x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12135 = x12133 * x12134;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12136 = x95 - x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12137 = x10749 * x12136;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12138 = x12137 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12139 = x12135 + x12138;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12140 = x95 - x10749;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12141 = x12140 * x10781;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12142 = x12141 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12143 = x12139 + x12142;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12144 = x12133 * x10813;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12145 = x12143 + x12144;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12146 = x10750 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12147 = x95 - x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12148 = x12146 * x12147;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12149 = x95 - x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12150 = x10750 * x12149;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12151 = x12150 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12152 = x12148 + x12151;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12153 = x95 - x10750;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12154 = x12153 * x10782;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12155 = x12154 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12156 = x12152 + x12155;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12157 = x12146 * x10814;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12158 = x12156 + x12157;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12159 = x10751 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12160 = x95 - x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12161 = x12159 * x12160;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12162 = x95 - x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12163 = x10751 * x12162;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12164 = x12163 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12165 = x12161 + x12164;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12166 = x95 - x10751;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12167 = x12166 * x10783;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12168 = x12167 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12169 = x12165 + x12168;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12170 = x12159 * x10815;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12171 = x12169 + x12170;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12172 = x10752 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12173 = x95 - x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12174 = x12172 * x12173;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12175 = x95 - x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12176 = x10752 * x12175;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12177 = x12176 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12178 = x12174 + x12177;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12179 = x95 - x10752;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12180 = x12179 * x10784;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12181 = x12180 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12182 = x12178 + x12181;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12183 = x12172 * x10816;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12184 = x12182 + x12183;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12185 = x10753 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12186 = x95 - x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12187 = x12185 * x12186;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12188 = x95 - x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12189 = x10753 * x12188;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12190 = x12189 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12191 = x12187 + x12190;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12192 = x95 - x10753;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12193 = x12192 * x10785;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12194 = x12193 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12195 = x12191 + x12194;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12196 = x12185 * x10817;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12197 = x12195 + x12196;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12198 = x10754 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12199 = x95 - x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12200 = x12198 * x12199;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12201 = x95 - x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12202 = x10754 * x12201;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12203 = x12202 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12204 = x12200 + x12203;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12205 = x95 - x10754;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12206 = x12205 * x10786;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12207 = x12206 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12208 = x12204 + x12207;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12209 = x12198 * x10818;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12210 = x12208 + x12209;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12211 = x10755 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12212 = x95 - x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12213 = x12211 * x12212;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12214 = x95 - x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12215 = x10755 * x12214;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12216 = x12215 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12217 = x12213 + x12216;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12218 = x95 - x10755;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12219 = x12218 * x10787;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12220 = x12219 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12221 = x12217 + x12220;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12222 = x12211 * x10819;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12223 = x12221 + x12222;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12224 = x10756 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12225 = x95 - x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12226 = x12224 * x12225;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12227 = x95 - x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12228 = x10756 * x12227;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12229 = x12228 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12230 = x12226 + x12229;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12231 = x95 - x10756;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12232 = x12231 * x10788;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12233 = x12232 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12234 = x12230 + x12233;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12235 = x12224 * x10820;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12236 = x12234 + x12235;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12237 = x10757 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12238 = x95 - x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12239 = x12237 * x12238;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12240 = x95 - x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12241 = x10757 * x12240;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12242 = x12241 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12243 = x12239 + x12242;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12244 = x95 - x10757;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12245 = x12244 * x10789;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12246 = x12245 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12247 = x12243 + x12246;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12248 = x12237 * x10821;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12249 = x12247 + x12248;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12250 = x10758 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12251 = x95 - x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12252 = x12250 * x12251;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12253 = x95 - x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12254 = x10758 * x12253;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12255 = x12254 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12256 = x12252 + x12255;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12257 = x95 - x10758;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12258 = x12257 * x10790;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12259 = x12258 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12260 = x12256 + x12259;
      // loc("cirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12261 = x12250 * x10822;
      // loc("cirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12262 = x12260 + x12261;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12263 = x11872 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12264 = x11859 + x12263;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12265 = x11885 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12266 = x12264 + x12265;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12267 = x11898 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12268 = x12266 + x12267;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12269 = x11911 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12270 = x12268 + x12269;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12271 = x11924 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12272 = x12270 + x12271;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12273 = x11937 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12274 = x12272 + x12273;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12275 = x11950 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12276 = x12274 + x12275;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12277 = x11963 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12278 = x12276 + x12277;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12279 = x11976 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12280 = x12278 + x12279;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12281 = x11989 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12282 = x12280 + x12281;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12283 = x12002 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12284 = x12282 + x12283;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12285 = x12015 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12286 = x12284 + x12285;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12287 = x12028 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12288 = x12286 + x12287;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12289 = x12041 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12290 = x12288 + x12289;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12291 = x12054 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12292 = x12290 + x12291;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12293 = x12080 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12294 = x12067 + x12293;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12295 = x12093 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12296 = x12294 + x12295;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12297 = x12106 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12298 = x12296 + x12297;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12299 = x12119 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12300 = x12298 + x12299;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12301 = x12132 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12302 = x12300 + x12301;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12303 = x12145 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12304 = x12302 + x12303;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12305 = x12158 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12306 = x12304 + x12305;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12307 = x12171 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12308 = x12306 + x12307;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12309 = x12184 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12310 = x12308 + x12309;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12311 = x12197 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12312 = x12310 + x12311;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12313 = x12210 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12314 = x12312 + x12313;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12315 = x12223 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12316 = x12314 + x12315;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12317 = x12236 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12318 = x12316 + x12317;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12319 = x12249 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12320 = x12318 + x12319;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12321 = x12262 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12322 = x12320 + x12321;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12323 = x11156 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12324 = x11153 + x12323;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12325 = x11159 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12326 = x12324 + x12325;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12327 = x11162 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12328 = x12326 + x12327;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12329 = x11165 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12330 = x12328 + x12329;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12331 = x11168 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12332 = x12330 + x12331;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12333 = x11171 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12334 = x12332 + x12333;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12335 = x11174 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12336 = x12334 + x12335;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12337 = x11177 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12338 = x12336 + x12337;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12339 = x11180 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12340 = x12338 + x12339;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12341 = x11183 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12342 = x12340 + x12341;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12343 = x11186 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12344 = x12342 + x12343;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12345 = x11189 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12346 = x12344 + x12345;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12347 = x11192 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12348 = x12346 + x12347;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12349 = x11195 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12350 = x12348 + x12349;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12351 = x11198 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12352 = x12350 + x12351;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12353 = x11204 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12354 = x11201 + x12353;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12355 = x11207 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12356 = x12354 + x12355;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12357 = x11210 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12358 = x12356 + x12357;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12359 = x11213 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12360 = x12358 + x12359;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12361 = x11216 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12362 = x12360 + x12361;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12363 = x11219 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12364 = x12362 + x12363;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12365 = x11222 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12366 = x12364 + x12365;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12367 = x11225 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12368 = x12366 + x12367;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12369 = x11228 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12370 = x12368 + x12369;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12371 = x11231 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12372 = x12370 + x12371;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12373 = x11234 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12374 = x12372 + x12373;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12375 = x11237 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12376 = x12374 + x12375;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12377 = x11240 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12378 = x12376 + x12377;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12379 = x11243 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12380 = x12378 + x12379;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12381 = x11246 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12382 = x12380 + x12381;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12383 = x12292 + x12352;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12384 = x12322 + x12382;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12385 = x11845 + x12383;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12386 = x11846 + x12384;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12387 = x10824 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12388 = x10823 + x12387;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12389 = x10825 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12390 = x12388 + x12389;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12391 = x10826 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12392 = x12390 + x12391;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12393 = x10827 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12394 = x12392 + x12393;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12395 = x10828 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12396 = x12394 + x12395;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12397 = x10829 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12398 = x12396 + x12397;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12399 = x10830 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12400 = x12398 + x12399;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12401 = x10831 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12402 = x12400 + x12401;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12403 = x10832 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12404 = x12402 + x12403;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12405 = x10833 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12406 = x12404 + x12405;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12407 = x10834 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12408 = x12406 + x12407;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12409 = x10835 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12410 = x12408 + x12409;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12411 = x10836 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12412 = x12410 + x12411;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12413 = x10837 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12414 = x12412 + x12413;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12415 = x10838 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12416 = x12414 + x12415;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12417 = x10840 * x92;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12418 = x10839 + x12417;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12419 = x10841 * x77;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12420 = x12418 + x12419;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12421 = x10842 * x70;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12422 = x12420 + x12421;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12423 = x10843 * x59;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12424 = x12422 + x12423;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12425 = x10844 * x61;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12426 = x12424 + x12425;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12427 = x10845 * x55;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12428 = x12426 + x12427;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12429 = x10846 * x64;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12430 = x12428 + x12429;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12431 = x10847 * x90;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12432 = x12430 + x12431;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12433 = x10848 * x21;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12434 = x12432 + x12433;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12435 = x10849 * x22;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12436 = x12434 + x12435;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12437 = x10850 * x18;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12438 = x12436 + x12437;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12439 = x10851 * x16;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12440 = x12438 + x12439;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12441 = x10852 * x14;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12442 = x12440 + x12441;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12443 = x10853 * x36;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12444 = x12442 + x12443;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12445 = x10854 * x11;
      // loc("cirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12446 = x12444 + x12445;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12447 = x11845 + x12416;
      // loc("cirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12448 = x11846 + x12446;
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][144 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12385);
        reg = x12385;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12447);
        reg = x12447;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":488:5)
      {
        auto& reg = args[2][145 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12386);
        reg = x12386;
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][147 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12448);
        reg = x12448;
      }
      if (x8480 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12449 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x12449 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12450 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x12450 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12451 = Fp(x12449.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12451);
            reg = x12451;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12452 = Fp(x12449.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12453 = x12452 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][151 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12453);
            reg = x12453;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12454 = Fp(x12449.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12455 = x12454 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][152 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12455);
            reg = x12455;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12456 = Fp(x12449.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12457 = x12456 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][153 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12457);
            reg = x12457;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12458 = Fp(x12449.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12459 = x12458 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][154 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12459);
            reg = x12459;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12460 = Fp(x12449.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12461 = x12460 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][155 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12461);
            reg = x12461;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12462 = Fp(x12449.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12463 = x12462 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][156 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12463);
            reg = x12463;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12464 = Fp(x12449.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12465 = x12464 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][157 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12465);
            reg = x12465;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12466 = Fp(x12449.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12467 = x12466 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][158 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12467);
            reg = x12467;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12468 = Fp(x12449.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12469 = x12468 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12469);
            reg = x12469;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12470 = Fp(x12449.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12471 = x12470 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12471);
            reg = x12471;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12472 = Fp(x12449.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12473 = x12472 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12473);
            reg = x12473;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12474 = Fp(x12449.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12475 = x12474 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12475);
            reg = x12475;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12476 = Fp(x12449.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12477 = x12476 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12477);
            reg = x12477;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12478 = Fp(x12449.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12479 = x12478 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12479);
            reg = x12479;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12480 = Fp(x12449.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12481 = x12480 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12481);
            reg = x12481;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12482 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x12482 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12483 = args[2][151 * steps + ((cycle - 0) & mask)];
        assert(x12483 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12484 = x12483 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12485 = x12482 + x12484;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12486 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x12486 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12487 = x12486 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12488 = x12485 + x12487;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12489 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12489 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12490 = x12489 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12491 = x12488 + x12490;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12492 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12492 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12493 = x12492 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12494 = x12491 + x12493;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12495 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12495 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12496 = x12495 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12497 = x12494 + x12496;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12498 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12498 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12499 = x12498 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12500 = x12497 + x12499;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12501 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x12501 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12502 = x12501 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12503 = x12500 + x12502;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12504 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x12504 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12505 = x12504 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12506 = x12503 + x12505;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12507 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12507 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12508 = x12507 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12509 = x12506 + x12508;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12510 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12510 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12511 = x12510 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12512 = x12509 + x12511;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12513 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12513 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12514 = x12513 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12515 = x12512 + x12514;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12516 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12516 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12517 = x12516 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12518 = x12515 + x12517;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12519 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12519 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12520 = x12519 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12521 = x12518 + x12520;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12522 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12522 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12523 = x12522 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12524 = x12521 + x12523;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12525 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12525 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12526 = x12525 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12527 = x12524 + x12526;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12528 = x12449 - x12527;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12529 = x12528 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12530 = Fp(x12529.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12530);
            reg = x12530;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12531 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x12531 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12532 = x12529 - x12531;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12533 = x12532 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12534 = x95 - x12533;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12535 = x12533 * x12534;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12535 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12536 = x12450 + x12529;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12537 = Fp(x12536.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12537);
            reg = x12537;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12538 = Fp(x12536.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12539 = x12538 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12539);
            reg = x12539;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12540 = Fp(x12536.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12541 = x12540 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12541);
            reg = x12541;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12542 = Fp(x12536.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12543 = x12542 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12543);
            reg = x12543;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12544 = Fp(x12536.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12545 = x12544 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12545);
            reg = x12545;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12546 = Fp(x12536.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12547 = x12546 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12547);
            reg = x12547;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12548 = Fp(x12536.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12549 = x12548 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12549);
            reg = x12549;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12550 = Fp(x12536.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12551 = x12550 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12551);
            reg = x12551;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12552 = Fp(x12536.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12553 = x12552 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12553);
            reg = x12553;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12554 = Fp(x12536.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12555 = x12554 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12555);
            reg = x12555;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12556 = Fp(x12536.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12557 = x12556 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12557);
            reg = x12557;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12558 = Fp(x12536.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12559 = x12558 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12559);
            reg = x12559;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12560 = Fp(x12536.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12561 = x12560 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12561);
            reg = x12561;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12562 = Fp(x12536.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12563 = x12562 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12563);
            reg = x12563;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12564 = Fp(x12536.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12565 = x12564 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12565);
            reg = x12565;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12566 = Fp(x12536.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12567 = x12566 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12567);
            reg = x12567;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12568 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12568 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12569 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12569 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12570 = x12569 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12571 = x12568 + x12570;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12572 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12572 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12573 = x12572 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12574 = x12571 + x12573;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12575 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12575 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12576 = x12575 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12577 = x12574 + x12576;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12578 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12578 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12579 = x12578 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12580 = x12577 + x12579;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12581 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12581 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12582 = x12581 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12583 = x12580 + x12582;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12584 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12584 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12585 = x12584 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12586 = x12583 + x12585;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12587 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12587 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12588 = x12587 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12589 = x12586 + x12588;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12590 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12590 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12591 = x12590 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12592 = x12589 + x12591;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12593 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12593 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12594 = x12593 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12595 = x12592 + x12594;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12596 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12596 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12597 = x12596 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12598 = x12595 + x12597;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12599 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12599 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12600 = x12599 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12601 = x12598 + x12600;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12602 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12602 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12603 = x12602 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12604 = x12601 + x12603;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12605 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12605 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12606 = x12605 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12607 = x12604 + x12606;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12608 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12608 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12609 = x12608 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12610 = x12607 + x12609;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12611 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12611 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12612 = x12611 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12613 = x12610 + x12612;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12614 = x12536 - x12613;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12615 = x12614 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12616 = Fp(x12615.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12616);
            reg = x12616;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12617 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x12617 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12618 = x12615 - x12617;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12619 = x12618 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12620 = x95 - x12619;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12621 = x12619 * x12620;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12621 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12622 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x12622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12623 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x12623 != Fp::invalid());
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12624 = Fp(x12622.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12624);
            reg = x12624;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12625 = Fp(x12622.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12626 = x12625 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12626);
            reg = x12626;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12627 = Fp(x12622.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12628 = x12627 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12628);
            reg = x12628;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12629 = Fp(x12622.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12630 = x12629 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12630);
            reg = x12630;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12631 = Fp(x12622.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12632 = x12631 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12632);
            reg = x12632;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12633 = Fp(x12622.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12634 = x12633 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12634);
            reg = x12634;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12635 = Fp(x12622.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12636 = x12635 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12636);
            reg = x12636;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12637 = Fp(x12622.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12638 = x12637 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12638);
            reg = x12638;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12639 = Fp(x12622.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12640 = x12639 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12640);
            reg = x12640;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12641 = Fp(x12622.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12642 = x12641 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12642);
            reg = x12642;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12643 = Fp(x12622.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12644 = x12643 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12644);
            reg = x12644;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12645 = Fp(x12622.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12646 = x12645 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12646);
            reg = x12646;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12647 = Fp(x12622.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12648 = x12647 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12648);
            reg = x12648;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12649 = Fp(x12622.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12650 = x12649 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12650);
            reg = x12650;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12651 = Fp(x12622.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12652 = x12651 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12652);
            reg = x12652;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12653 = Fp(x12622.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12654 = x12653 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12654);
            reg = x12654;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12655 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12655 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12656 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12656 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12657 = x12656 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12658 = x12655 + x12657;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12659 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12659 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12660 = x12659 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12661 = x12658 + x12660;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12662 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12662 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12663 = x12662 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12664 = x12661 + x12663;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12665 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12665 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12666 = x12665 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12667 = x12664 + x12666;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12668 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12668 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12669 = x12668 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12670 = x12667 + x12669;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12671 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12671 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12672 = x12671 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12673 = x12670 + x12672;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12674 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12674 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12675 = x12674 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12676 = x12673 + x12675;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12677 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12677 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12678 = x12677 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12679 = x12676 + x12678;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12680 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x12680 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12681 = x12680 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12682 = x12679 + x12681;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12683 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x12683 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12684 = x12683 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12685 = x12682 + x12684;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12686 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x12686 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12687 = x12686 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12688 = x12685 + x12687;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12689 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x12689 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12690 = x12689 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12691 = x12688 + x12690;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12692 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x12692 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12693 = x12692 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12694 = x12691 + x12693;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12695 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x12695 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12696 = x12695 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12697 = x12694 + x12696;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12698 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x12698 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12699 = x12698 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12700 = x12697 + x12699;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12701 = x12622 - x12700;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12702 = x12701 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12703 = Fp(x12702.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12703);
            reg = x12703;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12704 = args[2][78 * steps + ((cycle - 0) & mask)];
        assert(x12704 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12705 = x12702 - x12704;
        // loc("cirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12706 = x12705 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12707 = x95 - x12706;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12708 = x12706 * x12707;
        // loc("cirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12708 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:124");
        // loc("cirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12709 = x12623 + x12702;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12710 = Fp(x12709.asUInt32() & x95.asUInt32());
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12710);
            reg = x12710;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12711 = Fp(x12709.asUInt32() & x92.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12712 = x12711 * x56;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12712);
            reg = x12712;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12713 = Fp(x12709.asUInt32() & x77.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12714 = x12713 * x75;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12714);
            reg = x12714;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12715 = Fp(x12709.asUInt32() & x70.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12716 = x12715 * x57;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12716);
            reg = x12716;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12717 = Fp(x12709.asUInt32() & x59.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12718 = x12717 * x58;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12718);
            reg = x12718;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12719 = Fp(x12709.asUInt32() & x61.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12720 = x12719 * x60;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12720);
            reg = x12720;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12721 = Fp(x12709.asUInt32() & x55.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12722 = x12721 * x54;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12722);
            reg = x12722;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12723 = Fp(x12709.asUInt32() & x64.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12724 = x12723 * x63;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12724);
            reg = x12724;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12725 = Fp(x12709.asUInt32() & x90.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12726 = x12725 * x89;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12726);
            reg = x12726;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12727 = Fp(x12709.asUInt32() & x21.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12728 = x12727 * x20;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12728);
            reg = x12728;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12729 = Fp(x12709.asUInt32() & x22.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12730 = x12729 * x19;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12730);
            reg = x12730;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12731 = Fp(x12709.asUInt32() & x18.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12732 = x12731 * x17;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12732);
            reg = x12732;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12733 = Fp(x12709.asUInt32() & x16.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12734 = x12733 * x15;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12734);
            reg = x12734;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12735 = Fp(x12709.asUInt32() & x14.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12736 = x12735 * x13;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12736);
            reg = x12736;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12737 = Fp(x12709.asUInt32() & x36.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12738 = x12737 * x12;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12738);
            reg = x12738;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12739 = Fp(x12709.asUInt32() & x11.asUInt32());
          // loc("cirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12740 = x12739 * x10;
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12740);
            reg = x12740;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12741 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x12741 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12742 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x12742 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12743 = x12742 * x92;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12744 = x12741 + x12743;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12745 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x12745 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12746 = x12745 * x77;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12747 = x12744 + x12746;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12748 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x12748 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12749 = x12748 * x70;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12750 = x12747 + x12749;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12751 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x12751 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12752 = x12751 * x59;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12753 = x12750 + x12752;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12754 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x12754 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12755 = x12754 * x61;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12756 = x12753 + x12755;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12757 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x12757 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12758 = x12757 * x55;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12759 = x12756 + x12758;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12760 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x12760 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12761 = x12760 * x64;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12762 = x12759 + x12761;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12763 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x12763 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12764 = x12763 * x90;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12765 = x12762 + x12764;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12766 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x12766 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12767 = x12766 * x21;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12768 = x12765 + x12767;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12769 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x12769 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12770 = x12769 * x22;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12771 = x12768 + x12770;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12772 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x12772 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12773 = x12772 * x18;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12774 = x12771 + x12773;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12775 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x12775 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12776 = x12775 * x16;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12777 = x12774 + x12776;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12778 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x12778 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12779 = x12778 * x14;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12780 = x12777 + x12779;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12781 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x12781 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12782 = x12781 * x36;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12783 = x12780 + x12782;
        // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12784 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x12784 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12785 = x12784 * x11;
        // loc("cirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12786 = x12783 + x12785;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12787 = x12709 - x12786;
        // loc("cirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12788 = x12787 * x9;
        {
          // loc("cirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12789 = Fp(x12788.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12789);
            reg = x12789;
          }
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12790 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x12790 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12791 = x12788 - x12790;
        // loc("cirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12792 = x12791 * x75;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12793 = x95 - x12792;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12794 = x12792 * x12793;
        // loc("cirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12794 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/Mux/4/Mux/11/ShaCycle/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12795 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x12795 != Fp::invalid());
      if (x12795 != 0) {
        if (x8487 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":430:38))
          auto x12796 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12796 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":430:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12796);
            reg = x12796;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":431:38))
          auto x12797 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12797 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":431:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12797);
            reg = x12797;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":432:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        if (x8488 != 0) {
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":436:51))
          auto x12798 = args[2][133 * steps + ((cycle - 1) & mask)];
          assert(x12798 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":436:51)
          auto x12799 = x12798 + x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":436:7)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12799);
            reg = x12799;
          }
          // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":437:51))
          auto x12800 = args[2][134 * steps + ((cycle - 1) & mask)];
          assert(x12800 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/sha.cpp":437:51)
          auto x12801 = x12800 + x59;
          // loc("cirgen/circuit/rv32im/sha.cpp":437:7)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12801);
            reg = x12801;
          }
          // loc("cirgen/circuit/rv32im/sha.cpp":438:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x68);
            reg = x68;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/sha.cpp":441:27)
      auto x12802 = x95 - x12795;
      if (x12802 != 0) {
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":442:36))
        auto x12803 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x12803 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":442:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12803);
          reg = x12803;
        }
        // loc("Top/Mux/4/Mux/11/ShaCycle/Reg"("cirgen/circuit/rv32im/sha.cpp":443:36))
        auto x12804 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x12804 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/sha.cpp":443:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12804);
          reg = x12804;
        }
        // loc("cirgen/circuit/rv32im/sha.cpp":444:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/components/mux.h":39:25))
    auto x12805 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x12805 != Fp::invalid());
    if (x12805 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12806 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x12806 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":14:23)
      auto x12807 = x598 + x77;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12808 = Fp(x12807.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12808);
          reg = x12808;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12809 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x12809 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12810 = x12807 - x12809;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12811 = x12810 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12812 = Fp(x12811.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12812);
          reg = x12812;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12813 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x12813 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12814 = x12811 - x12813;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12815 = x12814 * x89;
      {
        // loc("cirgen/components/bytes.cpp":89:21)
        auto x12816 = Fp(x12815.asUInt32() & x91.asUInt32());
        // loc("cirgen/components/bytes.cpp":89:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12816);
          reg = x12816;
        }
      }
      // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
      auto x12817 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x12817 != Fp::invalid());
      // loc("cirgen/components/bytes.cpp":90:11)
      auto x12818 = x12815 - x12817;
      // loc("cirgen/components/bytes.cpp":90:10)
      auto x12819 = x12818 * x89;
      {
        // loc("cirgen/circuit/rv32im/body.cpp":17:26)
        auto x12820 = Fp(x12819.asUInt32() & x76.asUInt32());
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12820);
          reg = x12820;
        }
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12821 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x12821 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":18:18)
      auto x12822 = x12819 - x12821;
      // loc("cirgen/circuit/rv32im/body.cpp":18:17)
      auto x12823 = x12822 * x75;
      // loc("./cirgen/components/bits.h":61:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12823);
        reg = x12823;
      }
      // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12824 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x12824 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":22:23)
      auto x12825 = x95 - x12824;
      // loc("cirgen/circuit/rv32im/body.cpp":22:15)
      auto x12826 = x12824 * x12825;
      // loc("cirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][92 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12826);
        reg = x12826;
      }
      // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12827 = args[2][92 * steps + ((cycle - 0) & mask)];
      assert(x12827 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/body.cpp":23:17)
      auto x12828 = x92 - x12824;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      auto x12829 = x12827 * x12828;
      // loc("cirgen/circuit/rv32im/body.cpp":23:7)
      if (x12829 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x598;
      host(ctx, "log", "  PageFault: PC = 0x%x", host_args.data(), 1, host_outs.data(), 0);
      // loc("Top/Code/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/page_fault.cpp":84:67))
      auto x12830 = args[0][5 * steps + ((cycle - 1) & mask)];
      assert(x12830 != Fp::invalid());
      if (x12830 != 0) {
        // loc("Top/Mux/4/OneHot/hot[12](Reg)"("cirgen/circuit/rv32im/page_fault.cpp":86:79))
        auto x12831 = args[2][106 * steps + ((cycle - 1) & mask)];
        assert(x12831 != Fp::invalid());
        if (x12831 != 0) {
          // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12832 = args[2][171 * steps + ((cycle - 1) & mask)];
          assert(x12832 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:23)
          auto x12833 = x95 - x12832;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":89:7)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12833);
            reg = x12833;
          }
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":91:27)
        auto x12834 = x95 - x12831;
        if (x12834 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":91:31)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":93:20)
      auto x12835 = x95 - x12830;
      if (x12835 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":93:24)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12836 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x12836 != Fp::invalid());
      if (x12836 != 0) {
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/page_fault.cpp":96:44))
        auto x12837 = args[2][164 * steps + ((cycle - 1) & mask)];
        assert(x12837 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":96:5)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12837);
          reg = x12837;
        }
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/page_fault.cpp":99:20)
      auto x12838 = x95 - x12836;
      if (x12838 != 0) {
        {
          host_args.at(0) = x598;
          host(ctx, "pageRead", "", host_args.data(), 1, host_outs.data(), 2);
          auto x12839 = host_outs.at(0);
          auto x12840 = host_outs.at(1);
          // loc("cirgen/circuit/rv32im/page_fault.cpp":102:7)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12839);
            reg = x12839;
          }
          // loc("./cirgen/components/bits.h":20:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12840);
            reg = x12840;
          }
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
      auto x12841 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x12841 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/page_fault.cpp":109:20)
      auto x12842 = x12841 - x4;
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x12843 = (x12842 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12843);
          reg = x12843;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x12844 = inv(x12842);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12844);
          reg = x12844;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12845 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x12845 != Fp::invalid());
      if (x12845 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x12842 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x12846 = x95 - x12845;
      if (x12846 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12847 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12847 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12848 = x12842 * x12847;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12849 = x12848 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x12849 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12845 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":111:5)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":112:5)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      if (x12846 != 0) {
        // loc("cirgen/circuit/rv32im/page_fault.cpp":115:5)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x59);
          reg = x59;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":116:5)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      if (x12838 != 0) {
        // loc("Top/Mux/4/Mux/12/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12850 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12850 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:38)
        auto x12851 = x95 - x12850;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:37)
        auto x12852 = x12851 * x11;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":122:22)
        auto x12853 = x12850 + x12852;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        auto x12854 = x12850 * x11;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:51)
        auto x12855 = x12851 * x3;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":123:22)
        auto x12856 = x12854 + x12855;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":130:17)
        auto x12857 = x12841 - x12853;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12858 = Fp(x12857.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12858);
            reg = x12858;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12859 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x12859 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12860 = x12857 - x12859;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12861 = x12860 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12862 = Fp(x12861.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12862);
            reg = x12862;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12863 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x12863 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12864 = x12861 - x12863;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12865 = x12864 * x89;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12865);
          reg = x12865;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x12866 = x12856 - x95;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":131:17)
        auto x12867 = x12866 - x12841;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12868 = Fp(x12867.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12868);
            reg = x12868;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12869 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x12869 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12870 = x12867 - x12869;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12871 = x12870 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x12872 = Fp(x12871.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12872);
            reg = x12872;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x12873 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x12873 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x12874 = x12871 - x12873;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x12875 = x12874 * x89;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12875);
          reg = x12875;
        }
        if (x12850 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":134:7)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2);
            reg = x2;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          auto x12876 = x12841 * x22;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
          auto x12877 = x12876 * x75;
          // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x12878 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x12878 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
          auto x12879 = x12878 * x77;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
          auto x12880 = x12877 + x12879;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
          auto x12881 = x12880 * x77;
          host_args.at(0) = x12878;
          host_args.at(1) = x12841;
          host_args.at(2) = x12881;
          host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
          {
            host_args.at(0) = x12880;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x12882 = host_outs.at(0);
            auto x12883 = host_outs.at(1);
            auto x12884 = host_outs.at(2);
            auto x12885 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][111 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12882);
              reg = x12882;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][112 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12883);
              reg = x12883;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][113 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12884);
              reg = x12884;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][114 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12885);
              reg = x12885;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12886 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x12886 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12887 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x12887 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12888 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x12888 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12889 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x12889 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12880);
            reg = x12880;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12806);
            reg = x12806;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12886);
            reg = x12886;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12887);
            reg = x12887;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12888);
            reg = x12888;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12889);
            reg = x12889;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x12890 = x12880 + x95;
          {
            host_args.at(0) = x12890;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x12891 = host_outs.at(0);
            auto x12892 = host_outs.at(1);
            auto x12893 = host_outs.at(2);
            auto x12894 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][118 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12891);
              reg = x12891;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12892);
              reg = x12892;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12893);
              reg = x12893;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12894);
              reg = x12894;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12895 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x12895 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12896 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x12896 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12897 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x12897 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12898 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x12898 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12890);
            reg = x12890;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12806);
            reg = x12806;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12895);
            reg = x12895;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12896);
            reg = x12896;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12897);
            reg = x12897;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12898);
            reg = x12898;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x12899 = x12880 + x92;
          {
            host_args.at(0) = x12899;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x12900 = host_outs.at(0);
            auto x12901 = host_outs.at(1);
            auto x12902 = host_outs.at(2);
            auto x12903 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][125 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12900);
              reg = x12900;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12901);
              reg = x12901;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12902);
              reg = x12902;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12903);
              reg = x12903;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12904 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x12904 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12905 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x12905 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12906 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x12906 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12907 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x12907 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12899);
            reg = x12899;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12806);
            reg = x12806;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12904);
            reg = x12904;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12905);
            reg = x12905;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12906);
            reg = x12906;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12907);
            reg = x12907;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
          auto x12908 = x12880 + x76;
          {
            host_args.at(0) = x12908;
            host_args.at(1) = x94;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x12909 = host_outs.at(0);
            auto x12910 = host_outs.at(1);
            auto x12911 = host_outs.at(2);
            auto x12912 = host_outs.at(3);
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][132 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12909);
              reg = x12909;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][133 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12910);
              reg = x12910;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][134 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12911);
              reg = x12911;
            }
            // loc("cirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][135 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x12912);
              reg = x12912;
            }
          }
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12913 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x12913 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12914 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x12914 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12915 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x12915 != Fp::invalid());
          // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x12916 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x12916 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12908);
            reg = x12908;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12806);
            reg = x12806;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12913);
            reg = x12913;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12914);
            reg = x12914;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12915);
            reg = x12915;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12916);
            reg = x12916;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":136:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x66);
            reg = x66;
          }
        }
        if (x12851 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          auto x12917 = x12841 - x11;
          // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
          auto x12918 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x12918 != Fp::invalid());
          // loc("cirgen/circuit/rv32im/page_fault.cpp":140:28)
          auto x12919 = x12917 + x12918;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:40)
          auto x12920 = x12919 * x70;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":141:23)
          auto x12921 = x12920 + x1;
          // loc("cirgen/circuit/rv32im/page_fault.cpp":142:7)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12921);
            reg = x12921;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":143:7)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x0);
            reg = x0;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":147:7)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/circuit/rv32im/page_fault.cpp":148:7)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
      }
      if (x12836 != 0) {
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/bytes.cpp":94:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("Top/Mux/4/Mux/12/Reg"("cirgen/circuit/rv32im/page_fault.cpp":156:40))
        auto x12922 = args[2][170 * steps + ((cycle - 1) & mask)];
        assert(x12922 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:40)
        auto x12923 = x12922 - x95;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":156:5)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12923);
          reg = x12923;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x12924 = x12841 * x22;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":54:12)
        auto x12925 = x12924 * x75;
        // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12926 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12926 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/page_fault.cpp":170:16)
        auto x12927 = x12926 * x77;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:9)
        auto x12928 = x12925 + x12927;
        // loc("cirgen/circuit/rv32im/page_fault.cpp":174:8)
        auto x12929 = x12928 * x77;
        host_args.at(0) = x12926;
        host_args.at(1) = x12841;
        host_args.at(2) = x12929;
        host(ctx, "log", "  count: %u, pageIndex: 0x%x, pageAddr: 0x%x", host_args.data(), 3, host_outs.data(), 0);
        {
          host_args.at(0) = x12928;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x12930 = host_outs.at(0);
          auto x12931 = host_outs.at(1);
          auto x12932 = host_outs.at(2);
          auto x12933 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12930);
            reg = x12930;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12931);
            reg = x12931;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12932);
            reg = x12932;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12933);
            reg = x12933;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12934 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x12934 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12935 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x12935 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12936 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x12936 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12937 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x12937 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12928);
          reg = x12928;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12806);
          reg = x12806;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12934);
          reg = x12934;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12935);
          reg = x12935;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12936);
          reg = x12936;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12937);
          reg = x12937;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x12938 = x12928 + x95;
        {
          host_args.at(0) = x12938;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x12939 = host_outs.at(0);
          auto x12940 = host_outs.at(1);
          auto x12941 = host_outs.at(2);
          auto x12942 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12939);
            reg = x12939;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12940);
            reg = x12940;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12941);
            reg = x12941;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12942);
            reg = x12942;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12943 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x12943 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12944 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x12944 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12945 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x12945 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12946 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x12946 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12938);
          reg = x12938;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12806);
          reg = x12806;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12943);
          reg = x12943;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12944);
          reg = x12944;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12945);
          reg = x12945;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12946);
          reg = x12946;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x12947 = x12928 + x92;
        {
          host_args.at(0) = x12947;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x12948 = host_outs.at(0);
          auto x12949 = host_outs.at(1);
          auto x12950 = host_outs.at(2);
          auto x12951 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12948);
            reg = x12948;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12949);
            reg = x12949;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12950);
            reg = x12950;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12951);
            reg = x12951;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12952 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x12952 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12953 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x12953 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12954 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x12954 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12955 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x12955 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12947);
          reg = x12947;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12806);
          reg = x12806;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12952);
          reg = x12952;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12953);
          reg = x12953;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12954);
          reg = x12954;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12955);
          reg = x12955;
        }
        // loc("cirgen/circuit/rv32im/page_fault.cpp":176:32)
        auto x12956 = x12928 + x76;
        {
          host_args.at(0) = x12956;
          host_args.at(1) = x94;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x12957 = host_outs.at(0);
          auto x12958 = host_outs.at(1);
          auto x12959 = host_outs.at(2);
          auto x12960 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12957);
            reg = x12957;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12958);
            reg = x12958;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12959);
            reg = x12959;
          }
          // loc("cirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12960);
            reg = x12960;
          }
        }
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12961 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x12961 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12962 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x12962 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12963 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x12963 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12964 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x12964 != Fp::invalid());
        // loc("cirgen/components/ram.cpp":130:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12956);
          reg = x12956;
        }
        // loc("cirgen/components/ram.cpp":131:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12806);
          reg = x12806;
        }
        // loc("cirgen/components/ram.cpp":132:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12961);
          reg = x12961;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12962);
          reg = x12962;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12963);
          reg = x12963;
        }
        // loc("cirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12964);
          reg = x12964;
        }
      }
      // loc("Top/Mux/4/Mux/12/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12965 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x12965 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x12966 = (x12965 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12966);
          reg = x12966;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x12967 = inv(x12965);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12967);
          reg = x12967;
        }
      }
      // loc("Top/Mux/4/Mux/12/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12968 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x12968 != Fp::invalid());
      if (x12968 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x12965 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x12969 = x95 - x12968;
      if (x12969 != 0) {
        // loc("Top/Mux/4/Mux/12/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x12970 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12970 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12971 = x12965 * x12970;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x12972 = x12971 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x12972 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12836 != 0) {
        if (x12968 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":163:31)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x80);
            reg = x80;
          }
        }
        if (x12969 != 0) {
          // loc("cirgen/circuit/rv32im/page_fault.cpp":164:35)
          {
            auto& reg = args[2][93 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x66);
            reg = x66;
          }
        }
      }
    }
    // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/components/mux.h":39:25))
    auto x12973 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x12973 != Fp::invalid());
    if (x12973 != 0) {
      // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12974 = args[0][0 * steps + ((cycle - 0) & mask)];
      assert(x12974 != Fp::invalid());
      // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/ecall.cpp":153:70))
      auto x12975 = args[2][102 * steps + ((cycle - 1) & mask)];
      assert(x12975 != Fp::invalid());
      if (x12975 != 0) {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12976 = args[2][125 * steps + ((cycle - 1) & mask)];
        assert(x12976 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12977 = args[2][126 * steps + ((cycle - 1) & mask)];
        assert(x12977 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12978 = args[2][127 * steps + ((cycle - 1) & mask)];
        assert(x12978 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12979 = args[2][128 * steps + ((cycle - 1) & mask)];
        assert(x12979 != Fp::invalid());
        // loc("./cirgen/components/u32.h":25:12)
        auto x12980 = x12977 * x90;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12981 = x12976 + x12980;
        // loc("./cirgen/components/u32.h":26:12)
        auto x12982 = x12978 * x79;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12983 = x12981 + x12982;
        // loc("./cirgen/components/u32.h":27:12)
        auto x12984 = x12979 * x78;
        // loc("./cirgen/components/u32.h":24:12)
        auto x12985 = x12983 + x12984;
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12986 = x12985 * x75;
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x12987 = args[2][79 * steps + ((cycle - 1) & mask)];
        assert(x12987 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12988 = x12987 + x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12989 = x12986 + x12988;
        // loc("cirgen/circuit/rv32im/ecall.cpp":163:98)
        auto x12990 = x12989 - x77;
        // loc("cirgen/circuit/rv32im/ecall.cpp":161:5)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12990);
          reg = x12990;
        }
        // loc("Top/Mux/4/Mux/8/Mux/2/Reg"("cirgen/circuit/rv32im/ecall.cpp":164:63))
        auto x12991 = args[2][180 * steps + ((cycle - 1) & mask)];
        assert(x12991 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":164:5)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12991);
          reg = x12991;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":167:22)
      auto x12992 = x95 - x12975;
      if (x12992 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/ecall.cpp":168:56))
        auto x12993 = args[2][161 * steps + ((cycle - 1) & mask)];
        assert(x12993 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":168:56)
        auto x12994 = x12993 - x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":168:5)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12994);
          reg = x12994;
        }
        // loc("Top/Mux/4/Mux/13/Reg"("cirgen/circuit/rv32im/ecall.cpp":169:46))
        auto x12995 = args[2][162 * steps + ((cycle - 1) & mask)];
        assert(x12995 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":169:46)
        auto x12996 = x12995 + x77;
        // loc("cirgen/circuit/rv32im/ecall.cpp":169:5)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12996);
          reg = x12996;
        }
      }
      // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x12997 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x12997 != Fp::invalid());
      {
        // loc("cirgen/components/iszero.cpp":11:24)
        auto x12998 = (x12997 == 0) ? Fp(1) : Fp(0);
        // loc("./cirgen/components/bits.h":20:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12998);
          reg = x12998;
        }
        // loc("cirgen/components/iszero.cpp":12:21)
        auto x12999 = inv(x12997);
        // loc("cirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x12999);
          reg = x12999;
        }
      }
      // loc("Top/Mux/4/Mux/13/IsZero/Bit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13000 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x13000 != Fp::invalid());
      if (x13000 != 0) {
        // loc("cirgen/components/iszero.cpp":16:23)
        if (x12997 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:16");
      }
      // loc("cirgen/components/iszero.cpp":18:19)
      auto x13001 = x95 - x13000;
      if (x13001 != 0) {
        // loc("Top/Mux/4/Mux/13/IsZero/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13002 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x13002 != Fp::invalid());
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13003 = x12997 * x13002;
        // loc("cirgen/components/iszero.cpp":18:26)
        auto x13004 = x13003 - x95;
        // loc("cirgen/components/iszero.cpp":18:26)
        if (x13004 != 0) throw std::runtime_error("eqz failed at: cirgen/components/iszero.cpp:18");
      }
      if (x12975 != 0) {
        // loc("Top/Mux/4/Mux/8/Mux/2/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13005 = args[2][79 * steps + ((cycle - 1) & mask)];
        assert(x13005 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":177:80)
        auto x13006 = x13005 + x95;
        // loc("cirgen/circuit/rv32im/ecall.cpp":177:80)
        auto x13007 = x13006 * x13001;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13008 = (x13007 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13008);
            reg = x13008;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13009 = x13007 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13010 = (x13009 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13010);
            reg = x13010;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13011 = x13007 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13012 = (x13011 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13012);
            reg = x13012;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13013 = x13007 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13014 = (x13013 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13014);
            reg = x13014;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13015 = x13007 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13016 = (x13015 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13016);
            reg = x13016;
          }
        }
        // loc("Top/Mux/4/Mux/13/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13017 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x13017 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13018 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13018 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13019 = x13018 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13020 = x13017 + x13019;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13021 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13021 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13022 = x13021 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13023 = x13020 + x13022;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13024 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x13024 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13025 = x13024 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13026 = x13023 + x13025;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13027 = x13026 - x13007;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13027 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13028 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13028 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":180:10)
        auto x13029 = x13028 * x77;
        host_args.at(0) = x13029;
        host_args.at(1) = x12997;
        host_args.at(2) = x13026;
        host(ctx, "log", "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", host_args.data(), 3, host_outs.data(), 0);
      }
      if (x12992 != 0) {
        // loc("cirgen/circuit/rv32im/ecall.cpp":185:43)
        auto x13030 = x13001 * x77;
        {
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13031 = (x13030 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13031);
            reg = x13031;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13032 = x13030 - x95;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13033 = (x13032 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13033);
            reg = x13033;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13034 = x13030 - x92;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13035 = (x13034 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13035);
            reg = x13035;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13036 = x13030 - x76;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13037 = (x13036 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13037);
            reg = x13037;
          }
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13038 = x13030 - x77;
          // loc("./cirgen/components/onehot.h":37:26)
          auto x13039 = (x13038 == 0) ? Fp(1) : Fp(0);
          // loc("./cirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13039);
            reg = x13039;
          }
        }
        // loc("Top/Mux/4/Mux/13/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13040 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x13040 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13041 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x13041 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13042 = x13041 * x92;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13043 = x13040 + x13042;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13044 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x13044 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13045 = x13044 * x76;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13046 = x13043 + x13045;
        // loc("Top/Mux/4/Mux/13/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13047 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x13047 != Fp::invalid());
        // loc("./cirgen/components/onehot.h":46:19)
        auto x13048 = x13047 * x77;
        // loc("./cirgen/components/onehot.h":46:13)
        auto x13049 = x13046 + x13048;
        // loc("./cirgen/components/onehot.h":40:8)
        auto x13050 = x13049 - x13030;
        // loc("./cirgen/components/onehot.h":40:8)
        if (x13050 != 0) throw std::runtime_error("eqz failed at: ./cirgen/components/onehot.h:40");
      }
      // loc("Top/Mux/4/Mux/13/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/ecall.cpp":187:24))
      auto x13051 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x13051 != Fp::invalid());
      if (x13051 != 0) {
        {
          host(ctx, "syscallFini", "", host_args.data(), 0, host_outs.data(), 8);
          auto x13052 = host_outs.at(0);
          auto x13053 = host_outs.at(1);
          auto x13054 = host_outs.at(2);
          auto x13055 = host_outs.at(3);
          auto x13056 = host_outs.at(4);
          auto x13057 = host_outs.at(5);
          auto x13058 = host_outs.at(6);
          auto x13059 = host_outs.at(7);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13052);
            reg = x13052;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13053);
            reg = x13053;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13054);
            reg = x13054;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13055);
            reg = x13055;
          }
          {
            host_args.at(0) = x27;
            host_args.at(1) = x13052;
            host_args.at(2) = x13053;
            host_args.at(3) = x13054;
            host_args.at(4) = x13055;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13060 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x13060 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13061 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x13061 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13062 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x13062 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13063 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x13063 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x27);
            reg = x27;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12974);
            reg = x12974;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13060);
            reg = x13060;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13061);
            reg = x13061;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13062);
            reg = x13062;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13063);
            reg = x13063;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13056);
            reg = x13056;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13057);
            reg = x13057;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13058);
            reg = x13058;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13059);
            reg = x13059;
          }
          {
            host_args.at(0) = x26;
            host_args.at(1) = x13056;
            host_args.at(2) = x13057;
            host_args.at(3) = x13058;
            host_args.at(4) = x13059;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13064 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13064 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13065 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13065 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13066 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13066 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13067 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13067 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x26);
            reg = x26;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12974);
            reg = x12974;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13064);
            reg = x13064;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13065);
            reg = x13065;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13066);
            reg = x13066;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13067);
            reg = x13067;
          }
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13068 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13068 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":196:8)
        auto x13069 = x13068 - x12974;
        // loc("cirgen/circuit/rv32im/ecall.cpp":196:8)
        if (x13069 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:196");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13070 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13070 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":197:8)
        auto x13071 = x13070 - x12974;
        // loc("cirgen/circuit/rv32im/ecall.cpp":197:8)
        if (x13071 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:197");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13072 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13072 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":199:8)
        auto x13073 = x13072 - x27;
        // loc("cirgen/circuit/rv32im/ecall.cpp":199:8)
        if (x13073 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:199");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13074 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13074 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":200:8)
        auto x13075 = x13074 - x26;
        // loc("cirgen/circuit/rv32im/ecall.cpp":200:8)
        if (x13075 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:200");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13076 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13076 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13077 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13077 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13078 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13078 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13079 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13079 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13080 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13080 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13081 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13081 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13082 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13082 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13083 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13083 != Fp::invalid());
        host_args.at(0) = x13076;
        host_args.at(1) = x13077;
        host_args.at(2) = x13078;
        host_args.at(3) = x13079;
        host_args.at(4) = x13080;
        host_args.at(5) = x13081;
        host_args.at(6) = x13082;
        host_args.at(7) = x13083;
        host(ctx, "log", "  COPYIN FINI: a0=%w a1=%w", host_args.data(), 8, host_outs.data(), 0);
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/circuit/rv32im/ecall.cpp":207:19)
        auto x13084 = x598 + x77;
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13085 = x13084 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13086 = Fp(x13085.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13086);
            reg = x13086;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13087 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13087 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13088 = x13085 - x13087;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13089 = x13088 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13090 = Fp(x13089.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13090);
            reg = x13090;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13091 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13091 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13092 = x13089 - x13091;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13093 = x13092 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13094 = Fp(x13093.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13094);
            reg = x13094;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13095 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13095 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13096 = x13093 - x13095;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13097 = x13096 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13098 = Fp(x13097.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13098);
            reg = x13098;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13099 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13099 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13100 = x13097 - x13099;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13101 = x13100 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13101);
          reg = x13101;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13102 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13102 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13103 = x95 - x13102;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13104 = x13102 * x13103;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13104);
          reg = x13104;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13105 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13105 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13106 = x92 - x13102;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13107 = x13105 * x13106;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13107 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":208:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x80);
          reg = x80;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":210:28)
      auto x13108 = x95 - x13051;
      if (x13108 != 0) {
        // loc("cirgen/circuit/rv32im/body.cpp":14:23)
        auto x13109 = x598 + x77;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13110 = Fp(x13109.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13110);
            reg = x13110;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13111 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13111 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13112 = x13109 - x13111;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13113 = x13112 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13114 = Fp(x13113.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13114);
            reg = x13114;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13115 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13115 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13116 = x13113 - x13115;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13117 = x13116 * x89;
        {
          // loc("cirgen/components/bytes.cpp":89:21)
          auto x13118 = Fp(x13117.asUInt32() & x91.asUInt32());
          // loc("cirgen/components/bytes.cpp":89:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13118);
            reg = x13118;
          }
        }
        // loc("Top/Mux/4/BytesBody/PlonkBody/BytesPlonkElement/Reg"("cirgen/components/bytes.cpp":90:16))
        auto x13119 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13119 != Fp::invalid());
        // loc("cirgen/components/bytes.cpp":90:11)
        auto x13120 = x13117 - x13119;
        // loc("cirgen/components/bytes.cpp":90:10)
        auto x13121 = x13120 * x89;
        {
          // loc("cirgen/circuit/rv32im/body.cpp":17:26)
          auto x13122 = Fp(x13121.asUInt32() & x76.asUInt32());
          // loc("./cirgen/components/bits.h":61:23)
          {
            auto& reg = args[2][72 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13122);
            reg = x13122;
          }
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13123 = args[2][72 * steps + ((cycle - 0) & mask)];
        assert(x13123 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":18:18)
        auto x13124 = x13121 - x13123;
        // loc("cirgen/circuit/rv32im/body.cpp":18:17)
        auto x13125 = x13124 * x75;
        // loc("./cirgen/components/bits.h":61:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13125);
          reg = x13125;
        }
        // loc("Top/Mux/4/PCReg/Twit/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13126 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x13126 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":22:23)
        auto x13127 = x95 - x13126;
        // loc("cirgen/circuit/rv32im/body.cpp":22:15)
        auto x13128 = x13126 * x13127;
        // loc("cirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][92 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13128);
          reg = x13128;
        }
        // loc("Top/Mux/4/PCReg/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13129 = args[2][92 * steps + ((cycle - 0) & mask)];
        assert(x13129 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/body.cpp":23:17)
        auto x13130 = x92 - x13126;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        auto x13131 = x13129 * x13130;
        // loc("cirgen/circuit/rv32im/body.cpp":23:7)
        if (x13131 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/body.cpp:23");
        // loc("cirgen/circuit/rv32im/ecall.cpp":212:5)
        {
          auto& reg = args[2][93 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      // loc("Top/Mux/4/Mux/13/OneHot/hot[1](Reg)"("cirgen/circuit/rv32im/ecall.cpp":222:35))
      auto x13132 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x13132 != Fp::invalid());
      // loc("Top/Mux/4/Mux/13/OneHot/hot[2](Reg)"("cirgen/circuit/rv32im/ecall.cpp":222:35))
      auto x13133 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x13133 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":222:22)
      auto x13134 = x13132 + x13133;
      // loc("Top/Mux/4/Mux/13/OneHot/hot[3](Reg)"("cirgen/circuit/rv32im/ecall.cpp":222:35))
      auto x13135 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x13135 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/ecall.cpp":222:22)
      auto x13136 = x13134 + x13135;
      // loc("Top/Mux/4/Mux/13/OneHot/hot[4](Reg)"("cirgen/circuit/rv32im/ecall.cpp":220:35))
      auto x13137 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x13137 != Fp::invalid());
      if (x13137 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13138 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13138 != Fp::invalid());
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13139 = host_outs.at(0);
          auto x13140 = host_outs.at(1);
          auto x13141 = host_outs.at(2);
          auto x13142 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13139);
            reg = x13139;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13140);
            reg = x13140;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13141);
            reg = x13141;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13142);
            reg = x13142;
          }
          {
            host_args.at(0) = x13138;
            host_args.at(1) = x13139;
            host_args.at(2) = x13140;
            host_args.at(3) = x13141;
            host_args.at(4) = x13142;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13143 = args[2][111 * steps + ((cycle - 0) & mask)];
          assert(x13143 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13144 = args[2][112 * steps + ((cycle - 0) & mask)];
          assert(x13144 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13145 = args[2][113 * steps + ((cycle - 0) & mask)];
          assert(x13145 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13146 = args[2][114 * steps + ((cycle - 0) & mask)];
          assert(x13146 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13138);
            reg = x13138;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12974);
            reg = x12974;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13143);
            reg = x13143;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13144);
            reg = x13144;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13145);
            reg = x13145;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13146);
            reg = x13146;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13147 = x13138 * x77;
          host_args.at(0) = x13147;
          host_args.at(1) = x13143;
          host_args.at(2) = x13144;
          host_args.at(3) = x13145;
          host_args.at(4) = x13146;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13148 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13148 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13149 = x13148 - x12974;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13149 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13150 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13150 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13151 = x13150 - x13138;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13151 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x13136 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][108 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][109 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][110 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][111 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][112 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][113 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13152 = x13135 + x13137;
      if (x13152 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13153 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13153 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:23)
        auto x13154 = x13153 + x95;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13155 = host_outs.at(0);
          auto x13156 = host_outs.at(1);
          auto x13157 = host_outs.at(2);
          auto x13158 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13155);
            reg = x13155;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13156);
            reg = x13156;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13157);
            reg = x13157;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13158);
            reg = x13158;
          }
          {
            host_args.at(0) = x13154;
            host_args.at(1) = x13155;
            host_args.at(2) = x13156;
            host_args.at(3) = x13157;
            host_args.at(4) = x13158;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13159 = args[2][118 * steps + ((cycle - 0) & mask)];
          assert(x13159 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13160 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13160 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13161 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13161 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13162 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13162 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13154);
            reg = x13154;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12974);
            reg = x12974;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13159);
            reg = x13159;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13160);
            reg = x13160;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13161);
            reg = x13161;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13162);
            reg = x13162;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13163 = x13154 * x77;
          host_args.at(0) = x13163;
          host_args.at(1) = x13159;
          host_args.at(2) = x13160;
          host_args.at(3) = x13161;
          host_args.at(4) = x13162;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13164 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13164 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13165 = x13164 - x12974;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13165 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13166 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13166 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13167 = x13166 - x13154;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13167 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x13134 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13168 = x13133 + x13135;
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13169 = x13168 + x13137;
      if (x13169 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13170 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13170 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:23)
        auto x13171 = x13170 + x92;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13172 = host_outs.at(0);
          auto x13173 = host_outs.at(1);
          auto x13174 = host_outs.at(2);
          auto x13175 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13172);
            reg = x13172;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13173);
            reg = x13173;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13174);
            reg = x13174;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13175);
            reg = x13175;
          }
          {
            host_args.at(0) = x13171;
            host_args.at(1) = x13172;
            host_args.at(2) = x13173;
            host_args.at(3) = x13174;
            host_args.at(4) = x13175;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13176 = args[2][125 * steps + ((cycle - 0) & mask)];
          assert(x13176 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13177 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13177 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13178 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13178 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13179 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13179 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13171);
            reg = x13171;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12974);
            reg = x12974;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13176);
            reg = x13176;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13177);
            reg = x13177;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13178);
            reg = x13178;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13179);
            reg = x13179;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13180 = x13171 * x77;
          host_args.at(0) = x13180;
          host_args.at(1) = x13176;
          host_args.at(2) = x13177;
          host_args.at(3) = x13178;
          host_args.at(4) = x13179;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13181 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13181 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13182 = x13181 - x12974;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13182 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13183 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13183 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13184 = x13183 - x13171;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13184 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x13132 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
      // loc("cirgen/circuit/rv32im/ecall.cpp":220:22)
      auto x13185 = x13136 + x13137;
      if (x13185 != 0) {
        // loc("Top/Mux/4/Mux/13/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
        auto x13186 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x13186 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":227:23)
        auto x13187 = x13186 + x76;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13188 = host_outs.at(0);
          auto x13189 = host_outs.at(1);
          auto x13190 = host_outs.at(2);
          auto x13191 = host_outs.at(3);
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13188);
            reg = x13188;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13189);
            reg = x13189;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13190);
            reg = x13190;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13191);
            reg = x13191;
          }
          {
            host_args.at(0) = x13187;
            host_args.at(1) = x13188;
            host_args.at(2) = x13189;
            host_args.at(3) = x13190;
            host_args.at(4) = x13191;
            host_args.at(5) = x92;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13192 = args[2][132 * steps + ((cycle - 0) & mask)];
          assert(x13192 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13193 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13193 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13194 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13194 != Fp::invalid());
          // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
          auto x13195 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13195 != Fp::invalid());
          // loc("cirgen/components/ram.cpp":130:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13187);
            reg = x13187;
          }
          // loc("cirgen/components/ram.cpp":131:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12974);
            reg = x12974;
          }
          // loc("cirgen/components/ram.cpp":132:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x92);
            reg = x92;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13192);
            reg = x13192;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13193);
            reg = x13193;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13194);
            reg = x13194;
          }
          // loc("cirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13195);
            reg = x13195;
          }
          // loc("cirgen/circuit/rv32im/ecall.cpp":231:41)
          auto x13196 = x13187 * x77;
          host_args.at(0) = x13196;
          host_args.at(1) = x13192;
          host_args.at(2) = x13193;
          host_args.at(3) = x13194;
          host_args.at(4) = x13195;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":141:10))
        auto x13197 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13197 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        auto x13198 = x13197 - x12974;
        // loc("cirgen/circuit/rv32im/ecall.cpp":234:10)
        if (x13198 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:234");
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("cirgen/components/ram.cpp":137:10))
        auto x13199 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13199 != Fp::invalid());
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        auto x13200 = x13199 - x13187;
        // loc("cirgen/circuit/rv32im/ecall.cpp":235:10)
        if (x13200 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/ecall.cpp:235");
      }
      if (x94 != 0) {
        // loc("cirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("cirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./cirgen/components/mux.h":39:25))
  auto x13201 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x13201 != Fp::invalid());
  if (x13201 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x13202 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13202 != Fp::invalid());
    host_args.at(0) = x13202;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
    // loc("Top/Mux/4/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13203 = args[2][95 * steps + ((cycle - 1) & mask)];
    assert(x13203 != Fp::invalid());
    // loc("Top/Mux/4/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13204 = args[2][96 * steps + ((cycle - 1) & mask)];
    assert(x13204 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13205 = x13204 * x92;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13206 = x13203 + x13205;
    // loc("Top/Mux/4/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13207 = args[2][97 * steps + ((cycle - 1) & mask)];
    assert(x13207 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13208 = x13207 * x76;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13209 = x13206 + x13208;
    // loc("Top/Mux/4/OneHot/hot[4](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13210 = args[2][98 * steps + ((cycle - 1) & mask)];
    assert(x13210 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13211 = x13210 * x77;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13212 = x13209 + x13211;
    // loc("Top/Mux/4/OneHot/hot[5](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13213 = args[2][99 * steps + ((cycle - 1) & mask)];
    assert(x13213 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13214 = x13213 * x73;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13215 = x13212 + x13214;
    // loc("Top/Mux/4/OneHot/hot[6](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13216 = args[2][100 * steps + ((cycle - 1) & mask)];
    assert(x13216 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13217 = x13216 * x72;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13218 = x13215 + x13217;
    // loc("Top/Mux/4/OneHot/hot[7](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13219 = args[2][101 * steps + ((cycle - 1) & mask)];
    assert(x13219 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13220 = x13219 * x71;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13221 = x13218 + x13220;
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13222 = args[2][102 * steps + ((cycle - 1) & mask)];
    assert(x13222 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13223 = x13222 * x70;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13224 = x13221 + x13223;
    // loc("Top/Mux/4/OneHot/hot[9](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13225 = args[2][103 * steps + ((cycle - 1) & mask)];
    assert(x13225 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13226 = x13225 * x69;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13227 = x13224 + x13226;
    // loc("Top/Mux/4/OneHot/hot[10](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13228 = args[2][104 * steps + ((cycle - 1) & mask)];
    assert(x13228 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13229 = x13228 * x68;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13230 = x13227 + x13229;
    // loc("Top/Mux/4/OneHot/hot[11](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13231 = args[2][105 * steps + ((cycle - 1) & mask)];
    assert(x13231 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13232 = x13231 * x67;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13233 = x13230 + x13232;
    // loc("Top/Mux/4/OneHot/hot[12](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13234 = args[2][106 * steps + ((cycle - 1) & mask)];
    assert(x13234 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13235 = x13234 * x66;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13236 = x13233 + x13235;
    // loc("Top/Mux/4/OneHot/hot[13](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13237 = args[2][107 * steps + ((cycle - 1) & mask)];
    assert(x13237 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13238 = x13237 * x65;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13239 = x13236 + x13238;
    // loc("cirgen/circuit/rv32im/top.cpp":48:38)
    auto x13240 = x13239 - x70;
    // loc("cirgen/circuit/rv32im/top.cpp":48:38)
    if (x13240 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:48");
    // loc("Top/Mux/4/Mux/8/OneHot/hot[1](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13241 = args[2][177 * steps + ((cycle - 1) & mask)];
    assert(x13241 != Fp::invalid());
    // loc("Top/Mux/4/Mux/8/OneHot/hot[2](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13242 = args[2][178 * steps + ((cycle - 1) & mask)];
    assert(x13242 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13243 = x13242 * x92;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13244 = x13241 + x13243;
    // loc("Top/Mux/4/Mux/8/OneHot/hot[3](Reg)"("./cirgen/compiler/edsl/edsl.h":116:61))
    auto x13245 = args[2][179 * steps + ((cycle - 1) & mask)];
    assert(x13245 != Fp::invalid());
    // loc("./cirgen/components/onehot.h":46:19)
    auto x13246 = x13245 * x76;
    // loc("./cirgen/components/onehot.h":46:13)
    auto x13247 = x13244 + x13246;
    // loc("cirgen/circuit/rv32im/top.cpp":50:39)
    if (x13247 != 0) throw std::runtime_error("eqz failed at: cirgen/circuit/rv32im/top.cpp:50");
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./cirgen/components/mux.h":39:25))
  auto x13248 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x13248 != Fp::invalid());
  if (x13248 != 0) {
    // loc("Top/Code/Reg"("./cirgen/compiler/edsl/component.h":151:27))
    auto x13249 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x13249 != Fp::invalid());
    host_args.at(0) = x13249;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":71:27))
  auto x13250 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x13250 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13251 = x13250 + x96;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13252 = x13251 + x421;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13253 = x13252 + x474;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13254 = x13253 + x584;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13255 = x13254 + x13201;
  // loc("cirgen/circuit/rv32im/top.cpp":71:16)
  auto x13256 = x13255 + x13248;
  if (x584 != 0) {
    // loc("Top/Mux/4/OneHot/hot[8](Reg)"("cirgen/circuit/rv32im/top.cpp":79:19))
    auto x13257 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13257 != Fp::invalid());
    if (x13257 != 0) {
      // loc("Top/Mux/4/Mux/8/OneHot/hot[0](Reg)"("cirgen/circuit/rv32im/top.cpp":82:20))
      auto x13258 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13258 != Fp::invalid());
      // loc("cirgen/circuit/rv32im/top.cpp":83:7)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13258);
        reg = x13258;
      }
    }
    // loc("cirgen/circuit/rv32im/top.cpp":85:19)
    auto x13259 = x95 - x13257;
    if (x13259 != 0) {
      // loc("cirgen/circuit/rv32im/top.cpp":85:23)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  // loc("cirgen/circuit/rv32im/top.cpp":87:23)
  auto x13260 = x13256 - x584;
  if (x13260 != 0) {
    // loc("cirgen/circuit/rv32im/top.cpp":87:27)
    {
      auto& reg = args[2][9 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x94);
      reg = x94;
    }
  }
  // loc("Top/Reg"("./cirgen/compiler/edsl/edsl.h":116:61))
  auto x13261 = args[2][9 * steps + ((cycle - 0) & mask)];
  assert(x13261 != Fp::invalid());
  // loc("cirgen/circuit/rv32im/top.cpp":88:10)
  auto x13262 = x95 - x13261;
  if (x421 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/ram.cpp":43:3)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/ram.cpp":44:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/ram.cpp":45:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("cirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  if (x474 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][89 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][90 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
      // loc("./cirgen/components/bits.h":30:46)
      {
        auto& reg = args[2][91 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  if (x584 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13263 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13263 != Fp::invalid());
    if (x13263 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13264 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13264 != Fp::invalid());
    if (x13264 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13265 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13265 != Fp::invalid());
    if (x13265 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13266 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13266 != Fp::invalid());
    if (x13266 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13267 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13267 != Fp::invalid());
    if (x13267 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13268 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13268 != Fp::invalid());
    if (x13268 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13269 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x13269 != Fp::invalid());
    if (x13269 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13270 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x13270 != Fp::invalid());
    if (x13270 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13271 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13271 != Fp::invalid());
    if (x13271 != 0) {
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13272 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13272 != Fp::invalid());
      if (x13272 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13273 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13273 != Fp::invalid());
      if (x13273 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13274 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13274 != Fp::invalid());
      if (x13274 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("cirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
      // loc("cirgen/compiler/edsl/component.cpp":39:15)
      auto x13275 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13275 != Fp::invalid());
      if (x13275 != 0) {
        {
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bytes.h":37:30)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][89 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][90 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
          // loc("./cirgen/components/bits.h":30:46)
          {
            auto& reg = args[2][91 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x94);
            reg = x94;
          }
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13276 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13276 != Fp::invalid());
    if (x13276 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13277 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13277 != Fp::invalid());
    if (x13277 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13278 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13278 != Fp::invalid());
    if (x13278 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13279 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13279 != Fp::invalid());
    if (x13279 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13280 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13280 != Fp::invalid());
    if (x13280 != 0) {
      {
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][37 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][38 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][39 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][40 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bytes.h":37:30)
        {
          auto& reg = args[2][41 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][89 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][90 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
        // loc("./cirgen/components/bits.h":30:46)
        {
          auto& reg = args[2][91 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x94);
          reg = x94;
        }
      }
    }
  }
  if (x13201 != 0) {
    {
      // loc("./cirgen/components/bytes.h":37:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x94);
        reg = x94;
      }
    }
  }
  if (x421 != 0) {
    {
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13281 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13281 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13282 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x13282 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13283 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x13283 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13284 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x13284 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13285 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x13285 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13286 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x13286 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13287 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13287 != Fp::invalid());
      host_args.at(0) = x13281;
      host_args.at(1) = x13282;
      host_args.at(2) = x13283;
      host_args.at(3) = x13284;
      host_args.at(4) = x13285;
      host_args.at(5) = x13286;
      host_args.at(6) = x13287;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13288 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13288 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13289 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13289 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13290 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13290 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13291 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13291 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13292 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13292 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13293 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13293 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13294 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13294 != Fp::invalid());
      host_args.at(0) = x13288;
      host_args.at(1) = x13289;
      host_args.at(2) = x13290;
      host_args.at(3) = x13291;
      host_args.at(4) = x13292;
      host_args.at(5) = x13293;
      host_args.at(6) = x13294;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13295 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13295 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13296 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13296 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13297 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13297 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13298 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13298 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13299 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13299 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13300 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13300 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13301 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13301 != Fp::invalid());
      host_args.at(0) = x13295;
      host_args.at(1) = x13296;
      host_args.at(2) = x13297;
      host_args.at(3) = x13298;
      host_args.at(4) = x13299;
      host_args.at(5) = x13300;
      host_args.at(6) = x13301;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13302 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x13302 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13303 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x13303 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13304 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x13304 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13305 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x13305 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13306 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x13306 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13307 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x13307 != Fp::invalid());
      // loc("Top/Mux/2/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13308 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x13308 != Fp::invalid());
      host_args.at(0) = x13302;
      host_args.at(1) = x13303;
      host_args.at(2) = x13304;
      host_args.at(3) = x13305;
      host_args.at(4) = x13306;
      host_args.at(5) = x13307;
      host_args.at(6) = x13308;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x474 != 0) {
    {
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13309 = args[2][108 * steps + ((cycle - 0) & mask)];
      assert(x13309 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13310 = args[2][109 * steps + ((cycle - 0) & mask)];
      assert(x13310 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13311 = args[2][110 * steps + ((cycle - 0) & mask)];
      assert(x13311 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13312 = args[2][111 * steps + ((cycle - 0) & mask)];
      assert(x13312 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13313 = args[2][112 * steps + ((cycle - 0) & mask)];
      assert(x13313 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13314 = args[2][113 * steps + ((cycle - 0) & mask)];
      assert(x13314 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13315 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x13315 != Fp::invalid());
      host_args.at(0) = x13309;
      host_args.at(1) = x13310;
      host_args.at(2) = x13311;
      host_args.at(3) = x13312;
      host_args.at(4) = x13313;
      host_args.at(5) = x13314;
      host_args.at(6) = x13315;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13316 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x13316 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13317 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x13317 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13318 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x13318 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13319 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x13319 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13320 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13320 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13321 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13321 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13322 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x13322 != Fp::invalid());
      host_args.at(0) = x13316;
      host_args.at(1) = x13317;
      host_args.at(2) = x13318;
      host_args.at(3) = x13319;
      host_args.at(4) = x13320;
      host_args.at(5) = x13321;
      host_args.at(6) = x13322;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13323 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13323 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13324 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13324 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13325 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x13325 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13326 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x13326 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13327 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x13327 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13328 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x13328 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13329 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x13329 != Fp::invalid());
      host_args.at(0) = x13323;
      host_args.at(1) = x13324;
      host_args.at(2) = x13325;
      host_args.at(3) = x13326;
      host_args.at(4) = x13327;
      host_args.at(5) = x13328;
      host_args.at(6) = x13329;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13330 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x13330 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13331 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x13331 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13332 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x13332 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13333 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x13333 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13334 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x13334 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13335 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x13335 != Fp::invalid());
      // loc("Top/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
      auto x13336 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x13336 != Fp::invalid());
      host_args.at(0) = x13330;
      host_args.at(1) = x13331;
      host_args.at(2) = x13332;
      host_args.at(3) = x13333;
      host_args.at(4) = x13334;
      host_args.at(5) = x13335;
      host_args.at(6) = x13336;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x584 != 0) {
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13337 = args[2][94 * steps + ((cycle - 0) & mask)];
    assert(x13337 != Fp::invalid());
    if (x13337 != 0) {
      {
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13338 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13338 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13339 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13339 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13340 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13340 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13341 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13341 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13342 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13342 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13343 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13343 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13344 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13344 != Fp::invalid());
        host_args.at(0) = x13338;
        host_args.at(1) = x13339;
        host_args.at(2) = x13340;
        host_args.at(3) = x13341;
        host_args.at(4) = x13342;
        host_args.at(5) = x13343;
        host_args.at(6) = x13344;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13345 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13345 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13346 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13346 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13347 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13347 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13348 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13348 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13349 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13349 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13350 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13350 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13351 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13351 != Fp::invalid());
        host_args.at(0) = x13345;
        host_args.at(1) = x13346;
        host_args.at(2) = x13347;
        host_args.at(3) = x13348;
        host_args.at(4) = x13349;
        host_args.at(5) = x13350;
        host_args.at(6) = x13351;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13352 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13352 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13353 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13353 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13354 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13354 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13355 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13355 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13356 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13356 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13357 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13357 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13358 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13358 != Fp::invalid());
        host_args.at(0) = x13352;
        host_args.at(1) = x13353;
        host_args.at(2) = x13354;
        host_args.at(3) = x13355;
        host_args.at(4) = x13356;
        host_args.at(5) = x13357;
        host_args.at(6) = x13358;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13359 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13359 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13360 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13360 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13361 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13361 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13362 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13362 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13363 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13363 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13364 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13364 != Fp::invalid());
        // loc("Top/Mux/4/Mux/0/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13365 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13365 != Fp::invalid());
        host_args.at(0) = x13359;
        host_args.at(1) = x13360;
        host_args.at(2) = x13361;
        host_args.at(3) = x13362;
        host_args.at(4) = x13363;
        host_args.at(5) = x13364;
        host_args.at(6) = x13365;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13366 = args[2][95 * steps + ((cycle - 0) & mask)];
    assert(x13366 != Fp::invalid());
    if (x13366 != 0) {
      {
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13367 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13367 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13368 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13368 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13369 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13369 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13370 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13370 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13371 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13371 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13372 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13372 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13373 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13373 != Fp::invalid());
        host_args.at(0) = x13367;
        host_args.at(1) = x13368;
        host_args.at(2) = x13369;
        host_args.at(3) = x13370;
        host_args.at(4) = x13371;
        host_args.at(5) = x13372;
        host_args.at(6) = x13373;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13374 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13374 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13375 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13375 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13376 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13376 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13377 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13377 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13378 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13378 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13379 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13379 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13380 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13380 != Fp::invalid());
        host_args.at(0) = x13374;
        host_args.at(1) = x13375;
        host_args.at(2) = x13376;
        host_args.at(3) = x13377;
        host_args.at(4) = x13378;
        host_args.at(5) = x13379;
        host_args.at(6) = x13380;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13381 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13381 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13382 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13382 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13383 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13383 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13384 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13384 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13385 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13385 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13386 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13386 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13387 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13387 != Fp::invalid());
        host_args.at(0) = x13381;
        host_args.at(1) = x13382;
        host_args.at(2) = x13383;
        host_args.at(3) = x13384;
        host_args.at(4) = x13385;
        host_args.at(5) = x13386;
        host_args.at(6) = x13387;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13388 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13388 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13389 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13389 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13390 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13390 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13391 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13391 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13392 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13392 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13393 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13393 != Fp::invalid());
        // loc("Top/Mux/4/Mux/1/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13394 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13394 != Fp::invalid());
        host_args.at(0) = x13388;
        host_args.at(1) = x13389;
        host_args.at(2) = x13390;
        host_args.at(3) = x13391;
        host_args.at(4) = x13392;
        host_args.at(5) = x13393;
        host_args.at(6) = x13394;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13395 = args[2][96 * steps + ((cycle - 0) & mask)];
    assert(x13395 != Fp::invalid());
    if (x13395 != 0) {
      {
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13396 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13396 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13397 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13397 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13398 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13398 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13399 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13399 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13400 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13400 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13401 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13401 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13402 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13402 != Fp::invalid());
        host_args.at(0) = x13396;
        host_args.at(1) = x13397;
        host_args.at(2) = x13398;
        host_args.at(3) = x13399;
        host_args.at(4) = x13400;
        host_args.at(5) = x13401;
        host_args.at(6) = x13402;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13403 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13403 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13404 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13404 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13405 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13405 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13406 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13406 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13407 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13407 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13408 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13408 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13409 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13409 != Fp::invalid());
        host_args.at(0) = x13403;
        host_args.at(1) = x13404;
        host_args.at(2) = x13405;
        host_args.at(3) = x13406;
        host_args.at(4) = x13407;
        host_args.at(5) = x13408;
        host_args.at(6) = x13409;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13410 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13410 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13411 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13411 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13412 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13412 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13413 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13413 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13414 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13414 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13415 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13415 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13416 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13416 != Fp::invalid());
        host_args.at(0) = x13410;
        host_args.at(1) = x13411;
        host_args.at(2) = x13412;
        host_args.at(3) = x13413;
        host_args.at(4) = x13414;
        host_args.at(5) = x13415;
        host_args.at(6) = x13416;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13417 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13417 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13418 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13418 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13419 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13419 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13420 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13420 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13421 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13421 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13422 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13422 != Fp::invalid());
        // loc("Top/Mux/4/Mux/2/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13423 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13423 != Fp::invalid());
        host_args.at(0) = x13417;
        host_args.at(1) = x13418;
        host_args.at(2) = x13419;
        host_args.at(3) = x13420;
        host_args.at(4) = x13421;
        host_args.at(5) = x13422;
        host_args.at(6) = x13423;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13424 = args[2][97 * steps + ((cycle - 0) & mask)];
    assert(x13424 != Fp::invalid());
    if (x13424 != 0) {
      {
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13425 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13425 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13426 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13426 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13427 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13427 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13428 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13428 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13429 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13429 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13430 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13430 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13431 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13431 != Fp::invalid());
        host_args.at(0) = x13425;
        host_args.at(1) = x13426;
        host_args.at(2) = x13427;
        host_args.at(3) = x13428;
        host_args.at(4) = x13429;
        host_args.at(5) = x13430;
        host_args.at(6) = x13431;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13432 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13432 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13433 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13433 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13434 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13434 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13435 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13435 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13436 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13436 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13437 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13437 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13438 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13438 != Fp::invalid());
        host_args.at(0) = x13432;
        host_args.at(1) = x13433;
        host_args.at(2) = x13434;
        host_args.at(3) = x13435;
        host_args.at(4) = x13436;
        host_args.at(5) = x13437;
        host_args.at(6) = x13438;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13439 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13439 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13440 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13440 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13441 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13441 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13442 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13442 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13443 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13443 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13444 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13444 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13445 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13445 != Fp::invalid());
        host_args.at(0) = x13439;
        host_args.at(1) = x13440;
        host_args.at(2) = x13441;
        host_args.at(3) = x13442;
        host_args.at(4) = x13443;
        host_args.at(5) = x13444;
        host_args.at(6) = x13445;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13446 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13446 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13447 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13447 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13448 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13448 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13449 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13449 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13450 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13450 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13451 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13451 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13452 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13452 != Fp::invalid());
        host_args.at(0) = x13446;
        host_args.at(1) = x13447;
        host_args.at(2) = x13448;
        host_args.at(3) = x13449;
        host_args.at(4) = x13450;
        host_args.at(5) = x13451;
        host_args.at(6) = x13452;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13453 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13453 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13454 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13454 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13455 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13455 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13456 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13456 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13457 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13457 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13458 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13458 != Fp::invalid());
        // loc("Top/Mux/4/Mux/3/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13459 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13459 != Fp::invalid());
        host_args.at(0) = x13453;
        host_args.at(1) = x13454;
        host_args.at(2) = x13455;
        host_args.at(3) = x13456;
        host_args.at(4) = x13457;
        host_args.at(5) = x13458;
        host_args.at(6) = x13459;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13460 = args[2][98 * steps + ((cycle - 0) & mask)];
    assert(x13460 != Fp::invalid());
    if (x13460 != 0) {
      {
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13461 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13461 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13462 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13462 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13463 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13463 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13464 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13464 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13465 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13465 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13466 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13466 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13467 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13467 != Fp::invalid());
        host_args.at(0) = x13461;
        host_args.at(1) = x13462;
        host_args.at(2) = x13463;
        host_args.at(3) = x13464;
        host_args.at(4) = x13465;
        host_args.at(5) = x13466;
        host_args.at(6) = x13467;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13468 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13468 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13469 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13469 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13470 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13470 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13471 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13471 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13472 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13472 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13473 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13473 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13474 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13474 != Fp::invalid());
        host_args.at(0) = x13468;
        host_args.at(1) = x13469;
        host_args.at(2) = x13470;
        host_args.at(3) = x13471;
        host_args.at(4) = x13472;
        host_args.at(5) = x13473;
        host_args.at(6) = x13474;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13475 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13475 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13476 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13476 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13477 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13477 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13478 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13478 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13479 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13479 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13480 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13480 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13481 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13481 != Fp::invalid());
        host_args.at(0) = x13475;
        host_args.at(1) = x13476;
        host_args.at(2) = x13477;
        host_args.at(3) = x13478;
        host_args.at(4) = x13479;
        host_args.at(5) = x13480;
        host_args.at(6) = x13481;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13482 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13482 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13483 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13483 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13484 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13484 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13485 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13485 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13486 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13486 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13487 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13487 != Fp::invalid());
        // loc("Top/Mux/4/Mux/4/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13488 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13488 != Fp::invalid());
        host_args.at(0) = x13482;
        host_args.at(1) = x13483;
        host_args.at(2) = x13484;
        host_args.at(3) = x13485;
        host_args.at(4) = x13486;
        host_args.at(5) = x13487;
        host_args.at(6) = x13488;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13489 = args[2][99 * steps + ((cycle - 0) & mask)];
    assert(x13489 != Fp::invalid());
    if (x13489 != 0) {
      {
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13490 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13490 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13491 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13491 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13492 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13492 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13493 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13493 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13494 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13494 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13495 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13495 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13496 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13496 != Fp::invalid());
        host_args.at(0) = x13490;
        host_args.at(1) = x13491;
        host_args.at(2) = x13492;
        host_args.at(3) = x13493;
        host_args.at(4) = x13494;
        host_args.at(5) = x13495;
        host_args.at(6) = x13496;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13497 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13497 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13498 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13498 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13499 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13499 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13500 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13500 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13501 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13501 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13502 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13502 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13503 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13503 != Fp::invalid());
        host_args.at(0) = x13497;
        host_args.at(1) = x13498;
        host_args.at(2) = x13499;
        host_args.at(3) = x13500;
        host_args.at(4) = x13501;
        host_args.at(5) = x13502;
        host_args.at(6) = x13503;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13504 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13504 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13505 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13505 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13506 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13506 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13507 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13507 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13508 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13508 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13509 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13510 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13510 != Fp::invalid());
        host_args.at(0) = x13504;
        host_args.at(1) = x13505;
        host_args.at(2) = x13506;
        host_args.at(3) = x13507;
        host_args.at(4) = x13508;
        host_args.at(5) = x13509;
        host_args.at(6) = x13510;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13511 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13511 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13512 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13512 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13513 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13513 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13514 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13514 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13515 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13515 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13516 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13516 != Fp::invalid());
        // loc("Top/Mux/4/Mux/5/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13517 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13517 != Fp::invalid());
        host_args.at(0) = x13511;
        host_args.at(1) = x13512;
        host_args.at(2) = x13513;
        host_args.at(3) = x13514;
        host_args.at(4) = x13515;
        host_args.at(5) = x13516;
        host_args.at(6) = x13517;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13518 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x13518 != Fp::invalid());
    if (x13518 != 0) {
      {
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13519 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13519 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13520 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13520 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13521 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13521 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13522 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13522 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13523 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13523 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13524 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13524 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13525 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13525 != Fp::invalid());
        host_args.at(0) = x13519;
        host_args.at(1) = x13520;
        host_args.at(2) = x13521;
        host_args.at(3) = x13522;
        host_args.at(4) = x13523;
        host_args.at(5) = x13524;
        host_args.at(6) = x13525;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13526 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13526 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13527 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13527 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13528 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13528 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13529 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13529 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13530 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13530 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13531 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13531 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13532 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13532 != Fp::invalid());
        host_args.at(0) = x13526;
        host_args.at(1) = x13527;
        host_args.at(2) = x13528;
        host_args.at(3) = x13529;
        host_args.at(4) = x13530;
        host_args.at(5) = x13531;
        host_args.at(6) = x13532;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13533 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13533 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13534 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13534 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13535 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13535 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13536 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13536 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13537 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13537 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13538 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13538 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13539 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13539 != Fp::invalid());
        host_args.at(0) = x13533;
        host_args.at(1) = x13534;
        host_args.at(2) = x13535;
        host_args.at(3) = x13536;
        host_args.at(4) = x13537;
        host_args.at(5) = x13538;
        host_args.at(6) = x13539;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13540 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13540 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13541 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13541 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13542 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13542 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13543 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13543 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13544 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13544 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13545 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13545 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13546 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13546 != Fp::invalid());
        host_args.at(0) = x13540;
        host_args.at(1) = x13541;
        host_args.at(2) = x13542;
        host_args.at(3) = x13543;
        host_args.at(4) = x13544;
        host_args.at(5) = x13545;
        host_args.at(6) = x13546;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13547 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13547 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13548 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13548 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13549 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13549 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13550 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x13550 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13551 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13551 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13552 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13552 != Fp::invalid());
        // loc("Top/Mux/4/Mux/8/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13553 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13553 != Fp::invalid());
        host_args.at(0) = x13547;
        host_args.at(1) = x13548;
        host_args.at(2) = x13549;
        host_args.at(3) = x13550;
        host_args.at(4) = x13551;
        host_args.at(5) = x13552;
        host_args.at(6) = x13553;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13554 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x13554 != Fp::invalid());
    if (x13554 != 0) {
      {
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13555 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13555 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13556 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13556 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13557 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13557 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13558 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13558 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13559 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13559 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13560 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13560 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13561 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13561 != Fp::invalid());
        host_args.at(0) = x13555;
        host_args.at(1) = x13556;
        host_args.at(2) = x13557;
        host_args.at(3) = x13558;
        host_args.at(4) = x13559;
        host_args.at(5) = x13560;
        host_args.at(6) = x13561;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13562 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13562 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13563 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13563 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13564 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13564 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13565 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13565 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13566 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13566 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13567 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13567 != Fp::invalid());
        // loc("Top/Mux/4/Mux/9/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13568 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13568 != Fp::invalid());
        host_args.at(0) = x13562;
        host_args.at(1) = x13563;
        host_args.at(2) = x13564;
        host_args.at(3) = x13565;
        host_args.at(4) = x13566;
        host_args.at(5) = x13567;
        host_args.at(6) = x13568;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13569 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x13569 != Fp::invalid());
    if (x13569 != 0) {
      {
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13570 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13570 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13571 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13571 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13572 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13572 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13573 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13573 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13574 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13574 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13575 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13575 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13576 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13576 != Fp::invalid());
        host_args.at(0) = x13570;
        host_args.at(1) = x13571;
        host_args.at(2) = x13572;
        host_args.at(3) = x13573;
        host_args.at(4) = x13574;
        host_args.at(5) = x13575;
        host_args.at(6) = x13576;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13577 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13577 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13578 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13578 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13579 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13579 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13580 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13580 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13581 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13581 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13582 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13582 != Fp::invalid());
        // loc("Top/Mux/4/Mux/10/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13583 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13583 != Fp::invalid());
        host_args.at(0) = x13577;
        host_args.at(1) = x13578;
        host_args.at(2) = x13579;
        host_args.at(3) = x13580;
        host_args.at(4) = x13581;
        host_args.at(5) = x13582;
        host_args.at(6) = x13583;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13584 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x13584 != Fp::invalid());
    if (x13584 != 0) {
      {
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13585 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13585 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13586 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13586 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13587 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13587 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13588 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13588 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13589 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13589 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13590 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13590 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13591 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13591 != Fp::invalid());
        host_args.at(0) = x13585;
        host_args.at(1) = x13586;
        host_args.at(2) = x13587;
        host_args.at(3) = x13588;
        host_args.at(4) = x13589;
        host_args.at(5) = x13590;
        host_args.at(6) = x13591;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13592 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13592 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13593 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13593 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13594 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13594 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13595 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13595 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13596 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13596 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13597 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13597 != Fp::invalid());
        // loc("Top/Mux/4/Mux/11/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13598 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13598 != Fp::invalid());
        host_args.at(0) = x13592;
        host_args.at(1) = x13593;
        host_args.at(2) = x13594;
        host_args.at(3) = x13595;
        host_args.at(4) = x13596;
        host_args.at(5) = x13597;
        host_args.at(6) = x13598;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13599 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x13599 != Fp::invalid());
    if (x13599 != 0) {
      {
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13600 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13600 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13601 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13601 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13602 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13602 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13603 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13603 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13604 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13604 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13605 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13605 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13606 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13606 != Fp::invalid());
        host_args.at(0) = x13600;
        host_args.at(1) = x13601;
        host_args.at(2) = x13602;
        host_args.at(3) = x13603;
        host_args.at(4) = x13604;
        host_args.at(5) = x13605;
        host_args.at(6) = x13606;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13607 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13607 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13608 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13608 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13609 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13609 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13610 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13610 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13611 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13611 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13612 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13612 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13613 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13613 != Fp::invalid());
        host_args.at(0) = x13607;
        host_args.at(1) = x13608;
        host_args.at(2) = x13609;
        host_args.at(3) = x13610;
        host_args.at(4) = x13611;
        host_args.at(5) = x13612;
        host_args.at(6) = x13613;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13614 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13614 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13615 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13615 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13616 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13616 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13617 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13617 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13618 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13618 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13619 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13619 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13620 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13620 != Fp::invalid());
        host_args.at(0) = x13614;
        host_args.at(1) = x13615;
        host_args.at(2) = x13616;
        host_args.at(3) = x13617;
        host_args.at(4) = x13618;
        host_args.at(5) = x13619;
        host_args.at(6) = x13620;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13621 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13621 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13622 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13622 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13623 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13623 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13624 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13624 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13625 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13625 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13626 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13626 != Fp::invalid());
        // loc("Top/Mux/4/Mux/12/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13627 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13627 != Fp::invalid());
        host_args.at(0) = x13621;
        host_args.at(1) = x13622;
        host_args.at(2) = x13623;
        host_args.at(3) = x13624;
        host_args.at(4) = x13625;
        host_args.at(5) = x13626;
        host_args.at(6) = x13627;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("cirgen/compiler/edsl/component.cpp":39:15)
    auto x13628 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x13628 != Fp::invalid());
    if (x13628 != 0) {
      {
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13629 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x13629 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13630 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x13630 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13631 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x13631 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13632 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x13632 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13633 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13634 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x13634 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13635 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x13635 != Fp::invalid());
        host_args.at(0) = x13629;
        host_args.at(1) = x13630;
        host_args.at(2) = x13631;
        host_args.at(3) = x13632;
        host_args.at(4) = x13633;
        host_args.at(5) = x13634;
        host_args.at(6) = x13635;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13636 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x13636 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13637 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13637 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13638 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13638 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13639 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x13639 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13640 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13640 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13641 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13641 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13642 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13642 != Fp::invalid());
        host_args.at(0) = x13636;
        host_args.at(1) = x13637;
        host_args.at(2) = x13638;
        host_args.at(3) = x13639;
        host_args.at(4) = x13640;
        host_args.at(5) = x13641;
        host_args.at(6) = x13642;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13643 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13643 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13644 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13644 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13645 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13645 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13646 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x13646 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13647 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13647 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13648 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13648 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13649 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13649 != Fp::invalid());
        host_args.at(0) = x13643;
        host_args.at(1) = x13644;
        host_args.at(2) = x13645;
        host_args.at(3) = x13646;
        host_args.at(4) = x13647;
        host_args.at(5) = x13648;
        host_args.at(6) = x13649;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13650 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13650 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13651 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13651 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13652 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13652 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13653 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x13653 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13654 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13654 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13655 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13655 != Fp::invalid());
        // loc("Top/Mux/4/Mux/13/RamBody/PlonkBody/RamPlonkElement/U32Reg/Reg"("./cirgen/compiler/edsl/component.h":151:27))
        auto x13656 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13656 != Fp::invalid());
        host_args.at(0) = x13650;
        host_args.at(1) = x13651;
        host_args.at(2) = x13652;
        host_args.at(3) = x13653;
        host_args.at(4) = x13654;
        host_args.at(5) = x13655;
        host_args.at(6) = x13656;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x13262;
}

} // namespace risc0::circuit::rv32im
// clang-format on
